/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@memberstack/dom/lib/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@memberstack/dom/lib/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ src_default)
/* harmony export */ });
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ "./node_modules/js-cookie/dist/js.cookie.mjs");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/lib/axios.js");
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/defaultMessageBox.ts
var closeIcon;
if (typeof window !== "undefined") {
  closeIcon = document.createElement("div");
  closeIcon.setAttribute("id", "ms-status-close");
  closeIcon.setAttribute("data-ms-message-close", "");
  closeIcon.innerHTML = `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z" fill="white"/></svg>`;
}
var addSuccessBox = () => {
  const successStatusIcon = document.createElement("div");
  successStatusIcon.setAttribute("id", "ms-status-icon");
  successStatusIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="10" r="10" fill="#62d37f"/><path d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0Zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8Zm4.59-12.42L8 12.17 5.41 9.59 4 11l4 4 8-8-1.41-1.42Z" fill="#fff"/></svg>`;
  const successHTML = `<div data-ms-message class="ms-error-message">
		${successStatusIcon.outerHTML}
		<div id="ms-message" data-ms-message-text></div>
		${closeIcon.outerHTML}
		</div>`;
  const successdiv = document.createElement("div");
  successdiv.setAttribute("data-ms-message", "success");
  successdiv.innerHTML = successHTML;
  successdiv.style.display = "none";
  document.body.appendChild(successdiv);
};
var addErrorBox = () => {
  const errorStatusIcon = document.createElement("div");
  errorStatusIcon.setAttribute("id", "ms-status-icon");
  errorStatusIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z" fill="#E40023"/></svg>`;
  const errorHTML = `<div data-ms-message class="ms-error-message">
		${errorStatusIcon.outerHTML}
		<div id="ms-message" data-ms-message-text></div>
		${closeIcon.outerHTML}
		</div>`;
  const errordiv = document.createElement("div");
  errordiv.setAttribute("data-ms-message", "error");
  errordiv.innerHTML = errorHTML;
  errordiv.style.display = "none";
  document.body.appendChild(errordiv);
};
var initCSS = () => {
  const cssEl = document.createElement("style");
  const css = `
		@keyframes fadeIn {
			0% {
				opacity: 0;
			}
			100% {
				opacity: 1;
			}
		}
		.ms-error-message { 
				position: fixed;
				left: 50%;
				bottom: 3%;
				transform: translate(-50%, -50%);
				margin: 0 auto;
				z-index: 10000000; 
				display: flex; 
				align-items: center;
				padding: 12px 16px;
				border-radius: 8px; 
				background-color: #0A0A0A; 
				color: #fff; 
				font-size: 16.8px; 
				line-height: 28px; 
				font-weight: 500; 
				transform-origin: center;
				animation: fadeIn 0.2s ease-in;
				-webkit-animation: fadeIn 0.2s ease-in;
				-moz-animation: fadeIn 0.2s ease-in;
				-o-animation: fadeIn 0.2s ease-in;
				-ms-animation: fadeIn 0.2s ease-in;
			}
			#ms-status-icon {
				width: 20px;
				height: 20px;
				margin-right: 12px;
				}
				#ms-status-close {
					margin-left: 20px;
					cursor: pointer;
					}
					#ms-status-close svg {
						height: 12px;
					}`;
  cssEl.setAttribute("data-ms-style", "");
  cssEl.appendChild(document.createTextNode(css));
  document.head.appendChild(cssEl);
};

// src/methods/dom/main-dom.js
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function is_promise(value) {
  return !!value && (typeof value === "object" || typeof value === "function") && typeof value.then === "function";
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props)
    if (k[0] !== "$")
      result[k] = props[k];
  return result;
}
function compute_rest_props(props, keys) {
  const rest = {};
  keys = new Set(keys);
  for (const k in props)
    if (!keys.has(k) && k[0] !== "$")
      rest[k] = props[k];
  return rest;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function stop_propagation(fn) {
  return function(event) {
    event.stopPropagation();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, cancelable, detail);
  return e;
}
var HtmlTag = class {
  constructor(is_svg = false) {
    this.is_svg = false;
    this.is_svg = is_svg;
    this.e = this.n = null;
  }
  c(html) {
    this.h(html);
  }
  m(html, target, anchor = null) {
    if (!this.e) {
      if (this.is_svg)
        this.e = svg_element(target.nodeName);
      else
        this.e = element(target.nodeType === 11 ? "TEMPLATE" : target.nodeName);
      this.t = target.tagName !== "TEMPLATE" ? target : target.content;
      this.c(html);
    }
    this.i(anchor);
  }
  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.nodeName === "TEMPLATE" ? this.e.content.childNodes : this.e.childNodes);
  }
  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }
  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }
  d() {
    this.n.forEach(detach);
  }
};
function construct_svelte_component(component, props) {
  return new component(props);
}
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next.length;
  if (deleted) {
    node.style.animation = next.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode)
        detach(ownerNode);
    });
    managed_styles.clear();
  });
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
  const options = { direction: "both" };
  let config = fn(node, params, options);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init3(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick(0, 1);
      running_program = init3(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init3(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config(options);
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
function handle_promise(promise2, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise2)) {
    const current_component2 = get_current_component();
    promise2.then((value) => {
      set_current_component(current_component2);
      update2(info.then, 1, info.value, value);
      set_current_component(null);
    }, (error) => {
      set_current_component(current_component2);
      update2(info.catch, 2, info.error, error);
      set_current_component(null);
      if (!info.hasCatch) {
        throw error;
      }
    });
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise2);
      return true;
    }
    info.resolved = promise2;
  }
}
function update_await_block_branch(info, ctx, dirty) {
  const child_ctx = ctx.slice();
  const { resolved } = info;
  if (info.current === info.then) {
    child_ctx[info.value] = resolved;
  }
  if (info.current === info.catch) {
    child_ctx[info.error] = resolved;
  }
  info.block.p(child_ctx, dirty);
}
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block2, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block2(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
var AppStore = writable({
  initialValue: true,
  customFields: [],
  isPaid: false,
  branding: {
    logo: "",
    colors: {
      lightMode: {}
    }
  },
  authProviders: [],
  additionalAuthMethods: {
    passwordless: {
      enabled: false,
      isDefault: false
    }
  }
});
var TextStore = writable({
  text: {
    // "login_to_your_account": "Login to your account (T)",
    // "dont_have_an_account": "Don't have an account? (T)",
    // "email_address": "Email Address (T)",
    // "email_error_message": "Please enter a valid email address (T)",
    // "password": "Password (T)",
    // "password_placeholder": "Enter password (T)",
    // "password_error_message": "Minimum 8 characters required (T)",
    // "forgot_password": "Forgot password? (T)",
    // "login": "Log in (T)",
    // "continue_with": "Continue with (T)",
    // "or": "or (T)",
    // "reset_your_password": "Reset your password (T)",
    // "reset_instructions": "We’ll email you a secure link to reset the password for your account. (T)",
    // "reset": "Send link (T)",
    // "reset_already_have_code": "I already have a code (T)",
    // "reset_enter_code": "Enter your 6-digit code (T)",
    // "reset_confirm_reset": "Confirm & Reset (T)",
  }
});
var get_default_slot_changes = (dirty) => ({ matches: dirty & /*matches*/
1 });
var get_default_slot_context = (ctx) => ({ matches: (
  /*matches*/
  ctx[0]
) });
function create_fragment$1n(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_default_slot_context
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, matches*/
        9)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance$J($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { query } = $$props;
  let mql;
  let mqlListener;
  let wasMounted = false;
  let matches = false;
  onMount(() => {
    $$invalidate(2, wasMounted = true);
    return () => {
      removeActiveListener();
    };
  });
  function addNewListener(query2) {
    mql = window.matchMedia(query2);
    mqlListener = (v) => $$invalidate(0, matches = v.matches);
    mql.addListener(mqlListener);
    $$invalidate(0, matches = mql.matches);
  }
  function removeActiveListener() {
    if (mql && mqlListener) {
      mql.removeListener(mqlListener);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("query" in $$props2)
      $$invalidate(1, query = $$props2.query);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*wasMounted, query*/
    6) {
      {
        if (wasMounted) {
          removeActiveListener();
          addNewListener(query);
        }
      }
    }
  };
  return [matches, query, wasMounted, $$scope, slots];
}
var MediaQuery = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$J, create_fragment$1n, safe_not_equal, { query: 1 });
  }
};
function create_fragment$1m(ctx) {
  let svg;
  let path;
  let animateTransform;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      animateTransform = svg_element("animateTransform");
      attr(animateTransform, "attributeName", "transform");
      attr(animateTransform, "attributeType", "xml");
      attr(animateTransform, "dur", "0.6s");
      attr(animateTransform, "from", "0 25 25");
      attr(animateTransform, "repeatCount", "indefinite");
      attr(animateTransform, "to", "360 25 25");
      attr(animateTransform, "type", "rotate");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m43.935 25.145c0-10.318-8.364-18.683-18.683-18.683-10.318 0-18.683 8.365-18.683 18.683h4.068c0-8.071 6.543-14.615 14.615-14.615s14.615 6.543 14.615 14.615h4.068z");
      attr(svg, "width", "40px");
      attr(svg, "height", "40px");
      attr(svg, "enable-background", "new 0 0 50 50");
      set_style(svg, "z-index", "1000000");
      attr(svg, "version", "1.1");
      attr(svg, "viewBox", "0 0 50 50");
      attr(svg, "xml:space", "preserve");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
      append(path, animateTransform);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LoadingIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1m, safe_not_equal, {});
  }
};
function create_fragment$1l(ctx) {
  let div;
  let loadingicon;
  let current;
  loadingicon = new LoadingIcon({});
  return {
    c() {
      div = element("div");
      create_component(loadingicon.$$.fragment);
      attr(div, "class", "ms__loader");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(loadingicon, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loadingicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loadingicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(loadingicon);
    }
  };
}
var Loader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1l, safe_not_equal, {});
  }
};
function create_fragment$1k(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "shape-rendering", "geometricPrecision");
      attr(path, "d", "M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z");
      attr(svg, "fill", "none");
      set_style(svg, "width", "100%");
      attr(svg, "viewBox", "0 0 14 14");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var CloseIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1k, safe_not_equal, {});
  }
};
function create_fragment$1j(ctx) {
  let div;
  let button;
  let closeicon;
  let current;
  let mounted;
  let dispose;
  closeicon = new CloseIcon({});
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(closeicon.$$.fragment);
      attr(div, "class", "ms-modal__close");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      mount_component(closeicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*closeModal*/
            ctx[0]
          ))
            ctx[0].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(closeicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closeicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(closeicon);
      mounted = false;
      dispose();
    }
  };
}
function instance$I($$self, $$props, $$invalidate) {
  let { closeModal } = $$props;
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(0, closeModal = $$props2.closeModal);
  };
  return [closeModal];
}
var CloseButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$I, create_fragment$1j, safe_not_equal, { closeModal: 0 });
  }
};
function create_fragment$1i(ctx) {
  let svg;
  let path0;
  let path1;
  let path2;
  let path3;
  let path4;
  let path5;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      path2 = svg_element("path");
      path3 = svg_element("path");
      path4 = svg_element("path");
      path5 = svg_element("path");
      attr(path0, "d", "m259.078 190.582 16.797-39.611c7.315-20.421 26.982-34.665 49.897-34.665 13.187 0 25.344 4.817 34.6 12.818l32.818 73.118c9.656 21.709-.097 47.144-21.786 56.809-21.688 9.666-47.097-.098-56.753-21.807l-38.573-86.723-17 40.088v-.027Z");
      attr(path0, "fill", "#2AA8FF");
      attr(path1, "d", "m111.31 169.64 8.002-18.679c-7.22-20.585-26.82-35.345-49.866-35.345-12.678 0-24.901 4.865-34.007 12.314 6.6063-2.796 14.34-3.575 21.988-3.575 26.999 0 49.435 19.445 53.884 45.285z");
      attr(path2, "d", "m111.31 169.64-28.66 68.126c-9.2762 21.875-34.511 32.081-56.365 22.795-21.853-9.285-32.049-34.545-22.773-56.42l31.925-76.211c6.7448-2.988 14.142-3.575 21.988-3.575 27.086 0 49.537 19.321 53.884 45.285z");
      attr(path2, "fill", "#393939");
      attr(path3, "d", "m197.57 115.46-39.756-89.506c-7.148-16.07-22.929-25.595-39.443-25.537-16.786-0.058576-32.766 9.7896-39.736 26.227l-43.199 101.28c9.1064-7.45 21.329-12.314 34.008-12.314 23.046 0 42.646 14.76 49.866 35.345l0.093 0.337c5.784 1.658 11.893 2.546 18.21 2.546 26.578 0 49.487-15.722 59.958-38.382z");
      attr(path3, "fill", "#017ACE");
      attr(path4, "d", "m197.57 115.46c-10.071 21.796-31.651 37.172-56.934 38.314-1.052 0.05-2.11 0.075-3.175 0.075-6.316 0-12.425-0.888-18.21-2.546l38.425 86.387c3.996 8.986 10.692 15.926 18.706 20.288 1.908 1.196 3.935 2.257 6.073 3.165 21.853 9.286 47.088-0.92 56.364-22.795l37.055-87.381c7.315-20.421 26.982-34.665 49.896-34.665 13.188 0 25.345 4.817 34.601 12.818l-45.994-103.17c-7.148-16.07-22.929-25.595-39.442-25.537-16.786-0.058576-32.767 9.7896-39.737 26.227l-37.628 88.816z");
      attr(path4, "fill", "#AEDEFF");
      attr(path5, "d", "m325.77 116.31c-22.915 0-42.379 13.795-49.694 34.216l8.919 20.052c5.873-25.763 28.931-44.989 56.481-44.989 6.67 0 12.931 1.465 18.894 3.539-9.256-8-21.413-12.818-34.6-12.818z");
      attr(path5, "fill", "#2D91D7");
      set_style(svg, "width", "100%");
      attr(svg, "viewBox", "0 0 397 265");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
      append(svg, path2);
      append(svg, path3);
      append(svg, path4);
      append(svg, path5);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var MemberstackIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1i, safe_not_equal, {});
  }
};
function create_else_block$i(ctx) {
  let memberstackicon;
  let current;
  memberstackicon = new MemberstackIcon({});
  return {
    c() {
      create_component(memberstackicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(memberstackicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(memberstackicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(memberstackicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(memberstackicon, detaching);
    }
  };
}
function create_if_block$A(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*app*/
      ctx[0].branding.logo))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*app*/
      ctx[0].name);
      attr(img, "data-cy", "logo");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*app*/
      1 && !src_url_equal(img.src, img_src_value = /*app*/
      ctx2[0].branding.logo)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*app*/
      1 && img_alt_value !== (img_alt_value = /*app*/
      ctx2[0].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_fragment$1h(ctx) {
  let figure;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$A, create_else_block$i];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*app*/
      ctx2[0].branding.logo
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      figure = element("figure");
      if_block.c();
      attr(figure, "class", "ms-modal__figure");
    },
    m(target, anchor) {
      insert(target, figure, anchor);
      if_blocks[current_block_type_index].m(figure, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(figure, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(figure);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$H($$self, $$props, $$invalidate) {
  let app = {};
  AppStore.subscribe((data) => {
    $$invalidate(0, app = data);
  });
  return [app];
}
var FigureElement = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$H, create_fragment$1h, safe_not_equal, {});
  }
};
function create_else_block$h(ctx) {
  let button;
  let loadingicon;
  let current;
  loadingicon = new LoadingIcon({});
  return {
    c() {
      button = element("button");
      create_component(loadingicon.$$.fragment);
      attr(button, "class", "ms-form__button");
      attr(button, "type", "button");
      set_style(
        button,
        "background-color",
        /*buttonColor*/
        ctx[2]
      );
      button.disabled = true;
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(loadingicon, button, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*buttonColor*/
      4) {
        set_style(
          button,
          "background-color",
          /*buttonColor*/
          ctx2[2]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(loadingicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loadingicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(loadingicon);
    }
  };
}
function create_if_block$z(ctx) {
  let button;
  let t;
  return {
    c() {
      button = element("button");
      t = text(
        /*buttonText*/
        ctx[0]
      );
      attr(button, "class", "ms-form__button");
      attr(button, "type", "submit");
      set_style(
        button,
        "background-color",
        /*buttonColor*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*buttonText*/
      1)
        set_data(
          t,
          /*buttonText*/
          ctx2[0]
        );
      if (dirty & /*buttonColor*/
      4) {
        set_style(
          button,
          "background-color",
          /*buttonColor*/
          ctx2[2]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
    }
  };
}
function create_fragment$1g(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$z, create_else_block$h];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*isLoading*/
    ctx2[1])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$G($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(3, $app = $$value));
  let { buttonText = "Submit" } = $$props;
  let { isLoading = false } = $$props;
  let buttonColor = "rgb(41, 98, 255)";
  if ($app.branding.colors.lightMode.primaryButton) {
    buttonColor = $app.branding.colors.lightMode.primaryButton;
  }
  $$self.$$set = ($$props2) => {
    if ("buttonText" in $$props2)
      $$invalidate(0, buttonText = $$props2.buttonText);
    if ("isLoading" in $$props2)
      $$invalidate(1, isLoading = $$props2.isLoading);
  };
  return [buttonText, isLoading, buttonColor];
}
var SubmitButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$G, create_fragment$1g, safe_not_equal, { buttonText: 0, isLoading: 1 });
  }
};
function create_fragment$1f(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m10 0c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10-4.48-10-10-10zm1 15h-2v-2h2v2zm0-4h-2v-6h2v6z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 20 20");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ErrorIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1f, safe_not_equal, {});
  }
};
function create_if_block$y(ctx) {
  let div;
  let erroricon;
  let t0;
  let t1;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t0 = space();
      t1 = text(
        /*errorMessage*/
        ctx[4]
      );
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$1e(ctx) {
  let div;
  let label;
  let t0;
  let t1;
  let input;
  let t2;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*inputError*/
    ctx[2] && create_if_block$y(ctx)
  );
  return {
    c() {
      div = element("div");
      label = element("label");
      t0 = text(
        /*emailLabel*/
        ctx[3]
      );
      t1 = space();
      input = element("input");
      t2 = space();
      if (if_block)
        if_block.c();
      attr(label, "class", "ms-form__label");
      attr(label, "for", "eml-" + /*randomId*/
      ctx[5]);
      attr(input, "class", "ms-form__input");
      attr(input, "id", "eml-" + /*randomId*/
      ctx[5]);
      attr(input, "type", "email");
      attr(
        input,
        "placeholder",
        /*placeholder*/
        ctx[1]
      );
      attr(input, "name", "eml");
      input.required = true;
      attr(div, "class", "ms-form__group");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, label);
      append(label, t0);
      append(div, t1);
      append(div, input);
      set_input_value(
        input,
        /*emailValue*/
        ctx[0]
      );
      append(div, t2);
      if (if_block)
        if_block.m(div, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "input",
            /*validateField*/
            ctx[6]
          ),
          listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[8]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*placeholder*/
      2) {
        attr(
          input,
          "placeholder",
          /*placeholder*/
          ctx2[1]
        );
      }
      if (dirty & /*emailValue*/
      1 && input.value !== /*emailValue*/
      ctx2[0]) {
        set_input_value(
          input,
          /*emailValue*/
          ctx2[0]
        );
      }
      if (
        /*inputError*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*inputError*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$y(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$F($$self, $$props, $$invalidate) {
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(9, $textStore = $$value));
  let { emailInputValid = false } = $$props;
  let { emailValue } = $$props;
  let { placeholder = "example@domain.com" } = $$props;
  let text2 = $textStore.text;
  let emailLabel = text2["email_address"] || "Email Address";
  let inputError = false;
  let errorMessage = text2["email_error_message"] || "Please enter a valid email address";
  const randomId = Math.random().toString(36).substring(2, 10);
  const validateField = (e) => {
    const emailInput = e.target;
    const hasValidEmail = emailInput.value.match(/.+@.+\..{2,}/);
    if (!hasValidEmail && e.target.value.length > 0) {
      $$invalidate(7, emailInputValid = false);
      $$invalidate(2, inputError = true);
    } else {
      $$invalidate(7, emailInputValid = true);
      $$invalidate(2, inputError = false);
    }
  };
  function input_input_handler() {
    emailValue = this.value;
    $$invalidate(0, emailValue);
  }
  $$self.$$set = ($$props2) => {
    if ("emailInputValid" in $$props2)
      $$invalidate(7, emailInputValid = $$props2.emailInputValid);
    if ("emailValue" in $$props2)
      $$invalidate(0, emailValue = $$props2.emailValue);
    if ("placeholder" in $$props2)
      $$invalidate(1, placeholder = $$props2.placeholder);
  };
  return [
    emailValue,
    placeholder,
    inputError,
    emailLabel,
    errorMessage,
    randomId,
    validateField,
    emailInputValid,
    input_input_handler
  ];
}
var EmailInput = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$F, create_fragment$1e, safe_not_equal, {
      emailInputValid: 7,
      emailValue: 0,
      placeholder: 1
    });
  }
};
function create_fragment$1d(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m11 0.5c-5 0-9.27 3.11-11 7.5 1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zm0 12.5c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z");
      attr(svg, "class", "ms-form__eye");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 22 16");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EyeIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1d, safe_not_equal, {});
  }
};
function create_fragment$1c(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m11 4c2.76 0 5 2.24 5 5 0 0.65-0.13 1.26-0.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74 0.25-3.98 0.7l2.16 2.16c0.57-0.23 1.18-0.36 1.83-0.36zm-10-2.73 2.74 2.74c-1.66 1.29-2.96 3.01-3.74 4.99 1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-0.3 4.38-0.84l0.42 0.42 2.93 2.92 1.27-1.27-17.73-17.73-1.27 1.27zm5.53 5.53 1.55 1.55c-0.05 0.21-0.08 0.43-0.08 0.65 0 1.66 1.34 3 3 3 0.22 0 0.44-0.03 0.65-0.08l1.55 1.55c-0.67 0.33-1.41 0.53-2.2 0.53-2.76 0-5-2.24-5-5 0-0.79 0.2-1.53 0.53-2.2zm4.31-0.78 3.15 3.15 0.02-0.16c0-1.66-1.34-3-3-3l-0.17 0.01z");
      attr(svg, "class", "ms-form__eye-slash");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 22 19");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EyeSlashIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1c, safe_not_equal, {});
  }
};
function create_if_block_2$k(ctx) {
  let div;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = `${/*text*/
      ctx[8]["forgot_password"] || "Forgot Password?"}`;
      attr(button, "data-cy", "forgot-password-btn");
      attr(button, "class", "ms-form__button ms-form__button--text");
      attr(button, "tabindex", "-1");
      attr(button, "type", "button");
      attr(div, "class", "ms-form__label ms-form__label--right");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[14]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$g(ctx) {
  let eyeslashicon;
  let current;
  eyeslashicon = new EyeSlashIcon({});
  return {
    c() {
      create_component(eyeslashicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eyeslashicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(eyeslashicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eyeslashicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eyeslashicon, detaching);
    }
  };
}
function create_if_block_1$p(ctx) {
  let eyeicon;
  let current;
  eyeicon = new EyeIcon({});
  return {
    c() {
      create_component(eyeicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eyeicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(eyeicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eyeicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eyeicon, detaching);
    }
  };
}
function create_if_block$x(ctx) {
  let div;
  let erroricon;
  let t0;
  let t1;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t0 = space();
      t1 = text(
        /*errorMessage*/
        ctx[9]
      );
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t0);
      append(div, t1);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$1b(ctx) {
  let div3;
  let div0;
  let label;
  let t0;
  let t1;
  let t2;
  let div2;
  let input;
  let input_value_value;
  let t3;
  let div1;
  let current_block_type_index;
  let if_block1;
  let t4;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*showForgotPasswordLabel*/
    ctx[2] && create_if_block_2$k(ctx)
  );
  const if_block_creators = [create_if_block_1$p, create_else_block$g];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*passwordVisible*/
    ctx2[5])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block2 = (
    /*inputError*/
    ctx[6] && create_if_block$x(ctx)
  );
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(
        /*passwordLabel*/
        ctx[3]
      );
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      div2 = element("div");
      input = element("input");
      t3 = space();
      div1 = element("div");
      if_block1.c();
      t4 = space();
      if (if_block2)
        if_block2.c();
      attr(label, "class", "ms-form__label");
      attr(label, "for", "psw-" + /*randomId*/
      ctx[10]);
      attr(div0, "class", "ms-form__flex");
      attr(input, "data-ms-internal-password", "");
      attr(input, "class", "ms-form__input ms-form__input--password");
      attr(input, "id", "psw-" + /*randomId*/
      ctx[10]);
      attr(
        input,
        "type",
        /*type*/
        ctx[7]
      );
      attr(
        input,
        "placeholder",
        /*passwordPlaceholder*/
        ctx[4]
      );
      input.value = input_value_value = /*passwordValue*/
      ctx[0] || "";
      attr(input, "name", "psw");
      input.required = true;
      attr(div1, "class", "ms-form__show-toggle");
      attr(div1, "id", "togglePassword");
      attr(div2, "class", "ms-form__password-container");
      attr(div3, "class", "ms-form__group");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      if (if_block0)
        if_block0.m(div0, null);
      append(div3, t2);
      append(div3, div2);
      append(div2, input);
      append(div2, t3);
      append(div2, div1);
      if_blocks[current_block_type_index].m(div1, null);
      append(div3, t4);
      if (if_block2)
        if_block2.m(div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "input",
            /*handleInput*/
            ctx[12]
          ),
          listen(
            div1,
            "click",
            /*togglePassword*/
            ctx[11]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*passwordLabel*/
      8)
        set_data(
          t0,
          /*passwordLabel*/
          ctx2[3]
        );
      if (
        /*showForgotPasswordLabel*/
        ctx2[2]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$k(ctx2);
          if_block0.c();
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty & /*type*/
      128) {
        attr(
          input,
          "type",
          /*type*/
          ctx2[7]
        );
      }
      if (!current || dirty & /*passwordPlaceholder*/
      16) {
        attr(
          input,
          "placeholder",
          /*passwordPlaceholder*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*passwordValue*/
      1 && input_value_value !== (input_value_value = /*passwordValue*/
      ctx2[0] || "") && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        }
        transition_in(if_block1, 1);
        if_block1.m(div1, null);
      }
      if (
        /*inputError*/
        ctx2[6]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*inputError*/
          64) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$x(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
      if (if_block2)
        if_block2.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$E($$self, $$props, $$invalidate) {
  let type;
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(15, $textStore = $$value));
  let text2 = $textStore.text;
  let { showForgotPasswordLabel = false } = $$props;
  let { passwordInputValid = false } = $$props;
  let { passwordLabel = text2["password"] || "Password" } = $$props;
  let { passwordPlaceholder = "Enter Password" } = $$props;
  let { passwordValue } = $$props;
  let { display } = $$props;
  let inputError = false;
  let errorMessage = text2["password_error_message"] || "Minimum 8 characters required";
  let passwordVisible = false;
  const randomId = Math.random().toString(36).substring(2, 10);
  function togglePassword() {
    $$invalidate(5, passwordVisible = !passwordVisible);
  }
  function handleInput(e) {
    $$invalidate(0, passwordValue = e.target.value);
    validateField(e);
  }
  const validateField = (e) => {
    const hasValidPassword = e.target.value.length >= 8 ? true : false;
    if (!hasValidPassword) {
      $$invalidate(13, passwordInputValid = false);
      $$invalidate(6, inputError = true);
    } else {
      $$invalidate(13, passwordInputValid = true);
      $$invalidate(6, inputError = false);
    }
  };
  const click_handler = () => $$invalidate(1, display = "forgot_password");
  $$self.$$set = ($$props2) => {
    if ("showForgotPasswordLabel" in $$props2)
      $$invalidate(2, showForgotPasswordLabel = $$props2.showForgotPasswordLabel);
    if ("passwordInputValid" in $$props2)
      $$invalidate(13, passwordInputValid = $$props2.passwordInputValid);
    if ("passwordLabel" in $$props2)
      $$invalidate(3, passwordLabel = $$props2.passwordLabel);
    if ("passwordPlaceholder" in $$props2)
      $$invalidate(4, passwordPlaceholder = $$props2.passwordPlaceholder);
    if ("passwordValue" in $$props2)
      $$invalidate(0, passwordValue = $$props2.passwordValue);
    if ("display" in $$props2)
      $$invalidate(1, display = $$props2.display);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*passwordVisible*/
    32) {
      $$invalidate(7, type = passwordVisible ? "text" : "password");
    }
  };
  return [
    passwordValue,
    display,
    showForgotPasswordLabel,
    passwordLabel,
    passwordPlaceholder,
    passwordVisible,
    inputError,
    type,
    text2,
    errorMessage,
    randomId,
    togglePassword,
    handleInput,
    passwordInputValid,
    click_handler
  ];
}
var PasswordInput = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$E, create_fragment$1b, safe_not_equal, {
      showForgotPasswordLabel: 2,
      passwordInputValid: 13,
      passwordLabel: 3,
      passwordPlaceholder: 4,
      passwordValue: 0,
      display: 1
    });
  }
};
function create_fragment$1a(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "shape-rendering", "geometricPrecision");
      attr(path, "d", "m9 0-9 4v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12v-6l-9-4zm-2 16-4-4 1.41-1.41 2.59 2.58 6.59-6.59 1.41 1.42-8 8z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 18 22");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var SecuredIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$1a, safe_not_equal, {});
  }
};
function create_if_block$w(ctx) {
  let div;
  let a;
  let securedicon;
  let t;
  let current;
  securedicon = new SecuredIcon({});
  return {
    c() {
      div = element("div");
      a = element("a");
      create_component(securedicon.$$.fragment);
      t = text(" Secured by Memberstack");
      attr(a, "href", "https://www.memberstack.com");
      attr(a, "target", "_blank");
      attr(div, "class", "ms-modal__footer");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, a);
      mount_component(securedicon, a, null);
      append(a, t);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(securedicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(securedicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(securedicon);
    }
  };
}
function create_fragment$19(ctx) {
  let if_block_anchor;
  let current;
  let if_block = !/*$app*/
  ctx[0].isPaid && create_if_block$w();
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!/*$app*/
      ctx2[0].isPaid) {
        if (if_block) {
          if (dirty & /*$app*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$w();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$D($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(0, $app = $$value));
  return [$app];
}
var ModalFooter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$D, create_fragment$19, safe_not_equal, {});
  }
};
function create_fragment$18(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M19,4H5A3,3,0,0,0,2,7V17a3,3,0,0,0,3,3H19a3,3,0,0,0,3-3V7A3,3,0,0,0,19,4ZM5,6H19a1,1,0,0,1,1,1l-8,4.88L4,7A1,1,0,0,1,5,6ZM20,17a1,1,0,0,1-1,1H5a1,1,0,0,1-1-1V9.28l7.48,4.57a1,1,0,0,0,1,0L20,9.28Z");
      attr(svg, "class", "ms-email");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "0 0 24 24");
      attr(svg, "fill", "currentColor");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EmailIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$18, safe_not_equal, {});
  }
};
var PasswordlessStore = writable({
  passwordlessModalType: "",
  passwordlessEmail: "",
  passwordlessMode: false,
  passwordlessCustomFields: [],
  passwordlessPlans: []
});
var setPasswordlessModalType = (type) => {
  PasswordlessStore.update((store) => {
    store.passwordlessModalType = type;
    return store;
  });
};
var setPasswordlessEmail = (email) => {
  PasswordlessStore.update((store) => {
    store.passwordlessEmail = email;
    return store;
  });
};
var setPasswordlessCustomFields = (customFields) => {
  PasswordlessStore.update((store) => {
    store.passwordlessCustomFields = customFields;
    return store;
  });
};
var setPasswordlessPlans = (plans) => {
  PasswordlessStore.update((store) => {
    store.passwordlessPlans = plans;
    return store;
  });
};
var setPasswordlessMode = (mode) => {
  PasswordlessStore.update((store) => {
    store.passwordlessMode = mode;
    return store;
  });
};
function get_each_context$d(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i];
  return child_ctx;
}
function create_if_block_6$5(ctx) {
  let closebutton;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  return {
    c() {
      create_component(closebutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(closebutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(closebutton, detaching);
    }
  };
}
function create_else_block_1$8(ctx) {
  let submitbutton;
  let current;
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[8]["login_with_email"] || "Continue with Email"
      ),
      isLoading: (
        /*showLoader*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block_5$7(ctx) {
  let passwordinput;
  let updating_passwordInputValid;
  let updating_display;
  let t;
  let submitbutton;
  let current;
  function passwordinput_passwordInputValid_binding(value) {
    ctx[14](value);
  }
  function passwordinput_display_binding(value) {
    ctx[15](value);
  }
  let passwordinput_props = {
    passwordPlaceholder: (
      /*text*/
      ctx[8]["login_password_placeholder"]
    ),
    "||": true,
    showForgotPasswordLabel: true
  };
  if (
    /*passwordInputValid*/
    ctx[5] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*passwordInputValid*/
    ctx[5];
  }
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordinput_props.display = /*display*/
    ctx[0];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  binding_callbacks.push(() => bind(passwordinput, "display", passwordinput_display_binding));
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[8]["login"] || "Log in"
      ),
      isLoading: (
        /*showLoader*/
        ctx[3]
      ),
      "data-cy": "submit-button"
    }
  });
  return {
    c() {
      create_component(passwordinput.$$.fragment);
      t = space();
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      insert(target, t, anchor);
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordInputValid && dirty & /*passwordInputValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*passwordInputValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordinput_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordinput.$set(passwordinput_changes);
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
      if (detaching)
        detach(t);
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block_4$8(ctx) {
  let div;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = `${/*text*/
      ctx[8]["dont_have_an_account"] || "Don't have an account?"}`;
      attr(button, "class", "ms-form__button ms-form__button--text");
      attr(button, "type", "button");
      attr(div, "class", "ms-form__flex ms-form__flex--centered");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[17]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_3$b(ctx) {
  let div;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      button = element("button");
      button.textContent = `${/*text*/
      ctx[8]["dont_have_an_account"] || "Don't have an account?"}`;
      attr(button, "class", "ms-form__button ms-form__button--text");
      attr(button, "type", "button");
      attr(div, "class", "ms-form__flex ms-form__flex--centered");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$v(ctx) {
  let div4;
  let div3;
  let div0;
  let t0;
  let div1;
  let t2;
  let div2;
  let t3;
  let t4;
  let current;
  let if_block = (
    /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true && create_if_block_1$o(ctx)
  );
  let each_value = (
    /*$app*/
    ctx[7].authProviders
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
  }
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      div1.textContent = `${/*text*/
      ctx[8]["or"] || "or"}`;
      t2 = space();
      div2 = element("div");
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "ms-modal__divider-line");
      attr(div1, "class", "ms-modal__divider-text");
      attr(div2, "class", "ms-modal__divider-line");
      attr(div3, "class", "ms-modal__social-divider");
      attr(div4, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div3, t2);
      append(div3, div2);
      append(div4, t3);
      if (if_block)
        if_block.m(div4, null);
      append(div4, t4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div4, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$o(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div4, t4);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*submitLoginWithProvider, $app, text*/
      2432) {
        each_value = /*$app*/
        ctx2[7].authProviders;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$d(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$d(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div4, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_1$o(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_2$j, create_else_block$f];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[6].passwordlessMode === false
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block$f(ctx) {
  let button;
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["login_with_password"] || "Log in with Password"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-password");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_3*/
          ctx[19]
        );
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$j(ctx) {
  let button;
  let emailicon;
  let t0;
  let span;
  let current;
  let mounted;
  let dispose;
  emailicon = new EmailIcon({});
  return {
    c() {
      button = element("button");
      create_component(emailicon.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["login_with_email"] || "Continue with Email"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-email");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(emailicon, button, null);
      append(button, t0);
      append(button, span);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[18]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(emailicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(emailicon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$d(ctx) {
  let div;
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1_value = (
    /*text*/
    (ctx[8]["continue_with"] || "Continue with") + ""
  );
  let t1;
  let t2;
  let t3_value = (
    /*provider*/
    ctx[22].name + ""
  );
  let t3;
  let t4;
  let mounted;
  let dispose;
  function click_handler_4() {
    return (
      /*click_handler_4*/
      ctx[20](
        /*provider*/
        ctx[22]
      )
    );
  }
  return {
    c() {
      div = element("div");
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      t3 = text(t3_value);
      t4 = space();
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[22].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[22].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      append(span, t3);
      append(div, t4);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_4);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      128 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[22].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      128 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[22].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      128 && t3_value !== (t3_value = /*provider*/
      ctx[22].name + ""))
        set_data(t3, t3_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$17(ctx) {
  let div1;
  let t0;
  let div0;
  let figureelement;
  let t1;
  let h2;
  let t3;
  let form;
  let emailinput;
  let updating_emailInputValid;
  let t4;
  let current_block_type_index;
  let if_block1;
  let t5;
  let t6;
  let t7;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (!/*params*/
  ctx[2] || !/*params*/
  ctx[2].hideCloseButton) && create_if_block_6$5(ctx);
  figureelement = new FigureElement({});
  function emailinput_emailInputValid_binding(value) {
    ctx[13](value);
  }
  let emailinput_props = {
    placeholder: (
      /*text*/
      ctx[8]["login_email_placeholder"]
    )
  };
  if (
    /*emailInputValid*/
    ctx[4] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[4];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  const if_block_creators = [create_if_block_5$7, create_else_block_1$8];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!/*$PasswordlessStore*/
    ctx2[6].passwordlessMode)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  function select_block_type_1(ctx2, dirty) {
    if (
      /*params*/
      ctx2[2] && /*params*/
      ctx2[2].signup && /*params*/
      ctx2[2].signup.plans
    )
      return create_if_block_3$b;
    if (
      /*signupButtonURL*/
      ctx2[9]
    )
      return create_if_block_4$8;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block2 = current_block_type && current_block_type(ctx);
  let if_block3 = (
    /*$app*/
    (ctx[7].authProviders.length > 0 || /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true) && create_if_block$v(ctx)
  );
  modalfooter = new ModalFooter({});
  return {
    c() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      create_component(figureelement.$$.fragment);
      t1 = space();
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[8]["login_to_your_account"] || "Login to your account"}`;
      t3 = space();
      form = element("form");
      create_component(emailinput.$$.fragment);
      t4 = space();
      if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      t6 = space();
      if (if_block3)
        if_block3.c();
      t7 = space();
      create_component(modalfooter.$$.fragment);
      attr(h2, "class", "ms-modal__title");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(div0, "class", "ms-modal__content");
      attr(div1, "class", "ms-modal");
      attr(div1, "id", "LoginModal");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append(div1, t0);
      append(div1, div0);
      mount_component(figureelement, div0, null);
      append(div0, t1);
      append(div0, h2);
      append(div0, t3);
      append(div0, form);
      mount_component(emailinput, form, null);
      append(form, t4);
      if_blocks[current_block_type_index].m(form, null);
      append(form, t5);
      if (if_block2)
        if_block2.m(form, null);
      append(div0, t6);
      if (if_block3)
        if_block3.m(div0, null);
      append(div1, t7);
      mount_component(modalfooter, div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(form, "submit", stop_propagation(prevent_default(
          /*submitLogin*/
          ctx[10]
        )));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*params*/
      ctx2[2] || !/*params*/
      ctx2[2].hideCloseButton) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*params*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_6$5(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      16) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[4];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      emailinput.$set(emailinput_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(form, t5);
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block2) {
        if_block2.p(ctx2, dirty);
      } else {
        if (if_block2)
          if_block2.d(1);
        if_block2 = current_block_type && current_block_type(ctx2);
        if (if_block2) {
          if_block2.c();
          if_block2.m(form, null);
        }
      }
      if (
        /*$app*/
        ctx2[7].authProviders.length > 0 || /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block$v(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div0, null);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(figureelement.$$.fragment, local);
      transition_in(emailinput.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block3);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(figureelement.$$.fragment, local);
      transition_out(emailinput.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block3);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block0)
        if_block0.d();
      destroy_component(figureelement);
      destroy_component(emailinput);
      if_blocks[current_block_type_index].d();
      if (if_block2) {
        if_block2.d();
      }
      if (if_block3)
        if_block3.d();
      destroy_component(modalfooter);
      mounted = false;
      dispose();
    }
  };
}
function instance$C($$self, $$props, $$invalidate) {
  let $PasswordlessStore;
  let $app;
  let $textStore;
  component_subscribe($$self, PasswordlessStore, ($$value) => $$invalidate(6, $PasswordlessStore = $$value));
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(7, $app = $$value));
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(21, $textStore = $$value));
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessLogin } = $$props;
  let { params } = $$props;
  let text2 = $textStore.text;
  let showLoader2 = false;
  let emailInputValid = false;
  let passwordInputValid = false;
  if ($app.additionalAuthMethods.passwordless.isDefault === true) {
    setPasswordlessMode(true);
  }
  let signupButtonURL = Boolean(window.ssoUI) && $app.ssoSignupButtonURL;
  function submitLogin(e) {
    return __async(this, null, function* () {
      const emailInput = e.target.querySelector("[name=eml]");
      const passwordInput = e.target.querySelector("[name=psw]");
      if ($PasswordlessStore.passwordlessMode !== true) {
        if (!emailInputValid || !passwordInputValid)
          return;
        $$invalidate(3, showLoader2 = true);
        try {
          const { data } = yield window.$memberstackDom.loginMemberEmailPassword(
            {
              email: emailInput.value,
              password: passwordInput.value
            },
            { includeContentGroups: true }
          );
          onSuccessLogin({ type: "LOGIN", data });
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
        }
      } else {
        if (!emailInputValid)
          return;
        $$invalidate(3, showLoader2 = true);
        try {
          yield window.$memberstackDom.sendMemberLoginPasswordlessEmail({ email: emailInput.value });
          setPasswordlessModalType("login");
          setPasswordlessEmail(emailInput.value);
          $$invalidate(0, display = "passwordless_token");
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
    });
  }
  function submitLoginWithProvider(provider) {
    return __async(this, null, function* () {
      try {
        const { data } = yield window.$memberstackDom.loginWithProvider({
          provider,
          allowSignup: params && params.login && params.login.allowSignup
        });
        onSuccessLogin({ type: "LOGIN", data });
      } catch (err) {
        $$invalidate(3, showLoader2 = false);
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(4, emailInputValid);
  }
  function passwordinput_passwordInputValid_binding(value) {
    passwordInputValid = value;
    $$invalidate(5, passwordInputValid);
  }
  function passwordinput_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  const click_handler = () => $$invalidate(0, display = "signup");
  const click_handler_1 = () => window.location.href = signupButtonURL;
  const click_handler_2 = () => setPasswordlessMode(true);
  const click_handler_3 = () => setPasswordlessMode(false);
  const click_handler_4 = (provider) => submitLoginWithProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessLogin" in $$props2)
      $$invalidate(12, onSuccessLogin = $$props2.onSuccessLogin);
    if ("params" in $$props2)
      $$invalidate(2, params = $$props2.params);
  };
  return [
    display,
    closeModal,
    params,
    showLoader2,
    emailInputValid,
    passwordInputValid,
    $PasswordlessStore,
    $app,
    text2,
    signupButtonURL,
    submitLogin,
    submitLoginWithProvider,
    onSuccessLogin,
    emailinput_emailInputValid_binding,
    passwordinput_passwordInputValid_binding,
    passwordinput_display_binding,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4
  ];
}
var LoginModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$C, create_fragment$17, safe_not_equal, {
      closeModal: 1,
      display: 0,
      onSuccessLogin: 12,
      params: 2
    });
  }
};
function add_css$l(target) {
  append_styles(target, "svelte-1w8lbd8", ".rey-was-here.svelte-1w8lbd8{display:none !important}");
}
function get_each_context$c(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[25] = list[i];
  return child_ctx;
}
function get_each_context_1$5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  child_ctx[30] = i;
  return child_ctx;
}
function create_if_block_6$4(ctx) {
  let closebutton;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  return {
    c() {
      create_component(closebutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(closebutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(closebutton, detaching);
    }
  };
}
function create_if_block_5$6(ctx) {
  let div1;
  let div0;
  let label;
  let t0_value = (
    /*customField*/
    ctx[28].label + ""
  );
  let t0;
  let label_for_value;
  let t1;
  let input;
  let input_placeholder_value;
  let input_name_value;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(t0_value);
      t1 = space();
      input = element("input");
      attr(label, "class", "ms-form__label");
      attr(label, "for", label_for_value = /*customField*/
      ctx[28].key);
      attr(input, "class", "ms-form__input");
      attr(input, "data-ms-custom-field", "");
      attr(input, "type", "text");
      attr(input, "placeholder", input_placeholder_value = /*customField*/
      ctx[28].label);
      attr(input, "name", input_name_value = /*customField*/
      ctx[28].key);
      attr(div0, "class", "ms-form__group");
      attr(div1, "class", "ms-modal__custom-field-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      append(div0, input);
    },
    p(ctx2, dirty) {
      if (dirty & /*$app*/
      128 && t0_value !== (t0_value = /*customField*/
      ctx2[28].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*$app*/
      128 && label_for_value !== (label_for_value = /*customField*/
      ctx2[28].key)) {
        attr(label, "for", label_for_value);
      }
      if (dirty & /*$app*/
      128 && input_placeholder_value !== (input_placeholder_value = /*customField*/
      ctx2[28].label)) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty & /*$app*/
      128 && input_name_value !== (input_name_value = /*customField*/
      ctx2[28].key)) {
        attr(input, "name", input_name_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div1);
    }
  };
}
function create_each_block_1$5(ctx) {
  let if_block_anchor;
  let if_block = (
    /*customField*/
    ctx[28].hidden !== true && create_if_block_5$6(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*customField*/
        ctx2[28].hidden !== true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_5$6(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block_4$7(ctx) {
  let passwordinput;
  let updating_passwordInputValid;
  let current;
  function passwordinput_passwordInputValid_binding(value) {
    ctx[13](value);
  }
  let passwordinput_props = {};
  if (
    /*passwordInputValid*/
    ctx[5] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*passwordInputValid*/
    ctx[5];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  return {
    c() {
      create_component(passwordinput.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordInputValid && dirty & /*passwordInputValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*passwordInputValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
    }
  };
}
function create_else_block_1$7(ctx) {
  let submitbutton;
  let current;
  submitbutton = new SubmitButton({
    props: {
      buttonText: "Continue with Email",
      isLoading: (
        /*showLoader*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block_3$a(ctx) {
  let submitbutton;
  let current;
  submitbutton = new SubmitButton({
    props: {
      buttonText: "Sign up",
      isLoading: (
        /*showLoader*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(submitbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(submitbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      8)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[3];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(submitbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(submitbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(submitbutton, detaching);
    }
  };
}
function create_if_block$u(ctx) {
  let div4;
  let div3;
  let t3;
  let t4;
  let current;
  let if_block = (
    /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true && create_if_block_1$n(ctx)
  );
  let each_value = (
    /*$app*/
    ctx[7].authProviders
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
  }
  return {
    c() {
      div4 = element("div");
      div3 = element("div");
      div3.innerHTML = `<div class="ms-modal__divider-line"></div> 
          <div class="ms-modal__divider-text">or</div> 
          <div class="ms-modal__divider-line"></div>`;
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div3, "class", "ms-modal__social-divider");
      attr(div4, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div3);
      append(div4, t3);
      if (if_block)
        if_block.m(div4, null);
      append(div4, t4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div4, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$n(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div4, t4);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*submitSignupWithProvider, $app*/
      1152) {
        each_value = /*$app*/
        ctx2[7].authProviders;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$c(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$c(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div4, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block_1$n(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block_2$i, create_else_block$e];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[6].passwordlessMode === false
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block$e(ctx) {
  let button;
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["signup_with_password"] || "Signup with Password"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-password");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$i(ctx) {
  let button;
  let emailicon;
  let t0;
  let span;
  let current;
  let mounted;
  let dispose;
  emailicon = new EmailIcon({});
  return {
    c() {
      button = element("button");
      create_component(emailicon.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = `${/*text*/
      ctx[8]["continue_with_email"] || "Continue with Email"}`;
      attr(button, "class", "ms-modal__social-button");
      attr(button, "data-cy", "continue-with-email");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(emailicon, button, null);
      append(button, t0);
      append(button, span);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(emailicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(emailicon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$c(ctx) {
  let div;
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[25].name + ""
  );
  let t2;
  let t3;
  let mounted;
  let dispose;
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[17](
        /*provider*/
        ctx[25]
      )
    );
  }
  return {
    c() {
      div = element("div");
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Continue with ");
      t2 = text(t2_value);
      t3 = space();
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[25].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[25].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
      attr(div, "class", "ms-modal__social-buttons");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      append(div, t3);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      128 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[25].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      128 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[25].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      128 && t2_value !== (t2_value = /*provider*/
      ctx[25].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$16(ctx) {
  let div4;
  let t0;
  let div3;
  let figureelement;
  let t1;
  let h2;
  let t3;
  let form;
  let t4;
  let emailinput;
  let updating_emailInputValid;
  let t5;
  let div0;
  let t8;
  let t9;
  let div1;
  let t10;
  let current_block_type_index;
  let if_block2;
  let t11;
  let div2;
  let button;
  let t13;
  let t14;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (!/*params*/
  ctx[2] || !/*params*/
  ctx[2].hideCloseButton) && create_if_block_6$4(ctx);
  figureelement = new FigureElement({});
  let each_value_1 = (
    /*$app*/
    ctx[7].customFields
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
  }
  function emailinput_emailInputValid_binding(value) {
    ctx[12](value);
  }
  let emailinput_props = {};
  if (
    /*emailInputValid*/
    ctx[4] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[4];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  let if_block1 = (
    /*$PasswordlessStore*/
    ctx[6].passwordlessMode === false && create_if_block_4$7(ctx)
  );
  const if_block_creators = [create_if_block_3$a, create_else_block_1$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[6].passwordlessMode === false
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block3 = (
    /*$app*/
    (ctx[7].authProviders.length > 0 || /*$app*/
    ctx[7].additionalAuthMethods.passwordless.enabled === true) && create_if_block$u(ctx)
  );
  modalfooter = new ModalFooter({});
  return {
    c() {
      div4 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div3 = element("div");
      create_component(figureelement.$$.fragment);
      t1 = space();
      h2 = element("h2");
      h2.textContent = "Create an account";
      t3 = space();
      form = element("form");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t4 = space();
      create_component(emailinput.$$.fragment);
      t5 = space();
      div0 = element("div");
      div0.innerHTML = `<label class="ms-form__label" for="Rey">Rey was here</label> 
        <input class="ms-form__input" type="text" placeholder="Rey&#39;s Favorite Color" name="Rey"/>`;
      t8 = space();
      if (if_block1)
        if_block1.c();
      t9 = space();
      div1 = element("div");
      t10 = space();
      if_block2.c();
      t11 = space();
      div2 = element("div");
      button = element("button");
      button.textContent = "Already have an account?";
      t13 = space();
      if (if_block3)
        if_block3.c();
      t14 = space();
      create_component(modalfooter.$$.fragment);
      attr(h2, "class", "ms-modal__title");
      attr(div0, "class", "ms-form__group rey-was-here svelte-1w8lbd8");
      attr(div1, "id", "hcaptcha");
      attr(div1, "class", "h-captcha");
      attr(button, "class", "ms-form__button ms-form__button--text ms-form__button--top-spacing");
      attr(div2, "class", "ms-form__flex ms-form__flex--centered");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(div3, "class", "ms-modal__content");
      attr(div4, "class", "ms-modal");
      attr(div4, "id", "SignupModal");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      if (if_block0)
        if_block0.m(div4, null);
      append(div4, t0);
      append(div4, div3);
      mount_component(figureelement, div3, null);
      append(div3, t1);
      append(div3, h2);
      append(div3, t3);
      append(div3, form);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(form, null);
        }
      }
      append(form, t4);
      mount_component(emailinput, form, null);
      append(form, t5);
      append(form, div0);
      append(form, t8);
      if (if_block1)
        if_block1.m(form, null);
      append(form, t9);
      append(form, div1);
      append(form, t10);
      if_blocks[current_block_type_index].m(form, null);
      append(form, t11);
      append(form, div2);
      append(div2, button);
      append(div3, t13);
      if (if_block3)
        if_block3.m(div3, null);
      append(div4, t14);
      mount_component(modalfooter, div4, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[14]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitSignup*/
            ctx[9]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*params*/
      ctx2[2] || !/*params*/
      ctx2[2].hideCloseButton) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*params*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_6$4(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div4, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (dirty & /*$app*/
      128) {
        each_value_1 = /*$app*/
        ctx2[7].customFields;
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1$5(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1$5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(form, t4);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      16) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[4];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      emailinput.$set(emailinput_changes);
      if (
        /*$PasswordlessStore*/
        ctx2[6].passwordlessMode === false
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$PasswordlessStore*/
          64) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_4$7(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(form, t9);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block2 = if_blocks[current_block_type_index];
        if (!if_block2) {
          if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block2.c();
        } else {
          if_block2.p(ctx2, dirty);
        }
        transition_in(if_block2, 1);
        if_block2.m(form, t11);
      }
      if (
        /*$app*/
        ctx2[7].authProviders.length > 0 || /*$app*/
        ctx2[7].additionalAuthMethods.passwordless.enabled === true
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*$app*/
          128) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block$u(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div3, null);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(figureelement.$$.fragment, local);
      transition_in(emailinput.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(figureelement.$$.fragment, local);
      transition_out(emailinput.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block0)
        if_block0.d();
      destroy_component(figureelement);
      destroy_each(each_blocks, detaching);
      destroy_component(emailinput);
      if (if_block1)
        if_block1.d();
      if_blocks[current_block_type_index].d();
      if (if_block3)
        if_block3.d();
      destroy_component(modalfooter);
      mounted = false;
      run_all(dispose);
    }
  };
}
var hcaptchaSitekey = "838711f9-0e30-48e9-89e6-8f1ec4b79705";
function executeCaptcha() {
  return __async(this, null, function* () {
    const { response } = yield window.hcaptcha.execute({ async: true });
    return response;
  });
}
function instance$B($$self, $$props, $$invalidate) {
  var _a;
  let $PasswordlessStore;
  let $app;
  let $textStore;
  component_subscribe($$self, PasswordlessStore, ($$value) => $$invalidate(6, $PasswordlessStore = $$value));
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(7, $app = $$value));
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(19, $textStore = $$value));
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessSignup } = $$props;
  let { params } = $$props;
  if ($app.additionalAuthMethods.passwordless.isDefault === true) {
    setPasswordlessMode(true);
  }
  let text2 = $textStore.text;
  let showLoader2 = false;
  let emailInputValid = false;
  let passwordInputValid = false;
  let captchaRequired = $app.captchaRequired;
  let hcaptchaWidgetID;
  const plans = (((_a = params == null ? void 0 : params.signup) == null ? void 0 : _a.plans) || []).map((plan) => {
    return { planId: plan };
  });
  function renderCaptcha() {
    return __async(this, null, function* () {
      if (captchaRequired) {
        yield window.$memberstackDom._captchaReady;
        hcaptchaWidgetID = window.hcaptcha.render("hcaptcha", { sitekey: hcaptchaSitekey, theme: "light" });
      }
    });
  }
  renderCaptcha();
  function getCaptcha() {
    return window.hcaptcha.getResponse(hcaptchaWidgetID);
  }
  function resetCaptcha() {
    if (captchaRequired && window.hcaptcha) {
      window.hcaptcha.reset(hcaptchaWidgetID);
    }
  }
  function submitSignup(e) {
    return __async(this, null, function* () {
      var _a2;
      const emailInput = e.target.querySelector("[type=email]");
      const passwordInput = e.target.querySelector("[data-ms-internal-password]");
      const customFields = {};
      const customFieldInputs = Array.from(e.target.querySelectorAll("[data-ms-custom-field]"));
      customFieldInputs.map((input) => {
        customFields[input.getAttribute("name")] = input.value;
      }).length;
      if ($PasswordlessStore.passwordlessMode !== true) {
        if (!emailInputValid || !passwordInputValid)
          return;
      } else {
        if (!emailInputValid)
          return;
      }
      $$invalidate(3, showLoader2 = true);
      if (e.target.querySelector("[name=Rey]").value) {
        e.target.reset();
        $$invalidate(3, showLoader2 = false);
        return;
      }
      let captchaToken;
      if (captchaRequired) {
        yield window.$memberstackDom._captchaReady;
        captchaToken = getCaptcha();
        if (!captchaToken) {
          try {
            captchaToken = yield executeCaptcha();
          } catch (err) {
            $$invalidate(3, showLoader2 = false);
            return;
          }
        }
      }
      if ($PasswordlessStore.passwordlessMode !== true) {
        try {
          const { data } = yield window.$memberstackDom.signupMemberEmailPassword(
            {
              email: emailInput.value,
              password: passwordInput.value,
              plans,
              customFields,
              captchaToken
            },
            { includeContentGroups: true }
          );
          onSuccessSignup({ type: "SIGNUP", data });
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
          resetCaptcha();
        }
      } else {
        try {
          yield window.$memberstackDom.sendMemberSignupPasswordlessEmail({ email: emailInput.value });
          setPasswordlessModalType("signup");
          setPasswordlessEmail(emailInput.value);
          setPasswordlessPlans(((_a2 = params == null ? void 0 : params.signup) == null ? void 0 : _a2.plans) || []);
          setPasswordlessCustomFields(customFields);
          $$invalidate(0, display = "passwordless_token");
          $$invalidate(3, showLoader2 = false);
        } catch (err) {
          $$invalidate(3, showLoader2 = false);
          window.$memberstackDom._showMessage(err.message, true);
          resetCaptcha();
        }
      }
    });
  }
  function submitSignupWithProvider(provider) {
    return __async(this, null, function* () {
      try {
        const { data } = yield window.$memberstackDom.signupWithProvider({ provider, plans });
        onSuccessSignup({ type: "SIGNUP", data });
      } catch (err) {
        $$invalidate(3, showLoader2 = false);
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(4, emailInputValid);
  }
  function passwordinput_passwordInputValid_binding(value) {
    passwordInputValid = value;
    $$invalidate(5, passwordInputValid);
  }
  const click_handler = () => $$invalidate(0, display = "login");
  const click_handler_1 = () => setPasswordlessMode(true);
  const click_handler_2 = () => setPasswordlessMode(false);
  const click_handler_3 = (provider) => submitSignupWithProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessSignup" in $$props2)
      $$invalidate(11, onSuccessSignup = $$props2.onSuccessSignup);
    if ("params" in $$props2)
      $$invalidate(2, params = $$props2.params);
  };
  return [
    display,
    closeModal,
    params,
    showLoader2,
    emailInputValid,
    passwordInputValid,
    $PasswordlessStore,
    $app,
    text2,
    submitSignup,
    submitSignupWithProvider,
    onSuccessSignup,
    emailinput_emailInputValid_binding,
    passwordinput_passwordInputValid_binding,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var SignupModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$B,
      create_fragment$16,
      safe_not_equal,
      {
        closeModal: 1,
        display: 0,
        onSuccessSignup: 11,
        params: 2
      },
      add_css$l
    );
  }
};
function create_fragment$15(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M7.41 1.41L6 0L0 6L6 12L7.41 10.59L2.83 6L7.41 1.41Z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 8 12");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var BackIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$15, safe_not_equal, {});
  }
};
function create_fragment$14(ctx) {
  let div4;
  let div0;
  let button;
  let backicon;
  let t0;
  let div3;
  let figureelement;
  let t1;
  let h2;
  let t3;
  let p;
  let t5;
  let form;
  let emailinput;
  let updating_emailInputValid;
  let t6;
  let submitbutton;
  let t7;
  let div2;
  let div1;
  let t9;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  figureelement = new FigureElement({});
  function emailinput_emailInputValid_binding(value) {
    ctx[7](value);
  }
  let emailinput_props = {
    placeholder: (
      /*text*/
      ctx[3]["reset_email_placeholder"]
    )
  };
  if (
    /*emailInputValid*/
    ctx[1] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[1];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[3]["reset"] || "Send Link"
      ),
      isLoading: (
        /*showLoader*/
        ctx[2]
      )
    }
  });
  modalfooter = new ModalFooter({});
  return {
    c() {
      div4 = element("div");
      div0 = element("div");
      button = element("button");
      create_component(backicon.$$.fragment);
      t0 = space();
      div3 = element("div");
      create_component(figureelement.$$.fragment);
      t1 = space();
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[3]["reset_your_password"] || "Reset your password"}`;
      t3 = space();
      p = element("p");
      p.textContent = `${/*text*/
      ctx[3]["reset_instructions"] || "We\u2019ll email you a secure link to reset the password for your account."}`;
      t5 = space();
      form = element("form");
      create_component(emailinput.$$.fragment);
      t6 = space();
      create_component(submitbutton.$$.fragment);
      t7 = space();
      div2 = element("div");
      div1 = element("div");
      div1.textContent = `${/*text*/
      ctx[3]["reset_already_have_code"] || "I already have a code"}`;
      t9 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "data-cy", "back-btn");
      attr(div0, "class", "ms-modal__back");
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
      attr(p, "class", "ms-modal__text");
      attr(div1, "class", "ms-form__link");
      attr(div2, "class", "ms-form__flex ms-form__flex--centered");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(div3, "class", "ms-modal__content");
      attr(div4, "class", "ms-modal");
      attr(div4, "id", "PasswordResetModal");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div0);
      append(div0, button);
      mount_component(backicon, button, null);
      append(div4, t0);
      append(div4, div3);
      mount_component(figureelement, div3, null);
      append(div3, t1);
      append(div3, h2);
      append(div3, t3);
      append(div3, p);
      append(div3, t5);
      append(div3, form);
      mount_component(emailinput, form, null);
      append(form, t6);
      mount_component(submitbutton, form, null);
      append(form, t7);
      append(form, div2);
      append(div2, div1);
      append(div4, t9);
      mount_component(modalfooter, div4, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[6]
          ),
          listen(
            div1,
            "click",
            /*click_handler_1*/
            ctx[8]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordReset*/
            ctx[4]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      2) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[1];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      emailinput.$set(emailinput_changes);
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      4)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[2];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(emailinput.$$.fragment, local);
      transition_in(submitbutton.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(emailinput.$$.fragment, local);
      transition_out(submitbutton.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      destroy_component(backicon);
      destroy_component(figureelement);
      destroy_component(emailinput);
      destroy_component(submitbutton);
      destroy_component(modalfooter);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$A($$self, $$props, $$invalidate) {
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(9, $textStore = $$value));
  let text2 = $textStore.text;
  let { closeModal } = $$props;
  let { display } = $$props;
  let emailInputValid = false;
  let showLoader2 = false;
  function submitPasswordReset(e) {
    return __async(this, null, function* () {
      const emailInput = e.target[0];
      if (!emailInputValid)
        return;
      $$invalidate(2, showLoader2 = true);
      try {
        yield window.$memberstackDom.sendMemberResetPasswordEmail({ email: emailInput.value });
        $$invalidate(0, display = "reset_password");
      } catch (err) {
        console.log(err);
        $$invalidate(2, showLoader2 = false);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, false);
        }
      }
    });
  }
  const click_handler = () => $$invalidate(0, display = "login");
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(1, emailInputValid);
  }
  const click_handler_1 = () => $$invalidate(0, display = "reset_password");
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(5, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
  };
  return [
    display,
    emailInputValid,
    showLoader2,
    text2,
    submitPasswordReset,
    closeModal,
    click_handler,
    emailinput_emailInputValid_binding,
    click_handler_1
  ];
}
var PassResetModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$A, create_fragment$14, safe_not_equal, { closeModal: 5, display: 0 });
  }
};
function create_if_block$t(ctx) {
  let div;
  let erroricon;
  let t;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t = text(" Please enter a valid code");
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$13(ctx) {
  let div3;
  let div0;
  let button;
  let backicon;
  let t0;
  let closebutton;
  let t1;
  let div2;
  let figureelement;
  let t2;
  let h2;
  let t4;
  let form;
  let div1;
  let label;
  let t6;
  let fieldset;
  let t12;
  let t13;
  let passwordinput;
  let updating_passwordInputValid;
  let t14;
  let submitbutton;
  let t15;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  figureelement = new FigureElement({});
  let if_block = !/*tokenInputValid*/
  ctx[3] && create_if_block$t();
  function passwordinput_passwordInputValid_binding(value) {
    ctx[9](value);
  }
  let passwordinput_props = {
    passwordPlaceholder: (
      /*text*/
      ctx[5]["reset_password_placeholder"] || "New password"
    ),
    passwordLabel: (
      /*text*/
      ctx[5]["password"] || "Enter a new password"
    )
  };
  if (
    /*passwordInputValid*/
    ctx[4] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*passwordInputValid*/
    ctx[4];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[5]["reset_confirm_reset"] || "Confirm & Reset"
      ),
      isLoading: (
        /*showLoader*/
        ctx[2]
      )
    }
  });
  modalfooter = new ModalFooter({});
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      button = element("button");
      create_component(backicon.$$.fragment);
      t0 = space();
      create_component(closebutton.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(figureelement.$$.fragment);
      t2 = space();
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[5]["reset_your_password"] || "Reset your password"}`;
      t4 = space();
      form = element("form");
      div1 = element("div");
      label = element("label");
      label.textContent = `${/*text*/
      ctx[5]["reset_enter_code"] || "Enter your 6-digit code"}`;
      t6 = space();
      fieldset = element("fieldset");
      fieldset.innerHTML = `<input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token" required=""/> 
          <input type="tel" name="token" class="ms-form__input ms-form__input--token"/>`;
      t12 = space();
      if (if_block)
        if_block.c();
      t13 = space();
      create_component(passwordinput.$$.fragment);
      t14 = space();
      create_component(submitbutton.$$.fragment);
      t15 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "class", "ms-modal__back");
      attr(h2, "class", "ms-modal__title");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "token-fieldset");
      attr(fieldset, "class", "ms-form__fieldset");
      attr(fieldset, "name", "token-fieldset");
      attr(div1, "class", "ms-form__group");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(div2, "class", "ms-modal__content");
      attr(div3, "class", "ms-modal");
      attr(div3, "id", "PasswordTokenModal");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div0, button);
      mount_component(backicon, button, null);
      append(div3, t0);
      mount_component(closebutton, div3, null);
      append(div3, t1);
      append(div3, div2);
      mount_component(figureelement, div2, null);
      append(div2, t2);
      append(div2, h2);
      append(div2, t4);
      append(div2, form);
      append(form, div1);
      append(div1, label);
      append(div1, t6);
      append(div1, fieldset);
      append(div1, t12);
      if (if_block)
        if_block.m(div1, null);
      append(form, t13);
      mount_component(passwordinput, form, null);
      append(form, t14);
      mount_component(submitbutton, form, null);
      append(div3, t15);
      mount_component(modalfooter, div3, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button,
            "click",
            /*click_handler*/
            ctx[8]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordToken*/
            ctx[6]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
      if (!/*tokenInputValid*/
      ctx2[3]) {
        if (if_block) {
          if (dirty & /*tokenInputValid*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$t();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const passwordinput_changes = {};
      if (!updating_passwordInputValid && dirty & /*passwordInputValid*/
      16) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*passwordInputValid*/
        ctx2[4];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      4)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[2];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      transition_in(closebutton.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(if_block);
      transition_in(passwordinput.$$.fragment, local);
      transition_in(submitbutton.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      transition_out(closebutton.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(if_block);
      transition_out(passwordinput.$$.fragment, local);
      transition_out(submitbutton.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(backicon);
      destroy_component(closebutton);
      destroy_component(figureelement);
      if (if_block)
        if_block.d();
      destroy_component(passwordinput);
      destroy_component(submitbutton);
      destroy_component(modalfooter);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$z($$self, $$props, $$invalidate) {
  let $textStore;
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(10, $textStore = $$value));
  let text2 = $textStore.text;
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessPasswordReset } = $$props;
  let showLoader2 = false;
  let tokenInputValid = true;
  let passwordInputValid = true;
  onMount(() => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    tokenElements.forEach((ele, index) => {
      ele.addEventListener("keydown", (e) => {
        if (e.keyCode === 8 && e.target.value === "")
          tokenElements[Math.max(0, index - 1)].focus();
      });
      ele.addEventListener("input", (e) => {
        const [first, ...rest] = e.target.value;
        e.target.value = first != null ? first : "";
        const lastInputBox = index === tokenElements.length - 1;
        const insertedContent = first !== void 0;
        if (insertedContent && !lastInputBox) {
          tokenElements[index + 1].focus();
          tokenElements[index + 1].value = rest.join("");
          tokenElements[index + 1].dispatchEvent(new Event("input"));
        }
      });
    });
  });
  const validateFields = (e) => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    const hasEmpty = tokenElements.some((el) => {
      if (!el.value) {
        return true;
      }
      return false;
    });
    if (hasEmpty) {
      $$invalidate(3, tokenInputValid = false);
    } else {
      $$invalidate(3, tokenInputValid = true);
    }
    return !hasEmpty;
  };
  function submitPasswordToken(e) {
    return __async(this, null, function* () {
      const passwordInput = e.target[7];
      const isValid = validateFields();
      if (!isValid)
        return;
      const token = [...document.getElementsByName("token")].filter(({ name }) => name).map(({ value }) => value).join("");
      try {
        $$invalidate(2, showLoader2 = true);
        const { _internalUseOnly: { message } } = yield window.$memberstackDom.resetMemberPassword({ token, newPassword: passwordInput.value });
        window.$memberstackDom._showMessage(message, false);
        onSuccessPasswordReset({ type: "PASSWORD_RESET", data: {} });
        $$invalidate(2, showLoader2 = false);
        $$invalidate(0, display = "reset_password_success");
      } catch (err) {
        $$invalidate(2, showLoader2 = false);
        console.log(err);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
    });
  }
  const click_handler = () => $$invalidate(0, display = "forgot_password");
  function passwordinput_passwordInputValid_binding(value) {
    passwordInputValid = value;
    $$invalidate(4, passwordInputValid);
  }
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessPasswordReset" in $$props2)
      $$invalidate(7, onSuccessPasswordReset = $$props2.onSuccessPasswordReset);
  };
  return [
    display,
    closeModal,
    showLoader2,
    tokenInputValid,
    passwordInputValid,
    text2,
    submitPasswordToken,
    onSuccessPasswordReset,
    click_handler,
    passwordinput_passwordInputValid_binding
  ];
}
var PassTokenModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$z, create_fragment$13, safe_not_equal, {
      closeModal: 1,
      display: 0,
      onSuccessPasswordReset: 7
    });
  }
};
function create_fragment$12(ctx) {
  let div2;
  let div0;
  let t0;
  let closebutton;
  let t1;
  let div1;
  let figureelement;
  let t2;
  let h2;
  let t4;
  let p;
  let t7;
  let modalfooter;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[0]
    ) }
  });
  figureelement = new FigureElement({});
  modalfooter = new ModalFooter({});
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      create_component(closebutton.$$.fragment);
      t1 = space();
      div1 = element("div");
      create_component(figureelement.$$.fragment);
      t2 = space();
      h2 = element("h2");
      h2.textContent = "Success!";
      t4 = space();
      p = element("p");
      p.innerHTML = `Your password has been reset. <br/>
      Please login with your new credentials.`;
      t7 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "data-cy", "back-btn");
      attr(div0, "class", "ms-modal__back");
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
      attr(p, "class", "ms-modal__text");
      attr(div1, "class", "ms-modal__content");
      attr(div2, "class", "ms-modal");
      attr(div2, "id", "PasswordSuccessModal");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t0);
      mount_component(closebutton, div2, null);
      append(div2, t1);
      append(div2, div1);
      mount_component(figureelement, div1, null);
      append(div1, t2);
      append(div1, h2);
      append(div1, t4);
      append(div1, p);
      append(div2, t7);
      mount_component(modalfooter, div2, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      1)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[0];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(closebutton);
      destroy_component(figureelement);
      destroy_component(modalfooter);
    }
  };
}
function instance$y($$self, $$props, $$invalidate) {
  let { closeModal } = $$props;
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(0, closeModal = $$props2.closeModal);
  };
  return [closeModal];
}
var PassSuccessModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$y, create_fragment$12, safe_not_equal, { closeModal: 0 });
  }
};
function create_else_block_1$6(ctx) {
  let button;
  let backicon;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  return {
    c() {
      button = element("button");
      create_component(backicon.$$.fragment);
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(backicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(backicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$h(ctx) {
  let button;
  let backicon;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  return {
    c() {
      button = element("button");
      create_component(backicon.$$.fragment);
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(backicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[9]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(backicon);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$d(ctx) {
  let h2;
  return {
    c() {
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[5]["passwordless_token_heading"] || "Create an account"}`;
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(h2);
    }
  };
}
function create_if_block_1$m(ctx) {
  let h2;
  return {
    c() {
      h2 = element("h2");
      h2.textContent = `${/*text*/
      ctx[5]["login_to_your_account"] || "Login to your account"}`;
      attr(h2, "class", "ms-modal__title ms-modal__title--sub-text");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(h2);
    }
  };
}
function create_if_block$s(ctx) {
  let div;
  let erroricon;
  let t;
  let current;
  erroricon = new ErrorIcon({});
  return {
    c() {
      div = element("div");
      create_component(erroricon.$$.fragment);
      t = text(" Please enter a valid code");
      attr(div, "class", "ms-form__error");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(erroricon, div, null);
      append(div, t);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(erroricon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(erroricon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(erroricon);
    }
  };
}
function create_fragment$11(ctx) {
  let div3;
  let div0;
  let current_block_type_index;
  let if_block0;
  let t0;
  let closebutton;
  let t1;
  let div2;
  let figureelement;
  let t2;
  let t3;
  let p;
  let t5;
  let form;
  let div1;
  let label;
  let t7;
  let fieldset;
  let t13;
  let t14;
  let submitbutton;
  let t15;
  let modalfooter;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_2$h, create_else_block_1$6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[4].passwordlessModalType === "login"
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[1]
    ) }
  });
  figureelement = new FigureElement({});
  function select_block_type_1(ctx2, dirty) {
    if (
      /*$PasswordlessStore*/
      ctx2[4].passwordlessModalType === "login"
    )
      return create_if_block_1$m;
    return create_else_block$d;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  let if_block2 = !/*tokenInputValid*/
  ctx[3] && create_if_block$s();
  submitbutton = new SubmitButton({
    props: {
      buttonText: (
        /*text*/
        ctx[5]["login_verify_email"] || "Verify Email"
      ),
      isLoading: (
        /*showLoader*/
        ctx[2]
      )
    }
  });
  modalfooter = new ModalFooter({});
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      if_block0.c();
      t0 = space();
      create_component(closebutton.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(figureelement.$$.fragment);
      t2 = space();
      if_block1.c();
      t3 = space();
      p = element("p");
      p.textContent = `${/*text*/
      ctx[5]["login_passwordless_instructions"] || "Enter the verification code sent to your email address"}`;
      t5 = space();
      form = element("form");
      div1 = element("div");
      label = element("label");
      label.textContent = `${/*text*/
      ctx[5]["login_verification_code"] || "Verification Code"}`;
      t7 = space();
      fieldset = element("fieldset");
      fieldset.innerHTML = `<input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" required="" type="tel"/> 
          <input name="token" class="ms-form__input ms-form__input--token" type="tel"/>`;
      t13 = space();
      if (if_block2)
        if_block2.c();
      t14 = space();
      create_component(submitbutton.$$.fragment);
      t15 = space();
      create_component(modalfooter.$$.fragment);
      attr(div0, "class", "ms-modal__back");
      attr(p, "class", "ms-modal__text");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "token-fieldset");
      attr(fieldset, "class", "ms-form__fieldset");
      attr(fieldset, "name", "token-fieldset");
      attr(div1, "class", "ms-form__group");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(div2, "class", "ms-modal__content");
      attr(div3, "class", "ms-modal");
      attr(div3, "id", "PasswordlessTokenModal");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      if_blocks[current_block_type_index].m(div0, null);
      append(div3, t0);
      mount_component(closebutton, div3, null);
      append(div3, t1);
      append(div3, div2);
      mount_component(figureelement, div2, null);
      append(div2, t2);
      if_block1.m(div2, null);
      append(div2, t3);
      append(div2, p);
      append(div2, t5);
      append(div2, form);
      append(form, div1);
      append(div1, label);
      append(div1, t7);
      append(div1, fieldset);
      append(div1, t13);
      if (if_block2)
        if_block2.m(div1, null);
      append(form, t14);
      mount_component(submitbutton, form, null);
      append(div3, t15);
      mount_component(modalfooter, div3, null);
      current = true;
      if (!mounted) {
        dispose = listen(form, "submit", stop_propagation(prevent_default(
          /*submitPasswordlessToken*/
          ctx[6]
        )));
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div0, null);
      }
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      2)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[1];
      closebutton.$set(closebutton_changes);
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div2, t3);
        }
      }
      if (!/*tokenInputValid*/
      ctx2[3]) {
        if (if_block2) {
          if (dirty & /*tokenInputValid*/
          8) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$s();
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      const submitbutton_changes = {};
      if (dirty & /*showLoader*/
      4)
        submitbutton_changes.isLoading = /*showLoader*/
        ctx2[2];
      submitbutton.$set(submitbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(closebutton.$$.fragment, local);
      transition_in(figureelement.$$.fragment, local);
      transition_in(if_block2);
      transition_in(submitbutton.$$.fragment, local);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(closebutton.$$.fragment, local);
      transition_out(figureelement.$$.fragment, local);
      transition_out(if_block2);
      transition_out(submitbutton.$$.fragment, local);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if_blocks[current_block_type_index].d();
      destroy_component(closebutton);
      destroy_component(figureelement);
      if_block1.d();
      if (if_block2)
        if_block2.d();
      destroy_component(submitbutton);
      destroy_component(modalfooter);
      mounted = false;
      dispose();
    }
  };
}
function instance$x($$self, $$props, $$invalidate) {
  let $PasswordlessStore;
  let $textStore;
  component_subscribe($$self, PasswordlessStore, ($$value) => $$invalidate(4, $PasswordlessStore = $$value));
  component_subscribe($$self, TextStore, ($$value) => $$invalidate(11, $textStore = $$value));
  let text2 = $textStore.text;
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessPasswordlessToken } = $$props;
  let { onSuccess } = $$props;
  let showLoader2 = false;
  let tokenInputValid = true;
  onMount(() => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    tokenElements.forEach((ele, index) => {
      ele.addEventListener("keydown", (e) => {
        if (e.keyCode === 8 && e.target.value === "")
          tokenElements[Math.max(0, index - 1)].focus();
      });
      ele.addEventListener("input", (e) => {
        const [first, ...rest] = e.target.value;
        e.target.value = first != null ? first : "";
        const lastInputBox = index === tokenElements.length - 1;
        const insertedContent = first !== void 0;
        if (insertedContent && !lastInputBox) {
          tokenElements[index + 1].focus();
          tokenElements[index + 1].value = rest.join("");
          tokenElements[index + 1].dispatchEvent(new Event("input"));
        }
      });
    });
  });
  const validateFields = (e) => {
    const tokenElements = [...document.querySelectorAll("input.ms-form__input--token")];
    const hasEmpty = tokenElements.some((el) => {
      if (!el.value) {
        return true;
      }
      return false;
    });
    if (hasEmpty) {
      $$invalidate(3, tokenInputValid = false);
    } else {
      $$invalidate(3, tokenInputValid = true);
    }
    return !hasEmpty;
  };
  function submitPasswordlessToken(e) {
    return __async(this, null, function* () {
      e.target[7];
      const isValid = validateFields();
      if (!isValid)
        return;
      const token = [...document.getElementsByName("token")].filter(({ name }) => name).map(({ value }) => value).join("");
      try {
        $$invalidate(2, showLoader2 = true);
        if ($PasswordlessStore.passwordlessModalType === "login") {
          const { data } = yield window.$memberstackDom.loginMemberPasswordless(
            {
              passwordlessToken: token,
              email: $PasswordlessStore.passwordlessEmail
            },
            { includeContentGroups: true }
          );
          onSuccess({ type: "LOGIN", data });
          $$invalidate(2, showLoader2 = false);
        } else {
          const plans = ($PasswordlessStore.passwordlessPlans || []).map((plan) => {
            return { planId: plan };
          });
          const { data } = yield window.$memberstackDom.signupMemberPasswordless(
            {
              passwordlessToken: token,
              email: $PasswordlessStore.passwordlessEmail,
              plans,
              customFields: $PasswordlessStore.passwordlessCustomFields
            },
            { includeContentGroups: true }
          );
          onSuccess({ type: "SIGNUP", data });
          $$invalidate(2, showLoader2 = false);
        }
      } catch (err) {
        $$invalidate(2, showLoader2 = false);
        console.log(err);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
    });
  }
  const click_handler = () => $$invalidate(0, display = "login");
  const click_handler_1 = () => $$invalidate(0, display = "signup");
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(1, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccessPasswordlessToken" in $$props2)
      $$invalidate(7, onSuccessPasswordlessToken = $$props2.onSuccessPasswordlessToken);
    if ("onSuccess" in $$props2)
      $$invalidate(8, onSuccess = $$props2.onSuccess);
  };
  return [
    display,
    closeModal,
    showLoader2,
    tokenInputValid,
    $PasswordlessStore,
    text2,
    submitPasswordlessToken,
    onSuccessPasswordlessToken,
    onSuccess,
    click_handler,
    click_handler_1
  ];
}
var PasswordlessTokenModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$x, create_fragment$11, safe_not_equal, {
      closeModal: 1,
      display: 0,
      onSuccessPasswordlessToken: 7,
      onSuccess: 8
    });
  }
};
function create_fragment$10(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "m8 8c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z");
      attr(path, "fill", "currentColor");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 16 16");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ProfileIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$10, safe_not_equal, {});
  }
};
function create_fragment$$(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "m9 0-9 4v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12v-6l-9-4zm0 10.99h7c-0.53 4.12-3.28 7.79-7 8.94v-8.93h-7v-5.7l7-3.11v8.8z");
      attr(path, "fill", "currentColor");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 18 22");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var SecurityIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$$, safe_not_equal, {});
  }
};
function create_fragment$_(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M16 16H2V2H9V0H2C0.89 0 0 0.9 0 2V16C0 17.1 0.89 18 2 18H16C17.1 18 18 17.1 18 16V9H16V16ZM11 0V2H14.59L4.76 11.83L6.17 13.24L16 3.41V7H18V0H11Z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 18 18");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LinkOutIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$_, safe_not_equal, {});
  }
};
function create_fragment$Z(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M16 7H3.83L9.42 1.41L8 0L0 8L8 16L9.41 14.59L3.83 9H16V7Z");
      attr(path, "fill", "currentColor");
      attr(svg, "width", "16");
      attr(svg, "height", "16");
      attr(svg, "viewBox", "0 0 16 16");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LogoutIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$Z, safe_not_equal, {});
  }
};
function create_fragment$Y(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M12 2l-5.5 9h11L12 2zm0 3.84L13.93 9h-3.87L12 5.84zM17.5 13c-2.49 0-4.5 2.01-4.5 4.5s2.01 4.5 4.5 4.5 4.5-2.01 4.5-4.5-2.01-4.5-4.5-4.5zm0 7c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM3 21.5h8v-8H3v8zm2-6h4v4H5v-4z");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "3 2 19 20");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var PlansIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$Y, safe_not_equal, {});
  }
};
function create_if_block_2$g(ctx) {
  let button;
  let profileicon;
  let t;
  let current;
  let mounted;
  let dispose;
  profileicon = new ProfileIcon({});
  return {
    c() {
      button = element("button");
      create_component(profileicon.$$.fragment);
      t = text(" Profile");
      attr(button, "data-cy", "profile-btn");
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "profile"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(profileicon, button, null);
      append(button, t);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "profile"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(profileicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(profileicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$l(ctx) {
  let button;
  let plansicon;
  let t;
  let current;
  let mounted;
  let dispose;
  plansicon = new PlansIcon({});
  return {
    c() {
      button = element("button");
      create_component(plansicon.$$.fragment);
      t = text(" Plans");
      attr(button, "data-cy", "plans-btn");
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "plans"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(plansicon, button, null);
      append(button, t);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_2*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "plans"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(plansicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(plansicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(plansicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$r(ctx) {
  let button;
  let plansicon;
  let t;
  let current;
  let mounted;
  let dispose;
  plansicon = new PlansIcon({});
  return {
    c() {
      button = element("button");
      create_component(plansicon.$$.fragment);
      t = text(" Team");
      attr(button, "data-cy", "plans-btn");
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "team"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(plansicon, button, null);
      append(button, t);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_3*/
          ctx[11]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "team"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(plansicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(plansicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(plansicon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$X(ctx) {
  let t0;
  let button0;
  let securityicon;
  let t1;
  let t2;
  let show_if_1 = (
    /*showPlansNavButton*/
    ctx[3]()
  );
  let t3;
  let show_if = (
    /*showTeamNavButton*/
    ctx[4]()
  );
  let t4;
  let button1;
  let logouticon;
  let t5;
  let current;
  let mounted;
  let dispose;
  let if_block0 = !/*hideProfileSection*/
  ctx[1] && create_if_block_2$g(ctx);
  securityicon = new SecurityIcon({});
  let if_block1 = show_if_1 && create_if_block_1$l(ctx);
  let if_block2 = show_if && create_if_block$r(ctx);
  logouticon = new LogoutIcon({});
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      button0 = element("button");
      create_component(securityicon.$$.fragment);
      t1 = text(" Security");
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if (if_block2)
        if_block2.c();
      t4 = space();
      button1 = element("button");
      create_component(logouticon.$$.fragment);
      t5 = text(" Logout");
      attr(button0, "data-cy", "security-btn");
      attr(button0, "class", "ms-modal__profile-option");
      toggle_class(
        button0,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "security" || /*displayProfile*/
        ctx[0] === "changePassword"
      );
      attr(button1, "data-cy", "logout-btn");
      attr(button1, "class", "ms-modal__profile-option");
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, button0, anchor);
      mount_component(securityicon, button0, null);
      append(button0, t1);
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t3, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t4, anchor);
      insert(target, button1, anchor);
      mount_component(logouticon, button1, null);
      append(button1, t5);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler_1*/
            ctx[9]
          ),
          listen(
            button1,
            "click",
            /*logout*/
            ctx[2]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*hideProfileSection*/
      ctx2[1]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*hideProfileSection*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_2$g(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button0,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "security" || /*displayProfile*/
          ctx2[0] === "changePassword"
        );
      }
      if (show_if_1)
        if_block1.p(ctx2, dirty);
      if (show_if)
        if_block2.p(ctx2, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(securityicon.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(logouticon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(securityicon.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(logouticon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(button0);
      destroy_component(securityicon);
      if (detaching)
        detach(t2);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t3);
      if (if_block2)
        if_block2.d(detaching);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(button1);
      destroy_component(logouticon);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$w($$self, $$props, $$invalidate) {
  let { member } = $$props;
  let { onSuccessLogout } = $$props;
  let { displayProfile } = $$props;
  let { profileLoader } = $$props;
  let { hideProfileSection: hideProfileSection2 } = $$props;
  const unsubscribe = AppStore.subscribe((data) => {
    if (!data.initialValue) {
      const container = document.getElementById("msOverlay");
      const css = document.createElement("style");
      const color = data.branding.colors.lightMode.primaryButton;
      const fullCSS = `.ms-modal__profile-option:hover { color: ${color};} .ms-modal__profile-option--active { color: ${color};} .ms-modal__save-button { background: ${color};} .ms-modal__save-button:disabled { background: ${color};}`;
      css.appendChild(document.createTextNode(fullCSS));
      container.appendChild(css);
    }
  });
  onDestroy(() => {
    unsubscribe();
  });
  function logout(e) {
    return __async(this, null, function* () {
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.logout();
        window.$memberstackDom._showMessage(message, false);
        onSuccessLogout({ type: "LOGOUT", data });
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function showPlansNavButton() {
    return member.stripeCustomerId || member.planConnections.some((plan) => plan.type === "FREE") || member.teams.joinedTeams.length > 0;
  }
  function showTeamNavButton() {
    var _a;
    return ((_a = member.teams) == null ? void 0 : _a.ownedTeams.length) > 0;
  }
  const click_handler = () => $$invalidate(0, displayProfile = "profile");
  const click_handler_1 = () => $$invalidate(0, displayProfile = "security");
  const click_handler_2 = () => $$invalidate(0, displayProfile = "plans");
  const click_handler_3 = () => $$invalidate(0, displayProfile = "team");
  $$self.$$set = ($$props2) => {
    if ("member" in $$props2)
      $$invalidate(5, member = $$props2.member);
    if ("onSuccessLogout" in $$props2)
      $$invalidate(6, onSuccessLogout = $$props2.onSuccessLogout);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("profileLoader" in $$props2)
      $$invalidate(7, profileLoader = $$props2.profileLoader);
    if ("hideProfileSection" in $$props2)
      $$invalidate(1, hideProfileSection2 = $$props2.hideProfileSection);
  };
  return [
    displayProfile,
    hideProfileSection2,
    logout,
    showPlansNavButton,
    showTeamNavButton,
    member,
    onSuccessLogout,
    profileLoader,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var ProfileModalNav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$w, create_fragment$X, safe_not_equal, {
      member: 5,
      onSuccessLogout: 6,
      displayProfile: 0,
      profileLoader: 7,
      hideProfileSection: 1
    });
  }
};
function create_fragment$W(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "white");
      attr(path, "d", "M21 21C24.315 21 27 18.315 27 15C27 11.685 24.315 9 21 9C17.685 9 15 11.685 15 15C15 18.315 17.685 21 21 21ZM21 24C16.995 24 9 26.01 9 30V31.5C9 32.325 9.675 33 10.5 33H31.5C32.325 33 33 32.325 33 31.5V30C33 26.01 25.005 24 21 24Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "width", "42");
      attr(svg, "height", "42");
      attr(svg, "viewBox", "0 0 42 42");
      attr(svg, "fill", "none");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ProfileDefaultImage = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$W, safe_not_equal, {});
  }
};
function create_fragment$V(ctx) {
  let svg;
  let g;
  let path0;
  let defs;
  let clipPath;
  let path1;
  return {
    c() {
      svg = svg_element("svg");
      g = svg_element("g");
      path0 = svg_element("path");
      defs = svg_element("defs");
      clipPath = svg_element("clipPath");
      path1 = svg_element("path");
      attr(path0, "fill", "#494949");
      attr(path0, "d", "M6.667 10.667h2.666c.367 0 .667-.3.667-.667V6.667h1.06c.593 0 .893-.72.473-1.14l-3.06-3.06a.664.664 0 0 0-.94 0l-3.06 3.06c-.42.42-.126 1.14.467 1.14H6V10c0 .367.3.667.667.667zM4 12h8c.367 0 .667.3.667.667 0 .367-.3.667-.667.667H4a.669.669 0 0 1-.667-.667c0-.367.3-.667.667-.667z");
      attr(g, "clip-path", "url(#a)");
      attr(path1, "fill", "#fff");
      attr(path1, "d", "M0 0h16v16H0z");
      attr(clipPath, "id", "a");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 16 16");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, g);
      append(g, path0);
      append(svg, defs);
      append(defs, clipPath);
      append(clipPath, path1);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var UploadIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$V, safe_not_equal, {});
  }
};
function get_each_context$b(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  child_ctx[11] = list;
  child_ctx[12] = i;
  return child_ctx;
}
function create_else_block_1$5(ctx) {
  let profiledefaultimage;
  let current;
  profiledefaultimage = new ProfileDefaultImage({});
  return {
    c() {
      create_component(profiledefaultimage.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profiledefaultimage, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(profiledefaultimage.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profiledefaultimage.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profiledefaultimage, detaching);
    }
  };
}
function create_if_block_2$f(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*member*/
      ctx[0].profileImage))
        attr(img, "src", img_src_value);
      attr(img, "alt", "profile image");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*member*/
      1 && !src_url_equal(img.src, img_src_value = /*member*/
      ctx2[0].profileImage)) {
        attr(img, "src", img_src_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_else_block$c(ctx) {
  let t;
  return {
    c() {
      t = text("Replace Image");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_1$k(ctx) {
  let t;
  return {
    c() {
      t = text("Upload Profile Image");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$q(ctx) {
  let div1;
  let div0;
  let label;
  let t0_value = (
    /*customField*/
    ctx[10].label + ""
  );
  let t0;
  let label_for_value;
  let t1;
  let input;
  let input_placeholder_value;
  let input_name_value;
  let t2;
  let mounted;
  let dispose;
  function input_input_handler() {
    ctx[6].call(
      input,
      /*customField*/
      ctx[10]
    );
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(t0_value);
      t1 = space();
      input = element("input");
      t2 = space();
      attr(label, "class", "ms-form__label");
      attr(label, "for", label_for_value = /*customField*/
      ctx[10].key);
      attr(input, "class", "ms-form__input");
      attr(input, "type", "text");
      attr(input, "placeholder", input_placeholder_value = /*customField*/
      ctx[10].label);
      attr(input, "name", input_name_value = /*customField*/
      ctx[10].key);
      attr(div0, "class", "ms-form__group");
      attr(div1, "class", "ms-modal__custom-field-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      append(div0, input);
      set_input_value(
        input,
        /*member*/
        ctx[0].customFields[
          /*customField*/
          ctx[10].key
        ]
      );
      append(div1, t2);
      if (!mounted) {
        dispose = [
          listen(input, "input", input_input_handler),
          listen(
            input,
            "keyup",
            /*checkForChange*/
            ctx[4]
          ),
          listen(
            input,
            "paste",
            /*checkForChange*/
            ctx[4]
          )
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*customFields*/
      2 && t0_value !== (t0_value = /*customField*/
      ctx[10].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*customFields*/
      2 && label_for_value !== (label_for_value = /*customField*/
      ctx[10].key)) {
        attr(label, "for", label_for_value);
      }
      if (dirty & /*customFields*/
      2 && input_placeholder_value !== (input_placeholder_value = /*customField*/
      ctx[10].label)) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty & /*customFields*/
      2 && input_name_value !== (input_name_value = /*customField*/
      ctx[10].key)) {
        attr(input, "name", input_name_value);
      }
      if (dirty & /*member, customFields*/
      3 && input.value !== /*member*/
      ctx[0].customFields[
        /*customField*/
        ctx[10].key
      ]) {
        set_input_value(
          input,
          /*member*/
          ctx[0].customFields[
            /*customField*/
            ctx[10].key
          ]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block$b(ctx) {
  let if_block_anchor;
  let if_block = (
    /*customField*/
    ctx[10].hidden !== true && create_if_block$q(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*customField*/
        ctx2[10].hidden !== true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$q(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment$U(ctx) {
  let div1;
  let h2;
  let t1;
  let div0;
  let button0;
  let t2;
  let t3;
  let div4;
  let div2;
  let current_block_type_index;
  let if_block0;
  let t4;
  let div3;
  let button1;
  let uploadicon;
  let t5;
  let form;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_2$f, create_else_block_1$5];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*member*/
      ctx2[0].profileImage
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  uploadicon = new UploadIcon({});
  function select_block_type_1(ctx2, dirty) {
    if (!/*member*/
    ctx2[0].profileImage)
      return create_if_block_1$k;
    return create_else_block$c;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  let each_value = (
    /*customFields*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
  }
  return {
    c() {
      div1 = element("div");
      h2 = element("h2");
      h2.textContent = "Profile Information";
      t1 = space();
      div0 = element("div");
      button0 = element("button");
      t2 = text("Save");
      t3 = space();
      div4 = element("div");
      div2 = element("div");
      if_block0.c();
      t4 = space();
      div3 = element("div");
      button1 = element("button");
      create_component(uploadicon.$$.fragment);
      if_block1.c();
      t5 = space();
      form = element("form");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(h2, "class", "ms-modal__title ms-modal__title--profile");
      attr(button0, "class", "ms-modal__save-button");
      button0.disabled = /*saveDisabled*/
      ctx[2];
      attr(div0, "class", "ms-modal__action-container");
      attr(div1, "class", "ms-modal__title-container");
      attr(div2, "class", "ms-modal__profile-image");
      attr(button1, "data-cy", "change-profile-image");
      attr(button1, "type", "submit");
      attr(button1, "class", "ms-modal__outline-button");
      attr(button1, "data-image-btn", "");
      attr(div3, "class", "ms-modal__profile-image-button-container");
      attr(div4, "class", "ms-modal__profile-image-container");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, h2);
      append(div1, t1);
      append(div1, div0);
      append(div0, button0);
      append(button0, t2);
      insert(target, t3, anchor);
      insert(target, div4, anchor);
      append(div4, div2);
      if_blocks[current_block_type_index].m(div2, null);
      append(div4, t4);
      append(div4, div3);
      append(div3, button1);
      mount_component(uploadicon, button1, null);
      if_block1.m(button1, null);
      insert(target, t5, anchor);
      insert(target, form, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(form, null);
        }
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*saveProfile*/
            ctx[3]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*saveProfile*/
            ctx[3]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*saveDisabled*/
      4) {
        button0.disabled = /*saveDisabled*/
        ctx2[2];
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div2, null);
      }
      if (current_block_type !== (current_block_type = select_block_type_1(ctx2))) {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(button1, null);
        }
      }
      if (dirty & /*customFields, member, checkForChange*/
      19) {
        each_value = /*customFields*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$b(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$b(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(form, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(uploadicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(uploadicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(div4);
      if_blocks[current_block_type_index].d();
      destroy_component(uploadicon);
      if_block1.d();
      if (detaching)
        detach(t5);
      if (detaching)
        detach(form);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$v($$self, $$props, $$invalidate) {
  let { customFields } = $$props;
  let { member } = $$props;
  let { profileLoader } = $$props;
  const createFileInputElement = () => {
    const fileInputField = document.createElement("input");
    fileInputField.setAttribute("required", "");
    fileInputField.setAttribute("type", "file");
    fileInputField.setAttribute("accept", "image/*");
    fileInputField.setAttribute("profile-image", "true");
    fileInputField.setAttribute("name", "profile-image");
    fileInputField.setAttribute("DATA-name", "File");
    fileInputField.setAttribute("hidden", "");
    fileInputField.setAttribute("tabindex", "-1");
    return fileInputField;
  };
  const initProfileImageButton = (uploadButton) => {
    const fileInputField = createFileInputElement();
    uploadButton.parentNode.insertBefore(fileInputField, uploadButton.nextSibling);
    uploadButton.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      fileInputField.click();
    });
    fileInputField.addEventListener("change", (e) => __async(this, null, function* () {
      e.preventDefault();
      e.stopPropagation();
      const file = e.target.files[0];
      const { size: fileSize, type: fileType } = file;
      if (fileType.includes("image") === false)
        return window.$memberstackDom._showMessage("File is not an image.", true);
      if (fileSize > 4e6)
        return window.$memberstackDom._showMessage("Image must be less than 2MB.", true);
      try {
        $$invalidate(5, profileLoader = true);
        const updateMemberProfileImageFunction = window.$memberstackDom.updateMemberProfileImage;
        const { data, _internalUseOnly: { message } } = yield updateMemberProfileImageFunction({ profileImage: file });
        $$invalidate(0, member.profileImage = data.profileImage, member);
        if (message) {
          window.$memberstackDom._showMessage(message, false);
        }
      } catch (err) {
        console.log(err);
        if (err.message) {
          window.$memberstackDom._showMessage(err.message, true);
        }
      }
      $$invalidate(5, profileLoader = false);
    }));
  };
  onMount(() => {
    const upload = document.querySelector("[data-image-btn]");
    initProfileImageButton(upload);
  });
  let initialCustomFields = JSON.parse(JSON.stringify(member.customFields));
  let saveDisabled = true;
  function saveProfile(e) {
    return __async(this, null, function* () {
      $$invalidate(5, profileLoader = true);
      try {
        const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.updateMember({ customFields: member.customFields });
        $$invalidate(5, profileLoader = false);
        $$invalidate(2, saveDisabled = true);
        initialCustomFields = JSON.parse(JSON.stringify(member.customFields));
        window.$memberstackDom._showMessage(msg, false);
      } catch (err) {
        $$invalidate(5, profileLoader = false);
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function checkForChange(e) {
    if (e.target.value !== initialCustomFields[e.target.name]) {
      $$invalidate(2, saveDisabled = false);
      return;
    }
    $$invalidate(2, saveDisabled = true);
  }
  function input_input_handler(customField) {
    member.customFields[customField.key] = this.value;
    $$invalidate(0, member);
  }
  $$self.$$set = ($$props2) => {
    if ("customFields" in $$props2)
      $$invalidate(1, customFields = $$props2.customFields);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
    if ("profileLoader" in $$props2)
      $$invalidate(5, profileLoader = $$props2.profileLoader);
  };
  return [
    member,
    customFields,
    saveDisabled,
    saveProfile,
    checkForChange,
    profileLoader,
    input_input_handler
  ];
}
var ProfileInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$v, create_fragment$U, safe_not_equal, {
      customFields: 1,
      member: 0,
      profileLoader: 5
    });
  }
};
function create_fragment$T(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m14 7h-1v-2c0-2.76-2.24-5-5-5s-5 2.24-5 5v2h-1c-1.1 0-2 0.9-2 2v10c0 1.1 0.9 2 2 2h12c1.1 0 2-0.9 2-2v-10c0-1.1-0.9-2-2-2zm-9-2c0-1.66 1.34-3 3-3s3 1.34 3 3v2h-6v-2zm9 14h-12v-10h12v10zm-6-3c1.1 0 2-0.9 2-2s-0.9-2-2-2-2 0.9-2 2 0.9 2 2 2z");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "0 0 16 21");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var PasswordLockIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$T, safe_not_equal, {});
  }
};
function get_each_context$a(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_else_block_1$4(ctx) {
  let t;
  return {
    c() {
      t = text("Change Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_2$e(ctx) {
  let t;
  return {
    c() {
      t = text("Set Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$p(ctx) {
  let p;
  let t1;
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_value = (
    /*$app*/
    ctx[4].authProviders
  );
  const get_key = (ctx2) => (
    /*provider*/
    ctx2[16].provider
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context$a(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block$a(key, child_ctx));
  }
  return {
    c() {
      p = element("p");
      p.textContent = "Connect Additional Accounts";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(p, "class", "ms-form__label");
      attr(div, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, p, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*disconnectProvider, $app, member, connectAdditionalProvider*/
      210) {
        each_value = /*$app*/
        ctx2[4].authProviders;
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, destroy_block, create_each_block$a, null, get_each_context$a);
      }
    },
    d(detaching) {
      if (detaching)
        detach(p);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function create_else_block$b(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[14](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Connect with ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$j(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[13](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Disconnect ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      set_style(button, "background-color", "#F6F6F6");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$a(key_1, ctx) {
  let div;
  let show_if;
  let t;
  function func2(...args) {
    return (
      /*func*/
      ctx[9](
        /*provider*/
        ctx[16],
        ...args
      )
    );
  }
  function select_block_type_1(ctx2, dirty) {
    if (dirty & /*member, $app*/
    18)
      show_if = null;
    if (show_if == null)
      show_if = !!/*member*/
      ctx2[1].auth.providers.some(func2);
    if (show_if)
      return create_if_block_1$j;
    return create_else_block$b;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      if_block.c();
      t = space();
      attr(div, "class", "ms-modal__social-buttons");
      this.first = div;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
      append(div, t);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div, t);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
    }
  };
}
function create_fragment$S(ctx) {
  let div1;
  let h2;
  let t1;
  let div0;
  let button0;
  let t2;
  let button0_disabled_value;
  let t3;
  let form;
  let emailinput;
  let updating_emailInputValid;
  let updating_emailValue;
  let t4;
  let div2;
  let label;
  let t6;
  let button1;
  let passwordlockicon;
  let t7;
  let t8;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  function emailinput_emailInputValid_binding(value) {
    ctx[10](value);
  }
  function emailinput_emailValue_binding(value) {
    ctx[11](value);
  }
  let emailinput_props = {};
  if (
    /*emailInputValid*/
    ctx[3] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[3];
  }
  if (
    /*emailValue*/
    ctx[2] !== void 0
  ) {
    emailinput_props.emailValue = /*emailValue*/
    ctx[2];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  binding_callbacks.push(() => bind(emailinput, "emailValue", emailinput_emailValue_binding));
  passwordlockicon = new PasswordLockIcon({});
  function select_block_type(ctx2, dirty) {
    if (!/*member*/
    ctx2[1].auth.hasPassword)
      return create_if_block_2$e;
    return create_else_block_1$4;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*$app*/
    ctx[4].authProviders.length > 0 && create_if_block$p(ctx)
  );
  return {
    c() {
      div1 = element("div");
      h2 = element("h2");
      h2.textContent = "Security";
      t1 = space();
      div0 = element("div");
      button0 = element("button");
      t2 = text("Save");
      t3 = space();
      form = element("form");
      create_component(emailinput.$$.fragment);
      t4 = space();
      div2 = element("div");
      label = element("label");
      label.textContent = "Password";
      t6 = space();
      button1 = element("button");
      create_component(passwordlockicon.$$.fragment);
      t7 = space();
      if_block0.c();
      t8 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(h2, "class", "ms-modal__title ms-modal__title--profile");
      attr(button0, "class", "ms-modal__save-button");
      button0.disabled = button0_disabled_value = !/*emailInputValid*/
      ctx[3];
      attr(div0, "class", "ms-modal__action-container");
      attr(div1, "class", "ms-modal__title-container");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "setPassword");
      attr(button1, "data-cy", "change-password-btn");
      attr(button1, "class", "ms-modal__outline-button");
      attr(button1, "name", "setPassword");
      attr(div2, "class", "ms-form__group");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, h2);
      append(div1, t1);
      append(div1, div0);
      append(div0, button0);
      append(button0, t2);
      insert(target, t3, anchor);
      insert(target, form, anchor);
      mount_component(emailinput, form, null);
      insert(target, t4, anchor);
      insert(target, div2, anchor);
      append(div2, label);
      append(div2, t6);
      append(div2, button1);
      mount_component(passwordlockicon, button1, null);
      append(button1, t7);
      if_block0.m(button1, null);
      insert(target, t8, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*submitEmailChange*/
            ctx[5]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitEmailChange*/
            ctx[5]
          ))),
          listen(
            button1,
            "click",
            /*click_handler*/
            ctx[12]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*emailInputValid*/
      8 && button0_disabled_value !== (button0_disabled_value = !/*emailInputValid*/
      ctx2[3])) {
        button0.disabled = button0_disabled_value;
      }
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      8) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[3];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      if (!updating_emailValue && dirty & /*emailValue*/
      4) {
        updating_emailValue = true;
        emailinput_changes.emailValue = /*emailValue*/
        ctx2[2];
        add_flush_callback(() => updating_emailValue = false);
      }
      emailinput.$set(emailinput_changes);
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(button1, null);
        }
      }
      if (
        /*$app*/
        ctx2[4].authProviders.length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$p(ctx2);
          if_block1.c();
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(emailinput.$$.fragment, local);
      transition_in(passwordlockicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailinput.$$.fragment, local);
      transition_out(passwordlockicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(form);
      destroy_component(emailinput);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(div2);
      destroy_component(passwordlockicon);
      if_block0.d();
      if (detaching)
        detach(t8);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$u($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(4, $app = $$value));
  let { displayProfile } = $$props;
  let { member } = $$props;
  let { emailValue } = $$props;
  let { profileLoader } = $$props;
  $app.authProviders.sort((a, b) => {
    if (isConnected(a) === isConnected(b)) {
      return a.order - b.order;
    }
    return isConnected(a) ? -1 : 1;
  });
  let emailInputValid = false;
  function submitEmailChange(e) {
    return __async(this, null, function* () {
      if (!emailInputValid || !emailValue)
        return;
      $$invalidate(8, profileLoader = true);
      try {
        const { _internalUseOnly: { message } } = yield window.$memberstackDom.updateMemberAuth({ email: emailValue });
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function disconnectProvider(provider) {
    return __async(this, null, function* () {
      $$invalidate(8, profileLoader = true);
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.disconnectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function connectAdditionalProvider(provider) {
    return __async(this, null, function* () {
      console.log("connect", provider);
      try {
        const { data } = yield window.$memberstackDom.connectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(data.message, false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function isConnected(provider) {
    return member.auth.providers.some((prv) => prv.provider === provider.provider);
  }
  const func2 = (provider, prv) => prv.provider === provider.provider;
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(3, emailInputValid);
  }
  function emailinput_emailValue_binding(value) {
    emailValue = value;
    $$invalidate(2, emailValue);
  }
  const click_handler = () => $$invalidate(0, displayProfile = "changePassword");
  const click_handler_1 = (provider) => disconnectProvider(provider.provider);
  const click_handler_2 = (provider) => connectAdditionalProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("emailValue" in $$props2)
      $$invalidate(2, emailValue = $$props2.emailValue);
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
  };
  return [
    displayProfile,
    member,
    emailValue,
    emailInputValid,
    $app,
    submitEmailChange,
    disconnectProvider,
    connectAdditionalProvider,
    profileLoader,
    func2,
    emailinput_emailInputValid_binding,
    emailinput_emailValue_binding,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
var SecurityInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$u, create_fragment$S, safe_not_equal, {
      displayProfile: 0,
      member: 1,
      emailValue: 2,
      profileLoader: 8
    });
  }
};
function create_else_block$a(ctx) {
  let t;
  return {
    c() {
      t = text("Change Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_1$i(ctx) {
  let t;
  return {
    c() {
      t = text("Set Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$o(ctx) {
  let passwordinput;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let current;
  function passwordinput_passwordValue_binding(value) {
    ctx[11](value);
  }
  function passwordinput_passwordInputValid_binding(value) {
    ctx[12](value);
  }
  let passwordinput_props = {
    passwordLabel: "Current Password",
    passwordPlaceholder: "Enter current password"
  };
  if (
    /*currentPasswordValue*/
    ctx[2] !== void 0
  ) {
    passwordinput_props.passwordValue = /*currentPasswordValue*/
    ctx[2];
  }
  if (
    /*currentPasswordValid*/
    ctx[5] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*currentPasswordValid*/
    ctx[5];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordValue", passwordinput_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  return {
    c() {
      create_component(passwordinput.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordValue && dirty & /*currentPasswordValue*/
      4) {
        updating_passwordValue = true;
        passwordinput_changes.passwordValue = /*currentPasswordValue*/
        ctx2[2];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*currentPasswordValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*currentPasswordValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
    }
  };
}
function create_fragment$R(ctx) {
  let div3;
  let div1;
  let div0;
  let button0;
  let backicon;
  let t0;
  let h2;
  let t1;
  let div2;
  let button1;
  let t2;
  let button1_disabled_value;
  let t3;
  let form;
  let t4;
  let passwordinput0;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let t5;
  let passwordinput1;
  let updating_passwordValue_1;
  let updating_passwordInputValid_1;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  function select_block_type(ctx2, dirty) {
    if (!/*member*/
    ctx2[1].auth.hasPassword)
      return create_if_block_1$i;
    return create_else_block$a;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*member*/
    ctx[1].auth.hasPassword && create_if_block$o(ctx)
  );
  function passwordinput0_passwordValue_binding(value) {
    ctx[13](value);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    ctx[14](value);
  }
  let passwordinput0_props = {
    passwordLabel: "New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*newPasswordValue*/
    ctx[3] !== void 0
  ) {
    passwordinput0_props.passwordValue = /*newPasswordValue*/
    ctx[3];
  }
  if (
    /*newPasswordValid*/
    ctx[6] !== void 0
  ) {
    passwordinput0_props.passwordInputValid = /*newPasswordValid*/
    ctx[6];
  }
  passwordinput0 = new PasswordInput({ props: passwordinput0_props });
  binding_callbacks.push(() => bind(passwordinput0, "passwordValue", passwordinput0_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput0, "passwordInputValid", passwordinput0_passwordInputValid_binding));
  function passwordinput1_passwordValue_binding(value) {
    ctx[15](value);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    ctx[16](value);
  }
  let passwordinput1_props = {
    passwordLabel: "Confirm New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*confirmPasswordValue*/
    ctx[4] !== void 0
  ) {
    passwordinput1_props.passwordValue = /*confirmPasswordValue*/
    ctx[4];
  }
  if (
    /*confirmPasswordValid*/
    ctx[7] !== void 0
  ) {
    passwordinput1_props.passwordInputValid = /*confirmPasswordValid*/
    ctx[7];
  }
  passwordinput1 = new PasswordInput({ props: passwordinput1_props });
  binding_callbacks.push(() => bind(passwordinput1, "passwordValue", passwordinput1_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput1, "passwordInputValid", passwordinput1_passwordInputValid_binding));
  return {
    c() {
      div3 = element("div");
      div1 = element("div");
      div0 = element("div");
      button0 = element("button");
      create_component(backicon.$$.fragment);
      t0 = space();
      h2 = element("h2");
      if_block0.c();
      t1 = space();
      div2 = element("div");
      button1 = element("button");
      t2 = text("Save");
      t3 = space();
      form = element("form");
      if (if_block1)
        if_block1.c();
      t4 = space();
      create_component(passwordinput0.$$.fragment);
      t5 = space();
      create_component(passwordinput1.$$.fragment);
      attr(div0, "class", "ms-modal__profile-back");
      attr(h2, "class", "ms-modal__title ms-modal__title--profile");
      attr(div1, "class", "ms-modal__title-group");
      attr(button1, "class", "ms-modal__save-button");
      button1.disabled = button1_disabled_value = /*member*/
      ctx[1].auth.hasPassword && !/*currentPasswordValid*/
      ctx[5] || !/*newPasswordValid*/
      ctx[6] || !/*confirmPasswordValid*/
      ctx[7];
      attr(div2, "class", "ms-modal__action-container");
      attr(div3, "class", "ms-modal__title-container");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div1);
      append(div1, div0);
      append(div0, button0);
      mount_component(backicon, button0, null);
      append(div1, t0);
      append(div1, h2);
      if_block0.m(h2, null);
      append(div3, t1);
      append(div3, div2);
      append(div2, button1);
      append(button1, t2);
      insert(target, t3, anchor);
      insert(target, form, anchor);
      if (if_block1)
        if_block1.m(form, null);
      append(form, t4);
      mount_component(passwordinput0, form, null);
      append(form, t5);
      mount_component(passwordinput1, form, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[10]
          ),
          listen(
            button1,
            "click",
            /*submitPasswordChange*/
            ctx[8]
          ),
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordChange*/
            ctx[8]
          )))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(h2, null);
        }
      }
      if (!current || dirty & /*member, currentPasswordValid, newPasswordValid, confirmPasswordValid*/
      226 && button1_disabled_value !== (button1_disabled_value = /*member*/
      ctx2[1].auth.hasPassword && !/*currentPasswordValid*/
      ctx2[5] || !/*newPasswordValid*/
      ctx2[6] || !/*confirmPasswordValid*/
      ctx2[7])) {
        button1.disabled = button1_disabled_value;
      }
      if (
        /*member*/
        ctx2[1].auth.hasPassword
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*member*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$o(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(form, t4);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const passwordinput0_changes = {};
      if (!updating_passwordValue && dirty & /*newPasswordValue*/
      8) {
        updating_passwordValue = true;
        passwordinput0_changes.passwordValue = /*newPasswordValue*/
        ctx2[3];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*newPasswordValid*/
      64) {
        updating_passwordInputValid = true;
        passwordinput0_changes.passwordInputValid = /*newPasswordValid*/
        ctx2[6];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput0.$set(passwordinput0_changes);
      const passwordinput1_changes = {};
      if (!updating_passwordValue_1 && dirty & /*confirmPasswordValue*/
      16) {
        updating_passwordValue_1 = true;
        passwordinput1_changes.passwordValue = /*confirmPasswordValue*/
        ctx2[4];
        add_flush_callback(() => updating_passwordValue_1 = false);
      }
      if (!updating_passwordInputValid_1 && dirty & /*confirmPasswordValid*/
      128) {
        updating_passwordInputValid_1 = true;
        passwordinput1_changes.passwordInputValid = /*confirmPasswordValid*/
        ctx2[7];
        add_flush_callback(() => updating_passwordInputValid_1 = false);
      }
      passwordinput1.$set(passwordinput1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      transition_in(if_block1);
      transition_in(passwordinput0.$$.fragment, local);
      transition_in(passwordinput1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      transition_out(if_block1);
      transition_out(passwordinput0.$$.fragment, local);
      transition_out(passwordinput1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(backicon);
      if_block0.d();
      if (detaching)
        detach(t3);
      if (detaching)
        detach(form);
      if (if_block1)
        if_block1.d();
      destroy_component(passwordinput0);
      destroy_component(passwordinput1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$t($$self, $$props, $$invalidate) {
  let { displayProfile } = $$props;
  let { profileLoader } = $$props;
  let { member } = $$props;
  let currentPasswordValue = "";
  let newPasswordValue = "";
  let confirmPasswordValue = "";
  let currentPasswordValid = false;
  let newPasswordValid = false;
  let confirmPasswordValid = false;
  function submitPasswordChange(e) {
    return __async(this, null, function* () {
      if (member.auth.hasPassword && !currentPasswordValid && !newPasswordValid && !confirmPasswordValid)
        return;
      if (!member.auth.hasPassword && !newPasswordValid && !confirmPasswordValid)
        return;
      $$invalidate(9, profileLoader = true);
      try {
        let message;
        if (member.auth.hasPassword) {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.updateMemberAuth({
            oldPassword: currentPasswordValue,
            newPassword: newPasswordValue
          });
          message = msg;
        } else {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.setPassword({ password: newPasswordValue });
          $$invalidate(1, member.auth.hasPassword = true, member);
          message = msg;
        }
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(2, currentPasswordValue = "");
        $$invalidate(3, newPasswordValue = "");
        $$invalidate(4, confirmPasswordValue = "");
        $$invalidate(9, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(9, profileLoader = false);
      }
    });
  }
  const click_handler = () => $$invalidate(0, displayProfile = "security");
  function passwordinput_passwordValue_binding(value) {
    currentPasswordValue = value;
    $$invalidate(2, currentPasswordValue);
  }
  function passwordinput_passwordInputValid_binding(value) {
    currentPasswordValid = value;
    $$invalidate(5, currentPasswordValid);
  }
  function passwordinput0_passwordValue_binding(value) {
    newPasswordValue = value;
    $$invalidate(3, newPasswordValue);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    newPasswordValid = value;
    $$invalidate(6, newPasswordValid);
  }
  function passwordinput1_passwordValue_binding(value) {
    confirmPasswordValue = value;
    $$invalidate(4, confirmPasswordValue);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    confirmPasswordValid = value;
    $$invalidate(7, confirmPasswordValid);
  }
  $$self.$$set = ($$props2) => {
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("profileLoader" in $$props2)
      $$invalidate(9, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
  };
  return [
    displayProfile,
    member,
    currentPasswordValue,
    newPasswordValue,
    confirmPasswordValue,
    currentPasswordValid,
    newPasswordValid,
    confirmPasswordValid,
    submitPasswordChange,
    profileLoader,
    click_handler,
    passwordinput_passwordValue_binding,
    passwordinput_passwordInputValid_binding,
    passwordinput0_passwordValue_binding,
    passwordinput0_passwordInputValid_binding,
    passwordinput1_passwordValue_binding,
    passwordinput1_passwordInputValid_binding
  ];
}
var PasswordInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$t, create_fragment$R, safe_not_equal, {
      displayProfile: 0,
      profileLoader: 9,
      member: 1
    });
  }
};
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: (t) => `opacity: ${t * o}`
  };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = "y" } = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const primary_property = axis === "y" ? "height" : "width";
  const primary_property_value = parseFloat(style[primary_property]);
  const secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"];
  const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
  const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
  const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
  const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
  const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
  const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
  const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
  return {
    delay,
    duration,
    easing,
    css: (t) => `overflow: hidden;opacity: ${Math.min(t * 20, 1) * opacity};${primary_property}: ${t * primary_property_value}px;padding-${secondary_properties[0]}: ${t * padding_start_value}px;padding-${secondary_properties[1]}: ${t * padding_end_value}px;margin-${secondary_properties[0]}: ${t * margin_start_value}px;margin-${secondary_properties[1]}: ${t * margin_end_value}px;border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
  };
}
function create_fragment$Q(ctx) {
  let div;
  let loadingicon;
  let div_transition;
  let current;
  loadingicon = new LoadingIcon({});
  return {
    c() {
      div = element("div");
      create_component(loadingicon.$$.fragment);
      attr(div, "class", "ms__profile__loader");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(loadingicon, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loadingicon.$$.fragment, local);
      add_render_callback(() => {
        if (!current)
          return;
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, fade, {}, true);
        div_transition.run(1);
      });
      current = true;
    },
    o(local) {
      transition_out(loadingicon.$$.fragment, local);
      if (!div_transition)
        div_transition = create_bidirectional_transition(div, fade, {}, false);
      div_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(loadingicon);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
var ProfileLoader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$Q, safe_not_equal, {});
  }
};
function create_fragment$P(ctx) {
  let button;
  let switch_instance0;
  let t0;
  let t1;
  let t2;
  let switch_instance1;
  let button_class_value;
  let current;
  let mounted;
  let dispose;
  var switch_value = (
    /*buttonLeftIcon*/
    ctx[2]
  );
  function switch_props(ctx2) {
    return {};
  }
  if (switch_value) {
    switch_instance0 = construct_svelte_component(switch_value, switch_props());
  }
  var switch_value_1 = (
    /*buttonRightIcon*/
    ctx[1]
  );
  function switch_props_1(ctx2) {
    return {};
  }
  if (switch_value_1) {
    switch_instance1 = construct_svelte_component(switch_value_1, switch_props_1());
  }
  return {
    c() {
      button = element("button");
      if (switch_instance0)
        create_component(switch_instance0.$$.fragment);
      t0 = space();
      t1 = text(
        /*buttonText*/
        ctx[0]
      );
      t2 = space();
      if (switch_instance1)
        create_component(switch_instance1.$$.fragment);
      attr(button, "class", button_class_value = "ms-modal__regular-button " + /*$$restProps*/
      (ctx[5].class || ""));
      set_style(
        button,
        "background",
        /*buttonColor*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (switch_instance0)
        mount_component(switch_instance0, button, null);
      append(button, t0);
      append(button, t1);
      append(button, t2);
      if (switch_instance1)
        mount_component(switch_instance1, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[3]
          ))
            ctx[3].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*buttonLeftIcon*/
      4 && switch_value !== (switch_value = /*buttonLeftIcon*/
      ctx[2])) {
        if (switch_instance0) {
          group_outros();
          const old_component = switch_instance0;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance0 = construct_svelte_component(switch_value, switch_props());
          create_component(switch_instance0.$$.fragment);
          transition_in(switch_instance0.$$.fragment, 1);
          mount_component(switch_instance0, button, t0);
        } else {
          switch_instance0 = null;
        }
      }
      if (!current || dirty & /*buttonText*/
      1)
        set_data(
          t1,
          /*buttonText*/
          ctx[0]
        );
      if (dirty & /*buttonRightIcon*/
      2 && switch_value_1 !== (switch_value_1 = /*buttonRightIcon*/
      ctx[1])) {
        if (switch_instance1) {
          group_outros();
          const old_component = switch_instance1;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value_1) {
          switch_instance1 = construct_svelte_component(switch_value_1, switch_props_1());
          create_component(switch_instance1.$$.fragment);
          transition_in(switch_instance1.$$.fragment, 1);
          mount_component(switch_instance1, button, null);
        } else {
          switch_instance1 = null;
        }
      }
      if (!current || dirty & /*$$restProps*/
      32 && button_class_value !== (button_class_value = "ms-modal__regular-button " + /*$$restProps*/
      (ctx[5].class || ""))) {
        attr(button, "class", button_class_value);
      }
      if (!current || dirty & /*buttonColor*/
      16) {
        set_style(
          button,
          "background",
          /*buttonColor*/
          ctx[4]
        );
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance0)
        transition_in(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_in(switch_instance1.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance0)
        transition_out(switch_instance0.$$.fragment, local);
      if (switch_instance1)
        transition_out(switch_instance1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      if (switch_instance0)
        destroy_component(switch_instance0);
      if (switch_instance1)
        destroy_component(switch_instance1);
      mounted = false;
      dispose();
    }
  };
}
function instance$s($$self, $$props, $$invalidate) {
  const omit_props_names = ["buttonText", "buttonRightIcon", "buttonLeftIcon", "onClick"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(6, $app = $$value));
  let { buttonText = "Submit" } = $$props;
  let { buttonRightIcon = null } = $$props;
  let { buttonLeftIcon = null } = $$props;
  let { onClick = () => {
  } } = $$props;
  let buttonColor = "rgb(41, 98, 255)";
  if ($app.branding.colors.lightMode.primaryButton) {
    buttonColor = $app.branding.colors.lightMode.primaryButton;
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("buttonText" in $$new_props)
      $$invalidate(0, buttonText = $$new_props.buttonText);
    if ("buttonRightIcon" in $$new_props)
      $$invalidate(1, buttonRightIcon = $$new_props.buttonRightIcon);
    if ("buttonLeftIcon" in $$new_props)
      $$invalidate(2, buttonLeftIcon = $$new_props.buttonLeftIcon);
    if ("onClick" in $$new_props)
      $$invalidate(3, onClick = $$new_props.onClick);
  };
  return [buttonText, buttonRightIcon, buttonLeftIcon, onClick, buttonColor, $$restProps];
}
var RegularButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$s, create_fragment$P, safe_not_equal, {
      buttonText: 0,
      buttonRightIcon: 1,
      buttonLeftIcon: 2,
      onClick: 3
    });
  }
};
function create_fragment$O(ctx) {
  let button;
  let t;
  let button_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      t = text(
        /*buttonText*/
        ctx[0]
      );
      attr(button, "class", button_class_value = "ms-modal__text-button " + /*$$restProps*/
      ctx[3].class);
      set_style(
        button,
        "color",
        /*buttonColor*/
        ctx[2]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, t);
      if (!mounted) {
        dispose = listen(button, "click", function() {
          if (is_function(
            /*onClick*/
            ctx[1]
          ))
            ctx[1].apply(this, arguments);
        });
        mounted = true;
      }
    },
    p(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (dirty & /*buttonText*/
      1)
        set_data(
          t,
          /*buttonText*/
          ctx[0]
        );
      if (dirty & /*$$restProps*/
      8 && button_class_value !== (button_class_value = "ms-modal__text-button " + /*$$restProps*/
      ctx[3].class)) {
        attr(button, "class", button_class_value);
      }
      if (dirty & /*buttonColor*/
      4) {
        set_style(
          button,
          "color",
          /*buttonColor*/
          ctx[2]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function instance$r($$self, $$props, $$invalidate) {
  const omit_props_names = ["buttonText", "onClick"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(4, $app = $$value));
  let { buttonText = "Submit" } = $$props;
  let { onClick = () => {
  } } = $$props;
  let buttonColor = "rgb(41, 98, 255)";
  if ($app.branding.colors.lightMode.primaryButton) {
    buttonColor = $app.branding.colors.lightMode.primaryButton;
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("buttonText" in $$new_props)
      $$invalidate(0, buttonText = $$new_props.buttonText);
    if ("onClick" in $$new_props)
      $$invalidate(1, onClick = $$new_props.onClick);
  };
  return [buttonText, onClick, buttonColor, $$restProps];
}
var TextButton = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$r, create_fragment$O, safe_not_equal, { buttonText: 0, onClick: 1 });
  }
};
function get_each_context$9(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  child_ctx[13] = i;
  return child_ctx;
}
function get_each_context_1$4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  return child_ctx;
}
function create_if_block_3$9(ctx) {
  let div;
  let regularbutton;
  let current;
  regularbutton = new RegularButton({
    props: {
      onClick: (
        /*launchPortal*/
        ctx[4]
      ),
      class: "ms-modal__regular-button--margin-right ms-modal__regular-button--left-icon",
      buttonText: "Manage Subscriptions",
      buttonLeftIcon: LinkOutIcon
    }
  });
  return {
    c() {
      div = element("div");
      create_component(regularbutton.$$.fragment);
      set_style(div, "display", "flex");
      set_style(div, "flex-wrap", "wrap");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(regularbutton, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(regularbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(regularbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(regularbutton);
    }
  };
}
function create_if_block_2$d(ctx) {
  let h3;
  let t1;
  let each_1_anchor;
  let current;
  let each_value_1 = (
    /*joinedTeams*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      h3 = element("h3");
      h3.textContent = "Team Plans";
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      insert(target, t1, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*removeMemberFromTeam, joinedTeams, member*/
      67) {
        each_value_1 = /*joinedTeams*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1$4(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_1$4(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(h3);
      if (detaching)
        detach(t1);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block_1$4(ctx) {
  let div1;
  let div0;
  let b;
  let t0_value = (
    /*team*/
    ctx[14].planName + ""
  );
  let t0;
  let t1;
  let textbutton;
  let t2;
  let current;
  function func2() {
    return (
      /*func*/
      ctx[8](
        /*team*/
        ctx[14]
      )
    );
  }
  textbutton = new TextButton({
    props: { buttonText: "Leave Team", onClick: func2 }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      b = element("b");
      t0 = text(t0_value);
      t1 = space();
      create_component(textbutton.$$.fragment);
      t2 = space();
      attr(div1, "class", "ms-modal__card");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, b);
      append(b, t0);
      append(div1, t1);
      mount_component(textbutton, div1, null);
      append(div1, t2);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*joinedTeams*/
      2) && t0_value !== (t0_value = /*team*/
      ctx[14].planName + ""))
        set_data(t0, t0_value);
      const textbutton_changes = {};
      if (dirty & /*joinedTeams, member*/
      3)
        textbutton_changes.onClick = func2;
      textbutton.$set(textbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(textbutton);
    }
  };
}
function create_if_block_1$h(ctx) {
  let h3;
  let t1;
  let each_1_anchor;
  let current;
  let each_value = (
    /*freePlanConnections*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      h3 = element("h3");
      h3.textContent = "Free Plans";
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      insert(target, t1, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*removeFreePlan, freePlanConnections, $app*/
      44) {
        each_value = /*freePlanConnections*/
        ctx2[2];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$9(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$9(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(h3);
      if (detaching)
        detach(t1);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block$9(ctx) {
  let div1;
  let div0;
  let b;
  let t0_value = (
    /*$app*/
    ctx[3].plans.find(func_12).name + ""
  );
  let t0;
  let t1;
  let textbutton;
  let t2;
  let current;
  function func_12(...args) {
    return (
      /*func_1*/
      ctx[9](
        /*memberPlan*/
        ctx[11],
        ...args
      )
    );
  }
  function func_22() {
    return (
      /*func_2*/
      ctx[10](
        /*memberPlan*/
        ctx[11]
      )
    );
  }
  textbutton = new TextButton({
    props: { buttonText: "Remove", onClick: func_22 }
  });
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      b = element("b");
      t0 = text(t0_value);
      t1 = space();
      create_component(textbutton.$$.fragment);
      t2 = space();
      attr(div1, "class", "ms-modal__card");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, b);
      append(b, t0);
      append(div1, t1);
      mount_component(textbutton, div1, null);
      append(div1, t2);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty & /*$app, freePlanConnections*/
      12) && t0_value !== (t0_value = /*$app*/
      ctx[3].plans.find(func_12).name + ""))
        set_data(t0, t0_value);
      const textbutton_changes = {};
      if (dirty & /*freePlanConnections*/
      4)
        textbutton_changes.onClick = func_22;
      textbutton.$set(textbutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(textbutton);
    }
  };
}
function create_if_block$n(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "You currently have free no plans.";
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment$N(ctx) {
  let div;
  let t1;
  let t2;
  let t3;
  let t4;
  let if_block3_anchor;
  let current;
  let if_block0 = (
    /*member*/
    ctx[0].stripeCustomerId && create_if_block_3$9(ctx)
  );
  let if_block1 = (
    /*joinedTeams*/
    ctx[1].length > 0 && create_if_block_2$d(ctx)
  );
  let if_block2 = (
    /*freePlanConnections*/
    ctx[2].length > 0 && create_if_block_1$h(ctx)
  );
  let if_block3 = !/*member*/
  ctx[0].stripeCustomerId && /*freePlanConnections*/
  ctx[2].length === 0 && create_if_block$n();
  return {
    c() {
      div = element("div");
      div.innerHTML = `<h2 class="ms-modal__title ms-modal__title--profile">Plans</h2>`;
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if (if_block2)
        if_block2.c();
      t4 = space();
      if (if_block3)
        if_block3.c();
      if_block3_anchor = empty();
      attr(div, "class", "ms-modal__title-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t1, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t3, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t4, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, if_block3_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*member*/
        ctx2[0].stripeCustomerId
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*member*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_3$9(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t2.parentNode, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*joinedTeams*/
        ctx2[1].length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*joinedTeams*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_2$d(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t3.parentNode, t3);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*freePlanConnections*/
        ctx2[2].length > 0
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*freePlanConnections*/
          4) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_1$h(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t4.parentNode, t4);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!/*member*/
      ctx2[0].stripeCustomerId && /*freePlanConnections*/
      ctx2[2].length === 0) {
        if (if_block3)
          ;
        else {
          if_block3 = create_if_block$n();
          if_block3.c();
          if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching)
        detach(t1);
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t2);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t3);
      if (if_block2)
        if_block2.d(detaching);
      if (detaching)
        detach(t4);
      if (if_block3)
        if_block3.d(detaching);
      if (detaching)
        detach(if_block3_anchor);
    }
  };
}
function instance$q($$self, $$props, $$invalidate) {
  let freePlanConnections;
  let joinedTeams;
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(3, $app = $$value));
  let { profileLoader } = $$props;
  let { member } = $$props;
  function launchPortal(e) {
    return __async(this, null, function* () {
      $$invalidate(7, profileLoader = true);
      yield window.$memberstackDom.launchStripeCustomerPortal({ priceIds: [], autoRedirect: true });
    });
  }
  function removeFreePlan(planId) {
    return __async(this, null, function* () {
      $$invalidate(7, profileLoader = true);
      try {
        yield window.$memberstackDom.removePlan({ planId });
        $$invalidate(0, member.planConnections = member.planConnections.filter((plan) => plan.planId !== planId), member);
      } catch (err) {
        console.log(err);
        window.$memberstackDom._showMessage(err.message, true);
      } finally {
        $$invalidate(7, profileLoader = false);
      }
    });
  }
  function removeMemberFromTeam(teamId, memberId) {
    return __async(this, null, function* () {
      try {
        yield window.$memberstackDom.removeMemberFromTeam({ teamId, memberId });
        $$invalidate(0, member.teams.joinedTeams = member.teams.joinedTeams.filter((t) => t.teamId !== teamId), member);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  const func2 = (team) => removeMemberFromTeam(team.teamId, member.id);
  const func_12 = (memberPlan, plan) => plan.id === memberPlan.planId;
  const func_22 = (memberPlan) => removeFreePlan(memberPlan.planId);
  $$self.$$set = ($$props2) => {
    if ("profileLoader" in $$props2)
      $$invalidate(7, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
  };
  $$self.$$.update = () => {
    var _a;
    if ($$self.$$.dirty & /*member*/
    1) {
      $$invalidate(2, freePlanConnections = member.planConnections.filter((plan) => plan.type === "FREE"));
    }
    if ($$self.$$.dirty & /*member*/
    1) {
      $$invalidate(1, joinedTeams = (_a = member.teams) == null ? void 0 : _a.joinedTeams);
    }
  };
  return [
    member,
    joinedTeams,
    freePlanConnections,
    $app,
    launchPortal,
    removeFreePlan,
    removeMemberFromTeam,
    profileLoader,
    func2,
    func_12,
    func_22
  ];
}
var PlansInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$q, create_fragment$N, safe_not_equal, { profileLoader: 7, member: 0 });
  }
};
function add_css$k(target) {
  append_styles(target, "svelte-c6ihgv", "svg.svelte-c6ihgv{fill:currentColor}");
}
function create_fragment$M(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M226.783-133.782q-38.363 0-65.682-27.319-27.319-27.319-27.319-65.682v-506.434q0-38.363 27.319-65.682 27.319-27.319 65.682-27.319h151.521q10.391-32.696 37.688-53.261 27.296-20.566 64.008-20.566 34.326 0 62.283 20.566 27.957 20.565 38.913 53.261h152.021q38.363 0 65.682 27.319 27.319 27.319 27.319 65.682v506.434q0 38.363-27.319 65.682-27.319 27.319-65.682 27.319H226.783Zm0-93.001h506.434v-506.434h-63.043v75.043q0 18.887-13.807 32.694-13.807 13.807-32.694 13.807H336.327q-18.887 0-32.694-13.807-13.807-13.807-13.807-32.694v-75.043h-63.043v506.434Zm253.006-518.913q13.711 0 23.711-9.789 10-9.79 10-23.5 0-13.711-9.789-23.711-9.79-10-23.5-10-13.711 0-23.711 9.79-10 9.789-10 23.5 0 13.71 9.789 23.71 9.79 10 23.5 10Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "20");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "20");
      attr(svg, "class", "svelte-c6ihgv");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var CopyIcon$1 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$M, safe_not_equal, {}, add_css$k);
  }
};
function create_fragment$L(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M109-120q-11 0-20-5.5T75-140q-5-9-5.5-19.5T75-180l370-640q6-10 15.5-15t19.5-5q10 0 19.5 5t15.5 15l370 640q6 10 5.5 20.5T885-140q-5 9-14 14.5t-20 5.5H109Zm371-120q17 0 28.5-11.5T520-280q0-17-11.5-28.5T480-320q-17 0-28.5 11.5T440-280q0 17 11.5 28.5T480-240Zm0-120q17 0 28.5-11.5T520-400v-120q0-17-11.5-28.5T480-560q-17 0-28.5 11.5T440-520v120q0 17 11.5 28.5T480-360Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var WarningIcon$1 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$L, safe_not_equal, {});
  }
};
function add_css$j(target) {
  append_styles(target, "svelte-1haqb7b", ".ms-modal__title-container--teams.svelte-1haqb7b{display:flex;justify-content:flex-start;align-items:baseline;margin-bottom:24px;gap:12px}.ms-modal__title--teams.svelte-1haqb7b{margin-bottom:0px}.ms-modal__title--seats.svelte-1haqb7b{font-size:14px;line-height:1;font-weight:500;color:#5c5c5c}.ms-modal__invite-group.svelte-1haqb7b{margin-bottom:24px}.ms-modal__invite-input-group.svelte-1haqb7b{display:flex;gap:12px;border:1px solid #ddd;border-radius:6px;justify-content:space-between;align-items:center;padding:6px}.ms-modal__invite-input.svelte-1haqb7b{border:none;background:none;outline:none;width:100%;font-size:12px;padding:8px 0;text-overflow:ellipsis}.ms-modal__invite-copy-btn.svelte-1haqb7b{font-size:14px;font-weight:700;line-height:1;color:#fff;background-color:#2962ff;border-radius:4px;display:flex;align-items:center;padding:8px 12px;gap:6px}.ms-modal__invite-copy-btn svg{margin-right:4px;width:16px}.ms-modal__invite-regenerate-btn.svelte-1haqb7b{font-size:12px;font-weight:600;line-height:1;color:#2962ff;background-color:transparent;border:none;outline:none;padding:4px 0}.ms-modal__upgrade-warning.svelte-1haqb7b{display:flex;align-items:center;gap:12px;padding:12px;border-radius:8px;font-size:14px;font-weight:500;line-height:1;color:#e28c0a;background-color:#faf3e1;width:100%;text-align:left}.ms-modal__upgrade-warning-text.svelte-1haqb7b{width:100%}.ms-modal__team-member.svelte-1haqb7b{display:flex;justify-content:space-between;align-items:center;padding:12px 0;border-bottom:1px solid #ebebeb}.ms-modal__team-member.svelte-1haqb7b:last-child{border-bottom:none}.ms-modal__team-member-info.svelte-1haqb7b{display:flex;align-items:center}.ms-modal__team-member-image.svelte-1haqb7b{width:32px;height:32px;border-radius:50%;margin-right:10px}.ms-modal__team-member-image--initial.svelte-1haqb7b{width:32px;height:32px;border-radius:50%;border:1.33px solid #2962ff;margin-right:12px;display:flex;justify-content:center;align-items:center;background-color:#e7f1ff;color:#2962ff;font-size:18px;font-weight:500;line-height:1}.ms-modal__team-member-email.svelte-1haqb7b{font-size:14px;font-weight:500;line-height:1;color:#5c5c5c}.ms-modal__team-member-actions.svelte-1haqb7b{display:flex;align-items:center}.ms-modal__team-member-role.svelte-1haqb7b{font-size:12px;font-weight:500;line-height:1;color:#5c5c5c}.ms-modal__team-member-remove-btn.svelte-1haqb7b{font-size:12px;font-weight:600;line-height:1;color:#c8020d;background-color:transparent;border:none;outline:none;padding:4px 0;display:flex;align-items:center;margin-left:8px}.ms-modal__team-member-remove-text.svelte-1haqb7b{margin-right:8px}.ms-modal__team-member-remove-btn svg{width:10px !important}");
}
function get_each_context$8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[15] = list[i];
  return child_ctx;
}
function create_if_block_5$5(ctx) {
  var _a, _b;
  let div;
  let t0_value = (
    /*teamData*/
    ((_a = ctx[0]) == null ? void 0 : _a.members.length) + ""
  );
  let t0;
  let t1;
  let t2_value = (
    /*teamData*/
    ((_b = ctx[0]) == null ? void 0 : _b.maxTeamMembers) + ""
  );
  let t2;
  let t3;
  return {
    c() {
      div = element("div");
      t0 = text(t0_value);
      t1 = text("/");
      t2 = text(t2_value);
      t3 = text(" Seats");
      attr(div, "class", "ms-modal__title--seats svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t0);
      append(div, t1);
      append(div, t2);
      append(div, t3);
    },
    p(ctx2, dirty) {
      var _a2, _b2;
      if (dirty & /*teamData*/
      1 && t0_value !== (t0_value = /*teamData*/
      ((_a2 = ctx2[0]) == null ? void 0 : _a2.members.length) + ""))
        set_data(t0, t0_value);
      if (dirty & /*teamData*/
      1 && t2_value !== (t2_value = /*teamData*/
      ((_b2 = ctx2[0]) == null ? void 0 : _b2.maxTeamMembers) + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_catch_block(ctx) {
  return {
    c: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
}
function create_then_block(ctx) {
  let current_block_type_index;
  let if_block0;
  let t;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_4$6, create_else_block_2$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    var _a, _b;
    if (
      /*teamData*/
      ((_a = ctx2[0]) == null ? void 0 : _a.members.length) < /*teamData*/
      ((_b = ctx2[0]) == null ? void 0 : _b.maxTeamMembers)
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = (
    /*teamData*/
    ctx[0] && /*teamData*/
    ctx[0].members.length > 0 && create_if_block$m(ctx)
  );
  return {
    c() {
      if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(t.parentNode, t);
      }
      if (
        /*teamData*/
        ctx2[0] && /*teamData*/
        ctx2[0].members.length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*teamData*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$m(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(t);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
    }
  };
}
function create_else_block_2$1(ctx) {
  let div;
  let warningicon;
  let t0;
  let span;
  let current;
  warningicon = new WarningIcon$1({});
  return {
    c() {
      div = element("div");
      create_component(warningicon.$$.fragment);
      t0 = space();
      span = element("span");
      span.textContent = "Your team is growing! Upgrade your plan for more seats.";
      attr(span, "class", "ms-modal__upgrade-warning-text svelte-1haqb7b");
      attr(div, "class", "ms-modal__upgrade-warning svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(warningicon, div, null);
      append(div, t0);
      append(div, span);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(warningicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(warningicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(warningicon);
    }
  };
}
function create_if_block_4$6(ctx) {
  let div1;
  let div0;
  let input;
  let t0;
  let button0;
  let copyicon;
  let t1;
  let t2;
  let t3;
  let button1;
  let current;
  let mounted;
  let dispose;
  copyicon = new CopyIcon$1({});
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      input = element("input");
      t0 = space();
      button0 = element("button");
      create_component(copyicon.$$.fragment);
      t1 = space();
      t2 = text(
        /*copyInviteText*/
        ctx[2]
      );
      t3 = space();
      button1 = element("button");
      button1.textContent = "Regenerate Invite Link";
      attr(input, "type", "text");
      attr(input, "class", "ms-modal__invite-input svelte-1haqb7b");
      input.value = /*inviteLink*/
      ctx[3];
      input.readOnly = true;
      attr(button0, "class", "ms-modal__invite-copy-btn svelte-1haqb7b");
      attr(div0, "class", "ms-modal__invite-input-group svelte-1haqb7b");
      attr(button1, "class", "ms-modal__invite-regenerate-btn svelte-1haqb7b");
      attr(div1, "class", "ms-modal__invite-group svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, input);
      append(div0, t0);
      append(div0, button0);
      mount_component(copyicon, button0, null);
      append(button0, t1);
      append(button0, t2);
      append(div1, t3);
      append(div1, button1);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[10]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[11]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*inviteLink*/
      8 && input.value !== /*inviteLink*/
      ctx2[3]) {
        input.value = /*inviteLink*/
        ctx2[3];
      }
      if (!current || dirty & /*copyInviteText*/
      4)
        set_data(
          t2,
          /*copyInviteText*/
          ctx2[2]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(copyicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copyicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(copyicon);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block$m(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let current;
  let each_value = (
    /*teamData*/
    ctx[0].members
  );
  const get_key = (ctx2) => (
    /*m*/
    ctx2[15].member.id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context$8(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block$8(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "ms-modal__team-members");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*showRemoveButton, teamData, removeMemberFromTeam*/
      81) {
        each_value = /*teamData*/
        ctx2[0].members;
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$8, null, get_each_context$8);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function create_else_block_1$3(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      attr(img, "class", "ms-modal__team-member-image svelte-1haqb7b");
      if (!src_url_equal(img.src, img_src_value = /*m*/
      ctx[15].member.profileImage))
        attr(img, "src", img_src_value);
      attr(img, "alt", "Member Profile Avatar");
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*teamData*/
      1 && !src_url_equal(img.src, img_src_value = /*m*/
      ctx2[15].member.profileImage)) {
        attr(img, "src", img_src_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_if_block_3$8(ctx) {
  let div;
  let t_value = (
    /*m*/
    ctx[15].member.auth.email[0].toUpperCase() + ""
  );
  let t;
  return {
    c() {
      div = element("div");
      t = text(t_value);
      attr(div, "class", "ms-modal__team-member-image--initial svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*teamData*/
      1 && t_value !== (t_value = /*m*/
      ctx2[15].member.auth.email[0].toUpperCase() + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block_1$g(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_2$c, create_else_block$9];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (!/*m*/
    ctx2[15].showRemoveButton)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_else_block$9(ctx) {
  let button;
  let span;
  let t1;
  let closeicon;
  let current;
  let mounted;
  let dispose;
  closeicon = new CloseIcon({});
  function click_handler_3() {
    return (
      /*click_handler_3*/
      ctx[13](
        /*m*/
        ctx[15]
      )
    );
  }
  return {
    c() {
      button = element("button");
      span = element("span");
      span.textContent = "Are you sure?";
      t1 = space();
      create_component(closeicon.$$.fragment);
      attr(span, "class", "ms-modal__team-member-remove-text svelte-1haqb7b");
      attr(button, "class", "ms-modal__team-member-remove-btn svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span);
      append(button, t1);
      mount_component(closeicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler_3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(closeicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closeicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(closeicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_2$c(ctx) {
  let button;
  let closeicon;
  let current;
  let mounted;
  let dispose;
  closeicon = new CloseIcon({});
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[12](
        /*m*/
        ctx[15]
      )
    );
  }
  return {
    c() {
      button = element("button");
      create_component(closeicon.$$.fragment);
      attr(button, "class", "ms-modal__team-member-remove-btn svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      mount_component(closeicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(button, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
    },
    i(local) {
      if (current)
        return;
      transition_in(closeicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closeicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(closeicon);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$8(key_1, ctx) {
  let div4;
  let div1;
  let t0;
  let div0;
  let t1_value = (
    /*m*/
    ctx[15].member.auth.email + ""
  );
  let t1;
  let t2;
  let div3;
  let div2;
  let t3_value = (
    /*m*/
    ctx[15].role + ""
  );
  let t3;
  let t4;
  let t5;
  let current;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*m*/
      ctx2[15].member.profileImage === null
    )
      return create_if_block_3$8;
    return create_else_block_1$3;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*m*/
    ctx[15].role !== "OWNER" && create_if_block_1$g(ctx)
  );
  return {
    key: key_1,
    first: null,
    c() {
      div4 = element("div");
      div1 = element("div");
      if_block0.c();
      t0 = space();
      div0 = element("div");
      t1 = text(t1_value);
      t2 = space();
      div3 = element("div");
      div2 = element("div");
      t3 = text(t3_value);
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      attr(div0, "class", "ms-modal__team-member-email svelte-1haqb7b");
      attr(div1, "class", "ms-modal__team-member-info svelte-1haqb7b");
      attr(div2, "class", "ms-modal__team-member-role svelte-1haqb7b");
      attr(div3, "class", "ms-modal__team-member-actions svelte-1haqb7b");
      attr(div4, "class", "ms-modal__team-member svelte-1haqb7b");
      this.first = div4;
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div1);
      if_block0.m(div1, null);
      append(div1, t0);
      append(div1, div0);
      append(div0, t1);
      append(div4, t2);
      append(div4, div3);
      append(div3, div2);
      append(div2, t3);
      append(div3, t4);
      if (if_block1)
        if_block1.m(div3, null);
      append(div4, t5);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
        if_block0.p(ctx, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div1, t0);
        }
      }
      if ((!current || dirty & /*teamData*/
      1) && t1_value !== (t1_value = /*m*/
      ctx[15].member.auth.email + ""))
        set_data(t1, t1_value);
      if ((!current || dirty & /*teamData*/
      1) && t3_value !== (t3_value = /*m*/
      ctx[15].role + ""))
        set_data(t3, t3_value);
      if (
        /*m*/
        ctx[15].role !== "OWNER"
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty & /*teamData*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$g(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div3, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if_block0.d();
      if (if_block1)
        if_block1.d();
    }
  };
}
function create_pending_block(ctx) {
  let p;
  return {
    c() {
      p = element("p");
      p.textContent = "Loading...";
    },
    m(target, anchor) {
      insert(target, p, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(p);
    }
  };
}
function create_fragment$K(ctx) {
  var _a;
  let div;
  let h2;
  let t1;
  let t2;
  let await_block_anchor;
  let promise2;
  let current;
  let if_block = (
    /*teamData*/
    ((_a = ctx[0]) == null ? void 0 : _a.members.length) > 0 && create_if_block_5$5(ctx)
  );
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    blocks: [, , ,]
  };
  handle_promise(promise2 = /*teamPromise*/
  ctx[1], info);
  return {
    c() {
      div = element("div");
      h2 = element("h2");
      h2.textContent = "Team";
      t1 = space();
      if (if_block)
        if_block.c();
      t2 = space();
      await_block_anchor = empty();
      info.block.c();
      attr(h2, "class", "ms-modal__title ms-modal__title--teams svelte-1haqb7b");
      attr(div, "class", "ms-modal__title-container ms-modal__title-container--teams svelte-1haqb7b");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, h2);
      append(div, t1);
      if (if_block)
        if_block.m(div, null);
      insert(target, t2, anchor);
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
      current = true;
    },
    p(new_ctx, [dirty]) {
      var _a2;
      ctx = new_ctx;
      if (
        /*teamData*/
        ((_a2 = ctx[0]) == null ? void 0 : _a2.members.length) > 0
      ) {
        if (if_block) {
          if_block.p(ctx, dirty);
        } else {
          if_block = create_if_block_5$5(ctx);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      info.ctx = ctx;
      if (dirty & /*teamPromise*/
      2 && promise2 !== (promise2 = /*teamPromise*/
      ctx[1]) && handle_promise(promise2, info))
        ;
      else {
        update_await_block_branch(info, ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(info.block);
      current = true;
    },
    o(local) {
      for (let i = 0; i < 3; i += 1) {
        const block = info.blocks[i];
        transition_out(block);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      if (detaching)
        detach(t2);
      if (detaching)
        detach(await_block_anchor);
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function instance$p($$self, $$props, $$invalidate) {
  var _a, _b, _c;
  let inviteLink;
  let { profileLoader } = $$props;
  let { member } = $$props;
  let teamPromise;
  let teamData;
  let copyInviteText = "Copy";
  function showRemoveButton(m) {
    m.showRemoveButton = true;
    $$invalidate(0, teamData.members = [...teamData.members.filter((member2) => member2.member.id !== m.member.id), m], teamData);
    setTimeout(
      () => {
        m.showRemoveButton = false;
      },
      3e3
    );
  }
  function copyInviteLink() {
    navigator.clipboard.writeText(inviteLink);
    $$invalidate(2, copyInviteText = "Copied!");
    setTimeout(
      () => {
        $$invalidate(2, copyInviteText = "Copy");
      },
      2e3
    );
  }
  function getTeam(teamId) {
    return __async(this, null, function* () {
      const { data } = yield window.$memberstackDom.getTeam({ teamId });
      $$invalidate(0, teamData = data);
      return data;
    });
  }
  function removeMemberFromTeam(memberId) {
    return __async(this, null, function* () {
      try {
        $$invalidate(8, profileLoader = true);
        yield window.$memberstackDom.removeMemberFromTeam({ teamId: teamData.id, memberId });
        $$invalidate(0, teamData.members = teamData.members.filter((m) => m.member.id !== memberId), teamData);
        window.$memberstackDom._showMessage("Member has been removed from team.", false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      } finally {
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function generateInviteToken() {
    return __async(this, null, function* () {
      try {
        $$invalidate(8, profileLoader = true);
        const { data } = yield window.$memberstackDom.generateInviteToken({ teamId: teamData.id });
        $$invalidate(0, teamData.inviteToken = data.inviteToken, teamData);
        window.$memberstackDom._showMessage("Invite Link Regenerated", false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      } finally {
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  if (((_b = (_a = member == null ? void 0 : member.teams) == null ? void 0 : _a.ownedTeams) == null ? void 0 : _b.length) > 0) {
    const teamId = (_c = member.teams) == null ? void 0 : _c.ownedTeams[0].teamId;
    teamPromise = getTeam(teamId);
  } else {
    teamPromise = Promise.resolve(null);
  }
  const click_handler = () => copyInviteLink();
  const click_handler_1 = () => generateInviteToken();
  const click_handler_2 = (m) => showRemoveButton(m);
  const click_handler_3 = (m) => removeMemberFromTeam(m.member.id);
  $$self.$$set = ($$props2) => {
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(9, member = $$props2.member);
  };
  $$self.$$.update = () => {
    var _a2;
    if ($$self.$$.dirty & /*teamData*/
    1) {
      $$invalidate(3, inviteLink = `${window.location.origin}${(_a2 = teamData == null ? void 0 : teamData.plan) == null ? void 0 : _a2.teamAccountInviteSignupLink}?inviteToken=${teamData == null ? void 0 : teamData.inviteToken}`);
    }
  };
  return [
    teamData,
    teamPromise,
    copyInviteText,
    inviteLink,
    showRemoveButton,
    copyInviteLink,
    removeMemberFromTeam,
    generateInviteToken,
    profileLoader,
    member,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var ProfileTeamContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$p, create_fragment$K, safe_not_equal, { profileLoader: 8, member: 9 }, add_css$j);
  }
};
function create_if_block_5$4(ctx) {
  let profileloader;
  let current;
  profileloader = new ProfileLoader({});
  return {
    c() {
      create_component(profileloader.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileloader, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(profileloader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileloader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileloader, detaching);
    }
  };
}
function create_if_block_4$5(ctx) {
  let profileteamcontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function profileteamcontent_member_binding(value) {
    ctx[19](value);
  }
  function profileteamcontent_profileLoader_binding(value) {
    ctx[20](value);
  }
  let profileteamcontent_props = {};
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    profileteamcontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    profileteamcontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  profileteamcontent = new ProfileTeamContent({ props: profileteamcontent_props });
  binding_callbacks.push(() => bind(profileteamcontent, "member", profileteamcontent_member_binding));
  binding_callbacks.push(() => bind(profileteamcontent, "profileLoader", profileteamcontent_profileLoader_binding));
  return {
    c() {
      create_component(profileteamcontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileteamcontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const profileteamcontent_changes = {};
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        profileteamcontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        profileteamcontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      profileteamcontent.$set(profileteamcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(profileteamcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileteamcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileteamcontent, detaching);
    }
  };
}
function create_if_block_3$7(ctx) {
  let plansinfocontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function plansinfocontent_member_binding(value) {
    ctx[17](value);
  }
  function plansinfocontent_profileLoader_binding(value) {
    ctx[18](value);
  }
  let plansinfocontent_props = {};
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    plansinfocontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    plansinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  plansinfocontent = new PlansInfoContent({ props: plansinfocontent_props });
  binding_callbacks.push(() => bind(plansinfocontent, "member", plansinfocontent_member_binding));
  binding_callbacks.push(() => bind(plansinfocontent, "profileLoader", plansinfocontent_profileLoader_binding));
  return {
    c() {
      create_component(plansinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(plansinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const plansinfocontent_changes = {};
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        plansinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        plansinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      plansinfocontent.$set(plansinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(plansinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(plansinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(plansinfocontent, detaching);
    }
  };
}
function create_if_block_2$b(ctx) {
  let passwordinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function passwordinfocontent_displayProfile_binding(value) {
    ctx[14](value);
  }
  function passwordinfocontent_profileLoader_binding(value) {
    ctx[15](value);
  }
  function passwordinfocontent_member_binding(value) {
    ctx[16](value);
  }
  let passwordinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    passwordinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    passwordinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    passwordinfocontent_props.member = /*member*/
    ctx[1];
  }
  passwordinfocontent = new PasswordInfoContent({ props: passwordinfocontent_props });
  binding_callbacks.push(() => bind(passwordinfocontent, "displayProfile", passwordinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(passwordinfocontent, "profileLoader", passwordinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(passwordinfocontent, "member", passwordinfocontent_member_binding));
  return {
    c() {
      create_component(passwordinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        passwordinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        passwordinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        passwordinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      passwordinfocontent.$set(passwordinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinfocontent, detaching);
    }
  };
}
function create_if_block_1$f(ctx) {
  let securityinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function securityinfocontent_displayProfile_binding(value) {
    ctx[11](value);
  }
  function securityinfocontent_profileLoader_binding(value) {
    ctx[12](value);
  }
  function securityinfocontent_member_binding(value) {
    ctx[13](value);
  }
  let securityinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    securityinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    securityinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    securityinfocontent_props.member = /*member*/
    ctx[1];
  }
  securityinfocontent = new SecurityInfoContent({ props: securityinfocontent_props });
  binding_callbacks.push(() => bind(securityinfocontent, "displayProfile", securityinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(securityinfocontent, "profileLoader", securityinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(securityinfocontent, "member", securityinfocontent_member_binding));
  return {
    c() {
      create_component(securityinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(securityinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const securityinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        securityinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        securityinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        securityinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      securityinfocontent.$set(securityinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(securityinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(securityinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(securityinfocontent, detaching);
    }
  };
}
function create_if_block$l(ctx) {
  let profileinfocontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function profileinfocontent_member_binding(value) {
    ctx[9](value);
  }
  function profileinfocontent_profileLoader_binding(value) {
    ctx[10](value);
  }
  let profileinfocontent_props = {
    customFields: (
      /*$app*/
      ctx[5].customFields
    )
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    profileinfocontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    profileinfocontent_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  profileinfocontent = new ProfileInfoContent({ props: profileinfocontent_props });
  binding_callbacks.push(() => bind(profileinfocontent, "member", profileinfocontent_member_binding));
  binding_callbacks.push(() => bind(profileinfocontent, "profileLoader", profileinfocontent_profileLoader_binding));
  return {
    c() {
      create_component(profileinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const profileinfocontent_changes = {};
      if (dirty & /*$app*/
      32)
        profileinfocontent_changes.customFields = /*$app*/
        ctx2[5].customFields;
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        profileinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        profileinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      profileinfocontent.$set(profileinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(profileinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileinfocontent, detaching);
    }
  };
}
function create_fragment$J(ctx) {
  let div5;
  let div1;
  let div0;
  let t0_value = (
    /*member*/
    ctx[1].auth.email + ""
  );
  let t0;
  let t1;
  let closebutton;
  let t2;
  let div4;
  let div2;
  let profilemodalnav;
  let updating_member;
  let updating_displayProfile;
  let updating_profileLoader;
  let t3;
  let div3;
  let t4;
  let current_block_type_index;
  let if_block1;
  let t5;
  let modalfooter;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[3]
    ) }
  });
  function profilemodalnav_member_binding(value) {
    ctx[6](value);
  }
  function profilemodalnav_displayProfile_binding(value) {
    ctx[7](value);
  }
  function profilemodalnav_profileLoader_binding(value) {
    ctx[8](value);
  }
  let profilemodalnav_props = {
    onSuccessLogout: (
      /*onSuccessLogout*/
      ctx[2]
    ),
    hideProfileSection
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    profilemodalnav_props.member = /*member*/
    ctx[1];
  }
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    profilemodalnav_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[4] !== void 0
  ) {
    profilemodalnav_props.profileLoader = /*profileLoader*/
    ctx[4];
  }
  profilemodalnav = new ProfileModalNav({ props: profilemodalnav_props });
  binding_callbacks.push(() => bind(profilemodalnav, "member", profilemodalnav_member_binding));
  binding_callbacks.push(() => bind(profilemodalnav, "displayProfile", profilemodalnav_displayProfile_binding));
  binding_callbacks.push(() => bind(profilemodalnav, "profileLoader", profilemodalnav_profileLoader_binding));
  let if_block0 = (
    /*profileLoader*/
    ctx[4] && create_if_block_5$4()
  );
  const if_block_creators = [
    create_if_block$l,
    create_if_block_1$f,
    create_if_block_2$b,
    create_if_block_3$7,
    create_if_block_4$5
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*displayProfile*/
      ctx2[0] === "profile"
    )
      return 0;
    if (
      /*displayProfile*/
      ctx2[0] === "security"
    )
      return 1;
    if (
      /*displayProfile*/
      ctx2[0] === "changePassword"
    )
      return 2;
    if (
      /*displayProfile*/
      ctx2[0] === "plans"
    )
      return 3;
    if (
      /*displayProfile*/
      ctx2[0] === "team"
    )
      return 4;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  modalfooter = new ModalFooter({});
  return {
    c() {
      div5 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      create_component(closebutton.$$.fragment);
      t2 = space();
      div4 = element("div");
      div2 = element("div");
      create_component(profilemodalnav.$$.fragment);
      t3 = space();
      div3 = element("div");
      if (if_block0)
        if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      create_component(modalfooter.$$.fragment);
      attr(div1, "class", "ms-modal__header");
      attr(div2, "class", "ms-modal__content-left");
      attr(div3, "class", "ms-modal__content-right");
      attr(div4, "class", "ms-modal__content ms-modal__content--profile");
      attr(div5, "class", "ms-modal ms-modal--profile");
      attr(div5, "id", "ProfileModal");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div1);
      append(div1, div0);
      append(div0, t0);
      append(div1, t1);
      mount_component(closebutton, div1, null);
      append(div5, t2);
      append(div5, div4);
      append(div4, div2);
      mount_component(profilemodalnav, div2, null);
      append(div4, t3);
      append(div4, div3);
      if (if_block0)
        if_block0.m(div3, null);
      append(div3, t4);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div3, null);
      }
      append(div5, t5);
      mount_component(modalfooter, div5, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*member*/
      2) && t0_value !== (t0_value = /*member*/
      ctx2[1].auth.email + ""))
        set_data(t0, t0_value);
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      8)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[3];
      closebutton.$set(closebutton_changes);
      const profilemodalnav_changes = {};
      if (dirty & /*onSuccessLogout*/
      4)
        profilemodalnav_changes.onSuccessLogout = /*onSuccessLogout*/
        ctx2[2];
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        profilemodalnav_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        profilemodalnav_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      16) {
        updating_profileLoader = true;
        profilemodalnav_changes.profileLoader = /*profileLoader*/
        ctx2[4];
        add_flush_callback(() => updating_profileLoader = false);
      }
      profilemodalnav.$set(profilemodalnav_changes);
      if (
        /*profileLoader*/
        ctx2[4]
      ) {
        if (if_block0) {
          if (dirty & /*profileLoader*/
          16) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_5$4();
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div3, t4);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div3, null);
        } else {
          if_block1 = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      transition_in(profilemodalnav.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      transition_out(profilemodalnav.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      destroy_component(closebutton);
      destroy_component(profilemodalnav);
      if (if_block0)
        if_block0.d();
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      destroy_component(modalfooter);
    }
  };
}
var hideProfileSection = false;
function instance$o($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(5, $app = $$value));
  let { onSuccessLogout } = $$props;
  let { closeModal } = $$props;
  let { displayProfile = "profile" } = $$props;
  let { member } = $$props;
  let profileLoader = false;
  function profilemodalnav_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function profilemodalnav_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function profilemodalnav_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function profileinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function profileinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function securityinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function securityinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function securityinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function passwordinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function passwordinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function passwordinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function plansinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function plansinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  function profileteamcontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function profileteamcontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(4, profileLoader);
  }
  $$self.$$set = ($$props2) => {
    if ("onSuccessLogout" in $$props2)
      $$invalidate(2, onSuccessLogout = $$props2.onSuccessLogout);
    if ("closeModal" in $$props2)
      $$invalidate(3, closeModal = $$props2.closeModal);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
  };
  return [
    displayProfile,
    member,
    onSuccessLogout,
    closeModal,
    profileLoader,
    $app,
    profilemodalnav_member_binding,
    profilemodalnav_displayProfile_binding,
    profilemodalnav_profileLoader_binding,
    profileinfocontent_member_binding,
    profileinfocontent_profileLoader_binding,
    securityinfocontent_displayProfile_binding,
    securityinfocontent_profileLoader_binding,
    securityinfocontent_member_binding,
    passwordinfocontent_displayProfile_binding,
    passwordinfocontent_profileLoader_binding,
    passwordinfocontent_member_binding,
    plansinfocontent_member_binding,
    plansinfocontent_profileLoader_binding,
    profileteamcontent_member_binding,
    profileteamcontent_profileLoader_binding
  ];
}
var ProfileModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$o, create_fragment$J, safe_not_equal, {
      onSuccessLogout: 2,
      closeModal: 3,
      displayProfile: 0,
      member: 1
    });
  }
};
function create_fragment$I(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M7.41 1.41L6 0L0 6L6 12L7.41 10.59L2.83 6L7.41 1.41Z");
      attr(svg, "fill", "none");
      attr(svg, "transform", "rotate(180)");
      attr(svg, "viewBox", "0 0 8 12");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ForwardIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$I, safe_not_equal, {});
  }
};
function create_if_block_1$e(ctx) {
  let button;
  let div;
  let profileicon;
  let t0;
  let t1;
  let forwardicon;
  let current;
  let mounted;
  let dispose;
  profileicon = new ProfileIcon({});
  forwardicon = new ForwardIcon({});
  return {
    c() {
      button = element("button");
      div = element("div");
      create_component(profileicon.$$.fragment);
      t0 = text(" Profile");
      t1 = space();
      create_component(forwardicon.$$.fragment);
      attr(button, "class", "ms-modal__profile-option");
      toggle_class(
        button,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "profile"
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      mount_component(profileicon, div, null);
      append(div, t0);
      append(button, t1);
      mount_component(forwardicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "profile"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(profileicon.$$.fragment, local);
      transition_in(forwardicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileicon.$$.fragment, local);
      transition_out(forwardicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(profileicon);
      destroy_component(forwardicon);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$k(ctx) {
  let button;
  let div;
  let linkouticon;
  let t0;
  let t1;
  let forwardicon;
  let current;
  let mounted;
  let dispose;
  linkouticon = new LinkOutIcon({});
  forwardicon = new ForwardIcon({});
  return {
    c() {
      button = element("button");
      div = element("div");
      create_component(linkouticon.$$.fragment);
      t0 = text(" Billing Portal");
      t1 = space();
      create_component(forwardicon.$$.fragment);
      attr(button, "class", "ms-modal__profile-option");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, div);
      mount_component(linkouticon, div, null);
      append(div, t0);
      append(button, t1);
      mount_component(forwardicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*launchPortal*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(linkouticon.$$.fragment, local);
      transition_in(forwardicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkouticon.$$.fragment, local);
      transition_out(forwardicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(linkouticon);
      destroy_component(forwardicon);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$H(ctx) {
  let div2;
  let t0;
  let button0;
  let div0;
  let securityicon;
  let t1;
  let t2;
  let forwardicon0;
  let t3;
  let t4;
  let button1;
  let div1;
  let logouticon;
  let t5;
  let t6;
  let forwardicon1;
  let current;
  let mounted;
  let dispose;
  let if_block0 = !/*hideProfileSection*/
  ctx[2] && create_if_block_1$e(ctx);
  securityicon = new SecurityIcon({});
  forwardicon0 = new ForwardIcon({});
  let if_block1 = (
    /*member*/
    ctx[1].stripeCustomerId && create_if_block$k(ctx)
  );
  logouticon = new LogoutIcon({});
  forwardicon1 = new ForwardIcon({});
  return {
    c() {
      div2 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      button0 = element("button");
      div0 = element("div");
      create_component(securityicon.$$.fragment);
      t1 = text(" Security");
      t2 = space();
      create_component(forwardicon0.$$.fragment);
      t3 = space();
      if (if_block1)
        if_block1.c();
      t4 = space();
      button1 = element("button");
      div1 = element("div");
      create_component(logouticon.$$.fragment);
      t5 = text(" Logout");
      t6 = space();
      create_component(forwardicon1.$$.fragment);
      attr(button0, "class", "ms-modal__profile-option");
      toggle_class(
        button0,
        "ms-modal__profile-option--active",
        /*displayProfile*/
        ctx[0] === "security" || /*displayProfile*/
        ctx[0] === "changePassword"
      );
      attr(button1, "class", "ms-modal__profile-option");
      attr(div2, "class", "ms-modal__mobile-profile-nav");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      if (if_block0)
        if_block0.m(div2, null);
      append(div2, t0);
      append(div2, button0);
      append(button0, div0);
      mount_component(securityicon, div0, null);
      append(div0, t1);
      append(button0, t2);
      mount_component(forwardicon0, button0, null);
      append(div2, t3);
      if (if_block1)
        if_block1.m(div2, null);
      append(div2, t4);
      append(div2, button1);
      append(button1, div1);
      mount_component(logouticon, div1, null);
      append(div1, t5);
      append(button1, t6);
      mount_component(forwardicon1, button1, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler_1*/
            ctx[8]
          ),
          listen(
            button1,
            "click",
            /*logout*/
            ctx[3]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*hideProfileSection*/
      ctx2[2]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*hideProfileSection*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$e(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*displayProfile*/
      1) {
        toggle_class(
          button0,
          "ms-modal__profile-option--active",
          /*displayProfile*/
          ctx2[0] === "security" || /*displayProfile*/
          ctx2[0] === "changePassword"
        );
      }
      if (
        /*member*/
        ctx2[1].stripeCustomerId
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*member*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$k(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, t4);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(securityicon.$$.fragment, local);
      transition_in(forwardicon0.$$.fragment, local);
      transition_in(if_block1);
      transition_in(logouticon.$$.fragment, local);
      transition_in(forwardicon1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(securityicon.$$.fragment, local);
      transition_out(forwardicon0.$$.fragment, local);
      transition_out(if_block1);
      transition_out(logouticon.$$.fragment, local);
      transition_out(forwardicon1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (if_block0)
        if_block0.d();
      destroy_component(securityicon);
      destroy_component(forwardicon0);
      if (if_block1)
        if_block1.d();
      destroy_component(logouticon);
      destroy_component(forwardicon1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$n($$self, $$props, $$invalidate) {
  let { member } = $$props;
  let { onSuccessLogout } = $$props;
  let { displayProfile } = $$props;
  let { profileLoader } = $$props;
  let { hideProfileSection: hideProfileSection2 } = $$props;
  const unsubscribe = AppStore.subscribe((data) => {
    if (!data.initialValue) {
      const container = document.getElementById("msOverlay");
      const css = document.createElement("style");
      const color = data.branding.colors.lightMode.primaryButton;
      const fullCSS = `.ms-modal__profile-option:hover { color: ${color};} .ms-modal__profile-option--active { color: ${color};} .ms-modal__save-button { background: ${color};} .ms-modal__save-button:disabled { background: ${color};}`;
      css.appendChild(document.createTextNode(fullCSS));
      container.appendChild(css);
    }
  });
  onDestroy(() => {
    unsubscribe();
  });
  function logout(e) {
    return __async(this, null, function* () {
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.logout();
        window.$memberstackDom._showMessage(message, false);
        onSuccessLogout({ type: "LOGOUT", data });
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function launchPortal(e) {
    return __async(this, null, function* () {
      $$invalidate(5, profileLoader = true);
      yield window.$memberstackDom.launchStripeCustomerPortal({ priceIds: [], autoRedirect: true });
    });
  }
  const click_handler = () => $$invalidate(0, displayProfile = "profile");
  const click_handler_1 = () => $$invalidate(0, displayProfile = "security");
  $$self.$$set = ($$props2) => {
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("onSuccessLogout" in $$props2)
      $$invalidate(6, onSuccessLogout = $$props2.onSuccessLogout);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("profileLoader" in $$props2)
      $$invalidate(5, profileLoader = $$props2.profileLoader);
    if ("hideProfileSection" in $$props2)
      $$invalidate(2, hideProfileSection2 = $$props2.hideProfileSection);
  };
  return [
    displayProfile,
    member,
    hideProfileSection2,
    logout,
    launchPortal,
    profileLoader,
    onSuccessLogout,
    click_handler,
    click_handler_1
  ];
}
var MobileProfileModalNav = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$n, create_fragment$H, safe_not_equal, {
      member: 1,
      onSuccessLogout: 6,
      displayProfile: 0,
      profileLoader: 5,
      hideProfileSection: 2
    });
  }
};
function get_each_context$7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  child_ctx[6] = list;
  child_ctx[7] = i;
  return child_ctx;
}
function create_if_block$j(ctx) {
  let div1;
  let div0;
  let label;
  let t0_value = (
    /*customField*/
    ctx[5].label + ""
  );
  let t0;
  let label_for_value;
  let t1;
  let input;
  let input_placeholder_value;
  let input_name_value;
  let t2;
  let mounted;
  let dispose;
  function input_input_handler() {
    ctx[4].call(
      input,
      /*customField*/
      ctx[5]
    );
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      label = element("label");
      t0 = text(t0_value);
      t1 = space();
      input = element("input");
      t2 = space();
      attr(label, "class", "ms-form__label");
      attr(label, "for", label_for_value = /*customField*/
      ctx[5].key);
      attr(input, "class", "ms-form__input");
      attr(input, "type", "text");
      attr(input, "placeholder", input_placeholder_value = /*customField*/
      ctx[5].label);
      attr(input, "name", input_name_value = /*customField*/
      ctx[5].key);
      attr(div0, "class", "ms-form__group");
      attr(div1, "class", "ms-modal__custom-field-container");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, label);
      append(label, t0);
      append(div0, t1);
      append(div0, input);
      set_input_value(
        input,
        /*member*/
        ctx[0].customFields[
          /*customField*/
          ctx[5].key
        ]
      );
      append(div1, t2);
      if (!mounted) {
        dispose = listen(input, "input", input_input_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*customFields*/
      2 && t0_value !== (t0_value = /*customField*/
      ctx[5].label + ""))
        set_data(t0, t0_value);
      if (dirty & /*customFields*/
      2 && label_for_value !== (label_for_value = /*customField*/
      ctx[5].key)) {
        attr(label, "for", label_for_value);
      }
      if (dirty & /*customFields*/
      2 && input_placeholder_value !== (input_placeholder_value = /*customField*/
      ctx[5].label)) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty & /*customFields*/
      2 && input_name_value !== (input_name_value = /*customField*/
      ctx[5].key)) {
        attr(input, "name", input_name_value);
      }
      if (dirty & /*member, customFields*/
      3 && input.value !== /*member*/
      ctx[0].customFields[
        /*customField*/
        ctx[5].key
      ]) {
        set_input_value(
          input,
          /*member*/
          ctx[0].customFields[
            /*customField*/
            ctx[5].key
          ]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$7(ctx) {
  let if_block_anchor;
  let if_block = (
    /*customField*/
    ctx[5].hidden !== true && create_if_block$j(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*customField*/
        ctx2[5].hidden !== true
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block$j(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment$G(ctx) {
  let form;
  let t0;
  let div;
  let button;
  let mounted;
  let dispose;
  let each_value = (
    /*customFields*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
  }
  return {
    c() {
      form = element("form");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      div = element("div");
      button = element("button");
      button.textContent = "Save";
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(button, "class", "ms-modal__save-button ms-modal__save-button--large");
      attr(div, "class", "ms-modal__action-container");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(form, null);
        }
      }
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append(div, button);
      if (!mounted) {
        dispose = [
          listen(form, "submit", stop_propagation(prevent_default(
            /*saveProfile*/
            ctx[2]
          ))),
          listen(
            button,
            "click",
            /*saveProfile*/
            ctx[2]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*customFields, member*/
      3) {
        each_value = /*customFields*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block$7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(form, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(form);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$m($$self, $$props, $$invalidate) {
  let { customFields } = $$props;
  let { member } = $$props;
  let { profileLoader } = $$props;
  function saveProfile(e) {
    return __async(this, null, function* () {
      $$invalidate(3, profileLoader = true);
      yield window.$memberstackDom.updateMember({ customFields: member.customFields });
      $$invalidate(3, profileLoader = false);
    });
  }
  function input_input_handler(customField) {
    member.customFields[customField.key] = this.value;
    $$invalidate(0, member);
  }
  $$self.$$set = ($$props2) => {
    if ("customFields" in $$props2)
      $$invalidate(1, customFields = $$props2.customFields);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
    if ("profileLoader" in $$props2)
      $$invalidate(3, profileLoader = $$props2.profileLoader);
  };
  return [member, customFields, saveProfile, profileLoader, input_input_handler];
}
var MobileProfileInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$m, create_fragment$G, safe_not_equal, {
      customFields: 1,
      member: 0,
      profileLoader: 3
    });
  }
};
function get_each_context$6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_else_block_1$2(ctx) {
  let t;
  return {
    c() {
      t = text("Change Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_2$a(ctx) {
  let t;
  return {
    c() {
      t = text("Set Password");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$i(ctx) {
  let p;
  let t1;
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_value = (
    /*$app*/
    ctx[4].authProviders
  );
  const get_key = (ctx2) => (
    /*provider*/
    ctx2[16].provider
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context$6(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key, child_ctx));
  }
  return {
    c() {
      p = element("p");
      p.textContent = "Connect Additional Accounts";
      t1 = space();
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(p, "class", "ms-form__label");
      attr(div, "class", "ms-modal__social");
    },
    m(target, anchor) {
      insert(target, p, anchor);
      insert(target, t1, anchor);
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*disconnectProvider, $app, member, connectAdditionalProvider*/
      210) {
        each_value = /*$app*/
        ctx2[4].authProviders;
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, destroy_block, create_each_block$6, null, get_each_context$6);
      }
    },
    d(detaching) {
      if (detaching)
        detach(p);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function create_else_block$8(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_2() {
    return (
      /*click_handler_2*/
      ctx[14](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Connect with ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_2);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$d(ctx) {
  let button;
  let img;
  let img_src_value;
  let img_alt_value;
  let t0;
  let span;
  let t1;
  let t2_value = (
    /*provider*/
    ctx[16].name + ""
  );
  let t2;
  let mounted;
  let dispose;
  function click_handler_1() {
    return (
      /*click_handler_1*/
      ctx[13](
        /*provider*/
        ctx[16]
      )
    );
  }
  return {
    c() {
      button = element("button");
      img = element("img");
      t0 = space();
      span = element("span");
      t1 = text("Disconnect ");
      t2 = text(t2_value);
      if (!src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*provider*/
      ctx[16].name);
      attr(button, "class", "ms-modal__social-button");
      set_style(button, "background-color", "#F6F6F6");
      attr(button, "type", "button");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, img);
      append(button, t0);
      append(button, span);
      append(span, t1);
      append(span, t2);
      if (!mounted) {
        dispose = listen(button, "click", click_handler_1);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*$app*/
      16 && !src_url_equal(img.src, img_src_value = /*provider*/
      ctx[16].icon)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      16 && img_alt_value !== (img_alt_value = /*provider*/
      ctx[16].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & /*$app*/
      16 && t2_value !== (t2_value = /*provider*/
      ctx[16].name + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block$6(key_1, ctx) {
  let div;
  let show_if;
  let t;
  function func2(...args) {
    return (
      /*func*/
      ctx[9](
        /*provider*/
        ctx[16],
        ...args
      )
    );
  }
  function select_block_type_1(ctx2, dirty) {
    if (dirty & /*member, $app*/
    18)
      show_if = null;
    if (show_if == null)
      show_if = !!/*member*/
      ctx2[1].auth.providers.some(func2);
    if (show_if)
      return create_if_block_1$d;
    return create_else_block$8;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div = element("div");
      if_block.c();
      t = space();
      attr(div, "class", "ms-modal__social-buttons");
      this.first = div;
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
      append(div, t);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div, t);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
    }
  };
}
function create_fragment$F(ctx) {
  let form;
  let emailinput;
  let updating_emailInputValid;
  let updating_emailValue;
  let t0;
  let div0;
  let label;
  let t2;
  let button0;
  let passwordlockicon;
  let t3;
  let t4;
  let t5;
  let div1;
  let button1;
  let t6;
  let button1_disabled_value;
  let current;
  let mounted;
  let dispose;
  function emailinput_emailInputValid_binding(value) {
    ctx[10](value);
  }
  function emailinput_emailValue_binding(value) {
    ctx[11](value);
  }
  let emailinput_props = {};
  if (
    /*emailInputValid*/
    ctx[3] !== void 0
  ) {
    emailinput_props.emailInputValid = /*emailInputValid*/
    ctx[3];
  }
  if (
    /*emailValue*/
    ctx[2] !== void 0
  ) {
    emailinput_props.emailValue = /*emailValue*/
    ctx[2];
  }
  emailinput = new EmailInput({ props: emailinput_props });
  binding_callbacks.push(() => bind(emailinput, "emailInputValid", emailinput_emailInputValid_binding));
  binding_callbacks.push(() => bind(emailinput, "emailValue", emailinput_emailValue_binding));
  passwordlockicon = new PasswordLockIcon({});
  function select_block_type(ctx2, dirty) {
    if (!/*member*/
    ctx2[1].auth.hasPassword)
      return create_if_block_2$a;
    return create_else_block_1$2;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*$app*/
    ctx[4].authProviders.length > 0 && create_if_block$i(ctx)
  );
  return {
    c() {
      form = element("form");
      create_component(emailinput.$$.fragment);
      t0 = space();
      div0 = element("div");
      label = element("label");
      label.textContent = "Password";
      t2 = space();
      button0 = element("button");
      create_component(passwordlockicon.$$.fragment);
      t3 = space();
      if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      div1 = element("div");
      button1 = element("button");
      t6 = text("Save");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(label, "class", "ms-form__label");
      attr(label, "for", "setPassword");
      attr(button0, "class", "ms-modal__outline-button ms-modal__outline-button--mobile");
      attr(button0, "name", "setPassword");
      attr(div0, "class", "ms-form__group");
      attr(button1, "class", "ms-modal__save-button ms-modal__save-button--large");
      button1.disabled = button1_disabled_value = !/*emailInputValid*/
      ctx[3];
      attr(div1, "class", "ms-modal__action-container");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      mount_component(emailinput, form, null);
      insert(target, t0, anchor);
      insert(target, div0, anchor);
      append(div0, label);
      append(div0, t2);
      append(div0, button0);
      mount_component(passwordlockicon, button0, null);
      append(button0, t3);
      if_block0.m(button0, null);
      insert(target, t4, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t5, anchor);
      insert(target, div1, anchor);
      append(div1, button1);
      append(button1, t6);
      current = true;
      if (!mounted) {
        dispose = [
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitEmailChange*/
            ctx[5]
          ))),
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[12]
          ),
          listen(
            button1,
            "click",
            /*submitEmailChange*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const emailinput_changes = {};
      if (!updating_emailInputValid && dirty & /*emailInputValid*/
      8) {
        updating_emailInputValid = true;
        emailinput_changes.emailInputValid = /*emailInputValid*/
        ctx2[3];
        add_flush_callback(() => updating_emailInputValid = false);
      }
      if (!updating_emailValue && dirty & /*emailValue*/
      4) {
        updating_emailValue = true;
        emailinput_changes.emailValue = /*emailValue*/
        ctx2[2];
        add_flush_callback(() => updating_emailValue = false);
      }
      emailinput.$set(emailinput_changes);
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(button0, null);
        }
      }
      if (
        /*$app*/
        ctx2[4].authProviders.length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block$i(ctx2);
          if_block1.c();
          if_block1.m(t5.parentNode, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*emailInputValid*/
      8 && button1_disabled_value !== (button1_disabled_value = !/*emailInputValid*/
      ctx2[3])) {
        button1.disabled = button1_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(emailinput.$$.fragment, local);
      transition_in(passwordlockicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(emailinput.$$.fragment, local);
      transition_out(passwordlockicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(form);
      destroy_component(emailinput);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div0);
      destroy_component(passwordlockicon);
      if_block0.d();
      if (detaching)
        detach(t4);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t5);
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$l($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(4, $app = $$value));
  let { displayProfile } = $$props;
  let { member } = $$props;
  let { emailValue } = $$props;
  let { profileLoader } = $$props;
  $app.authProviders.sort((a, b) => {
    if (isConnected(a) === isConnected(b)) {
      return a.order - b.order;
    }
    return isConnected(a) ? -1 : 1;
  });
  let emailInputValid = false;
  function submitEmailChange(e) {
    return __async(this, null, function* () {
      if (!emailInputValid || !emailValue)
        return;
      $$invalidate(8, profileLoader = true);
      try {
        const { _internalUseOnly: { message } } = yield window.$memberstackDom.updateMemberAuth({ email: emailValue });
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function disconnectProvider(provider) {
    return __async(this, null, function* () {
      $$invalidate(8, profileLoader = true);
      try {
        const { data, _internalUseOnly: { message } } = yield window.$memberstackDom.disconnectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function connectAdditionalProvider(provider) {
    return __async(this, null, function* () {
      console.log("connect", provider);
      try {
        const { data } = yield window.$memberstackDom.connectProvider({ provider });
        $$invalidate(1, member = __spreadProps(__spreadValues({}, member), {
          auth: __spreadProps(__spreadValues({}, member.auth), {
            providers: data.providers
          })
        }));
        window.$memberstackDom._showMessage(data.message, false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
      }
    });
  }
  function isConnected(provider) {
    return member.auth.providers.some((prv) => prv.provider === provider.provider);
  }
  const func2 = (provider, prv) => prv.provider === provider.provider;
  function emailinput_emailInputValid_binding(value) {
    emailInputValid = value;
    $$invalidate(3, emailInputValid);
  }
  function emailinput_emailValue_binding(value) {
    emailValue = value;
    $$invalidate(2, emailValue);
  }
  const click_handler = () => $$invalidate(0, displayProfile = "changePassword");
  const click_handler_1 = (provider) => disconnectProvider(provider.provider);
  const click_handler_2 = (provider) => connectAdditionalProvider(provider.provider);
  $$self.$$set = ($$props2) => {
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("emailValue" in $$props2)
      $$invalidate(2, emailValue = $$props2.emailValue);
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
  };
  return [
    displayProfile,
    member,
    emailValue,
    emailInputValid,
    $app,
    submitEmailChange,
    disconnectProvider,
    connectAdditionalProvider,
    profileLoader,
    func2,
    emailinput_emailInputValid_binding,
    emailinput_emailValue_binding,
    click_handler,
    click_handler_1,
    click_handler_2
  ];
}
var MobileSecurityInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$l, create_fragment$F, safe_not_equal, {
      displayProfile: 0,
      member: 1,
      emailValue: 2,
      profileLoader: 8
    });
  }
};
function create_if_block$h(ctx) {
  let passwordinput;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let current;
  function passwordinput_passwordValue_binding(value) {
    ctx[9](value);
  }
  function passwordinput_passwordInputValid_binding(value) {
    ctx[10](value);
  }
  let passwordinput_props = {
    passwordLabel: "Current Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*currentPasswordValue*/
    ctx[1] !== void 0
  ) {
    passwordinput_props.passwordValue = /*currentPasswordValue*/
    ctx[1];
  }
  if (
    /*currentPasswordValid*/
    ctx[4] !== void 0
  ) {
    passwordinput_props.passwordInputValid = /*currentPasswordValid*/
    ctx[4];
  }
  passwordinput = new PasswordInput({ props: passwordinput_props });
  binding_callbacks.push(() => bind(passwordinput, "passwordValue", passwordinput_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput, "passwordInputValid", passwordinput_passwordInputValid_binding));
  return {
    c() {
      create_component(passwordinput.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordinput, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordinput_changes = {};
      if (!updating_passwordValue && dirty & /*currentPasswordValue*/
      2) {
        updating_passwordValue = true;
        passwordinput_changes.passwordValue = /*currentPasswordValue*/
        ctx2[1];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*currentPasswordValid*/
      16) {
        updating_passwordInputValid = true;
        passwordinput_changes.passwordInputValid = /*currentPasswordValid*/
        ctx2[4];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput.$set(passwordinput_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordinput.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordinput.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordinput, detaching);
    }
  };
}
function create_fragment$E(ctx) {
  let form;
  let t0;
  let passwordinput0;
  let updating_passwordValue;
  let updating_passwordInputValid;
  let t1;
  let passwordinput1;
  let updating_passwordValue_1;
  let updating_passwordInputValid_1;
  let t2;
  let div;
  let button;
  let t3;
  let button_disabled_value;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*member*/
    ctx[0].auth.hasPassword && create_if_block$h(ctx)
  );
  function passwordinput0_passwordValue_binding(value) {
    ctx[11](value);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    ctx[12](value);
  }
  let passwordinput0_props = {
    passwordLabel: "New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*newPasswordValue*/
    ctx[2] !== void 0
  ) {
    passwordinput0_props.passwordValue = /*newPasswordValue*/
    ctx[2];
  }
  if (
    /*newPasswordValid*/
    ctx[5] !== void 0
  ) {
    passwordinput0_props.passwordInputValid = /*newPasswordValid*/
    ctx[5];
  }
  passwordinput0 = new PasswordInput({ props: passwordinput0_props });
  binding_callbacks.push(() => bind(passwordinput0, "passwordValue", passwordinput0_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput0, "passwordInputValid", passwordinput0_passwordInputValid_binding));
  function passwordinput1_passwordValue_binding(value) {
    ctx[13](value);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    ctx[14](value);
  }
  let passwordinput1_props = {
    passwordLabel: "Confirm New Password",
    passwordPlaceholder: "Enter a strong password"
  };
  if (
    /*confirmPasswordValue*/
    ctx[3] !== void 0
  ) {
    passwordinput1_props.passwordValue = /*confirmPasswordValue*/
    ctx[3];
  }
  if (
    /*confirmPasswordValid*/
    ctx[6] !== void 0
  ) {
    passwordinput1_props.passwordInputValid = /*confirmPasswordValid*/
    ctx[6];
  }
  passwordinput1 = new PasswordInput({ props: passwordinput1_props });
  binding_callbacks.push(() => bind(passwordinput1, "passwordValue", passwordinput1_passwordValue_binding));
  binding_callbacks.push(() => bind(passwordinput1, "passwordInputValid", passwordinput1_passwordInputValid_binding));
  return {
    c() {
      form = element("form");
      if (if_block)
        if_block.c();
      t0 = space();
      create_component(passwordinput0.$$.fragment);
      t1 = space();
      create_component(passwordinput1.$$.fragment);
      t2 = space();
      div = element("div");
      button = element("button");
      t3 = text("Save");
      attr(form, "class", "ms-form");
      attr(form, "action", "");
      attr(form, "method", "post");
      attr(form, "autocomplete", "off");
      attr(button, "class", "ms-modal__save-button ms-modal__save-button--large");
      button.disabled = button_disabled_value = /*member*/
      ctx[0].auth.hasPassword && !/*currentPasswordValid*/
      ctx[4] || !/*newPasswordValid*/
      ctx[5] || !/*confirmPasswordValid*/
      ctx[6];
      attr(div, "class", "ms-modal__action-container");
    },
    m(target, anchor) {
      insert(target, form, anchor);
      if (if_block)
        if_block.m(form, null);
      append(form, t0);
      mount_component(passwordinput0, form, null);
      append(form, t1);
      mount_component(passwordinput1, form, null);
      insert(target, t2, anchor);
      insert(target, div, anchor);
      append(div, button);
      append(button, t3);
      current = true;
      if (!mounted) {
        dispose = [
          listen(form, "submit", stop_propagation(prevent_default(
            /*submitPasswordChange*/
            ctx[7]
          ))),
          listen(
            button,
            "click",
            /*submitPasswordChange*/
            ctx[7]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*member*/
        ctx2[0].auth.hasPassword
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*member*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$h(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(form, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const passwordinput0_changes = {};
      if (!updating_passwordValue && dirty & /*newPasswordValue*/
      4) {
        updating_passwordValue = true;
        passwordinput0_changes.passwordValue = /*newPasswordValue*/
        ctx2[2];
        add_flush_callback(() => updating_passwordValue = false);
      }
      if (!updating_passwordInputValid && dirty & /*newPasswordValid*/
      32) {
        updating_passwordInputValid = true;
        passwordinput0_changes.passwordInputValid = /*newPasswordValid*/
        ctx2[5];
        add_flush_callback(() => updating_passwordInputValid = false);
      }
      passwordinput0.$set(passwordinput0_changes);
      const passwordinput1_changes = {};
      if (!updating_passwordValue_1 && dirty & /*confirmPasswordValue*/
      8) {
        updating_passwordValue_1 = true;
        passwordinput1_changes.passwordValue = /*confirmPasswordValue*/
        ctx2[3];
        add_flush_callback(() => updating_passwordValue_1 = false);
      }
      if (!updating_passwordInputValid_1 && dirty & /*confirmPasswordValid*/
      64) {
        updating_passwordInputValid_1 = true;
        passwordinput1_changes.passwordInputValid = /*confirmPasswordValid*/
        ctx2[6];
        add_flush_callback(() => updating_passwordInputValid_1 = false);
      }
      passwordinput1.$set(passwordinput1_changes);
      if (!current || dirty & /*member, currentPasswordValid, newPasswordValid, confirmPasswordValid*/
      113 && button_disabled_value !== (button_disabled_value = /*member*/
      ctx2[0].auth.hasPassword && !/*currentPasswordValid*/
      ctx2[4] || !/*newPasswordValid*/
      ctx2[5] || !/*confirmPasswordValid*/
      ctx2[6])) {
        button.disabled = button_disabled_value;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(passwordinput0.$$.fragment, local);
      transition_in(passwordinput1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(passwordinput0.$$.fragment, local);
      transition_out(passwordinput1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(form);
      if (if_block)
        if_block.d();
      destroy_component(passwordinput0);
      destroy_component(passwordinput1);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$k($$self, $$props, $$invalidate) {
  let { profileLoader } = $$props;
  let { member } = $$props;
  let currentPasswordValue = "";
  let newPasswordValue = "";
  let confirmPasswordValue = "";
  let currentPasswordValid = false;
  let newPasswordValid = false;
  let confirmPasswordValid = false;
  function submitPasswordChange(e) {
    return __async(this, null, function* () {
      if (member.auth.hasPassword && !currentPasswordValid && !newPasswordValid && !confirmPasswordValid)
        return;
      if (!member.auth.hasPassword && !newPasswordValid && !confirmPasswordValid)
        return;
      $$invalidate(8, profileLoader = true);
      try {
        let message;
        if (member.auth.hasPassword) {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.updateMemberAuth({
            oldPassword: currentPasswordValue,
            newPassword: newPasswordValue
          });
          message = msg;
        } else {
          const { _internalUseOnly: { message: msg } } = yield window.$memberstackDom.setPassword({ password: newPasswordValue });
          $$invalidate(0, member.auth.hasPassword = true, member);
          message = msg;
        }
        window.$memberstackDom._showMessage(message, false);
        $$invalidate(1, currentPasswordValue = "");
        $$invalidate(2, newPasswordValue = "");
        $$invalidate(3, confirmPasswordValue = "");
        $$invalidate(8, profileLoader = false);
      } catch (err) {
        window.$memberstackDom._showMessage(err.message, true);
        $$invalidate(8, profileLoader = false);
      }
    });
  }
  function passwordinput_passwordValue_binding(value) {
    currentPasswordValue = value;
    $$invalidate(1, currentPasswordValue);
  }
  function passwordinput_passwordInputValid_binding(value) {
    currentPasswordValid = value;
    $$invalidate(4, currentPasswordValid);
  }
  function passwordinput0_passwordValue_binding(value) {
    newPasswordValue = value;
    $$invalidate(2, newPasswordValue);
  }
  function passwordinput0_passwordInputValid_binding(value) {
    newPasswordValid = value;
    $$invalidate(5, newPasswordValid);
  }
  function passwordinput1_passwordValue_binding(value) {
    confirmPasswordValue = value;
    $$invalidate(3, confirmPasswordValue);
  }
  function passwordinput1_passwordInputValid_binding(value) {
    confirmPasswordValid = value;
    $$invalidate(6, confirmPasswordValid);
  }
  $$self.$$set = ($$props2) => {
    if ("profileLoader" in $$props2)
      $$invalidate(8, profileLoader = $$props2.profileLoader);
    if ("member" in $$props2)
      $$invalidate(0, member = $$props2.member);
  };
  return [
    member,
    currentPasswordValue,
    newPasswordValue,
    confirmPasswordValue,
    currentPasswordValid,
    newPasswordValid,
    confirmPasswordValid,
    submitPasswordChange,
    profileLoader,
    passwordinput_passwordValue_binding,
    passwordinput_passwordInputValid_binding,
    passwordinput0_passwordValue_binding,
    passwordinput0_passwordInputValid_binding,
    passwordinput1_passwordValue_binding,
    passwordinput1_passwordInputValid_binding
  ];
}
var MobilePasswordInfoContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$k, create_fragment$E, safe_not_equal, { profileLoader: 8, member: 0 });
  }
};
function create_if_block_6$3(ctx) {
  let div;
  let button;
  let backicon;
  let current;
  let mounted;
  let dispose;
  backicon = new BackIcon({});
  return {
    c() {
      div = element("div");
      button = element("button");
      create_component(backicon.$$.fragment);
      attr(div, "class", "ms-modal__profile-back--mobile");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      mount_component(backicon, button, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(backicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(backicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(backicon);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block$7(ctx) {
  let memberstackicon;
  let current;
  memberstackicon = new MemberstackIcon({});
  return {
    c() {
      create_component(memberstackicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(memberstackicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(memberstackicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(memberstackicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(memberstackicon, detaching);
    }
  };
}
function create_if_block_5$3(ctx) {
  let img;
  let img_src_value;
  let img_alt_value;
  return {
    c() {
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = /*$app*/
      ctx[7].branding.logo))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = /*$app*/
      ctx[7].name);
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$app*/
      128 && !src_url_equal(img.src, img_src_value = /*$app*/
      ctx2[7].branding.logo)) {
        attr(img, "src", img_src_value);
      }
      if (dirty & /*$app*/
      128 && img_alt_value !== (img_alt_value = /*$app*/
      ctx2[7].name)) {
        attr(img, "alt", img_alt_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(img);
    }
  };
}
function create_if_block_4$4(ctx) {
  let profileloader;
  let current;
  profileloader = new ProfileLoader({});
  return {
    c() {
      create_component(profileloader.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profileloader, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(profileloader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profileloader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profileloader, detaching);
    }
  };
}
function create_if_block_3$6(ctx) {
  let mobilepasswordinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function mobilepasswordinfocontent_displayProfile_binding(value) {
    ctx[17](value);
  }
  function mobilepasswordinfocontent_profileLoader_binding(value) {
    ctx[18](value);
  }
  function mobilepasswordinfocontent_member_binding(value) {
    ctx[19](value);
  }
  let mobilepasswordinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    mobilepasswordinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobilepasswordinfocontent_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobilepasswordinfocontent_props.member = /*member*/
    ctx[1];
  }
  mobilepasswordinfocontent = new MobilePasswordInfoContent({ props: mobilepasswordinfocontent_props });
  binding_callbacks.push(() => bind(mobilepasswordinfocontent, "displayProfile", mobilepasswordinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(mobilepasswordinfocontent, "profileLoader", mobilepasswordinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(mobilepasswordinfocontent, "member", mobilepasswordinfocontent_member_binding));
  return {
    c() {
      create_component(mobilepasswordinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobilepasswordinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobilepasswordinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        mobilepasswordinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobilepasswordinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobilepasswordinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      mobilepasswordinfocontent.$set(mobilepasswordinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobilepasswordinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobilepasswordinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobilepasswordinfocontent, detaching);
    }
  };
}
function create_if_block_2$9(ctx) {
  let mobilesecurityinfocontent;
  let updating_displayProfile;
  let updating_profileLoader;
  let updating_member;
  let current;
  function mobilesecurityinfocontent_displayProfile_binding(value) {
    ctx[14](value);
  }
  function mobilesecurityinfocontent_profileLoader_binding(value) {
    ctx[15](value);
  }
  function mobilesecurityinfocontent_member_binding(value) {
    ctx[16](value);
  }
  let mobilesecurityinfocontent_props = {};
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    mobilesecurityinfocontent_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobilesecurityinfocontent_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobilesecurityinfocontent_props.member = /*member*/
    ctx[1];
  }
  mobilesecurityinfocontent = new MobileSecurityInfoContent({ props: mobilesecurityinfocontent_props });
  binding_callbacks.push(() => bind(mobilesecurityinfocontent, "displayProfile", mobilesecurityinfocontent_displayProfile_binding));
  binding_callbacks.push(() => bind(mobilesecurityinfocontent, "profileLoader", mobilesecurityinfocontent_profileLoader_binding));
  binding_callbacks.push(() => bind(mobilesecurityinfocontent, "member", mobilesecurityinfocontent_member_binding));
  return {
    c() {
      create_component(mobilesecurityinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobilesecurityinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobilesecurityinfocontent_changes = {};
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        mobilesecurityinfocontent_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobilesecurityinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobilesecurityinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      mobilesecurityinfocontent.$set(mobilesecurityinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobilesecurityinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobilesecurityinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobilesecurityinfocontent, detaching);
    }
  };
}
function create_if_block_1$c(ctx) {
  let mobileprofileinfocontent;
  let updating_member;
  let updating_profileLoader;
  let current;
  function mobileprofileinfocontent_member_binding(value) {
    ctx[12](value);
  }
  function mobileprofileinfocontent_profileLoader_binding(value) {
    ctx[13](value);
  }
  let mobileprofileinfocontent_props = {
    customFields: (
      /*$app*/
      ctx[7].customFields
    )
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobileprofileinfocontent_props.member = /*member*/
    ctx[1];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobileprofileinfocontent_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  mobileprofileinfocontent = new MobileProfileInfoContent({ props: mobileprofileinfocontent_props });
  binding_callbacks.push(() => bind(mobileprofileinfocontent, "member", mobileprofileinfocontent_member_binding));
  binding_callbacks.push(() => bind(mobileprofileinfocontent, "profileLoader", mobileprofileinfocontent_profileLoader_binding));
  return {
    c() {
      create_component(mobileprofileinfocontent.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobileprofileinfocontent, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobileprofileinfocontent_changes = {};
      if (dirty & /*$app*/
      128)
        mobileprofileinfocontent_changes.customFields = /*$app*/
        ctx2[7].customFields;
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobileprofileinfocontent_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobileprofileinfocontent_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      mobileprofileinfocontent.$set(mobileprofileinfocontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobileprofileinfocontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobileprofileinfocontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobileprofileinfocontent, detaching);
    }
  };
}
function create_if_block$g(ctx) {
  let mobileprofilemodalnav;
  let updating_member;
  let updating_displayProfile;
  let updating_profileLoader;
  let current;
  function mobileprofilemodalnav_member_binding(value) {
    ctx[9](value);
  }
  function mobileprofilemodalnav_displayProfile_binding(value) {
    ctx[10](value);
  }
  function mobileprofilemodalnav_profileLoader_binding(value) {
    ctx[11](value);
  }
  let mobileprofilemodalnav_props = {
    onSuccessLogout: (
      /*onSuccessLogout*/
      ctx[3]
    ),
    hideProfileSection: (
      /*hideProfileSection*/
      ctx[5]
    )
  };
  if (
    /*member*/
    ctx[1] !== void 0
  ) {
    mobileprofilemodalnav_props.member = /*member*/
    ctx[1];
  }
  if (
    /*displayProfile*/
    ctx[0] !== void 0
  ) {
    mobileprofilemodalnav_props.displayProfile = /*displayProfile*/
    ctx[0];
  }
  if (
    /*profileLoader*/
    ctx[6] !== void 0
  ) {
    mobileprofilemodalnav_props.profileLoader = /*profileLoader*/
    ctx[6];
  }
  mobileprofilemodalnav = new MobileProfileModalNav({ props: mobileprofilemodalnav_props });
  binding_callbacks.push(() => bind(mobileprofilemodalnav, "member", mobileprofilemodalnav_member_binding));
  binding_callbacks.push(() => bind(mobileprofilemodalnav, "displayProfile", mobileprofilemodalnav_displayProfile_binding));
  binding_callbacks.push(() => bind(mobileprofilemodalnav, "profileLoader", mobileprofilemodalnav_profileLoader_binding));
  return {
    c() {
      create_component(mobileprofilemodalnav.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobileprofilemodalnav, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobileprofilemodalnav_changes = {};
      if (dirty & /*onSuccessLogout*/
      8)
        mobileprofilemodalnav_changes.onSuccessLogout = /*onSuccessLogout*/
        ctx2[3];
      if (dirty & /*hideProfileSection*/
      32)
        mobileprofilemodalnav_changes.hideProfileSection = /*hideProfileSection*/
        ctx2[5];
      if (!updating_member && dirty & /*member*/
      2) {
        updating_member = true;
        mobileprofilemodalnav_changes.member = /*member*/
        ctx2[1];
        add_flush_callback(() => updating_member = false);
      }
      if (!updating_displayProfile && dirty & /*displayProfile*/
      1) {
        updating_displayProfile = true;
        mobileprofilemodalnav_changes.displayProfile = /*displayProfile*/
        ctx2[0];
        add_flush_callback(() => updating_displayProfile = false);
      }
      if (!updating_profileLoader && dirty & /*profileLoader*/
      64) {
        updating_profileLoader = true;
        mobileprofilemodalnav_changes.profileLoader = /*profileLoader*/
        ctx2[6];
        add_flush_callback(() => updating_profileLoader = false);
      }
      mobileprofilemodalnav.$set(mobileprofilemodalnav_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobileprofilemodalnav.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobileprofilemodalnav.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobileprofilemodalnav, detaching);
    }
  };
}
function create_fragment$D(ctx) {
  let div5;
  let div2;
  let t0;
  let div1;
  let figure;
  let current_block_type_index;
  let if_block1;
  let t1;
  let div0;
  let b;
  let t2;
  let t3;
  let closebutton;
  let t4;
  let div4;
  let div3;
  let t5;
  let current_block_type_index_1;
  let if_block3;
  let t6;
  let modalfooter;
  let current;
  let if_block0 = (
    /*displayProfile*/
    (ctx[0] === "profile" || /*displayProfile*/
    ctx[0] === "changePassword" || /*displayProfile*/
    ctx[0] === "security") && create_if_block_6$3(ctx)
  );
  const if_block_creators = [create_if_block_5$3, create_else_block$7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$app*/
      ctx2[7].branding.logo
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[4]
    ) }
  });
  let if_block2 = (
    /*profileLoader*/
    ctx[6] && create_if_block_4$4()
  );
  const if_block_creators_1 = [create_if_block$g, create_if_block_1$c, create_if_block_2$9, create_if_block_3$6];
  const if_blocks_1 = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*displayProfile*/
      ctx2[0] === "profile-nav"
    )
      return 0;
    if (
      /*displayProfile*/
      ctx2[0] === "profile"
    )
      return 1;
    if (
      /*displayProfile*/
      ctx2[0] === "security"
    )
      return 2;
    if (
      /*displayProfile*/
      ctx2[0] === "changePassword"
    )
      return 3;
    return -1;
  }
  if (~(current_block_type_index_1 = select_block_type_1(ctx))) {
    if_block3 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
  }
  modalfooter = new ModalFooter({});
  return {
    c() {
      div5 = element("div");
      div2 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div1 = element("div");
      figure = element("figure");
      if_block1.c();
      t1 = space();
      div0 = element("div");
      b = element("b");
      t2 = text(
        /*profileTitle*/
        ctx[2]
      );
      t3 = space();
      create_component(closebutton.$$.fragment);
      t4 = space();
      div4 = element("div");
      div3 = element("div");
      if (if_block2)
        if_block2.c();
      t5 = space();
      if (if_block3)
        if_block3.c();
      t6 = space();
      create_component(modalfooter.$$.fragment);
      attr(figure, "class", "ms-modal__figure ms-modal__figure--mobile");
      attr(div1, "class", "ms-modal__header--center");
      attr(div2, "class", "ms-modal__header--mobile");
      attr(div3, "class", "ms-modal__content--mobile");
      attr(div4, "class", "ms-modal__content ms-modal__content--profile");
      attr(div5, "class", "ms-modal ms-modal--profile");
      attr(div5, "id", "MobileProfileModal");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, div2);
      if (if_block0)
        if_block0.m(div2, null);
      append(div2, t0);
      append(div2, div1);
      append(div1, figure);
      if_blocks[current_block_type_index].m(figure, null);
      append(div1, t1);
      append(div1, div0);
      append(div0, b);
      append(b, t2);
      append(div2, t3);
      mount_component(closebutton, div2, null);
      append(div5, t4);
      append(div5, div4);
      append(div4, div3);
      if (if_block2)
        if_block2.m(div3, null);
      append(div3, t5);
      if (~current_block_type_index_1) {
        if_blocks_1[current_block_type_index_1].m(div3, null);
      }
      append(div5, t6);
      mount_component(modalfooter, div5, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*displayProfile*/
        ctx2[0] === "profile" || /*displayProfile*/
        ctx2[0] === "changePassword" || /*displayProfile*/
        ctx2[0] === "security"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*displayProfile*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_6$3(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div2, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block1 = if_blocks[current_block_type_index];
        if (!if_block1) {
          if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block1.c();
        } else {
          if_block1.p(ctx2, dirty);
        }
        transition_in(if_block1, 1);
        if_block1.m(figure, null);
      }
      if (!current || dirty & /*profileTitle*/
      4)
        set_data(
          t2,
          /*profileTitle*/
          ctx2[2]
        );
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      16)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[4];
      closebutton.$set(closebutton_changes);
      if (
        /*profileLoader*/
        ctx2[6]
      ) {
        if (if_block2) {
          if (dirty & /*profileLoader*/
          64) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_4$4();
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, t5);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      let previous_block_index_1 = current_block_type_index_1;
      current_block_type_index_1 = select_block_type_1(ctx2);
      if (current_block_type_index_1 === previous_block_index_1) {
        if (~current_block_type_index_1) {
          if_blocks_1[current_block_type_index_1].p(ctx2, dirty);
        }
      } else {
        if (if_block3) {
          group_outros();
          transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
            if_blocks_1[previous_block_index_1] = null;
          });
          check_outros();
        }
        if (~current_block_type_index_1) {
          if_block3 = if_blocks_1[current_block_type_index_1];
          if (!if_block3) {
            if_block3 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx2);
            if_block3.c();
          } else {
            if_block3.p(ctx2, dirty);
          }
          transition_in(if_block3, 1);
          if_block3.m(div3, null);
        } else {
          if_block3 = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(closebutton.$$.fragment, local);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(modalfooter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(closebutton.$$.fragment, local);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(modalfooter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      if (if_block0)
        if_block0.d();
      if_blocks[current_block_type_index].d();
      destroy_component(closebutton);
      if (if_block2)
        if_block2.d();
      if (~current_block_type_index_1) {
        if_blocks_1[current_block_type_index_1].d();
      }
      destroy_component(modalfooter);
    }
  };
}
function instance$j($$self, $$props, $$invalidate) {
  let $app;
  component_subscribe($$self, AppStore, ($$value) => $$invalidate(7, $app = $$value));
  let { onSuccessLogout } = $$props;
  let { closeModal } = $$props;
  let { displayProfile = "profile-nav" } = $$props;
  let { member } = $$props;
  let { profileTitle = member.auth.email } = $$props;
  let hideProfileSection2 = false;
  let profileLoader = false;
  if (!$app.customFields.filter((field) => !field.hidden).length) {
    displayProfile = "security";
    hideProfileSection2 = true;
  }
  const click_handler = () => $$invalidate(0, displayProfile = "profile-nav");
  function mobileprofilemodalnav_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function mobileprofilemodalnav_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function mobileprofilemodalnav_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobileprofileinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function mobileprofileinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobilesecurityinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function mobilesecurityinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobilesecurityinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  function mobilepasswordinfocontent_displayProfile_binding(value) {
    displayProfile = value;
    $$invalidate(0, displayProfile);
  }
  function mobilepasswordinfocontent_profileLoader_binding(value) {
    profileLoader = value;
    $$invalidate(6, profileLoader);
  }
  function mobilepasswordinfocontent_member_binding(value) {
    member = value;
    $$invalidate(1, member);
  }
  $$self.$$set = ($$props2) => {
    if ("onSuccessLogout" in $$props2)
      $$invalidate(3, onSuccessLogout = $$props2.onSuccessLogout);
    if ("closeModal" in $$props2)
      $$invalidate(4, closeModal = $$props2.closeModal);
    if ("displayProfile" in $$props2)
      $$invalidate(0, displayProfile = $$props2.displayProfile);
    if ("member" in $$props2)
      $$invalidate(1, member = $$props2.member);
    if ("profileTitle" in $$props2)
      $$invalidate(2, profileTitle = $$props2.profileTitle);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*displayProfile, member*/
    3) {
      if (displayProfile === "profile-nav") {
        $$invalidate(2, profileTitle = member.auth.email);
      } else if (displayProfile === "profile") {
        $$invalidate(2, profileTitle = "My Profile");
      } else if (displayProfile === "security") {
        $$invalidate(2, profileTitle = "Security");
      } else if (displayProfile === "changePassword") {
        if (!member.auth.hasPassword) {
          $$invalidate(2, profileTitle = "Set Password");
        } else {
          $$invalidate(2, profileTitle = "Change Password");
        }
      }
    }
  };
  return [
    displayProfile,
    member,
    profileTitle,
    onSuccessLogout,
    closeModal,
    hideProfileSection2,
    profileLoader,
    $app,
    click_handler,
    mobileprofilemodalnav_member_binding,
    mobileprofilemodalnav_displayProfile_binding,
    mobileprofilemodalnav_profileLoader_binding,
    mobileprofileinfocontent_member_binding,
    mobileprofileinfocontent_profileLoader_binding,
    mobilesecurityinfocontent_displayProfile_binding,
    mobilesecurityinfocontent_profileLoader_binding,
    mobilesecurityinfocontent_member_binding,
    mobilepasswordinfocontent_displayProfile_binding,
    mobilepasswordinfocontent_profileLoader_binding,
    mobilepasswordinfocontent_member_binding
  ];
}
var MobileProfileModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$j, create_fragment$D, safe_not_equal, {
      onSuccessLogout: 3,
      closeModal: 4,
      displayProfile: 0,
      member: 1,
      profileTitle: 2
    });
  }
};
function add_css$i(target) {
  append_styles(target, "svelte-50knw2", "svg.svelte-50knw2{fill:currentColor;width:9px;height:auto}");
}
function create_fragment$C(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M459-381 314-526q-3-3-4.5-6.5T308-540q0-8 5.5-14t14.5-6h304q9 0 14.5 6t5.5 14q0 2-6 14L501-381q-5 5-10 7t-11 2q-6 0-11-2t-10-7Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "308 -560 344 188");
      attr(svg, "class", "svelte-50knw2");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ArrowIcon$1 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$C, safe_not_equal, {}, add_css$i);
  }
};
function add_css$h(target) {
  append_styles(target, "svelte-w4kmg0", "#TestCardModal .copied{background-color:#3eb862 !important;color:#fff !important}#TestCardModal .copied svg{opacity:1 !important}#TestCardModal.svelte-w4kmg0 .ms-modal__title.svelte-w4kmg0{text-align:left;margin-bottom:5px;font-size:20px;line-height:24px}#TestCardModal.svelte-w4kmg0 .ms-video.svelte-w4kmg0{width:100%;margin-top:20px;margin-bottom:20px;border-radius:10px;overflow:hidden}#TestCardModal.svelte-w4kmg0 p.svelte-w4kmg0{color:#443;font-size:11px;line-height:16.5px;margin-bottom:10px}#TestCardModal.svelte-w4kmg0 p.no-margin.svelte-w4kmg0{margin:0}#TestCardModal.svelte-w4kmg0 p a.svelte-w4kmg0{color:#443;font-weight:bold;text-decoration:underline}#TestCardModal.svelte-w4kmg0 .ms-split-button.svelte-w4kmg0{display:flex;position:relative;margin-bottom:10px;width:100%;color:#292929;font-size:13px;line-height:1}#TestCardModal.svelte-w4kmg0 .ms-split-button__main.svelte-w4kmg0{background-color:#f5f5f5;border:0.5px solid #dddfee;border-radius:6px 0 0 6px;padding:10px 15px;width:100%;display:flex;text-overflow:ellipsis;gap:6px;align-items:center;transition:background-color 0.2s}#TestCardModal.svelte-w4kmg0 .ms-split-button__main span.svelte-w4kmg0{font-weight:bold}#TestCardModal.svelte-w4kmg0 .ms-split-button__main.svelte-w4kmg0:hover{background:#dddfee}#TestCardModal.svelte-w4kmg0 .ms-split-button__secondary.svelte-w4kmg0{background-color:#f5f5f5;border:0.5px solid #dddfee;border-radius:0 6px 6px 0;padding:10px 15px;display:flex;align-items:center;justify-content:center;transition:background-color 0.2s}#TestCardModal.svelte-w4kmg0 .ms-split-button__secondary.svelte-w4kmg0:hover{background:#dddfee}#TestCardModal.svelte-w4kmg0 .ms-split-button__secondary.active.svelte-w4kmg0{background:#dddfee}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown.svelte-w4kmg0{background-color:#f5f5f5;border:0.5px solid #dddfee;border-radius:6px;color:#443;display:none;font-size:12px;line-height:1;position:absolute;right:0;top:100%;z-index:2147483649 !important;width:auto}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown.show.svelte-w4kmg0{display:block}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown section.svelte-w4kmg0{display:flex;flex-direction:column}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown-title.svelte-w4kmg0{background-color:#f5f5f5;color:#000;font-size:11px;font-weight:bold;line-height:1;padding:10px;border-bottom:0.5px solid #dddfee;text-align:right}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown button.svelte-w4kmg0{background-color:#fff;color:#443;font-size:11px;line-height:1;padding:10px;width:100%;text-align:right;transition:background-color 0.2s;display:flex;justify-content:space-between;align-items:center}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown button .ms-split-button__copy-icon.svelte-w4kmg0{position:relative;width:20px;height:5px;display:flex;justify-content:center;align-items:center}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown button.svelte-w4kmg0:hover{background-color:#dddfee}\n      #TestCardModal\n        .ms-split-button__dropdown\n        button\n        .ms-split-button__copy-icon\n        svg\n    {position:absolute}\n      #TestCardModal\n        .ms-split-button__dropdown\n        button:hover\n        .ms-split-button__copy-icon\n        svg\n    {opacity:1}\n      #TestCardModal\n        .ms-split-button__dropdown\n        button\n        .ms-split-button__copy-icon\n        svg\n    {opacity:0}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown button span.svelte-w4kmg0{font-weight:bold}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown-footer.svelte-w4kmg0{background-color:#f5f5f5;color:#000;font-size:11px;line-height:1;font-weight:bold;padding:10px;text-align:center}#TestCardModal.svelte-w4kmg0 .ms-split-button__dropdown-footer a.svelte-w4kmg0{color:#2962ff;text-decoration:none}#TestCardModal.svelte-w4kmg0 .ms-submit-button.svelte-w4kmg0{background-color:#434de7;border-radius:6px;color:#fff;font-size:14px;font-weight:bold;line-height:1;padding:16px;width:100%}");
}
function create_if_block$f(ctx) {
  let closebutton;
  let current;
  closebutton = new CloseButton({
    props: { closeModal: (
      /*closeModal*/
      ctx[0]
    ) }
  });
  return {
    c() {
      create_component(closebutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(closebutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const closebutton_changes = {};
      if (dirty & /*closeModal*/
      1)
        closebutton_changes.closeModal = /*closeModal*/
        ctx2[0];
      closebutton.$set(closebutton_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(closebutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(closebutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(closebutton, detaching);
    }
  };
}
function create_fragment$B(ctx) {
  let div5;
  let t0;
  let div4;
  let h2;
  let t2;
  let p0;
  let t4;
  let video;
  let source0;
  let source0_src_value;
  let source1;
  let source1_src_value;
  let t5;
  let div3;
  let button0;
  let copyicon0;
  let t6;
  let t7;
  let span0;
  let t9;
  let button1;
  let arrowicon;
  let t10;
  let nav;
  let section0;
  let div0;
  let t12;
  let button2;
  let span1;
  let copyicon1;
  let span2;
  let t15;
  let button3;
  let span3;
  let copyicon2;
  let span4;
  let t18;
  let button4;
  let span5;
  let copyicon3;
  let span6;
  let t21;
  let section1;
  let div1;
  let t23;
  let button5;
  let span7;
  let copyicon4;
  let span8;
  let t26;
  let button6;
  let span9;
  let copyicon5;
  let span10;
  let t29;
  let div2;
  let t33;
  let p1;
  let t35;
  let button7;
  let current;
  let mounted;
  let dispose;
  let if_block = (!/*params*/
  ctx[2] || !/*params*/
  ctx[2].hideCloseButton) && create_if_block$f(ctx);
  copyicon0 = new CopyIcon$1({});
  arrowicon = new ArrowIcon$1({});
  copyicon1 = new CopyIcon$1({});
  copyicon2 = new CopyIcon$1({});
  copyicon3 = new CopyIcon$1({});
  copyicon4 = new CopyIcon$1({});
  copyicon5 = new CopyIcon$1({});
  return {
    c() {
      div5 = element("div");
      if (if_block)
        if_block.c();
      t0 = space();
      div4 = element("div");
      h2 = element("h2");
      h2.textContent = "Copy Stripe Test Card";
      t2 = space();
      p0 = element("p");
      p0.textContent = "Test mode only. Live members will never see this modal.";
      t4 = space();
      video = element("video");
      source0 = element("source");
      source1 = element("source");
      t5 = space();
      div3 = element("div");
      button0 = element("button");
      create_component(copyicon0.$$.fragment);
      t6 = space();
      t7 = text(
        /*buttonText*/
        ctx[3]
      );
      span0 = element("span");
      span0.textContent = "...4242";
      t9 = space();
      button1 = element("button");
      create_component(arrowicon.$$.fragment);
      t10 = space();
      nav = element("nav");
      section0 = element("section");
      div0 = element("div");
      div0.textContent = "Test Successful Payments";
      t12 = space();
      button2 = element("button");
      span1 = element("span");
      create_component(copyicon1.$$.fragment);
      span2 = element("span");
      span2.innerHTML = `Visa Debit <b>...5556</b>`;
      t15 = space();
      button3 = element("button");
      span3 = element("span");
      create_component(copyicon2.$$.fragment);
      span4 = element("span");
      span4.innerHTML = `Mastercard <b>...4444</b>`;
      t18 = space();
      button4 = element("button");
      span5 = element("span");
      create_component(copyicon3.$$.fragment);
      span6 = element("span");
      span6.innerHTML = `American Express <b>...10005</b>`;
      t21 = space();
      section1 = element("section");
      div1 = element("div");
      div1.textContent = "Test Declined Payments";
      t23 = space();
      button5 = element("button");
      span7 = element("span");
      create_component(copyicon4.$$.fragment);
      span8 = element("span");
      span8.innerHTML = `Generic decline <b>...0002</b>`;
      t26 = space();
      button6 = element("button");
      span9 = element("span");
      create_component(copyicon5.$$.fragment);
      span10 = element("span");
      span10.innerHTML = `Insufficient funds <b>...9995</b>`;
      t29 = space();
      div2 = element("div");
      div2.innerHTML = `Complete list of <a href="https://stripe.com/docs/testing" target="_blank" class="svelte-w4kmg0">alternative test cards</a>.`;
      t33 = space();
      p1 = element("p");
      p1.textContent = "Paste the card number on the next screen, with any CVC,\n      expiration date, and ZIP code.";
      t35 = space();
      button7 = element("button");
      button7.textContent = "Continue to Test Checkout";
      attr(h2, "class", "ms-modal__title svelte-w4kmg0");
      attr(h2, "data-copy-btn", "");
      attr(p0, "class", "no-margin svelte-w4kmg0");
      if (!src_url_equal(source0.src, source0_src_value = videoMP4Path))
        attr(source0, "src", source0_src_value);
      attr(source0, "type", "video/mp4");
      if (!src_url_equal(source1.src, source1_src_value = videoWebMPath))
        attr(source1, "src", source1_src_value);
      attr(source1, "type", "video/webm");
      video.autoplay = true;
      video.loop = true;
      video.muted = true;
      video.playsInline = true;
      attr(video, "class", "ms-video svelte-w4kmg0");
      attr(video, "poster", videoImagePath);
      attr(span0, "class", "svelte-w4kmg0");
      attr(button0, "class", "ms-split-button__main svelte-w4kmg0");
      attr(button1, "class", "ms-split-button__secondary svelte-w4kmg0");
      toggle_class(
        button1,
        "active",
        /*showDropdown*/
        ctx[4]
      );
      attr(div0, "class", "ms-split-button__dropdown-title svelte-w4kmg0");
      attr(span1, "class", "ms-split-button__copy-icon svelte-w4kmg0");
      attr(span2, "class", "svelte-w4kmg0");
      attr(button2, "class", "svelte-w4kmg0");
      attr(span3, "class", "ms-split-button__copy-icon svelte-w4kmg0");
      attr(span4, "class", "svelte-w4kmg0");
      attr(button3, "class", "svelte-w4kmg0");
      attr(span5, "class", "ms-split-button__copy-icon svelte-w4kmg0");
      attr(span6, "class", "svelte-w4kmg0");
      attr(button4, "class", "svelte-w4kmg0");
      attr(section0, "class", "svelte-w4kmg0");
      attr(div1, "class", "ms-split-button__dropdown-title svelte-w4kmg0");
      attr(span7, "class", "ms-split-button__copy-icon svelte-w4kmg0");
      attr(span8, "class", "svelte-w4kmg0");
      attr(button5, "class", "svelte-w4kmg0");
      attr(span9, "class", "ms-split-button__copy-icon svelte-w4kmg0");
      attr(span10, "class", "svelte-w4kmg0");
      attr(button6, "class", "svelte-w4kmg0");
      attr(section1, "class", "svelte-w4kmg0");
      attr(div2, "class", "ms-split-button__dropdown-footer svelte-w4kmg0");
      attr(nav, "class", "ms-split-button__dropdown svelte-w4kmg0");
      toggle_class(
        nav,
        "show",
        /*showDropdown*/
        ctx[4]
      );
      attr(div3, "class", "ms-split-button svelte-w4kmg0");
      attr(p1, "class", "svelte-w4kmg0");
      attr(button7, "class", "ms-submit-button svelte-w4kmg0");
      attr(div4, "class", "ms-modal__content");
      attr(div5, "class", "ms-modal svelte-w4kmg0");
      attr(div5, "id", "TestCardModal");
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      if (if_block)
        if_block.m(div5, null);
      append(div5, t0);
      append(div5, div4);
      append(div4, h2);
      append(div4, t2);
      append(div4, p0);
      append(div4, t4);
      append(div4, video);
      append(video, source0);
      append(video, source1);
      append(div4, t5);
      append(div4, div3);
      append(div3, button0);
      mount_component(copyicon0, button0, null);
      append(button0, t6);
      append(button0, t7);
      append(button0, span0);
      append(div3, t9);
      append(div3, button1);
      mount_component(arrowicon, button1, null);
      append(div3, t10);
      append(div3, nav);
      append(nav, section0);
      append(section0, div0);
      append(section0, t12);
      append(section0, button2);
      append(button2, span1);
      mount_component(copyicon1, span1, null);
      append(button2, span2);
      append(section0, t15);
      append(section0, button3);
      append(button3, span3);
      mount_component(copyicon2, span3, null);
      append(button3, span4);
      append(section0, t18);
      append(section0, button4);
      append(button4, span5);
      mount_component(copyicon3, span5, null);
      append(button4, span6);
      append(nav, t21);
      append(nav, section1);
      append(section1, div1);
      append(section1, t23);
      append(section1, button5);
      append(button5, span7);
      mount_component(copyicon4, span7, null);
      append(button5, span8);
      append(section1, t26);
      append(section1, button6);
      append(button6, span9);
      mount_component(copyicon5, span9, null);
      append(button6, span10);
      append(nav, t29);
      append(nav, div2);
      append(div4, t33);
      append(div4, p1);
      append(div4, t35);
      append(div4, button7);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[7]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[8]
          ),
          listen(
            button2,
            "click",
            /*click_handler_2*/
            ctx[9]
          ),
          listen(
            button3,
            "click",
            /*click_handler_3*/
            ctx[10]
          ),
          listen(
            button4,
            "click",
            /*click_handler_4*/
            ctx[11]
          ),
          listen(
            button5,
            "click",
            /*click_handler_5*/
            ctx[12]
          ),
          listen(
            button6,
            "click",
            /*click_handler_6*/
            ctx[13]
          ),
          listen(
            button7,
            "click",
            /*click_handler_7*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!/*params*/
      ctx2[2] || !/*params*/
      ctx2[2].hideCloseButton) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*params*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$f(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div5, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & /*buttonText*/
      8)
        set_data(
          t7,
          /*buttonText*/
          ctx2[3]
        );
      if (!current || dirty & /*showDropdown*/
      16) {
        toggle_class(
          button1,
          "active",
          /*showDropdown*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*showDropdown*/
      16) {
        toggle_class(
          nav,
          "show",
          /*showDropdown*/
          ctx2[4]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(copyicon0.$$.fragment, local);
      transition_in(arrowicon.$$.fragment, local);
      transition_in(copyicon1.$$.fragment, local);
      transition_in(copyicon2.$$.fragment, local);
      transition_in(copyicon3.$$.fragment, local);
      transition_in(copyicon4.$$.fragment, local);
      transition_in(copyicon5.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(copyicon0.$$.fragment, local);
      transition_out(arrowicon.$$.fragment, local);
      transition_out(copyicon1.$$.fragment, local);
      transition_out(copyicon2.$$.fragment, local);
      transition_out(copyicon3.$$.fragment, local);
      transition_out(copyicon4.$$.fragment, local);
      transition_out(copyicon5.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      if (if_block)
        if_block.d();
      destroy_component(copyicon0);
      destroy_component(arrowicon);
      destroy_component(copyicon1);
      destroy_component(copyicon2);
      destroy_component(copyicon3);
      destroy_component(copyicon4);
      destroy_component(copyicon5);
      mounted = false;
      run_all(dispose);
    }
  };
}
var videoImagePath = "https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65efa0d9dc3019b69fe6a9cb_4242%20full-poster-00001.jpg";
var videoMP4Path = "https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65efa0d9dc3019b69fe6a9cb_4242%20full-transcode.mp4";
var videoWebMPath = "https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65efa0d9dc3019b69fe6a9cb_4242%20full-transcode.webm";
function instance$i($$self, $$props, $$invalidate) {
  let { closeModal } = $$props;
  let { display } = $$props;
  let { onSuccessSubmit } = $$props;
  let { params } = $$props;
  let buttonText = "Copy Stripe Test Card";
  let showDropdown = false;
  function copyToClipboard(event, copyText, changeText) {
    navigator.clipboard.writeText(copyText);
    const button = event.currentTarget;
    if (changeText)
      $$invalidate(3, buttonText = "Copied Stripe Test Card");
    button.classList.add("copied");
    setTimeout(
      () => {
        button.classList.remove("copied");
        $$invalidate(3, buttonText = "Copy Stripe Test Card");
        $$invalidate(4, showDropdown = false);
      },
      1e3
    );
  }
  const click_handler = (event) => copyToClipboard(event, "4242 4242 4242 4242", true);
  const click_handler_1 = () => $$invalidate(4, showDropdown = !showDropdown);
  const click_handler_2 = (event) => copyToClipboard(event, "4000 0566 5566 5556");
  const click_handler_3 = (event) => copyToClipboard(event, "5555 5555 5555 4444");
  const click_handler_4 = (event) => copyToClipboard(event, "3782 822463 10005");
  const click_handler_5 = (event) => copyToClipboard(event, "4000 0000 0000 0002");
  const click_handler_6 = (event) => copyToClipboard(event, "4000 0000 0000 9995");
  const click_handler_7 = () => {
    onSuccessSubmit();
  };
  $$self.$$set = ($$props2) => {
    if ("closeModal" in $$props2)
      $$invalidate(0, closeModal = $$props2.closeModal);
    if ("display" in $$props2)
      $$invalidate(6, display = $$props2.display);
    if ("onSuccessSubmit" in $$props2)
      $$invalidate(1, onSuccessSubmit = $$props2.onSuccessSubmit);
    if ("params" in $$props2)
      $$invalidate(2, params = $$props2.params);
  };
  return [
    closeModal,
    onSuccessSubmit,
    params,
    buttonText,
    showDropdown,
    copyToClipboard,
    display,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    click_handler_4,
    click_handler_5,
    click_handler_6,
    click_handler_7
  ];
}
var TestCardModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance$i,
      create_fragment$B,
      safe_not_equal,
      {
        closeModal: 0,
        display: 6,
        onSuccessSubmit: 1,
        params: 2
      },
      add_css$h
    );
  }
};
AppStore.subscribe((data) => {
  if (!data.initialValue) {
    InspectorStore.update((store) => {
      store.appData = data;
      return store;
    });
  }
});
var InspectorStore = writable({
  showSidebar: false,
  showSide: "right",
  // "left" or "right
  showTab: "inspector",
  // inspector, member, app
  xRayMode: localStorage.getItem("MSXRayMode") ? JSON.parse(localStorage.getItem("MSXRayMode")) : true,
  xRayErrorElements: [],
  xRayWarningElements: [],
  cartData: [],
  // data from the session storage
  inspectorData: [],
  // id's of items that have been found on the page
  // member data from the memberstack local storage _ms-mem
  memberData: localStorage.getItem("_ms-mem") ? JSON.parse(localStorage.getItem("_ms-mem")) : {},
  appData: {}
  // data from the app store
});
var SetCartData = (data) => {
  InspectorStore.update((store) => {
    store.cartData = data;
    return store;
  });
};
var AddInspectorData = (data) => {
  InspectorStore.update((store) => {
    store.inspectorData.push(data);
    return store;
  });
};
var SetShowSidebar = (toggle) => {
  InspectorStore.update((store) => {
    store.showSidebar = toggle;
    return store;
  });
};
var SetShowSide = (side) => {
  InspectorStore.update((store) => {
    store.showSide = side;
    return store;
  });
};
var SetShowTab = (tab) => {
  InspectorStore.update((store) => {
    store.showTab = tab;
    return store;
  });
};
var ToggleXRayMode = () => {
  InspectorStore.update((store) => {
    store.xRayMode = !store.xRayMode;
    localStorage.setItem("MSXRayMode", store.xRayMode);
    return store;
  });
};
var AddXRayErrorElement = (data) => {
  InspectorStore.update((store) => {
    store.xRayErrorElements.push(data);
    return store;
  });
};
var AddXRayWarningElement = (data) => {
  InspectorStore.update((store) => {
    store.xRayWarningElements.push(data);
    return store;
  });
};
function UpdateMemberData() {
  InspectorStore.update((store) => {
    store.memberData = localStorage.getItem("_ms-mem") ? JSON.parse(localStorage.getItem("_ms-mem")) : {};
    return store;
  });
}
if (typeof window !== "undefined") {
  window.addEventListener("storage", function(event) {
    if (event.key === "_ms-mem") {
      UpdateMemberData();
    }
  });
}
var inspectorItems = [
  {
    "id": "ready-for-checkout",
    "type": "cart",
    "title": "Ready for Checkout",
    "description": "<p>You previously selected a paid plan attribute.</p>",
    "helpItems": [
      {
        "title": "Checkout with multiple plans.",
        "description": '<p>It is not possible to purchase multiple plans/products at same time. </p><p>Please see our <a href="https://docs.memberstack.com/hc/en-us/community/posts/11223550134043--Wishlist-Enable-quantities-during-checkout" target="_blank" class="link">roadmap</a> for updates. </p>'
      },
      {
        "title": "Launch the checkout process.",
        "description": "<p>This attribute will only launch the checkout process for logged-in members. </p><p> The checkout will launch automatically after you create an account or log in. </p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7403200877211-Paid-Plans"
  },
  {
    "id": "ready-for-signup",
    "type": "cart",
    "title": "Ready for Signup",
    "description": "<p>You previously selected a free plan. </p>",
    "helpItems": [
      {
        "title": "Launch a signup modal.",
        "description": `<p>You're almost there! You need to add the <strong>data-ms-modal="signup" </strong>attribute to your button. </p>`
      },
      {
        "title": "Redirect to my signup page.",
        "description": `<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png" alt="" class="image"><p>If you don't have a signup page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/signup" target="_blank" class="link">sign up component</a>. </p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12511667983899"
  },
  {
    "id": "price-add",
    "type": "found",
    "dataAttribute": "data-ms-price:add",
    "title": "Price Add",
    "description": "<p>The <strong>data-ms-price:add</strong> data attribute will add a paid plan, and will not effect existing subscriptions or purchases. </p>",
    "helpItems": [
      {
        "title": "Launch a signup modal.",
        "description": `<p>You're almost there! You need to add the <strong>data-ms-modal="signup" </strong>attribute to your button. </p>`
      },
      {
        "title": "Redirect to my signup page.",
        "description": `<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png" alt="" class="image"><p>If you don't have a signup page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/signup" target="_blank" class="link">sign up component</a>. </p>`
      },
      {
        "title": "Launch the checkout process.",
        "description": "<p>This attribute will only launch the checkout process for logged-in members. </p><p> The checkout will launch automatically after you create an account or log in. </p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7403200877211-Paid-Plans"
  },
  {
    "id": "price-update",
    "type": "found",
    "dataAttribute": "data-ms-price:update",
    "title": "Price Update",
    "description": "<p>The <span><strong>data-ms-price:update</strong></span> data attribute will add a paid plan for new members and replace paid plans for existing members. </p>",
    "helpItems": [
      {
        "title": "Launch the checkout process.",
        "description": "<p>This attribute will only launch the checkout process for logged-in members. </p><p> The checkout will launch automatically after you create an account or log in. </p>"
      },
      {
        "title": "Redirect to my signup page.",
        "description": `<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png" alt="" class="image"><p>If you don't have a signup page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/signup" target="_blank" class="link">sign up component</a>. </p>`
      },
      {
        "title": "Launch a signup modal.",
        "description": `<p>You're almost there! You need to add the <strong>data-ms-modal="signup" </strong>attribute to your button. </p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7403200877211-Paid-Plans"
  },
  {
    "id": "price-remove-all",
    "type": "found",
    "dataAttribute": "data-ms-price:remove='all'",
    "title": "Price Remove All",
    "description": `<p>The <strong>data-ms-price:remove="all"</strong> is used to clear out the session storage. When a user goes back and forth looking at prices they get added to the browser's session storage. <br></p><p>This enables a very basic cart feature. Using this data attribute would \u201Cclear the cart\u201D.</p>`,
    "helpItems": [
      {
        "title": "Remove past free plans.",
        "description": `<p>This attribute can only remove paid plans. </p><p>You'll need to use <strong>data-ms-plan:remove="plan-id" </strong>to remove individual free plans. And <a href="https://docs.memberstack.com/hc/en-us/articles/14084137149339-Plan-Logic" target="_blank" class="link">Plan Logic</a> to remove multiple.</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7403200877211-Sites-with-Paid-Plans#h_01HBBXT8J8559GAW67SK72JAM1"
  },
  {
    "id": "plan-add",
    "type": "found",
    "dataAttribute": "data-ms-plan:add",
    "title": "Plan Add",
    "description": "<p>The <strong>data-ms-plan:add</strong> data attribute will add a free plan.</p>",
    "helpItems": [
      {
        "title": "Launch a signup modal.",
        "description": `<p>You're almost there! You need to add the <strong>data-ms-modal="signup" </strong>attribute to your button. </p>`
      },
      {
        "title": "Redirect to my signup page.",
        "description": `<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png" alt="" class="image"><p>If you don't have a signup page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/signup" target="_blank" class="link">sign up component</a>. </p>`
      },
      {
        "title": "Remove past free plans.",
        "description": `<p>This attribute can only remove paid plans. </p><p>You'll need to use <strong>data-ms-plan:remove="plan-id" </strong>to remove individual free plans. And <a href="https://docs.memberstack.com/hc/en-us/articles/14084137149339-Plan-Logic" target="_blank" class="link">Plan Logic</a> to remove multiple.</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12511667983899"
  },
  {
    "id": "plan-update",
    "type": "found",
    "dataAttribute": "data-ms-plan:update",
    "title": "Plan Update",
    "description": "<p>The <strong>data-ms-plan:update</strong> data attribute will add a free plan for new members and replace free plans for existing members. </p>",
    "helpItems": [
      {
        "title": "Launch a signup modal.",
        "description": `<p>You're almost there! You need to add the <strong>data-ms-modal="signup" </strong>attribute to your button. </p>`
      },
      {
        "title": "Redirect to my signup page.",
        "description": `<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png" alt="" class="image"><p>If you don't have a signup page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/signup" target="_blank" class="link">sign up component</a>. </p>`
      },
      {
        "title": "Remove past free plans.",
        "description": `<p>This attribute can only remove paid plans. </p><p>You'll need to use <strong>data-ms-plan:remove="plan-id" </strong>to remove individual free plans. And <a href="https://docs.memberstack.com/hc/en-us/articles/14084137149339-Plan-Logic" target="_blank" class="link">Plan Logic</a> to remove multiple.</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12511667983899"
  },
  {
    "id": "plan-remove",
    "type": "found",
    "dataAttribute": "data-ms-plan:remove",
    "title": "Plan Remove",
    "description": "<p>The <strong>data-ms-plan:remove</strong> data attribute will remove a free plan.</p>",
    "helpItems": [
      {
        "title": "Remove paid plans.",
        "description": `<p>This attribute can only remove free plans. </p><p>You'll need to use <strong>data-ms-price:remove="all" </strong>to remove previously selected paid plans.</p><p>You can automatically remove past one-time purchases using a feature called <a href="https://docs.memberstack.com/hc/en-us/articles/7785629397659-Create-a-Login-Form-in-Webflow" target="_blank" class="link">Plan Logic</a>.</p>`
      },
      {
        "title": "Remove multiple free plans.",
        "description": '<p>This attribute can only remove one free plan at a time.</p><p>However, you can automatically remove multiple free plans using a feature called <a href="https://docs.memberstack.com/hc/en-us/articles/7785629397659-Create-a-Login-Form-in-Webflow" target="_blank" class="link">Plan Logic</a>.</p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/19394955714459-Managing-Member-Plans-with-Data-Attributes"
  },
  {
    "id": "signup-form",
    "type": "found",
    "dataAttribute": "data-ms-form='signup'",
    "title": "Signup Form",
    "description": "<p>We found a signup form!<br></p><p>New visitors can use this form to create an account. &nbsp;</p>",
    "helpItems": [
      {
        "title": "Change redirect.",
        "description": '<p>You can set redirects in a few different ways.</p><p>We recommend setting your global <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout" target="_blank" class="link">Default Redirects</a> first, and then setting your <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout#plans" target="_blank" class="link">Plan Level Redirects</a> after that.</p><p>You can also set the redirect directly on a form. However this is the least flexible option. </p>'
      },
      {
        "title": "Social auth doesn't work.",
        "description": `<p>You'll need to create your own developer account with each social auth provider. <br></p><p>Please see the <a href="https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO" target="_blank" class="link">help center for more.</a></p>`
      },
      {
        "title": "Launch checkout after signup.",
        "description": '<p>You can launch the checkout after signup by adding a <a href="https://docs.memberstack.com/hc/en-us/articles/7384849448091-Getting-Started-with-Plans-Prices" target="_blank" class="link">price attribute</a> to the signup &lt;form&gt;, to a button on this page, or &nbsp;to a button on a previous page. </p>'
      },
      {
        "title": "Form doesn't submit to Webflow.",
        "description": '<p>Memberstack does not send member-info to Webflow. </p><p>However, you can create your own form notifications using the "New Member" event in &nbsp;<a href="https://docs.memberstack.com/hc/en-us/articles/7252991415323-Make-com-Integration" target="_blank" class="link">Make</a> or <a href="https://docs.memberstack.com/hc/en-us/articles/7252886662299-Zapier-Integration" target="_blank" class="link">Zapier.</a></p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7424129003547-Create-a-Signup-Form-in-Webflow"
  },
  {
    "id": "login-form",
    "type": "found",
    "dataAttribute": "data-ms-form='login'",
    "title": "Login Form",
    "description": "<p>We found a login form.</p><p>Returning members can use this form to log into access their account.</p>",
    "helpItems": [
      {
        "title": "Change redirect.",
        "description": '<p>You can set redirects in a few different ways.</p><p>We recommend setting your global <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout" target="_blank" class="link">Default Redirects</a> first, and then setting your <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout#plans" target="_blank" class="link">Plan Level Redirects</a> after that.</p><p>You can also set the redirect directly on a form. However this is the least flexible option. </p>'
      },
      {
        "title": "Social auth doesn't work.",
        "description": `<p>You'll need to create your own developer account with each social auth provider. <br></p><p>Please see the <a href="https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO" target="_blank" class="link">help center for more.</a></p>`
      },
      {
        "title": "Member-specific redirects.",
        "description": '<p>Please see this article to create member-specific pages and redirects. </p><p><a href="https://docs.memberstack.com/hc/en-us/articles/7385311945499" target="_blank" class="link break">https://docs.memberstack.com/hc/en-us/articles/7385311945499</a></p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7785629397659-Create-a-Login-Form-in-Webflow"
  },
  {
    "id": "passwordless-signup",
    "type": "found",
    "dataAttribute": "data-ms-form='passwordless-signup'",
    "title": "Passwordless Signup ",
    "description": '<p>We found a passwordless signup form! </p><p>This is different than a <a href="https://docs.memberstack.com/hc/en-us/articles/7424129003547-Create-a-Signup-Form-in-Webflow" target="_blank" class="link">generic sign up</a> form. Passwordless signup forms have two parts. Part 1 collects the email address. And part 2 asks for a unique code which was emailed to the member. </p>',
    "helpItems": [
      {
        "title": "Change redirect.",
        "description": '<p>You can set redirects in a few different ways.</p><p>We recommend setting your global <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout" target="_blank" class="link">Default Redirects</a> first, and then setting your <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout#plans" target="_blank" class="link">Plan Level Redirects</a> after that.</p><p>You can also set the redirect directly on a form. However this is the least flexible option. </p>'
      },
      {
        "title": "Social auth doesn't work.",
        "description": `<p>You'll need to create your own developer account with each social auth provider. <br></p><p>Please see the <a href="https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO" target="_blank" class="link">help center for more.</a></p>`
      },
      {
        "title": "Customize/send emails.",
        "description": '<p>You can brand, modify, and translate your emails in the dashboard. </p><p><a href="https://app.memberstack.com/settings/emails" class="link break">https://app.memberstack.com/settings/emails</a></p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us"
  },
  {
    "id": "passwordless-login",
    "type": "found",
    "dataAttribute": "data-ms-form='passwordless-login'",
    "title": "Passwordless Login ",
    "description": '<p>We found a passwordless signup form! </p><p>This is different than a <a href="https://docs.memberstack.com/hc/en-us/articles/7785629397659-Create-a-Login-Form-in-Webflow" target="_blank" class="link">generic login</a> form. Passwordless signup forms have two parts. Part 1 collects the email address. And part 2 asks for a unique code which was emailed to the member. </p>',
    "helpItems": [
      {
        "title": "Change redirect.",
        "description": '<p>You can set redirects in a few different ways.</p><p>We recommend setting your global <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout" target="_blank" class="link">Default Redirects</a> first, and then setting your <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715-Default-Redirects-Plan-Redirects-Signup-Login-Logout#plans" target="_blank" class="link">Plan Level Redirects</a> after that.</p><p>You can also set the redirect directly on a form. However this is the least flexible option. </p>'
      },
      {
        "title": "Social auth doesn't work.",
        "description": `<p>You'll need to create your own developer account with each social auth provider. <br></p><p>Please see the <a href="https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO" target="_blank" class="link">help center for more.</a></p>`
      },
      {
        "title": "Customize/send emails.",
        "description": '<p>You can brand, modify, and translate your emails in the dashboard. </p><p><a href="https://app.memberstack.com/settings/emails" class="link break">https://app.memberstack.com/settings/emails</a></p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us"
  },
  {
    "id": "forgot-password-form",
    "type": "found",
    "dataAttribute": "data-ms-form='forgot-password'",
    "title": "Forgot Password Form",
    "description": "<p>We found a forgot password form!</p><p>This type of form is for logged out members to regain access to their account. It is the first of three forms. </p>",
    "helpItems": [
      {
        "title": "Change redirect",
        "description": `<p>You'll need to manually set the redirect for each password form in Webflow.</p><p>Select the &lt;form&gt; element and add the URL or slug for the reset password page. </p><img src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65b8471ba385a8f671a0d4c2_Screenshot%202024-01-30%20at%209.47.17%E2%80%AFAM.png" loading="lazy" alt="" class="image">`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7787009388315-Create-a-Forgot-Password-Form-for-logged-out-users-"
  },
  {
    "id": "reset-password-form",
    "type": "found",
    "dataAttribute": "data-ms-form='reset-password'",
    "title": "Reset Password Form",
    "description": '<p>We found a reset password form!</p><p>This form comes after a <a href="https://docs.memberstack.com/hc/en-us/articles/7787009388315-Create-a-Forgot-Password-Form-for-logged-out-users-" target="_blank" class="link">forgot password form</a>. It allows members with a confirmation code to change their password without logging in. </p>',
    "helpItems": [
      {
        "title": "Change redirect",
        "description": `<p>You'll need to manually set the redirect for each password form in Webflow.</p><p>Select the &lt;form&gt; element and add the URL or slug for the reset password page. </p><img src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65b8471ba385a8f671a0d4c2_Screenshot%202024-01-30%20at%209.47.17%E2%80%AFAM.png" loading="lazy" alt="" class="image">`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7787009388315-Create-a-Forgot-Password-Form-for-logged-out-users-"
  },
  {
    "id": "profile-form",
    "type": "found",
    "dataAttribute": "data-ms-form='profile'",
    "title": "Profile Form",
    "description": "<p>We found a profile form!</p><p>Members can use this form to update their &nbsp;custom fields, email, and password. </p>",
    "helpItems": [
      {
        "title": "Redirect on submission.",
        "description": '<p>You can turn any profile form into an onboarding form by adding a redirect url/slug under form settings. </p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65b847dea88067f906491a12_Screenshot%202024-01-30%20at%209.50.35%E2%80%AFAM.png" alt="" class="image"><p>You can learn more in our help center article on <a href="https://docs.memberstack.com/hc/en-us/articles/7789449570587-Create-a-Multi-step-Onboarding-Form-in-Webflow" target="_blank" class="link">onboarding forms.</a></p>'
      },
      {
        "title": "Display plan info.",
        "description": '<p>Memberstack relies on Stripe\u2019s hosted Billing Portal to allow members to securely manage paid plans, subscriptions, purchases, payment information, etc.</p><p>Create a button and add the <strong>data-ms-action="customer-portal"</strong> attribute.</p><p>Learn more in the <a href="https://docs.memberstack.com/hc/en-us/articles/7782712032539-Stripe-Customer-Portal" target="_blank" class="link">help center. </a></p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7785751124379-Create-Profile-Forms-in-Webflow"
  },
  {
    "id": "password-form",
    "type": "found",
    "dataAttribute": "data-ms-form='password'",
    "title": "Password Form",
    "description": '<p>We found a password form! </p><p>This is a dedicated "change password" UI for logged in members. </p>',
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7785751124379-Create-Profile-Forms-in-Webflow"
  },
  {
    "id": "email-form",
    "type": "found",
    "dataAttribute": "data-ms-form='email'",
    "title": "Email Form",
    "description": '<p>We found an update email form! </p><p>This is a dedicated "change password" UI for logged in members. &nbsp;</p>',
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7785751124379-Create-Profile-Forms-in-Webflow"
  },
  {
    "id": "commenting-channel",
    "type": "found",
    "dataAttribute": "data-ms-channel",
    "title": "Commenting Channel",
    "description": "<p>We found a commenting channel! <br></p><p>A: This channel does not have an ID&nbsp;set, and is therefor using the page slug for a unique identifier.</p><p>B: This channel has an ID&nbsp;of <strong>Homepage</strong>. </p>",
    "helpItems": [
      {
        "title": "Comments from other pages.",
        "description": '<p>Comments are displayed based on the channel ID. Extra comments could be present because you have a duplicate <a href="https://docs.memberstack.com/hc/en-us/articles/18966275380123-Webflow-Commenting#h_01HBE08ZHZ7ZXG70K00KFC77EH" target="_blank" class="link">channel ID</a> set. </p><p>You can remove the channel ID to associate comments with the current URL. </p>'
      },
      {
        "title": "All comments are missing.",
        "description": `<p>Comments are displayed based on the channel ID. Your comments could be missing because you have the wrong <a href="https://docs.memberstack.com/hc/en-us/articles/18966275380123-Webflow-Commenting#h_01HBE08ZHZ7ZXG70K00KFC77EH" target="_blank" class="link">channel ID</a> set. <br></p><p>If you recently changed from <a href="https://docs.memberstack.com/hc/en-us/articles/7595262385819-Managing-Test-Mode-and-Live-Mode" target="_blank" class="link">test mode to live mode</a>, all of your test mode comments are only &nbsp;visible in test mode. You'll need to recreate them in live mode if you need them. </p>`
      },
      {
        "title": "Some comments are missing.",
        "description": `<p>There are a few reasons why this could be happening. <br></p><p>If you recently changed from <a href="https://docs.memberstack.com/hc/en-us/articles/7595262385819-Managing-Test-Mode-and-Live-Mode" target="_blank" class="link">test mode to live mode</a>, all of your test mode comments are only &nbsp;visible in test mode. You'll need to recreate them in live mode if you need them. </p><p>It's also possible that your comments are being hidden for moderation. <a href="https://docs.memberstack.com/hc/en-us/articles/18966275380123-Webflow-Commenting#01HBE4T840HB90WPQEPTJA8RS0" target="_blank" class="link">Learn more here</a>. </p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/18966275380123"
  },
  {
    "id": "logout-link",
    "type": "found",
    "dataAttribute": "data-ms-action='logout'",
    "title": "Logout Link",
    "description": "<p>We found a logout link!</p>",
    "helpItems": [
      {
        "title": "How do I set a page redirect?",
        "description": "<p>There are a few different ways to set &nbsp;redirects in Memberstack.</p><p>Click the documentation button below for the full picture.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7389990064283-Create-a-Logout-Link-or-Button-in-Webflow"
  },
  {
    "id": "signup-modal",
    "type": "found",
    "dataAttribute": "data-ms-modal='signup'",
    "title": "Signup Modal",
    "description": "<p>We found an attribute to launch the pre-build signup modal.</p>",
    "helpItems": [
      {
        "title": "Redirect to my signup page.",
        "description": `<p>You need to remove the <strong>data-ms-modal</strong> attribute manually set the link to your signup page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png" alt="" class="image"><p>If you don't have a signup page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/signup" target="_blank" class="link">sign up component</a>. </p>`
      },
      {
        "title": "How do I set a page redirect?",
        "description": "<p>There are a few different ways to set &nbsp;redirects in Memberstack.</p><p>Click the documentation button below for the full picture.</p>"
      },
      {
        "title": "Change the logo and button color.",
        "description": `<p>You can modify your app's logo and brand color in the dashboard under <a href="https://app.memberstack.com/settings/design" target="_blank" class="link">Design</a>. </p><a href="https://app.memberstack.com/settings/design" target="_blank" class="w-inline-block"><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65c2f096af2b47e160d15a5e_Screenshot%202024-02-07%20at%2011.52.58%E2%80%AFAM.jpg" alt="" class="image"></a><p>If you need more design control you can start &nbsp;from one of our <a href="https://www.memberstack.com/webflow-components" target="_blank" class="link">hundreds of free Webflow UI</a>.</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12971481752091"
  },
  {
    "id": "login-modal",
    "type": "found",
    "dataAttribute": "data-ms-modal='login'",
    "title": "Login Modal",
    "description": "<p>We found an attribute to launch the pre-build login modal.</p>",
    "helpItems": [
      {
        "title": "Redirect to my login page.",
        "description": `<p>You need to remove the <strong>data-ms-modal</strong> attribute manually set the link to your login page (just like any other link on your site).</p><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65c2ee6faf2b47e160cffef1_Screenshot%202024-02-07%20at%2011.43.38%E2%80%AFAM.jpg" alt="" class="image"><p>If you don't have a login page yet, please create one and then add a <a href="https://www.memberstack.com/webflow-components/login" target="_blank" class="link">sign up component</a>. </p>`
      },
      {
        "title": "Change the logo and button color.",
        "description": `<p>You can modify your app's logo and brand color in the dashboard under <a href="https://app.memberstack.com/settings/design" target="_blank" class="link">Design</a>. </p><a href="https://app.memberstack.com/settings/design" target="_blank" class="w-inline-block"><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65c2f096af2b47e160d15a5e_Screenshot%202024-02-07%20at%2011.52.58%E2%80%AFAM.jpg" alt="" class="image"></a><p>If you need more design control you can start &nbsp;from one of our <a href="https://www.memberstack.com/webflow-components" target="_blank" class="link">hundreds of free Webflow UI</a>.</p>`
      },
      {
        "title": "How do I set a page redirect?",
        "description": "<p>There are a few different ways to set &nbsp;redirects in Memberstack.</p><p>Click the documentation button below for the full picture.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12971481752091"
  },
  {
    "id": "profile-modal",
    "type": "found",
    "dataAttribute": "data-ms-modal='profile'",
    "title": "Profile Modal",
    "description": "<p>We found an attribute to launch the pre-build profile modal.</p>",
    "helpItems": [
      {
        "title": "Change the logo and button color.",
        "description": `<p>You can modify your app's logo and brand color in the dashboard under <a href="https://app.memberstack.com/settings/design" target="_blank" class="link">Design</a>. </p><a href="https://app.memberstack.com/settings/design" target="_blank" class="w-inline-block"><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65c2f096af2b47e160d15a5e_Screenshot%202024-02-07%20at%2011.52.58%E2%80%AFAM.jpg" alt="" class="image"></a><p>If you need more design control you can start &nbsp;from one of our <a href="https://www.memberstack.com/webflow-components" target="_blank" class="link">hundreds of free Webflow UI</a>.</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12971481752091"
  },
  {
    "id": "forgot-password-modal",
    "type": "found",
    "dataAttribute": "data-ms-modal='forgot-password'",
    "title": "Forgot Password Modal",
    "description": "<p>We found an attribute to launch the pre-build forgot password modal. This UI gives logged-out members an opportunity to reset their password via email.</p>",
    "helpItems": [
      {
        "title": "Change the logo and button color.",
        "description": `<p>You can modify your app's logo and brand color in the dashboard under <a href="https://app.memberstack.com/settings/design" target="_blank" class="link">Design</a>. </p><a href="https://app.memberstack.com/settings/design" target="_blank" class="w-inline-block"><img loading="lazy" src="https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65c2f096af2b47e160d15a5e_Screenshot%202024-02-07%20at%2011.52.58%E2%80%AFAM.jpg" alt="" class="image"></a><p>If you need more design control you can start &nbsp;from one of our <a href="https://www.memberstack.com/webflow-components" target="_blank" class="link">hundreds of free Webflow UI</a>.</p>`
      },
      {
        "title": "Customize/send emails.",
        "description": '<p>You can brand, modify, and translate your emails in the dashboard. </p><p><a href="https://app.memberstack.com/settings/emails" class="link break">https://app.memberstack.com/settings/emails</a></p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/12971481752091"
  },
  {
    "id": "stripe-customer-portal",
    "type": "found",
    "dataAttribute": "data-ms-action='customer-portal'",
    "title": "Stripe Customer Portal",
    "description": "<p>We found an attribute to launch the Stripe Customer Portal.<br></p><p>Memberstack relies on Stripe\u2019s hosted Billing Portal to enable members to securely manage paid plans, subscriptions, purchases, payment information, etc.</p>",
    "helpItems": [
      {
        "title": "Change branding/design.",
        "description": '<p>Stripe gives you an opportunity to add a splash of branding to its already beautiful UI. </p><p><a href="https://docs.memberstack.com/hc/en-us/articles/13074541430427-Stripe-Checkout-Branding-Design" target="_blank" class="link">Visit the help center &nbsp;for next steps. </a></p>'
      },
      {
        "title": "Show/hide a feature in Stripe.",
        "description": '<p>Memberstack decides what features are enabled by default, but you can change this in your Stripe settings. </p><p><a href="https://docs.memberstack.com/hc/en-us/articles/19863375803163-How-to-Customize-Your-Stripe-Hosted-Portal" target="_blank" class="link">Visit the help center &nbsp;for next steps. </a></p>'
      },
      {
        "title": "White-label the \xA0Stripe domain.",
        "description": `<p>You can change this in your Stripe settings. <br></p><p><a href="https://stripe.com/docs/payments/checkout/custom-domains" target="_blank" class="link">Visit Stripe's help center &nbsp;for next steps. </a></p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7782712032539-Stripe-Customer-Portal"
  },
  {
    "id": "resend-verification-email",
    "type": "found",
    "dataAttribute": "data-ms-action='resend-verification-email'",
    "title": "Resend Verification Email",
    "description": "<p>We found an attribute to resend verification emails. <br></p><p>Memberstack automatically sends a verification message, but members can request a new email just incase. </p>",
    "helpItems": [
      {
        "title": "Customize/send emails.",
        "description": '<p>You can brand, modify, and translate your emails in the dashboard. </p><p><a href="https://app.memberstack.com/settings/emails" class="link break">https://app.memberstack.com/settings/emails</a></p>'
      },
      {
        "title": 'Change Email "From" Address.',
        "description": `<p>Memberstack's password reset emails and email verification emails come from a generic <strong>no-reply@memberstack.io</strong> email address.</p><p>We can &nbsp;change the "from" email for you.<a href="https://docs.memberstack.com/hc/en-us/articles/11193994555547-Change-the-From-Email-Address" target="_blank" class="link"> Learn more here</a>.</p>`
      },
      {
        "title": "Not getting emails.",
        "description": '<p>Emails usually arrive in a few seconds. Slow delivery times could be caused by slow internet, increased demand, or the emails are going to spam. <br></p><p>Please <a href="https://docs.memberstack.com/hc/en-us/requests/new" target="_blank" class="link">contact support</a> if emails are taking longer than 30 seconds to arrive. &nbsp;</p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/8437630733083-Email-Verification"
  },
  {
    "id": "login-redirect",
    "type": "found",
    "dataAttribute": "data-ms-action='login-redirect'",
    "title": "Login Redirect",
    "description": '<p>We found a button that will dynamically redirect the user based on their <a href="https://docs.memberstack.com/hc/en-us/articles/7384608370715" target="_blank" class="link">login redirect</a>.</p><p>The button is only visible if a member is logged in.</p>',
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/9780287236507-Login-Redirect-Buttons"
  },
  {
    "id": "upload-profile-image",
    "type": "found",
    "dataAttribute": "data-ms-action='profile-image'",
    "title": "Profile Image",
    "description": '<p>We found an attribute for uploading profile images. </p><p>The image is saved automatically on upload. Use <strong>data-ms-member= "profile-image"</strong> to display image. </p>',
    "helpItems": [
      {
        "title": "My form is breaking.",
        "description": "<p>Profile image update buttons are not allowed inside forms. &nbsp;Please remove the attribute or place it outside of the form.</p>"
      },
      {
        "title": "Images are not being displayed.",
        "description": '<p>This feature only works with the <strong><code>&lt;image&gt;</code></strong> element. It does not support CSS background images. <br></p><p>Make sure your image element has the attribute of <strong>data-ms-member= "profile-image"</strong>.</p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/15973891080731-Profile-Images"
  },
  {
    "id": "member-data",
    "type": "found",
    "dataAttribute": "data-ms-member",
    "title": "Member Data",
    "description": "<p>This element will display a member's data or fallback to the placeholder text. </p><p>This data is only visible to the member. </p>",
    "helpItems": [
      {
        "title": "Change placeholder value.",
        "description": "<p>Memberstack will fallback to whatever value is set in Webflow.</p>"
      },
      {
        "title": "Display data publically.",
        "description": `<p>It is only possible to display a member's data publicly if it is... <br>A) Stored in a separate database like the Webflow CMS (<a href="https://www.memberstack.com/webflow-templates/public-member-profiles" target="_blank" class="link">view example</a>). <br>B)&nbsp;Is associated with a comment created by that member (<a href="https://youtu.be/4uvRtQ2d2UM" target="_blank" class="link">view example</a>).</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7389966150939-Member-Data-Attributes-in-Webflow"
  },
  {
    "id": "facebook-login",
    "type": "found",
    "dataAttribute": "data-ms-auth-provider='facebook'",
    "title": "Facebook Login",
    "description": "<p>Members can use this button to login with Facebook. </p>",
    "helpItems": [
      {
        "title": "Blank page / error message",
        "description": "<p>You'll need to create your own developer account with each social auth provider.<br><br>Click the documentation link below.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/9116286679195-Facebook-Authentication"
  },
  {
    "id": "google-login",
    "type": "found",
    "dataAttribute": "data-ms-auth-provider='google'",
    "title": "Google Login",
    "description": "<p>Members can use this button to login with Google. </p>",
    "helpItems": [
      {
        "title": "Blank page / error message",
        "description": "<p>You'll need to create your own developer account with each social auth provider.<br><br>Click the documentation link below.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/8327236548379-Google-Authentication"
  },
  {
    "id": "linkedin-login",
    "type": "found",
    "dataAttribute": "data-ms-auth-provider='linkedin'",
    "title": "LinkedIn Login",
    "description": "<p>Members can use this button to login with LinkedIn. </p>",
    "helpItems": [
      {
        "title": "Blank page / error message",
        "description": "<p>You'll need to create your own developer account with each social auth provider.<br><br>Click the documentation link below.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/9128407335835-LinkedIn-Authentication"
  },
  {
    "id": "spotify-login",
    "type": "found",
    "dataAttribute": "data-ms-auth-provider='spotify'",
    "title": "Spotify Login",
    "description": "<p>Members can use this button to login with Spotify. </p>",
    "helpItems": [
      {
        "title": "Blank page / error message",
        "description": "<p>You'll need to create your own developer account with each social auth provider.<br><br>Click the documentation link below.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/9151679451803-Spotify-Authentication"
  },
  {
    "id": "dribbble-login",
    "type": "found",
    "dataAttribute": "data-ms-auth-provider='dribbble'",
    "title": "Dribbble Login",
    "description": "<p>Members can use this button to login with Dribbble. </p>",
    "helpItems": [
      {
        "title": "Blank page / error message",
        "description": "<p>You'll need to create your own developer account with each social auth provider.<br><br>Click the documentation link below.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/9151726845339-Dribbble-Authentication"
  },
  {
    "id": "github-login",
    "type": "found",
    "dataAttribute": "data-ms-auth-provider='github'",
    "title": "Github Login",
    "description": "<p>Members can use this button to login with Github. </p>",
    "helpItems": [
      {
        "title": "Blank page / error message",
        "description": "<p>You'll need to create your own developer account with each social auth provider.<br><br>Click the documentation link below.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/9151629563291-GitHub-Authentication"
  },
  {
    "id": "gated-content",
    "type": "found",
    "dataAttribute": "data-ms-content",
    "title": "Gated Content",
    "description": "<p>These attributes will change the display state of &nbsp;an element based on the users permissions.</p><p><strong>Needs permission \u2192</strong> Element is hidden and removed. </p><p><strong>Has permission \u2192 </strong>the element is left as-is. &nbsp;</p>",
    "helpItems": [
      {
        "title": "Hide element in Webflow.",
        "description": '<p>First hide the element in Webflow. </p><p>Then, add &nbsp;the attribute <strong>data-ms-bind:style="YOUR_VALUE"</strong> to change the styling of an element. Use the value <strong>display:block</strong> to set it to display block when visible. </p><p><a href="https://docs.memberstack.com/hc/en-us/articles/16015762458011" target="_blank" class="link">Visit the help center &nbsp;for more info. </a></p>'
      },
      {
        "title": "Set to display:block to page load.",
        "description": '<p>First hide the element in Webflow. </p><p>Then, add &nbsp;the attribute <strong>data-ms-bind:style="YOUR_VALUE"</strong> to change the styling of an element. Use the value <strong>display:block</strong> to set it to display block when visible. </p><p><a href="https://docs.memberstack.com/hc/en-us/articles/16015762458011" target="_blank" class="link">Visit the help center &nbsp;for more info. </a></p>'
      },
      {
        "title": "Extra security.",
        "description": '<p>You can host HTML content and links inside of Memberstack for extra security.</p><p><a href="https://docs.memberstack.com/hc/en-us/articles/15074205669403-Hosted-Content" target="_blank" class="link">Visit the help center &nbsp;for more info. </a></p>'
      },
      {
        "title": "Invert functionality.",
        "description": '<p>You can invert the display state of an element by adding an exclamation mark. </p><p>For example data-ms-member="<strong>members</strong>" is content that is only accessible to members. &nbsp;If we change it to data-ms-member="<strong>!members</strong>" now that content &nbsp;is NOT available to members. </p>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7403036765339-Show-and-Hide-Individual-Elements-data-ms-content"
  },
  {
    "id": "post-creator-data",
    "type": "found",
    "dataAttribute": "data-ms-post-creator",
    "title": "Post Creator Data",
    "description": "<p>This element will display the commenter's information. </p><p>This information will update automatically if the member updates their profile. </p>",
    "helpItems": [
      {
        "title": "Change placeholder value.",
        "description": "<p>Memberstack will fallback to whatever value is set in Webflow.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/18966275380123"
  },
  {
    "id": "thread-creator-data",
    "type": "found",
    "dataAttribute": "data-ms-thread-creator",
    "title": "Thread Creator Data",
    "description": "<p>This element will display the commenter's information. </p><p>This information will update automatically if the member updates their profile. </p>",
    "helpItems": [
      {
        "title": "Change placeholder value.",
        "description": "<p>Memberstack will fallback to whatever value is set in Webflow.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/18966275380123"
  },
  {
    "id": "broken-plan-suffix",
    "type": "error",
    "title": "Broken Plan Suffix",
    "description": "<p>We found a <strong>data-ms-plan</strong> data attribute without a ':add', ':update' or ':remove' suffix</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7406222866459"
  },
  {
    "id": "broken-price-suffix",
    "type": "error",
    "title": "Broken Price Suffix",
    "description": "<p>We found a <strong>data-ms-price</strong> data attribute without a ':add', ':update' or ':remove' suffix</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7406222866459"
  },
  {
    "id": "broken-plan-button",
    "type": "error",
    "title": "Broken Plan Button",
    "description": "<p>We found a <strong>data-ms-plan</strong> data attribute without a free plan ID.</p>",
    "helpItems": [
      {
        "title": "Create a paid plan button.",
        "description": "<p>You'll need to swap your <span>data-ms-<strong>plan</strong></span> attribute with a <span>data-ms-<strong>price</strong></span> attribute. </p>"
      },
      {
        "title": "Create a free plan button.",
        "description": `<p>You'll need to locate your plan id and add it to the data-ms-plan attribute. </p><p>Please refer to <a href="https://docs.memberstack.com/hc/en-us/articles/17265502821275" target="_blank" class="link">this doc</a> for more info.</p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/17265502821275"
  },
  {
    "id": "broken-price-button",
    "type": "error",
    "title": "Broken Price Button",
    "description": "<p>We found a <strong>data-ms-price</strong> data attribute that is not using the right value.</p>",
    "helpItems": [
      {
        "title": "Create a paid plan button.",
        "description": `<p>You'll need to swap your <strong>Plan ID</strong> for a more specific <strong>Price ID</strong>. </p><p>Please refer to <a href="https://docs.memberstack.com/hc/en-us/articles/7403200877211-Paid-Plans" target="_blank" class="link">this doc</a> for more info.</p>`
      },
      {
        "title": "Create a free plan button.",
        "description": `<p>You'll need to replace your <strong>data-ms-price</strong> attribute with a <strong>data-ms-plan</strong> attribute.</p><p>Please refer to <a href="https://docs.memberstack.com/hc/en-us/articles/17265502821275" target="_blank" class="link">this doc</a> for more info. </p>`
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/17265502821275"
  },
  {
    "id": "missing-attribute-value",
    "type": "error",
    "title": "Missing Attribute Value",
    "description": "<p>We found a <strong>data-ms-plan</strong> or <strong>data-ms-price</strong> data attribute without a value.</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7252466484635"
  },
  {
    "id": "image-inside-profile-form",
    "type": "error",
    "title": "Image inside Profile Form",
    "description": "<p>Despite the name, Profile Image upload buttons cannot go inside of a profile form. </p><p>They can go anywhere on the page, except inside of a profile form. </p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/15973891080731-Profile-Images"
  },
  {
    "id": "image-inside-signup-form",
    "type": "error",
    "title": "Image inside Signup Form",
    "description": "<p> It is not possible to collect a profile image during sign up, but you can create an onboarding form that prompt the user to add a profile image <em>after</em> sign up. </p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7789449570587-Create-a-Multi-step-Onboarding-Form-in-Webflow"
  },
  {
    "id": "image-inside-comment-form",
    "type": "error",
    "title": "Image inside Comment Form",
    "description": "<p>Profile image update buttons are not allowed inside forms. &nbsp;Please remove the attribute or place it outside of the form.</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/15973891080731-Profile-Images"
  },
  {
    "id": "extra-login-elements",
    "type": "error",
    "title": "Extra Login Elements",
    "description": '<p>We found not-allowed custom field attributes inside your login form.</p><p>You probably have <strong>data-ms-form="login"</strong> attribute on your <strong>signup form</strong>. </p>',
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7785629397659-Create-a-Login-Form-in-Webflow"
  },
  {
    "id": "orphan-commenting-ui",
    "type": "error",
    "title": "Orphan Commenting Attributes",
    "description": "<p>We found a <strong>data-ms-thread</strong> or <strong>data-ms-post</strong> attribute outside of a<strong> data-ms-channel</strong> section. </p><p>Please make sure all commenting UI is placed inside of a parent <strong>data-ms-channel </strong>element. &nbsp;</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/18966275380123"
  },
  {
    "id": "post-in-thread",
    "type": "error",
    "title": "Post Attribute inside a Thread",
    "description": "<p>We found a <strong>data-ms-post</strong> attribute inside of the <strong>thread</strong> section.</p><p>This usually happens if you start to duplicate elements in your design. </p>",
    "helpItems": [],
    "documentationLink": "https://www.loom.com/share/218c58a3babd4c4686184dc12bdbd875"
  },
  {
    "id": "plan-on-social-auth",
    "type": "error",
    "title": "Plan attribute on a social button",
    "description": "<p>We found a <strong>data-ms-plan</strong> or <strong>data-ms-price</strong> attribute on a <strong>data-ms-auth-provider </strong>button. These attributes do not work well together. &nbsp;</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO"
  },
  {
    "id": "private-custom-field",
    "type": "error",
    "title": "Private Custom Fields",
    "description": `<p>We found a <strong>data-ms-post-creator</strong> or a <strong>data-ms-thread-creator</strong> attribute that is private. </p><p>You'll need to update the <strong>custom field settings</strong> to make this data public.<br> <a href="https://docs.memberstack.com/hc/en-us/articles/18966275380123-Webflow-Commenting#public-custom-fields" target="_blank" class="link">Learn how \u2192</a></p>`,
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/18966275380123-Webflow-Commenting#public-custom-fields"
  },
  {
    "id": "misplaced-form-attribute",
    "type": "error",
    "title": "Misplaced Form Attribute",
    "description": '<p>We found a <strong>data-ms-form</strong> data attribute but it is not on a <strong>&lt;form&gt; </strong>element. Please click "documentation" to see how to debug.</p>',
    "helpItems": [],
    "documentationLink": "https://www.loom.com/share/486e0b760845447290c4d7bfd5b100ea"
  },
  {
    "id": "duplicate-install-code",
    "type": "error",
    "title": "Duplicate install code",
    "description": '<p>We found two instances your install code. Please click "documentation" below see how to debug.</p>',
    "helpItems": [],
    "documentationLink": "https://www.loom.com/share/3f3e542458444296841ab9101064693c?sid=cbe21222-4e76-4648-b95d-1574b61c88c2"
  },
  {
    "id": "missing-login-elements",
    "type": "error",
    "title": "Missing Login elements",
    "description": '<p>Your login form is missing one of the following attributes:</p><ul role="list" class="list"><li>data-ms-member="<a href="#">password</a>"</li><li>data-ms-member="<a href="#">email</a>"</li></ul>',
    "helpItems": [
      {
        "title": "Add Social Authentication",
        "description": '<div>You can leave out required data attributes if your form contains social login buttons. &nbsp;<br><br>You can copy <a href="https://www.memberstack.com/webflow-components/auth-button" target="_blank" class="link">components</a> here, and find additional <a href="https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSOhttps://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO" target="_blank" class="link">documentation</a> here. </div>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7785629397659-Create-a-Login-Form-in-Webflow"
  },
  {
    "id": "missing-signup-elements",
    "type": "error",
    "title": "Missing Signup elements",
    "description": '<p>Your signup form is missing one of the following attributes:</p><ul role="list" class="list"><li>data-ms-member="<a href="#">password</a>"</li><li>data-ms-member="<a href="#">email</a>"</li></ul>',
    "helpItems": [
      {
        "title": "Add Social Authentication",
        "description": '<div>You can leave out required data attributes if your form contains social login buttons. &nbsp;<br><br>You can copy <a href="https://www.memberstack.com/webflow-components/auth-button" target="_blank" class="link">components</a> here, and find additional <a href="https://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSOhttps://docs.memberstack.com/hc/en-us/sections/9188390078491-Social-Authentication-SSO" target="_blank" class="link">documentation</a> here. </div>'
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7424129003547-Create-a-Signup-Form-in-Webflow"
  },
  {
    "id": "missing-redirect",
    "type": "warning",
    "title": "Missing Redirect",
    "description": '<p>Your forgot password form does not have a redirect set. </p><div><a data-documentation="" href="https://docs.memberstack.com/hc/en-us/articles/7787009388315-Create-a-Forgot-Password-Form-for-logged-out-users#h_01HQ9DESYG2B53882YJ20ZQJ6K" target="_blank" class="help-option w-inline-block"><div>Documentation</div><div class="svg w-embed"><svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path fill="currentColor" d="M280-280q-83 0-141.5-58.5T80-480q0-83 58.5-141.5T280-680h120q17 0 28.5 11.5T440-640q0 17-11.5 28.5T400-600H280q-50 0-85 35t-35 85q0 50 35 85t85 35h120q17 0 28.5 11.5T440-320q0 17-11.5 28.5T400-280H280Zm80-160q-17 0-28.5-11.5T320-480q0-17 11.5-28.5T360-520h240q17 0 28.5 11.5T640-480q0 17-11.5 28.5T600-440H360Zm200 160q-17 0-28.5-11.5T520-320q0-17 11.5-28.5T560-360h120q50 0 85-35t35-85q0-50-35-85t-85-35H560q-17 0-28.5-11.5T520-640q0-17 11.5-28.5T560-680h120q83 0 141.5 58.5T880-480q0 83-58.5 141.5T680-280H560Z"></path></svg></div></a></div>',
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7787009388315-Create-a-Forgot-Password-Form-for-logged-out-users#h_01HQ9DESYG2B53882YJ20ZQJ6K"
  },
  {
    "id": "misplaced-install-code",
    "type": "warning",
    "title": "Misplaced install code",
    "description": '<p>The Memberstack Install script is outside of the &nbsp;<strong>&lt;header&gt;</strong> code section.</p><p>We recommend moving this script to the very top of the <strong>&lt;header&gt;</strong> code section.</p><div><a data-documentation="" href="https://docs.memberstack.com/hc/en-us/articles/7253090768539-Installing-Memberstack-in-Webflow" target="_blank" class="help-option w-inline-block"><div>Documentation</div><div class="svg w-embed"><svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path fill="currentColor" d="M280-280q-83 0-141.5-58.5T80-480q0-83 58.5-141.5T280-680h120q17 0 28.5 11.5T440-640q0 17-11.5 28.5T400-600H280q-50 0-85 35t-35 85q0 50 35 85t85 35h120q17 0 28.5 11.5T440-320q0 17-11.5 28.5T400-280H280Zm80-160q-17 0-28.5-11.5T320-480q0-17 11.5-28.5T360-520h240q17 0 28.5 11.5T640-480q0 17-11.5 28.5T600-440H360Zm200 160q-17 0-28.5-11.5T520-320q0-17 11.5-28.5T560-360h120q50 0 85-35t35-85q0-50-35-85t-85-35H560q-17 0-28.5-11.5T520-640q0-17 11.5-28.5T560-680h120q83 0 141.5 58.5T880-480q0 83-58.5 141.5T680-280H560Z"></path></svg></div></a></div>',
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/7253090768539-Installing-Memberstack-in-Webflow"
  },
  {
    "id": "plan-without-action",
    "type": "warning",
    "title": "Plan Button without an Action",
    "description": "<p>We found a <strong>data-ms-plan</strong> attribute without a <strong>page link</strong> or <strong>data-ms-modal</strong>.</p><p>You can disregard this warning if that was intentional.</p>",
    "helpItems": [
      {
        "title": "Redirect to my signup page.",
        "description": "<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading='lazy' src='https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png' alt=''><p>If you don't have a signup page yet, please create one and then add a <a href='https://www.memberstack.com/webflow-components/signup' target='_blank'>sign up component</a>.</p>"
      },
      {
        "title": "Launch a signup modal.",
        "description": "<p>You're almost there! You need to add the <strong>data-ms-modal='signup' </strong>attribute to your button.</p>"
      }
    ],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/19394955714459"
  },
  {
    "id": "price-without-action",
    "type": "warning",
    "title": "Price Button without an Action",
    "description": "<p>We found a <strong>data-ms-price</strong> attribute without a <strong>page link</strong> or <strong>data-ms-modal</strong>.</p><p>You can disregard this warning if that was intentional.</p>",
    "helpItems": [
      {
        "title": "launch the checkout process.",
        "description": "<p>This attribute will only launch the checkout process for logged-in members. </p><p> The checkout will launch automatically after you create an account or log in. </p>"
      },
      {
        "title": "Redirect to my signup page.",
        "description": "<p>You need to manually set the link to your signup page (just like any other link on your site).</p><img loading='lazy' src='https://assets-global.website-files.com/65a6d87f7ae30844cde0911b/65a943f5672ffd06c81856ee_Screenshot%202024-01-18%20at%2010.29.49%E2%80%AFAM.png' alt=''><p>If you don't have a signup page yet, please create one and then add a <a href='https://www.memberstack.com/webflow-components/signup' target='_blank'>sign up component</a>.</p>"
      },
      {
        "title": "Launch a signup modal.",
        "description": "<p>You're almost there! You need to add the <strong>data-ms-modal='signup' </strong>attribute to your button.</p>"
      }
    ]
  },
  {
    "id": "incorrect-plan-id",
    "type": "error",
    "title": "Incorrect Plan ID",
    "description": "<p>This page contains a <b>data-ms-plan='PLAN_ID'</b> that is incorrect or from another project. Replace it with an attribute from your plans page.</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/23346885800219"
  },
  {
    "id": "incorrect-price-id",
    "type": "error",
    "title": "Incorrect Price ID",
    "description": "<p>This page contains a <b>data-ms-price='PRICE_ID'</b> that is incorrect or from another project. Replace it with an attribute from your prices page.</p>",
    "helpItems": [],
    "documentationLink": "https://docs.memberstack.com/hc/en-us/articles/23346885800219"
  },
  {
    "id": "price-update",
    "type": "found",
    "dataAttribute": "data-ms-price:update",
    "title": "Price Update",
    "description": "<p>You previously selected a paid plan attribute.</p>",
    "helpItems": [],
    "documentationLink": "#"
  }
];
function getAndLogSessionStorageItem(key, inspectorData) {
  const item = sessionStorage.getItem(key);
  if (item) {
    console.log(`%c${key} cart found: ${item}`, "color: green");
    SetCartData(item);
    AddInspectorData(inspectorData);
  }
}
function checkCartSessionStorage() {
  getAndLogSessionStorageItem("ms_plan", "ready-for-signup");
  getAndLogSessionStorageItem("ms_price", "ready-for-checkout");
}
function checkFoundDataAttributes$1() {
  const foundItems = inspectorItems.filter(
    (item) => item.type === "found"
  );
  const checkedAttributes = /* @__PURE__ */ new Set();
  for (const item of foundItems) {
    const attributeKey = item.dataAttribute.includes(":") ? item.dataAttribute.replace(/:/g, "\\:") : item.dataAttribute;
    if (checkedAttributes.has(attributeKey))
      continue;
    checkedAttributes.add(attributeKey);
    const dataAttribute = document.querySelector(`[${attributeKey}]`);
    if (dataAttribute) {
      console.log(`%c${item.id} found`, "color: green");
      AddInspectorData(item.id);
    }
  }
}
function logError(message, inspectorDataKey) {
  console.log(`%c${message}`, "color: red");
  AddInspectorData(inspectorDataKey);
}
function logWarning(message, inspectorDataKey) {
  console.log(`%c${message}`, "color: yellow");
  AddInspectorData(inspectorDataKey);
}
function checkElements(selector, checkFn) {
  const elements = document.querySelectorAll(selector);
  elements.forEach((element2) => checkFn(element2));
}
function checkAttributeForAddOrUpdate(element2, attributeName, inspectorDataKey) {
  const attributeNames = element2.getAttributeNames();
  const validAttribute = attributeNames.find(
    (attrName) => attrName.startsWith(attributeName + ":") && (element2.getAttribute(attrName).startsWith("pln_") || element2.getAttribute(attrName).startsWith("prc_"))
  );
  if (!validAttribute) {
    const errorMessage = `The ${attributeName} attribute's suffix is incorrect (e.g. ${attributeName}:add, ${attributeName}:update, ${attributeName}:remove).`;
    logError(errorMessage, inspectorDataKey);
    addXRayErrorElement(element2, errorMessage);
  }
}
function addXRayErrorElement(element2, message) {
  return __async(this, null, function* () {
    AddXRayErrorElement({ element: element2, message });
  });
}
function checkFormElements(formType) {
  return __async(this, null, function* () {
    const forms = document.querySelectorAll(
      `[data-ms-form='${formType}']`
    );
    forms.forEach((form) => {
      const emailInput = form.querySelector("[data-ms-member='email']");
      const passwordInput = form.querySelector(
        "[data-ms-member='password']"
      );
      const socialAuth = form.querySelector("[data-ms-auth-provider]");
      if (!emailInput || !passwordInput && !socialAuth) {
        logError(
          `Missing ${formType.charAt(0).toUpperCase() + formType.slice(1)} Elements`,
          `missing-${formType}-elements`
        );
        addXRayErrorElement(
          form,
          `Missing ${formType.charAt(0).toUpperCase() + formType.slice(1)} Elements`
        );
      }
    });
  });
}
var checkedForErrors = false;
function checkErrors() {
  return __async(this, null, function* () {
    let appData;
    AppStore.subscribe((data) => {
      if (!data.initialValue && checkedForErrors === false) {
        appData = data;
        checkedForErrors = true;
        runChecks();
      }
    });
    function runChecks() {
      return __async(this, null, function* () {
        checkElements("[data-ms-plan], [data-ms-price]", (element2) => {
          if (element2.hasAttribute("data-ms-plan")) {
            checkAttributeForAddOrUpdate(
              element2,
              "data-ms-plan",
              "broken-plan-suffix"
            );
          }
          if (element2.hasAttribute("data-ms-price")) {
            checkAttributeForAddOrUpdate(
              element2,
              "data-ms-price",
              "broken-price-suffix"
            );
          }
        });
        checkElements(
          "[data-ms-plan\\:update], [data-ms-plan\\:add], [data-ms-plan\\:remove]",
          (element2) => {
            const attributeValue = element2.getAttribute("data-ms-plan:update") || element2.getAttribute("data-ms-plan:add") || element2.getAttribute("data-ms-plan:remove");
            if (!attributeValue) {
              logError("Broken Plan Button Found", "broken-plan-button");
              addXRayErrorElement(element2, "Broken Plan Button Found");
              return;
            }
            if (!attributeValue.startsWith("pln_")) {
              logError("Broken Plan Button Found", "broken-plan-button");
              addXRayErrorElement(element2, "Broken Plan Button Found");
            }
          }
        );
        checkElements(
          "[data-ms-price\\:update], [data-ms-price\\:add], [data-ms-price\\:remove]",
          (element2) => {
            const attributeNames = element2.getAttributeNames();
            attributeNames.forEach((attrName) => {
              if (attrName.startsWith("data-ms-price")) {
                if (attrName.includes(":")) {
                  const suffix = attrName.split(":")[1];
                  if (suffix === "add" || suffix === "update") {
                    if (!element2.getAttribute(attrName).startsWith("prc_")) {
                      logError(
                        "Broken Price Button Found",
                        "broken-price-button"
                      );
                      addXRayErrorElement(
                        element2,
                        "Broken Price Button Found"
                      );
                    }
                  } else if (suffix === "remove") {
                    if (element2.getAttribute(attrName) !== "all") {
                      logError(
                        "Broken Price Button Found",
                        "broken-price-button"
                      );
                      addXRayErrorElement(
                        element2,
                        "Broken Price Button Found"
                      );
                    }
                  }
                } else {
                  logError(
                    "Broken Price Button Found",
                    "broken-price-button"
                  );
                  addXRayErrorElement(
                    element2,
                    "Broken Price Button Found"
                  );
                }
              }
            });
          }
        );
        ["profile", "signup", "comment"].forEach((type) => {
          checkElements(`[data-ms-form='${type}']`, (form) => {
            const profileImageUploadButton = form.querySelector(
              "[data-ms-action='profile-image']"
            );
            if (profileImageUploadButton) {
              logError(
                `Profile Image Upload Button Found Inside ${type} Form`,
                `image-inside-${type}-form`
              );
              addXRayErrorElement(
                profileImageUploadButton,
                `Profile Image Upload Button Found Inside ${type.charAt(0).toUpperCase() + type.slice(1)} Form`
              );
            }
          });
        });
        checkElements("[data-ms-form='login']", (form) => {
          const invalidLoginElements = form.querySelectorAll(
            "[data-ms-member]:not([data-ms-member='email']):not([data-ms-member='password'])"
          );
          if (invalidLoginElements.length > 0) {
            logError(
              "Extra Login Elements Found Inside Login Form",
              "extra-login-elements"
            );
            invalidLoginElements.forEach(
              (element2) => addXRayErrorElement(
                element2,
                "Extra Login Elements Found Inside Login Form"
              )
            );
          }
        });
        checkElements(
          "[data-ms-price], [data-ms-plan], [data-ms-plan\\:add], [data-ms-plan\\:update], [data-ms-plan\\:remove], [data-ms-price\\:add], [data-ms-price\\:update]",
          (element2) => {
            const attributeValue = element2.getAttribute("data-ms-price") || element2.getAttribute("data-ms-plan") || element2.getAttribute("data-ms-plan:add") || element2.getAttribute("data-ms-plan:update") || element2.getAttribute("data-ms-plan:remove") || element2.getAttribute("data-ms-price:add") || element2.getAttribute("data-ms-price:update");
            if (attributeValue) {
              const freePlans = appData.plans.filter(
                (plan) => plan.prices.length === 0
              );
              const paidPlans = appData.plans.filter(
                (plan) => plan.prices.length > 0
              );
              const freePlanIds = freePlans.map((plan) => plan.id);
              const paidPlanIds = paidPlans.map((plan) => plan.prices.map((price) => price.id)).flat();
              if (attributeValue.startsWith("pln_") && !freePlanIds.includes(attributeValue)) {
                logError("Incorrect Plan ID", "incorrect-plan-id");
                addXRayErrorElement(element2, "Incorrect Plan ID");
              }
              if (attributeValue.startsWith("prc_") && !paidPlanIds.includes(attributeValue)) {
                logError("Incorrect Price ID", "incorrect-price-id");
                addXRayErrorElement(element2, "Incorrect Price ID");
              }
            }
          }
        );
        ["[data-ms-thread]", "[data-ms-post]"].forEach((selector) => {
          checkElements(selector, (element2) => {
            if (!element2.closest("[data-ms-channel]")) {
              logError(
                "Orphan Commenting UI Found",
                "orphan-commenting-ui"
              );
              addXRayErrorElement(element2, "Orphan Commenting UI Found");
            }
          });
        });
        checkElements("[data-ms-thread] [data-ms-post]", (element2) => {
          if (element2.getAttribute("data-ms-post") === "showThreads")
            return;
          logError("Post Inside Thread Found", "post-in-thread");
          addXRayErrorElement(element2, "Post Inside Thread Found");
        });
        checkElements("[data-ms-auth-provider]", (button) => {
          if (button.getAttribute("data-ms-plan\\:add") || button.getAttribute("data-ms-plan\\:update") || button.getAttribute("data-ms-plan\\:remove") || button.getAttribute("data-ms-price\\:add") || button.getAttribute("data-ms-price\\:update") || button.getAttribute("data-ms-price\\:remove")) {
            logError(
              "Plan or Price Attribute Found on Social Button",
              "plan-on-social-auth"
            );
            addXRayErrorElement(
              button,
              "Plan or Price Attribute Found on Social Button"
            );
          }
        });
        const checkCustomFieldVisibility = (element2, attribute, messageKey) => {
          const customFieldKey = element2.getAttribute(attribute);
          const customField = appData.customFields.find(
            (field) => field.key === customFieldKey
          );
          if (customField && customField.visibility === "PRIVATE") {
            logError(
              `Private Custom Field Found on ${attribute}`,
              messageKey
            );
            addXRayErrorElement(
              element2,
              `Private Custom Field Found on ${attribute}`
            );
          }
        };
        setTimeout(() => {
          ["[data-ms-post-creator]", "[data-ms-thread-creator]"].forEach(
            (selector) => {
              checkElements(selector, (element2) => {
                checkCustomFieldVisibility(
                  element2,
                  selector.substring(1, selector.length - 1),
                  "private-custom-field"
                );
              });
            }
          );
        }, 1e3);
        checkElements("[data-ms-form]:not(form)", (element2) => {
          logError(
            "Misplaced Form Attribute Found",
            "misplaced-form-attribute"
          );
          addXRayErrorElement(element2, "Misplaced Form Attribute Found");
        });
        const installScripts = document.querySelectorAll(
          "script[src='https://api.memberstack.com/static/memberstack.js']"
        );
        if (installScripts.length > 1) {
          logError(
            "Duplicate Install Code Found",
            "duplicate-install-code"
          );
        }
        yield checkFormElements("signup");
        yield checkFormElements("login");
      });
    }
  });
}
function addXRayWarningElement(element2, message) {
  return __async(this, null, function* () {
    AddXRayWarningElement({ element: element2, message });
  });
}
function checkWarnings() {
  const forgotPasswordForm = document.querySelector(
    "[data-ms-form='forgot-password']"
  );
  if (forgotPasswordForm && !forgotPasswordForm.getAttribute("redirect")) {
    logWarning(
      "Forgot Password Form Missing Redirect",
      "missing-redirect"
    );
    addXRayWarningElement(
      forgotPasswordForm,
      "Forgot Password Form Missing Redirect"
    );
  }
  const installScript = document.querySelector(
    "script[src='https://api.memberstack.com/static/memberstack.js']"
  );
  if (installScript && installScript.parentElement.tagName !== "HEAD") {
    logWarning("Misplaced Install Code", "misplaced-install-code");
  }
  const planButtonsRaw = document.querySelectorAll(
    "[data-ms-plan\\:update], [data-ms-plan\\:add]"
  );
  const planButtons = Array.from(planButtonsRaw).filter((button) => {
    return button.tagName === "BUTTON" || button.tagName === "A";
  });
  planButtons.forEach((button) => {
    if (button.getAttribute("href") === "#" || !button.getAttribute("href") || !button.getAttribute("href") && !button.getAttribute("data-ms-modal")) {
      logWarning("Plan Without Action", "plan-without-action");
      addXRayWarningElement(button, "Plan Button Without Action");
    }
  });
  const priceButtons = document.querySelectorAll(
    "[data-ms-price\\:add], [data-ms-price\\:update]"
  );
  priceButtons.forEach((button) => {
    if (button.getAttribute("href") === "#" || !button.getAttribute("href") || !button.getAttribute("href") && !button.getAttribute("data-ms-modal")) {
      logWarning("Price Without Action", "price-without-action");
      addXRayWarningElement(button, "Price Button Without Action");
    }
  });
}
function checker() {
  checkCartSessionStorage();
  checkFoundDataAttributes$1();
  checkErrors();
  checkWarnings();
}
function add_css$g(target) {
  append_styles(target, "svelte-1d715s6", "svg.svelte-1d715s6{width:34px;max-height:26px;height:100%}");
}
function create_fragment$A(ctx) {
  let svg;
  let path0;
  let path1;
  let path2;
  let path3;
  let path4;
  let path5;
  let path6;
  let path7;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      path2 = svg_element("path");
      path3 = svg_element("path");
      path4 = svg_element("path");
      path5 = svg_element("path");
      path6 = svg_element("path");
      path7 = svg_element("path");
      attr(path0, "fill-rule", "evenodd");
      attr(path0, "clip-rule", "evenodd");
      attr(path0, "d", "M256.999 409.66C277.268 409.66 295.976 402.974 311.037 391.688C335.832 408.578 368.54 412.623 397.96 399.524C443.145 379.406 463.467 326.468 443.349 281.283L391.207 164.171C371.09 118.986 318.151 98.6654 272.966 118.783C266.609 121.614 260.743 125.094 255.413 129.112C250.314 125.364 244.737 122.103 238.719 119.423C193.534 99.3055 140.596 119.627 120.478 164.812L68.337 281.923C48.2193 327.108 68.5404 380.047 113.725 400.164C143.801 413.555 177.312 409.03 202.292 391.181C217.467 402.774 236.429 409.66 256.999 409.66Z");
      attr(path0, "fill", "black");
      attr(path1, "fill-rule", "evenodd");
      attr(path1, "clip-rule", "evenodd");
      attr(path1, "d", "M255.027 156.049C261.668 148.019 270.217 141.36 280.383 136.834C315.574 121.166 356.804 136.993 372.472 172.184L425.017 290.201C440.685 325.393 424.859 366.623 389.667 382.291C361.5 394.832 329.464 387.196 309.763 365.603C296.799 380.639 277.611 390.158 256.199 390.158C234.402 390.158 214.909 380.293 201.941 364.785C182.36 387.408 149.582 395.627 120.834 382.827C85.6421 367.159 69.8154 325.929 85.4836 290.737L138.028 172.72C153.697 137.528 194.927 121.702 230.118 137.37C240.056 141.795 248.45 148.258 255.027 156.049Z");
      attr(path1, "fill", "white");
      attr(path2, "d", "M355.762 235.16L388.364 307.456C394.961 322.086 388.296 339.226 373.478 345.739C358.663 352.254 341.303 345.673 334.705 331.044L308.352 272.601L296.738 299.617V235.16H355.762Z");
      attr(path2, "fill", "#2AA8FF");
      attr(path3, "d", "M359.295 242.995L366.042 257.953C361.966 256.556 357.591 255.796 353.034 255.796C334.211 255.796 318.458 268.752 314.445 286.114L308.352 272.601L301.894 287.622V242.995H359.295Z");
      attr(path3, "fill", "#393939");
      attr(path3, "fill-opacity", "0.2");
      attr(path4, "d", "M261.186 233.89V285.086H206.876L201.246 272.601L195.879 285.086H135.805V276.399L173.457 188.819C178.219 177.743 189.137 171.106 200.605 171.145C211.887 171.106 222.668 177.525 227.551 188.355L254.792 248.764L261.186 233.89Z");
      attr(path4, "fill", "#017ACE");
      attr(path5, "d", "M254.752 248.677L254.792 248.764L280.563 188.819C285.325 177.743 296.243 171.106 307.711 171.145C318.993 171.106 329.774 177.525 334.656 188.355L366.012 257.892C359.689 252.501 351.453 249.24 342.442 249.24C326.786 249.24 313.46 259.084 308.463 272.846L308.352 272.601L283.037 331.487C276.699 346.228 259.459 353.106 244.529 346.849C243.068 346.236 241.683 345.521 240.38 344.715C234.905 341.776 230.33 337.099 227.6 331.044L201.348 272.827C205.3 273.945 209.474 274.543 213.789 274.543C231.947 274.543 247.599 263.948 254.752 248.677Z");
      attr(path5, "fill", "#AEDEFF");
      attr(path6, "d", "M201.083 272.98L182.179 316.954C177.568 319.043 172.431 320.207 167.015 320.207C148.016 320.207 132.446 305.887 131.026 287.517L144 257.339C150.247 252.231 158.267 249.161 167.015 249.161C182.76 249.161 196.15 259.108 201.083 272.98Z");
      attr(path6, "fill", "black");
      attr(path7, "d", "M195.535 285.886L175.93 331.487C169.593 346.228 152.353 353.106 137.423 346.849C122.492 340.591 115.527 323.569 121.864 308.827L143.633 258.192C148.241 256.178 153.337 255.059 158.697 255.059C177.203 255.059 192.565 268.39 195.535 285.886Z");
      attr(path7, "fill", "#393939");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "fill", "none");
      attr(svg, "viewBox", "60.57 111.02 390.54 298.64");
      attr(svg, "class", "svelte-1d715s6");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
      append(svg, path2);
      append(svg, path3);
      append(svg, path4);
      append(svg, path5);
      append(svg, path6);
      append(svg, path7);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var MemberstackLogo = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$A, safe_not_equal, {}, add_css$g);
  }
};
function create_fragment$z(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
      attr(svg, "fill", "currentColor");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var InspectorBadgeOpen = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$z, safe_not_equal, {});
  }
};
function add_css$f(target) {
  append_styles(target, "svelte-rhveiw", ".ms-inspector-badge.svelte-rhveiw{position:fixed;bottom:10px;left:50%;transform:translateX(-50%);z-index:2147483648 !important;background:#fff;padding:0 7px;margin:0;box-shadow:0 0 10px rgba(0, 0, 0, 0.1);cursor:pointer;display:flex;align-items:stretch;color:#000;background-color:#faf3e1;border:1px solid #d78e2c;border-radius:4px;font-size:12px;font-weight:700;font-family:Plus Jakarta Sans, sans-serif;gap:7px;height:42px}.ms-inspector-badge--error.svelte-rhveiw{background-color:#f6cfca;border-color:#e06657}.ms-inspector-badge__text-wrapper.svelte-rhveiw{display:flex;justify-content:center;align-items:center;gap:7px}.ms-inspector-badge__logo.svelte-rhveiw{display:flex;align-items:center;align-self:center}.ms-inspector-badge__text.svelte-rhveiw{align-self:center}.ms-inspector-badge__divider.svelte-rhveiw{border-left:1px solid #d88e2b}.ms-inspector-badge__count.svelte-rhveiw{border:1px solid #c1c1c1;border-radius:4px;background-color:#fff;color:#000;padding:0 7px;margin:7px 0;display:flex;align-items:center;position:relative}.ms-inspector-badge__count--open.svelte-rhveiw{background-color:#fff;color:#000;padding:0}.ms-inspector-badge__error-indicator.svelte-rhveiw{width:10px;height:10px;background-color:#e06657;border-radius:50%;position:absolute;top:0;right:0;transform:translate(50%, -50%)}");
}
function create_else_block_1$1(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Hide Inspector";
      attr(span, "class", "ms-inspector-badge__text svelte-rhveiw");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_2$8(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Test Mode";
      attr(span, "class", "ms-inspector-badge__text svelte-rhveiw");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_1$b(ctx) {
  let span;
  let span_transition;
  let current;
  return {
    c() {
      span = element("span");
      attr(span, "class", "ms-inspector-badge__error-indicator svelte-rhveiw");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      add_render_callback(() => {
        if (!current)
          return;
        if (!span_transition)
          span_transition = create_bidirectional_transition(span, fade, { duration: 300 }, true);
        span_transition.run(1);
      });
      current = true;
    },
    o(local) {
      if (!span_transition)
        span_transition = create_bidirectional_transition(span, fade, { duration: 300 }, false);
      span_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if (detaching && span_transition)
        span_transition.end();
    }
  };
}
function create_else_block$6(ctx) {
  let inspectorbadgeopen;
  let current;
  inspectorbadgeopen = new InspectorBadgeOpen({});
  return {
    c() {
      create_component(inspectorbadgeopen.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inspectorbadgeopen, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(inspectorbadgeopen.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectorbadgeopen.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inspectorbadgeopen, detaching);
    }
  };
}
function create_if_block$e(ctx) {
  let t_value = (
    /*$InspectorStore*/
    (ctx[0].inspectorData.length || 0) + ""
  );
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*$InspectorStore*/
      1 && t_value !== (t_value = /*$InspectorStore*/
      (ctx2[0].inspectorData.length || 0) + ""))
        set_data(t, t_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_fragment$y(ctx) {
  let button;
  let span1;
  let span0;
  let memberstacklogo;
  let t0;
  let t1;
  let span2;
  let t2;
  let span3;
  let t3;
  let current_block_type_index;
  let if_block2;
  let current;
  let mounted;
  let dispose;
  memberstacklogo = new MemberstackLogo({});
  function select_block_type(ctx2, dirty) {
    if (!/*$InspectorStore*/
    ctx2[0].showSidebar)
      return create_if_block_2$8;
    return create_else_block_1$1;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*$InspectorStore*/
    ctx[0].xRayErrorElements.length > 0 && create_if_block_1$b()
  );
  const if_block_creators = [create_if_block$e, create_else_block$6];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (!/*$InspectorStore*/
    ctx2[0].showSidebar)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx);
  if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      button = element("button");
      span1 = element("span");
      span0 = element("span");
      create_component(memberstacklogo.$$.fragment);
      t0 = space();
      if_block0.c();
      t1 = space();
      span2 = element("span");
      t2 = space();
      span3 = element("span");
      if (if_block1)
        if_block1.c();
      t3 = space();
      if_block2.c();
      attr(span0, "class", "ms-inspector-badge__logo svelte-rhveiw");
      attr(span1, "class", "ms-inspector-badge__text-wrapper svelte-rhveiw");
      attr(span2, "class", "ms-inspector-badge__divider svelte-rhveiw");
      attr(span3, "class", "ms-inspector-badge__count svelte-rhveiw");
      toggle_class(
        span3,
        "ms-inspector-badge__count--open",
        /*$InspectorStore*/
        ctx[0].showSidebar
      );
      attr(button, "class", "ms-inspector-badge svelte-rhveiw");
      attr(button, "data-cy", "inspector-button");
      toggle_class(
        button,
        "ms-inspector-badge--error",
        /*$InspectorStore*/
        ctx[0].xRayErrorElements.length > 0
      );
      set_style(
        button,
        "z-index",
        /*$InspectorStore*/
        ctx[0].showSidebar ? 2147483647 : 2147483648
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, span1);
      append(span1, span0);
      mount_component(memberstacklogo, span0, null);
      append(span1, t0);
      if_block0.m(span1, null);
      append(button, t1);
      append(button, span2);
      append(button, t2);
      append(button, span3);
      if (if_block1)
        if_block1.m(span3, null);
      append(span3, t3);
      if_blocks[current_block_type_index].m(span3, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(span1, null);
        }
      }
      if (
        /*$InspectorStore*/
        ctx2[0].xRayErrorElements.length > 0
      ) {
        if (if_block1) {
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$b();
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(span3, t3);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block2 = if_blocks[current_block_type_index];
        if (!if_block2) {
          if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block2.c();
        } else {
          if_block2.p(ctx2, dirty);
        }
        transition_in(if_block2, 1);
        if_block2.m(span3, null);
      }
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          span3,
          "ms-inspector-badge__count--open",
          /*$InspectorStore*/
          ctx2[0].showSidebar
        );
      }
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          button,
          "ms-inspector-badge--error",
          /*$InspectorStore*/
          ctx2[0].xRayErrorElements.length > 0
        );
      }
      if (dirty & /*$InspectorStore*/
      1) {
        set_style(
          button,
          "z-index",
          /*$InspectorStore*/
          ctx2[0].showSidebar ? 2147483647 : 2147483648
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(memberstacklogo.$$.fragment, local);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(memberstacklogo.$$.fragment, local);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      destroy_component(memberstacklogo);
      if_block0.d();
      if (if_block1)
        if_block1.d();
      if_blocks[current_block_type_index].d();
      mounted = false;
      dispose();
    }
  };
}
function instance$h($$self, $$props, $$invalidate) {
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(0, $InspectorStore = $$value));
  function toggleSidebar() {
    SetShowSidebar(!$InspectorStore.showSidebar);
  }
  const click_handler = () => toggleSidebar();
  return [$InspectorStore, toggleSidebar, click_handler];
}
var InspectorBadge = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$h, create_fragment$y, safe_not_equal, {}, add_css$f);
  }
};
var eventListeners = [];
function addEventListenerWithTracking(type, listener) {
  window.addEventListener(type, listener);
  eventListeners.push({ type, listener });
}
function removeAllEventListeners() {
  eventListeners.forEach(({ type, listener }) => {
    window.removeEventListener(type, listener);
  });
  eventListeners.length = 0;
}
function updatePosition(element2, highlightBox, label) {
  const rect = element2.getBoundingClientRect();
  highlightBox.style.top = `${rect.top + window.scrollY - 6}px`;
  highlightBox.style.left = `${rect.left + window.scrollX - 6}px`;
  label.style.top = `${rect.top + window.scrollY - label.offsetHeight - 6}px`;
  label.style.left = `${rect.left + window.scrollX - 6}px`;
}
function escapeCSSSelector(selector) {
  return selector.replace(/([:])/g, "\\$1");
}
function calculateZIndex(originalZIndex, type) {
  let newZIndex = originalZIndex;
  if (isNaN(newZIndex) || newZIndex < 0) {
    newZIndex = 50;
  }
  if (type === "error") {
    newZIndex += 3;
  } else if (type === "warning") {
    newZIndex += 2;
  } else {
    newZIndex += 1;
  }
  return newZIndex;
}
function createHighlightBox(rect, color, zindex, type) {
  const box = document.createElement("div");
  box.classList.add("ms-xray-outline");
  Object.assign(box.style, {
    position: "absolute",
    top: `${rect.top + window.scrollY - 6}px`,
    left: `${rect.left + window.scrollX - 6}px`,
    width: `${rect.width + 12}px`,
    height: `${rect.height + 12}px`,
    border: "2px solid",
    borderColor: color,
    pointerEvents: "none",
    zIndex: calculateZIndex(zindex, type)
  });
  document.body.appendChild(box);
  return box;
}
function getSvgForType(type) {
  const svgs = {
    found: `
    <svg
        xmlns="http://www.w3.org/2000/svg"
        height="13"
        viewBox="0 -960 960 960"
        width="13"
        ><path
          fill="currentColor"
          d="M120-200q-17 0-28.5-11.5T80-240q0-17 11.5-28.5T120-280h320q17 0 28.5 11.5T480-240q0 17-11.5 28.5T440-200H120Zm0-200q-17 0-28.5-11.5T80-440q0-17 11.5-28.5T120-480h120q17 0 28.5 11.5T280-440q0 17-11.5 28.5T240-400H120Zm0-200q-17 0-28.5-11.5T80-640q0-17 11.5-28.5T120-680h120q17 0 28.5 11.5T280-640q0 17-11.5 28.5T240-600H120Zm440 280q-83 0-141.5-58.5T360-520q0-83 58.5-141.5T560-720q83 0 141.5 58.5T760-520q0 29-8.5 57.5T726-410l126 126q11 11 11 28t-11 28q-11 11-28 11t-28-11L670-354q-24 17-52.5 25.5T560-320Zm0-80q50 0 85-35t35-85q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 50 35 85t85 35Z"
        />
    </svg>
    `,
    // SVG for 'found' items
    error: `
    <svg xmlns="http://www.w3.org/2000/svg" height="13" viewBox="0 -960 960 960" width="13"><path fill="currentColor" d="m480-424 116 116q11 11 28 11t28-11q11-11 11-28t-11-28L536-480l116-116q11-11 11-28t-11-28q-11-11-28-11t-28 11L480-536 364-652q-11-11-28-11t-28 11q-11 11-11 28t11 28l116 116-116 116q-11 11-11 28t11 28q11 11 28 11t28-11l116-116Zm0 344q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z"></path></svg>
    `,
    // SVG for 'error' items
    warning: `
    <svg xmlns="http://www.w3.org/2000/svg" height="13" viewBox="0 -960 960 960" width="13"><path fill="currentColor" d="M109-120q-11 0-20-5.5T75-140q-5-9-5.5-19.5T75-180l370-640q6-10 15.5-15t19.5-5q10 0 19.5 5t15.5 15l370 640q6 10 5.5 20.5T885-140q-5 9-14 14.5t-20 5.5H109Zm371-120q17 0 28.5-11.5T520-280q0-17-11.5-28.5T480-320q-17 0-28.5 11.5T440-280q0 17 11.5 28.5T480-240Zm0-120q17 0 28.5-11.5T520-400v-120q0-17-11.5-28.5T480-560q-17 0-28.5 11.5T440-520v120q0 17 11.5 28.5T480-360Z"></path></svg>
    `
    // SVG for 'warning' items
  };
  return svgs[type] || "";
}
function createLabel(rect, text2, color, type, zindex, elementDataAttribute) {
  const label = document.createElement("div");
  label.classList.add("ms-xray-tooltip");
  const svg = getSvgForType(type);
  if (type === "found" && elementDataAttribute !== void 0 && text2 === "data-ms-member") {
    label.innerHTML = `${svg} ${text2}='${elementDataAttribute}'`;
  } else {
    label.innerHTML = `${svg} ${text2}`;
  }
  Object.assign(label.style, {
    position: "absolute",
    top: `${rect.top + window.scrollY}px`,
    left: `${rect.left + window.scrollX - 6}px`,
    backgroundColor: color,
    color: color === "#efd350" ? "#000" : "#fff",
    padding: "2px 3px",
    fontSize: "9px",
    lineHeight: "1",
    fontFamily: "Plus Jakarta Sans, sans-serif",
    zIndex: calculateZIndex(zindex, type),
    whiteSpace: "nowrap",
    borderRadius: "3px 3px 0 0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    gap: "3px",
    pointerEvents: "none"
  });
  document.body.appendChild(label);
  return label;
}
function removeXrays() {
  return __async(this, null, function* () {
    document.querySelectorAll(".ms-xray-outline, .ms-xray-tooltip").forEach((el) => el.remove());
    removeAllEventListeners();
  });
}
function checkAttributes(type) {
  return __async(this, null, function* () {
    const store = get_store_value(InspectorStore);
    let items;
    switch (type) {
      case "error":
        items = store.xRayErrorElements;
        break;
      case "warning":
        items = store.xRayWarningElements;
        break;
      case "found":
        items = inspectorItems.filter((item) => item.type === "found");
        break;
      default:
        items = [];
    }
    const color = type === "error" ? "#e06657" : type === "warning" ? "#efd350" : "#5c9d6f";
    items.forEach((item) => {
      let elements;
      if (type === "found") {
        const attribute = escapeCSSSelector(item.dataAttribute);
        elements = document.querySelectorAll(`[${attribute}]`);
      } else {
        elements = [item.element];
      }
      elements.forEach((el) => {
        if (!el || el.offsetParent === null)
          return;
        const rect = el.getBoundingClientRect();
        const zindex = window.getComputedStyle(el).zIndex;
        const highlightBox = createHighlightBox(rect, color, zindex, type);
        const label = createLabel(rect, type === "found" ? item.dataAttribute : item.message, color, type, zindex, el.getAttribute(item.dataAttribute));
        const update2 = () => updatePosition(el, highlightBox, label);
        update2();
        addEventListenerWithTracking("scroll", update2);
        addEventListenerWithTracking("resize", update2);
      });
    });
  });
}
function checkFoundDataAttributes() {
  return __async(this, null, function* () {
    checkAttributes("found");
  });
}
function checkErrorDataAttributes() {
  return __async(this, null, function* () {
    checkAttributes("error");
  });
}
function checkWarningDataAttributes() {
  return __async(this, null, function* () {
    checkAttributes("warning");
  });
}
function create_fragment$x(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "AI";
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
var AIIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$x, safe_not_equal, {});
  }
};
function create_fragment$w(ctx) {
  let svg;
  let path0;
  let path1;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr(path0, "d", "M0 0h24v24H0V0z");
      attr(path0, "fill", "none");
      attr(path1, "d", "M4 13h6c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1zm0 8h6c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1zm10 0h6c.55 0 1-.45 1-1v-8c0-.55-.45-1-1-1h-6c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1zM13 4v4c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1h-6c-.55 0-1 .45-1 1z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24px");
      attr(svg, "viewBox", "0 0 24 24");
      attr(svg, "width", "24px");
      attr(svg, "fill", "currentColor");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ComponentsIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$w, safe_not_equal, {});
  }
};
function create_fragment$v(ctx) {
  let svg;
  let path0;
  let path1;
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr(path0, "d", "M0 0h24v24H0V0z");
      attr(path0, "fill", "none");
      attr(path1, "d", "M20 6h-1v8c0 .55-.45 1-1 1H6v1c0 1.1.9 2 2 2h10l4 4V8c0-1.1-.9-2-2-2zm-3 5V4c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v13l4-4h9c1.1 0 2-.9 2-2z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "100%");
      attr(svg, "viewBox", "0 0 24 24");
      attr(svg, "width", "1000px");
      attr(svg, "fill", "currentColor");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var ForumsIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$v, safe_not_equal, {});
  }
};
function create_fragment$u(ctx) {
  let svg;
  let g0;
  let rect0;
  let rect1;
  let g1;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      g0 = svg_element("g");
      rect0 = svg_element("rect");
      rect1 = svg_element("rect");
      g1 = svg_element("g");
      path = svg_element("path");
      attr(rect0, "fill", "none");
      attr(rect0, "height", "24");
      attr(rect0, "width", "24");
      attr(rect1, "fill", "none");
      attr(rect1, "height", "24");
      attr(rect1, "width", "24");
      attr(path, "d", "M12,2C6.48,2,2,6.48,2,12c0,5.52,4.48,10,10,10s10-4.48,10-10C22,6.48,17.52,2,12,2z M19.46,9.12l-2.78,1.15 c-0.51-1.36-1.58-2.44-2.95-2.94l1.15-2.78C16.98,5.35,18.65,7.02,19.46,9.12z M12,15c-1.66,0-3-1.34-3-3s1.34-3,3-3s3,1.34,3,3 S13.66,15,12,15z M9.13,4.54l1.17,2.78c-1.38,0.5-2.47,1.59-2.98,2.97L4.54,9.13C5.35,7.02,7.02,5.35,9.13,4.54z M4.54,14.87 l2.78-1.15c0.51,1.38,1.59,2.46,2.97,2.96l-1.17,2.78C7.02,18.65,5.35,16.98,4.54,14.87z M14.88,19.46l-1.15-2.78 c1.37-0.51,2.45-1.59,2.95-2.97l2.78,1.17C18.65,16.98,16.98,18.65,14.88,19.46z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "100%");
      attr(svg, "viewBox", "0 0 24 24");
      attr(svg, "width", "1000px");
      attr(svg, "fill", "currentColor");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, g0);
      append(g0, rect0);
      append(g0, rect1);
      append(svg, g1);
      append(g1, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var HelpIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$u, safe_not_equal, {});
  }
};
function create_fragment$t(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill-rule", "evenodd");
      attr(path, "clip-rule", "evenodd");
      attr(path, "d", "M13 10C13 11.1046 13.8954 12 15 12C16.1046 12 17 11.1046 17 10V5C17 3.89543 16.1046 3 15 3C13.8954 3 13 3.89543 13 5V10ZM5 8C3.89543 8 3 8.89543 3 10C3 11.1046 3.89543 12 5 12H10C11.1046 12 12 11.1046 12 10C12 8.89543 11.1046 8 10 8H5ZM15 13C13.8954 13 13 13.8954 13 15C13 16.1046 13.8954 17 15 17H20C21.1046 17 22 16.1046 22 15C22 13.8954 21.1046 13 20 13H15ZM10 22C8.89543 22 8 21.1046 8 20L8 15C8 13.8954 8.89543 13 10 13C11.1046 13 12 13.8954 12 15V20C12 21.1046 11.1046 22 10 22ZM8 5C8 3.89543 8.89543 3 10 3C11.1046 3 12 3.89543 12 5V7H10C8.89543 7 8 6.10457 8 5ZM3 15C3 16.1046 3.89543 17 5 17C6.10457 17 7 16.1046 7 15V13H5C3.89543 13 3 13.8954 3 15ZM17 20C17 21.1046 16.1046 22 15 22C13.8954 22 13 21.1046 13 20V18H15C16.1046 18 17 18.8954 17 20ZM22 10C22 8.89543 21.1046 8 20 8C18.8954 8 18 8.89543 18 10V12H20C21.1046 12 22 11.1046 22 10Z");
      attr(path, "fill", "currentColor");
      attr(svg, "width", "24");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 0 24 24");
      attr(svg, "fill", "none");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var SlackIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$t, safe_not_equal, {});
  }
};
function create_fragment$s(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M280-80q-33 0-56.5-23.5T200-160q0-33 23.5-56.5T280-240q33 0 56.5 23.5T360-160q0 33-23.5 56.5T280-80Zm400 0q-33 0-56.5-23.5T600-160q0-33 23.5-56.5T680-240q33 0 56.5 23.5T760-160q0 33-23.5 56.5T680-80ZM208-800h590q23 0 35 20.5t1 41.5L692-482q-11 20-29.5 31T622-440H324l-44 80h440q17 0 28.5 11.5T760-320q0 17-11.5 28.5T720-280H280q-45 0-68-39.5t-2-78.5l54-98-144-304H80q-17 0-28.5-11.5T40-840q0-17 11.5-28.5T80-880h65q11 0 21 6t15 17l27 57Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var CartIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$s, safe_not_equal, {});
  }
};
function create_fragment$r(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M120-200q-17 0-28.5-11.5T80-240q0-17 11.5-28.5T120-280h320q17 0 28.5 11.5T480-240q0 17-11.5 28.5T440-200H120Zm0-200q-17 0-28.5-11.5T80-440q0-17 11.5-28.5T120-480h120q17 0 28.5 11.5T280-440q0 17-11.5 28.5T240-400H120Zm0-200q-17 0-28.5-11.5T80-640q0-17 11.5-28.5T120-680h120q17 0 28.5 11.5T280-640q0 17-11.5 28.5T240-600H120Zm440 280q-83 0-141.5-58.5T360-520q0-83 58.5-141.5T560-720q83 0 141.5 58.5T760-520q0 29-8.5 57.5T726-410l126 126q11 11 11 28t-11 28q-11 11-28 11t-28-11L670-354q-24 17-52.5 25.5T560-320Zm0-80q50 0 85-35t35-85q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 50 35 85t85 35Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var MagIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$r, safe_not_equal, {});
  }
};
function create_fragment$q(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M606-105q-23 11-46 2.5T526-134L406-392l-93 130q-17 24-45 15t-28-38v-513q0-25 22.5-36t42.5 5l404 318q23 17 13.5 44T684-440H516l119 255q11 23 2.5 46T606-105Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var PointerIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$q, safe_not_equal, {});
  }
};
function create_fragment$p(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M792-56 624-222q-35 11-71 16.5t-73 5.5q-134 0-245-72T61-462q-5-9-7.5-18.5T51-500q0-10 2.5-19.5T61-538q22-39 47-76t58-66L56-792l56-56 736 736-56 56ZM480-320q11 0 21-1t20-4L305-541q-3 10-4 20t-1 21q0 75 52.5 127.5T480-320Zm292 18L645-428q7-17 11-35t4-37q0-75-52.5-127.5T480-680q-19 0-37 4t-35 12L306-766q42-17 85.5-25.5T480-800q134 0 245.5 72.5T900-537q5 8 7.5 17.5T910-500q0 10-2 19.5t-7 17.5q-24 47-55.5 88T772-302ZM587-486 467-606q26-5 50.5 4t41.5 28q17 18 24.5 41t3.5 47Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var EyeClosedIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$p, safe_not_equal, {});
  }
};
function create_fragment$o(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m480-424 116 116q11 11 28 11t28-11q11-11 11-28t-11-28L536-480l116-116q11-11 11-28t-11-28q-11-11-28-11t-28 11L480-536 364-652q-11-11-28-11t-28 11q-11 11-11 28t11 28l116 116-116 116q-11 11-11 28t11 28q11 11 28 11t28-11l116-116Zm0 344q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var XIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$o, safe_not_equal, {});
  }
};
function create_fragment$n(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M109-120q-11 0-20-5.5T75-140q-5-9-5.5-19.5T75-180l370-640q6-10 15.5-15t19.5-5q10 0 19.5 5t15.5 15l370 640q6 10 5.5 20.5T885-140q-5 9-14 14.5t-20 5.5H109Zm371-120q17 0 28.5-11.5T520-280q0-17-11.5-28.5T480-320q-17 0-28.5 11.5T440-280q0 17 11.5 28.5T480-240Zm0-120q17 0 28.5-11.5T520-400v-120q0-17-11.5-28.5T480-560q-17 0-28.5 11.5T440-520v120q0 17 11.5 28.5T480-360Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var WarningIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$n, safe_not_equal, {});
  }
};
function add_css$e(target) {
  append_styles(target, "svelte-1lrintl", ".svg.svelte-1lrintl{width:1.5em;height:1.5em;justify-content:center;align-items:center;display:flex;margin:0}");
}
function create_fragment$m(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M280-280q-83 0-141.5-58.5T80-480q0-83 58.5-141.5T280-680h120q17 0 28.5 11.5T440-640q0 17-11.5 28.5T400-600H280q-50 0-85 35t-35 85q0 50 35 85t85 35h120q17 0 28.5 11.5T440-320q0 17-11.5 28.5T400-280H280Zm80-160q-17 0-28.5-11.5T320-480q0-17 11.5-28.5T360-520h240q17 0 28.5 11.5T640-480q0 17-11.5 28.5T600-440H360Zm200 160q-17 0-28.5-11.5T520-320q0-17 11.5-28.5T560-360h120q50 0 85-35t35-85q0-50-35-85t-85-35H560q-17 0-28.5-11.5T520-640q0-17 11.5-28.5T560-680h120q83 0 141.5 58.5T880-480q0 83-58.5 141.5T680-280H560Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
      attr(svg, "class", "svg svelte-1lrintl");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LinkIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$m, safe_not_equal, {}, add_css$e);
  }
};
function add_css$d(target) {
  append_styles(target, "svelte-e5yv66", ".ms-inspector-item__content-item__help.svelte-e5yv66{margin-bottom:7px}.ms-inspector-item__content-item__help a{text-decoration:underline;color:#fff;word-break:break-word}.ms-inspector-item__content-item__help a:hover{color:#fff}.ms-inspector-item__content-item__help__title.svelte-e5yv66{width:100%;grid-column-gap:4px;grid-row-gap:4px;border:1px solid #373737;background-color:#535353;border-radius:4px;justify-content:space-between;align-items:center;margin-top:0.6em;margin-bottom:-3px;padding-left:1em;padding-right:1em;line-height:2.7em;display:flex;color:#fff}.ms-inspector-item__content-item__help__title.svelte-e5yv66:hover{border-color:#292929;background-color:#444}.ms-inspector-item__content-item__help__description.svelte-e5yv66{border:1px solid #373737;background-color:#535353;border-bottom-right-radius:4px;border-bottom-left-radius:4px;padding:8px 8px 10px}.ms-inspector-item__content-item__help__description p:last-child{margin-bottom:0}.ms-inspector-item__content-item__help__description img{margin-bottom:7px}");
}
function create_if_block$d(ctx) {
  let div;
  let raw_value = (
    /*helpItem*/
    ctx[0].description + ""
  );
  let div_transition;
  let current;
  return {
    c() {
      div = element("div");
      attr(div, "class", "ms-inspector-item__content-item__help__description svelte-e5yv66");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = raw_value;
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*helpItem*/
      1) && raw_value !== (raw_value = /*helpItem*/
      ctx2[0].description + ""))
        div.innerHTML = raw_value;
    },
    i(local) {
      if (current)
        return;
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
function create_fragment$l(ctx) {
  let div;
  let button;
  let t0_value = (
    /*helpItem*/
    ctx[0].title + ""
  );
  let t0;
  let t1;
  let mounted;
  let dispose;
  let if_block = (
    /*openHelpItem*/
    ctx[1] && create_if_block$d(ctx)
  );
  return {
    c() {
      div = element("div");
      button = element("button");
      t0 = text(t0_value);
      t1 = space();
      if (if_block)
        if_block.c();
      attr(button, "class", "ms-inspector-item__content-item__help__title svelte-e5yv66");
      attr(div, "class", "ms-inspector-item__content-item__help svelte-e5yv66");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, button);
      append(button, t0);
      append(div, t1);
      if (if_block)
        if_block.m(div, null);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*handleClick*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*helpItem*/
      1 && t0_value !== (t0_value = /*helpItem*/
      ctx2[0].title + ""))
        set_data(t0, t0_value);
      if (
        /*openHelpItem*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*openHelpItem*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$d(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      transition_in(if_block);
    },
    o(local) {
      transition_out(if_block);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$g($$self, $$props, $$invalidate) {
  let { helpItem } = $$props;
  let openHelpItem = false;
  function handleClick() {
    $$invalidate(1, openHelpItem = !openHelpItem);
  }
  $$self.$$set = ($$props2) => {
    if ("helpItem" in $$props2)
      $$invalidate(0, helpItem = $$props2.helpItem);
  };
  return [helpItem, openHelpItem, handleClick];
}
var InspectorHelpItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$g, create_fragment$l, safe_not_equal, { helpItem: 0 }, add_css$d);
  }
};
function add_css$c(target) {
  append_styles(target, "svelte-1pe9tmx", "svg.svelte-1pe9tmx{width:8px;height:auto}");
}
function create_fragment$k(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M459-381 314-526q-3-3-4.5-6.5T308-540q0-8 5.5-14t14.5-6h304q9 0 14.5 6t5.5 14q0 2-6 14L501-381q-5 5-10 7t-11 2q-6 0-11-2t-10-7Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "308 -560 344 188");
      attr(
        svg,
        "style",
        /*style*/
        ctx[0]
      );
      attr(svg, "class", "svelte-1pe9tmx");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*style*/
      1) {
        attr(
          svg,
          "style",
          /*style*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance$f($$self, $$props, $$invalidate) {
  let { style = "" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("style" in $$props2)
      $$invalidate(0, style = $$props2.style);
  };
  return [style];
}
var ArrowIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$f, create_fragment$k, safe_not_equal, { style: 0 }, add_css$c);
  }
};
function get_each_context$5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  return child_ctx;
}
function create_if_block_8$1(ctx) {
  let warningicon;
  let current;
  warningicon = new WarningIcon({});
  return {
    c() {
      create_component(warningicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(warningicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(warningicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(warningicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(warningicon, detaching);
    }
  };
}
function create_if_block_7$1(ctx) {
  let xicon;
  let current;
  xicon = new XIcon({});
  return {
    c() {
      create_component(xicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(xicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(xicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(xicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(xicon, detaching);
    }
  };
}
function create_if_block_6$2(ctx) {
  let eyeclosedicon;
  let current;
  eyeclosedicon = new EyeClosedIcon({});
  return {
    c() {
      create_component(eyeclosedicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(eyeclosedicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(eyeclosedicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(eyeclosedicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(eyeclosedicon, detaching);
    }
  };
}
function create_if_block_5$2(ctx) {
  let pointericon;
  let current;
  pointericon = new PointerIcon({});
  return {
    c() {
      create_component(pointericon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(pointericon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(pointericon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(pointericon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(pointericon, detaching);
    }
  };
}
function create_if_block_4$3(ctx) {
  let magicon;
  let current;
  magicon = new MagIcon({});
  return {
    c() {
      create_component(magicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(magicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(magicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(magicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(magicon, detaching);
    }
  };
}
function create_if_block_3$5(ctx) {
  let carticon;
  let current;
  carticon = new CartIcon({});
  return {
    c() {
      create_component(carticon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(carticon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(carticon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(carticon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(carticon, detaching);
    }
  };
}
function create_if_block$c(ctx) {
  let div4;
  let div0;
  let html_tag;
  let raw_value = (
    /*inspectorItem*/
    ctx[0].description + ""
  );
  let t0;
  let t1;
  let div3;
  let div1;
  let t3;
  let div2;
  let t4;
  let div4_transition;
  let current;
  let if_block0 = (
    /*inspectorItem*/
    ctx[0].type === "cart" && /*$InspectorStore*/
    ctx[2].cartData && create_if_block_2$7(ctx)
  );
  let each_value = (
    /*inspectorItem*/
    ctx[0].helpItems
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  let if_block1 = (
    /*inspectorItem*/
    ctx[0].documentationLink && create_if_block_1$a(ctx)
  );
  return {
    c() {
      div4 = element("div");
      div0 = element("div");
      html_tag = new HtmlTag(false);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      div3 = element("div");
      div1 = element("div");
      div1.textContent = "Need help?";
      t3 = space();
      div2 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t4 = space();
      if (if_block1)
        if_block1.c();
      html_tag.a = t0;
      attr(div0, "class", "ms-inspector-item__content-item");
      attr(div1, "class", "ms-inspector-item__content-item__title");
      attr(div2, "class", "ms-inspector-item__help-items");
      attr(div3, "class", "ms-inspector-item__content-item");
      attr(div4, "class", "ms-inspector-item__wrapper");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div0);
      html_tag.m(raw_value, div0);
      append(div0, t0);
      if (if_block0)
        if_block0.m(div0, null);
      append(div4, t1);
      append(div4, div3);
      append(div3, div1);
      append(div3, t3);
      append(div3, div2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div2, null);
        }
      }
      append(div2, t4);
      if (if_block1)
        if_block1.m(div2, null);
      current = true;
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*inspectorItem*/
      1) && raw_value !== (raw_value = /*inspectorItem*/
      ctx2[0].description + ""))
        html_tag.p(raw_value);
      if (
        /*inspectorItem*/
        ctx2[0].type === "cart" && /*$InspectorStore*/
        ctx2[2].cartData
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_2$7(ctx2);
          if_block0.c();
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & /*inspectorItem*/
      1) {
        each_value = /*inspectorItem*/
        ctx2[0].helpItems;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div2, t4);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (
        /*inspectorItem*/
        ctx2[0].documentationLink
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*inspectorItem*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_1$a(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(if_block1);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div4_transition)
            div4_transition = create_bidirectional_transition(div4, slide, { duration: 300 }, true);
          div4_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(if_block1);
      if (local) {
        if (!div4_transition)
          div4_transition = create_bidirectional_transition(div4, slide, { duration: 300 }, false);
        div4_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block0)
        if_block0.d();
      destroy_each(each_blocks, detaching);
      if (if_block1)
        if_block1.d();
      if (detaching && div4_transition)
        div4_transition.end();
    }
  };
}
function create_if_block_2$7(ctx) {
  let span;
  let t_value = (
    /*$InspectorStore*/
    ctx[2].cartData + ""
  );
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*$InspectorStore*/
      4 && t_value !== (t_value = /*$InspectorStore*/
      ctx2[2].cartData + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block$5(ctx) {
  let inspectorhelpitem;
  let current;
  inspectorhelpitem = new InspectorHelpItem({ props: { helpItem: (
    /*helpItem*/
    ctx[5]
  ) } });
  return {
    c() {
      create_component(inspectorhelpitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inspectorhelpitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const inspectorhelpitem_changes = {};
      if (dirty & /*inspectorItem*/
      1)
        inspectorhelpitem_changes.helpItem = /*helpItem*/
        ctx2[5];
      inspectorhelpitem.$set(inspectorhelpitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectorhelpitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectorhelpitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inspectorhelpitem, detaching);
    }
  };
}
function create_if_block_1$a(ctx) {
  let div;
  let a;
  let t;
  let linkicon;
  let a_href_value;
  let current;
  linkicon = new LinkIcon({});
  return {
    c() {
      div = element("div");
      a = element("a");
      t = text("Documentation ");
      create_component(linkicon.$$.fragment);
      attr(a, "class", "ms-inspector-item__content-item__help__title ms-inspector-item__content-item__help__title--link");
      attr(a, "href", a_href_value = /*inspectorItem*/
      ctx[0].documentationLink);
      attr(a, "target", "_blank");
      attr(div, "class", "ms-inspector-item__content-item__help");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, a);
      append(a, t);
      mount_component(linkicon, a, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*inspectorItem*/
      1 && a_href_value !== (a_href_value = /*inspectorItem*/
      ctx2[0].documentationLink)) {
        attr(a, "href", a_href_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(linkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(linkicon);
    }
  };
}
function create_fragment$j(ctx) {
  let div2;
  let div0;
  let button;
  let span0;
  let current_block_type_index;
  let if_block0;
  let t0;
  let t1_value = (
    /*inspectorItem*/
    ctx[0].title + ""
  );
  let t1;
  let t2;
  let span1;
  let arrowicon;
  let t3;
  let div1;
  let div2_class_value;
  let div2_id_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [
    create_if_block_3$5,
    create_if_block_4$3,
    create_if_block_5$2,
    create_if_block_6$2,
    create_if_block_7$1,
    create_if_block_8$1
  ];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*inspectorItem*/
      ctx2[0].type === "cart"
    )
      return 0;
    if (
      /*inspectorItem*/
      ctx2[0].type === "found"
    )
      return 1;
    if (
      /*inspectorItem*/
      ctx2[0].type === "plan-price-clicked"
    )
      return 2;
    if (
      /*inspectorItem*/
      ctx2[0].type === "content-removed"
    )
      return 3;
    if (
      /*inspectorItem*/
      ctx2[0].type === "error"
    )
      return 4;
    if (
      /*inspectorItem*/
      ctx2[0].type === "warning"
    )
      return 5;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  arrowicon = new ArrowIcon({
    props: {
      style: "transform: rotate(" + /*openInspectorItem*/
      (ctx[1] ? "180deg" : "0deg") + ")"
    }
  });
  let if_block1 = (
    /*openInspectorItem*/
    ctx[1] && create_if_block$c(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      button = element("button");
      span0 = element("span");
      if (if_block0)
        if_block0.c();
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      span1 = element("span");
      create_component(arrowicon.$$.fragment);
      t3 = space();
      div1 = element("div");
      if (if_block1)
        if_block1.c();
      attr(span0, "class", "ms-inspector-item__icon");
      attr(span1, "class", "ms-inspector-item__arrow");
      attr(button, "class", "ms-inspector-item__tab");
      attr(button, "data-cy", "inspector-item-button");
      attr(div0, "class", "ms-inspector-item__tabs");
      attr(div1, "class", "ms-inspector-item__content");
      attr(div2, "class", div2_class_value = "ms-inspector-item " + addTypeClass$1(
        /*inspectorItem*/
        ctx[0].type
      ));
      attr(div2, "id", div2_id_value = /*inspectorItem*/
      ctx[0].id);
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div0, button);
      append(button, span0);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(span0, null);
      }
      append(button, t0);
      append(button, t1);
      append(button, t2);
      append(button, span1);
      mount_component(arrowicon, span1, null);
      append(div2, t3);
      append(div2, div1);
      if (if_block1)
        if_block1.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        if (if_block0) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block0 = if_blocks[current_block_type_index];
          if (!if_block0) {
            if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block0.c();
          }
          transition_in(if_block0, 1);
          if_block0.m(span0, null);
        } else {
          if_block0 = null;
        }
      }
      if ((!current || dirty & /*inspectorItem*/
      1) && t1_value !== (t1_value = /*inspectorItem*/
      ctx2[0].title + ""))
        set_data(t1, t1_value);
      const arrowicon_changes = {};
      if (dirty & /*openInspectorItem*/
      2)
        arrowicon_changes.style = "transform: rotate(" + /*openInspectorItem*/
        (ctx2[1] ? "180deg" : "0deg") + ")";
      arrowicon.$set(arrowicon_changes);
      if (
        /*openInspectorItem*/
        ctx2[1]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*openInspectorItem*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$c(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*inspectorItem*/
      1 && div2_class_value !== (div2_class_value = "ms-inspector-item " + addTypeClass$1(
        /*inspectorItem*/
        ctx2[0].type
      ))) {
        attr(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*inspectorItem*/
      1 && div2_id_value !== (div2_id_value = /*inspectorItem*/
      ctx2[0].id)) {
        attr(div2, "id", div2_id_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(arrowicon.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(arrowicon.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      destroy_component(arrowicon);
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function addTypeClass$1(type) {
  return `ms-inspector-item--${type}`;
}
function instance$e($$self, $$props, $$invalidate) {
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(2, $InspectorStore = $$value));
  let { inspectorItem } = $$props;
  let openInspectorItem = false;
  onDestroy(() => {
    $$invalidate(1, openInspectorItem = false);
  });
  function showInspectorItemContent() {
    $$invalidate(1, openInspectorItem = !openInspectorItem);
  }
  const click_handler = () => showInspectorItemContent();
  $$self.$$set = ($$props2) => {
    if ("inspectorItem" in $$props2)
      $$invalidate(0, inspectorItem = $$props2.inspectorItem);
  };
  return [
    inspectorItem,
    openInspectorItem,
    $InspectorStore,
    showInspectorItemContent,
    click_handler
  ];
}
var InspectorItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$e, create_fragment$j, safe_not_equal, { inspectorItem: 0 });
  }
};
function add_css$b(target) {
  append_styles(target, "svelte-1vlgs5i", '.ms-inspector-items__header.svelte-1vlgs5i.svelte-1vlgs5i{display:flex;align-items:center;justify-content:space-between;margin-bottom:7px;font-size:11px;color:#fff;flex-shrink:0;flex-grow:1}.ms-inspector-items__title.svelte-1vlgs5i.svelte-1vlgs5i{font-weight:700}.ms-inspector-items__toggle.svelte-1vlgs5i.svelte-1vlgs5i{display:flex;align-items:center;gap:5px}.ms-inspector-items__switch.svelte-1vlgs5i.svelte-1vlgs5i{position:relative;display:inline-block;width:40px;height:20px;margin:0;padding:0}.ms-inspector-items__switch.svelte-1vlgs5i input.svelte-1vlgs5i{opacity:0;width:0;height:0}.ms-inspector-items__slider.svelte-1vlgs5i.svelte-1vlgs5i{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#444;border:1px solid #4b4b4b;-webkit-transition:0.4s;transition:0.4s;border-radius:100px}.ms-inspector-items__slider.svelte-1vlgs5i.svelte-1vlgs5i:before{position:absolute;content:"";height:16px;width:16px;left:1px;bottom:1px;background-color:#c1c1c1;-webkit-transition:0.4s;transition:0.4s;border-radius:50%}input.svelte-1vlgs5i:checked+.ms-inspector-items__slider.svelte-1vlgs5i{background-color:#2962ff;border-color:#2962ff}input.svelte-1vlgs5i:focus+.ms-inspector-items__slider.svelte-1vlgs5i{box-shadow:0 0 1px #2962ff}input.svelte-1vlgs5i:checked+.ms-inspector-items__slider.svelte-1vlgs5i:before{-webkit-transform:translateX(20px);-ms-transform:translateX(20px);transform:translateX(20px)}.ms-inspector-item{width:100%;background-color:#444;border:1px solid #5c5c5c;border-radius:4px;flex-wrap:wrap;margin-bottom:0.5em;display:flex;transition:height 0.2s ease-in-out;overflow:hidden}.ms-inspector-item__tabs{display:flex;align-items:stretch;justify-content:space-between;width:100%}.ms-inspector-item__tab{gap:6px;padding:4px;display:flex;align-items:center;background-color:transparent;transition:background-color 0.2s ease-in-out}.ms-inspector-item__tab:first-child{flex-grow:1}.ms-inspector-item__tab:hover{background-color:#535353}.ms-inspector-item--error{border-color:#e06657}.ms-inspector-item--warning{border-color:#e4d179}.ms-inspector-item__icon{width:22px;height:22px;display:flex;align-items:center;justify-content:center;background-color:#292929;border-radius:3px;color:#fff}.ms-inspector-item__icon svg{padding:2px}.ms-inspector-item--cart .ms-inspector-item__icon{background-color:#292929}.ms-inspector-item--found .ms-inspector-item__icon{background-color:#5b9c6f}\n      .ms-inspector-item--plan-price-clicked .ms-inspector-item__icon\n    {background-color:#2962ff}\n      .ms-inspector-item--content-removed .ms-inspector-item__icon\n    {background-color:#bb5bce}.ms-inspector-item--error .ms-inspector-item__icon{background-color:#e06657}.ms-inspector-item--warning .ms-inspector-item__icon{background-color:#535353;color:#efd350}.ms-inspector-item__content{width:100%;display:flex;flex-direction:column;align-items:center;justify-content:center}.ms-inspector-item__wrapper{width:100%}.ms-inspector-item__content-item{padding:7px;border-top:1px solid rgba(41, 41, 41, 0.5);width:100%}.ms-inspector-item__content-item > *{font-family:Plus Jakarta Sans, sans-serif !important;line-height:1.5em;font-size:11px !important;margin:0;padding:0}.ms-inspector-item__content-item p{line-height:1.5 !important;margin-bottom:7px;color:#c1c1c1;font-size:11px !important}.ms-inspector-item__content-item p:last-child{margin-bottom:0}.ms-inspector-item__content-item a{text-decoration:underline;color:#fff;word-wrap:break-all}.ms-inspector-item__content-item__title{font-weight:700;font-size:12px;margin-bottom:7px;color:#c1c1c1}.ms-inspector-item__content-item__help__title{width:100%;grid-column-gap:4px;grid-row-gap:4px;border:1px solid #373737;background-color:#535353;border-radius:4px;justify-content:space-between;align-items:center;margin-top:0.6em;margin-bottom:-3px;padding-left:1em;padding-right:1em;line-height:2.7em;display:flex;color:#fff}.ms-inspector-item__content-item__help__title:hover{border-color:#292929;background-color:#444}.ms-inspector-item__content-item__help__title--link{text-decoration:none}.ms-inspector-item__content-item__help__description{overflow:hidden}.ms-inspector-item__count{border-radius:3px;background-color:#000;color:#e8e8e8;font-weight:700;font-size:9.9px;line-height:1;padding:3px;margin:0}.ms-inspector-item__arrow{margin-left:auto;margin-right:8px;width:8px;transition:transform 0.2s ease-in-out}');
}
function get_each_context$4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function get_each_context_1$3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function get_each_context_2$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function get_each_context_3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_each_block_3(key_1, ctx) {
  let first;
  let inspectoritem;
  let current;
  inspectoritem = new InspectorItem({
    props: { inspectorItem: (
      /*inspectorItem*/
      ctx[6]
    ) }
  });
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(inspectoritem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(inspectoritem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inspectoritem_changes = {};
      if (dirty & /*inspectorItemsData*/
      2)
        inspectoritem_changes.inspectorItem = /*inspectorItem*/
        ctx[6];
      inspectoritem.$set(inspectoritem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectoritem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectoritem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(inspectoritem, detaching);
    }
  };
}
function create_if_block$b(ctx) {
  let div1;
  let div0;
  let button;
  let span0;
  let magicon;
  let t0;
  let span1;
  let t2;
  let span2;
  let t3;
  let t4_value = (
    /*inspectorItemsData*/
    ctx[1].filter(func_2$1).length + ""
  );
  let t4;
  let t5;
  let span3;
  let arrowicon;
  let t6;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  magicon = new MagIcon({});
  arrowicon = new ArrowIcon({
    props: {
      style: "transform: rotate(" + /*showFoundItems*/
      (ctx[2] ? "180deg" : "0deg") + ")"
    }
  });
  let if_block = (
    /*showFoundItems*/
    ctx[2] && create_if_block_1$9(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      button = element("button");
      span0 = element("span");
      create_component(magicon.$$.fragment);
      t0 = space();
      span1 = element("span");
      span1.textContent = "Attributes Found";
      t2 = space();
      span2 = element("span");
      t3 = text("x");
      t4 = text(t4_value);
      t5 = space();
      span3 = element("span");
      create_component(arrowicon.$$.fragment);
      t6 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(span0, "class", "ms-inspector-item__icon");
      attr(span1, "class", "ms-inspector-item__text");
      attr(span2, "class", "ms-inspector-item__count");
      attr(span3, "class", "ms-inspector-item__arrow");
      attr(button, "class", "ms-inspector-item__tab");
      attr(button, "data-cy", "inspector-item--group-button");
      attr(div0, "class", "ms-inspector-item__tabs");
      attr(div1, "class", "ms-inspector-item ms-inspector-item--found");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, button);
      append(button, span0);
      mount_component(magicon, span0, null);
      append(button, t0);
      append(button, span1);
      append(button, t2);
      append(button, span2);
      append(span2, t3);
      append(span2, t4);
      append(button, t5);
      append(button, span3);
      mount_component(arrowicon, span3, null);
      insert(target, t6, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*toggleShowFoundItems*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if ((!current || dirty & /*inspectorItemsData*/
      2) && t4_value !== (t4_value = /*inspectorItemsData*/
      ctx2[1].filter(func_2$1).length + ""))
        set_data(t4, t4_value);
      const arrowicon_changes = {};
      if (dirty & /*showFoundItems*/
      4)
        arrowicon_changes.style = "transform: rotate(" + /*showFoundItems*/
        (ctx2[2] ? "180deg" : "0deg") + ")";
      arrowicon.$set(arrowicon_changes);
      if (
        /*showFoundItems*/
        ctx2[2]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*showFoundItems*/
          4) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_1$9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(magicon.$$.fragment, local);
      transition_in(arrowicon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(magicon.$$.fragment, local);
      transition_out(arrowicon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(magicon);
      destroy_component(arrowicon);
      if (detaching)
        detach(t6);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$9(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value_2 = (
    /*inspectorItemsData*/
    ctx[1].filter(func_3$1)
  );
  const get_key = (ctx2) => (
    /*inspectorItem*/
    ctx2[6].id
  );
  for (let i = 0; i < each_value_2.length; i += 1) {
    let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block_2$1(key, child_ctx));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*inspectorItemsData*/
      2) {
        each_value_2 = /*inspectorItemsData*/
        ctx2[1].filter(func_3$1);
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_2, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_2$1, each_1_anchor, get_each_context_2$1);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block_2$1(key_1, ctx) {
  let first;
  let inspectoritem;
  let current;
  inspectoritem = new InspectorItem({
    props: { inspectorItem: (
      /*inspectorItem*/
      ctx[6]
    ) }
  });
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(inspectoritem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(inspectoritem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inspectoritem_changes = {};
      if (dirty & /*inspectorItemsData*/
      2)
        inspectoritem_changes.inspectorItem = /*inspectorItem*/
        ctx[6];
      inspectoritem.$set(inspectoritem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectoritem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectoritem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(inspectoritem, detaching);
    }
  };
}
function create_each_block_1$3(key_1, ctx) {
  let first;
  let inspectoritem;
  let current;
  inspectoritem = new InspectorItem({
    props: { inspectorItem: (
      /*inspectorItem*/
      ctx[6]
    ) }
  });
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(inspectoritem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(inspectoritem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inspectoritem_changes = {};
      if (dirty & /*inspectorItemsData*/
      2)
        inspectoritem_changes.inspectorItem = /*inspectorItem*/
        ctx[6];
      inspectoritem.$set(inspectoritem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectoritem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectoritem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(inspectoritem, detaching);
    }
  };
}
function create_each_block$4(key_1, ctx) {
  let first;
  let inspectoritem;
  let current;
  inspectoritem = new InspectorItem({
    props: { inspectorItem: (
      /*inspectorItem*/
      ctx[6]
    ) }
  });
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(inspectoritem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(inspectoritem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const inspectoritem_changes = {};
      if (dirty & /*inspectorItemsData*/
      2)
        inspectoritem_changes.inspectorItem = /*inspectorItem*/
        ctx[6];
      inspectoritem.$set(inspectoritem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectoritem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectoritem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(first);
      destroy_component(inspectoritem, detaching);
    }
  };
}
function create_fragment$i(ctx) {
  let div2;
  let div0;
  let t1;
  let div1;
  let t2;
  let label;
  let input;
  let t3;
  let span;
  let t4;
  let each_blocks_2 = [];
  let each0_lookup = /* @__PURE__ */ new Map();
  let t5;
  let show_if = (
    /*inspectorItemsData*/
    ctx[1].filter(func$1).length > 0
  );
  let t6;
  let each_blocks_1 = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let t7;
  let each_blocks = [];
  let each2_lookup = /* @__PURE__ */ new Map();
  let each2_anchor;
  let current;
  let mounted;
  let dispose;
  let each_value_3 = (
    /*inspectorItemsData*/
    ctx[1].filter(func_1$1)
  );
  const get_key = (ctx2) => (
    /*inspectorItem*/
    ctx2[6].id
  );
  for (let i = 0; i < each_value_3.length; i += 1) {
    let child_ctx = get_each_context_3(ctx, each_value_3, i);
    let key = get_key(child_ctx);
    each0_lookup.set(key, each_blocks_2[i] = create_each_block_3(key, child_ctx));
  }
  let if_block = show_if && create_if_block$b(ctx);
  let each_value_1 = (
    /*inspectorItemsData*/
    ctx[1].filter(func_4$1)
  );
  const get_key_1 = (ctx2) => (
    /*inspectorItem*/
    ctx2[6].id
  );
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_1$3(ctx, each_value_1, i);
    let key = get_key_1(child_ctx);
    each1_lookup.set(key, each_blocks_1[i] = create_each_block_1$3(key, child_ctx));
  }
  let each_value = (
    /*inspectorItemsData*/
    ctx[1].filter(func_5$1)
  );
  const get_key_2 = (ctx2) => (
    /*inspectorItem*/
    ctx2[6].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context$4(ctx, each_value, i);
    let key = get_key_2(child_ctx);
    each2_lookup.set(key, each_blocks[i] = create_each_block$4(key, child_ctx));
  }
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      div0.textContent = "Events & Errors";
      t1 = space();
      div1 = element("div");
      t2 = text("X-ray\n    ");
      label = element("label");
      input = element("input");
      t3 = space();
      span = element("span");
      t4 = space();
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].c();
      }
      t5 = space();
      if (if_block)
        if_block.c();
      t6 = space();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t7 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each2_anchor = empty();
      attr(div0, "class", "ms-inspector-items__title svelte-1vlgs5i");
      attr(input, "type", "checkbox");
      attr(input, "data-cy", "x-ray-switch");
      attr(input, "class", "svelte-1vlgs5i");
      attr(span, "class", "ms-inspector-items__slider svelte-1vlgs5i");
      attr(label, "class", "ms-inspector-items__switch svelte-1vlgs5i");
      attr(div1, "class", "ms-inspector-items__toggle svelte-1vlgs5i");
      attr(div2, "class", "ms-inspector-items__header svelte-1vlgs5i");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t1);
      append(div2, div1);
      append(div1, t2);
      append(div1, label);
      append(label, input);
      input.checked = /*$InspectorStore*/
      ctx[0].xRayMode;
      append(label, t3);
      append(label, span);
      insert(target, t4, anchor);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        if (each_blocks_2[i]) {
          each_blocks_2[i].m(target, anchor);
        }
      }
      insert(target, t5, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t6, anchor);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(target, anchor);
        }
      }
      insert(target, t7, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each2_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            input,
            "change",
            /*handleChange*/
            ctx[4]
          ),
          listen(
            input,
            "change",
            /*input_change_handler*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*$InspectorStore*/
      1) {
        input.checked = /*$InspectorStore*/
        ctx2[0].xRayMode;
      }
      if (dirty & /*inspectorItemsData*/
      2) {
        each_value_3 = /*inspectorItemsData*/
        ctx2[1].filter(func_1$1);
        group_outros();
        each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key, 1, ctx2, each_value_3, each0_lookup, t5.parentNode, outro_and_destroy_block, create_each_block_3, t5, get_each_context_3);
        check_outros();
      }
      if (dirty & /*inspectorItemsData*/
      2)
        show_if = /*inspectorItemsData*/
        ctx2[1].filter(func$1).length > 0;
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*inspectorItemsData*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$b(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t6.parentNode, t6);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (dirty & /*inspectorItemsData*/
      2) {
        each_value_1 = /*inspectorItemsData*/
        ctx2[1].filter(func_4$1);
        group_outros();
        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_1, 1, ctx2, each_value_1, each1_lookup, t7.parentNode, outro_and_destroy_block, create_each_block_1$3, t7, get_each_context_1$3);
        check_outros();
      }
      if (dirty & /*inspectorItemsData*/
      2) {
        each_value = /*inspectorItemsData*/
        ctx2[1].filter(func_5$1);
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx2, each_value, each2_lookup, each2_anchor.parentNode, outro_and_destroy_block, create_each_block$4, each2_anchor, get_each_context$4);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value_3.length; i += 1) {
        transition_in(each_blocks_2[i]);
      }
      transition_in(if_block);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks_1[i]);
      }
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        transition_out(each_blocks_2[i]);
      }
      transition_out(if_block);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        transition_out(each_blocks_1[i]);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (detaching)
        detach(t4);
      for (let i = 0; i < each_blocks_2.length; i += 1) {
        each_blocks_2[i].d(detaching);
      }
      if (detaching)
        detach(t5);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t6);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].d(detaching);
      }
      if (detaching)
        detach(t7);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
      if (detaching)
        detach(each2_anchor);
      mounted = false;
      run_all(dispose);
    }
  };
}
var func$1 = (item) => item.type === "found";
var func_1$1 = (item) => item.type === "cart";
var func_2$1 = (item) => item.type === "found";
var func_3$1 = (item) => item.type === "found";
var func_4$1 = (item) => item.type === "error";
var func_5$1 = (item) => item.type === "warning";
function instance$d($$self, $$props, $$invalidate) {
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(0, $InspectorStore = $$value));
  let inspectorItemsData = [];
  let showFoundItems = false;
  onDestroy(() => {
    $$invalidate(2, showFoundItems = false);
  });
  function toggleShowFoundItems() {
    $$invalidate(2, showFoundItems = !showFoundItems);
  }
  function handleChange() {
    ToggleXRayMode();
  }
  function input_change_handler() {
    $InspectorStore.xRayMode = this.checked;
    InspectorStore.set($InspectorStore);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$InspectorStore*/
    1) {
      if ($InspectorStore.inspectorData.length > 0) {
        $$invalidate(1, inspectorItemsData = $InspectorStore.inspectorData.map((id) => {
          return inspectorItems.find((item) => item.id === id);
        }));
      }
    }
    if ($$self.$$.dirty & /*$InspectorStore*/
    1) {
      if ($InspectorStore.xRayMode === true) {
        checkFoundDataAttributes();
        checkErrorDataAttributes();
        checkWarningDataAttributes();
      } else {
        removeXrays();
      }
    }
  };
  return [
    $InspectorStore,
    inspectorItemsData,
    showFoundItems,
    toggleShowFoundItems,
    handleChange,
    input_change_handler
  ];
}
var InspectorTab = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$d, create_fragment$i, safe_not_equal, {}, add_css$b);
  }
};
function add_css$a(target) {
  append_styles(target, "svelte-1ave6sr", "button.svelte-1ave6sr{background:none;border:none;cursor:pointer;padding:0;display:flex;align-items:center}");
}
function create_fragment$h(ctx) {
  let button;
  let svg;
  let path;
  let button_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-520q0-17 11.5-28.5T160-720q17 0 28.5 11.5T200-680v520h400q17 0 28.5 11.5T640-120q0 17-11.5 28.5T600-80H200Zm160-240v-480 480Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "120 -880 680 800");
      attr(
        button,
        "style",
        /*style*/
        ctx[0]
      );
      attr(button, "class", button_class_value = null_to_empty(
        /*clazz*/
        ctx[1]
      ) + " svelte-1ave6sr");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, svg);
      append(svg, path);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*copyToClipboard*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*style*/
      1) {
        attr(
          button,
          "style",
          /*style*/
          ctx2[0]
        );
      }
      if (dirty & /*clazz*/
      2 && button_class_value !== (button_class_value = null_to_empty(
        /*clazz*/
        ctx2[1]
      ) + " svelte-1ave6sr")) {
        attr(button, "class", button_class_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function instance$c($$self, $$props, $$invalidate) {
  let { style = "" } = $$props;
  let { class: clazz } = $$props;
  let { copyText } = $$props;
  function copyToClipboard() {
    if (copyText) {
      navigator.clipboard.writeText(copyText);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("style" in $$props2)
      $$invalidate(0, style = $$props2.style);
    if ("class" in $$props2)
      $$invalidate(1, clazz = $$props2.class);
    if ("copyText" in $$props2)
      $$invalidate(3, copyText = $$props2.copyText);
  };
  return [style, clazz, copyToClipboard, copyText];
}
var CopyIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$c, create_fragment$h, safe_not_equal, { style: 0, class: 1, copyText: 3 }, add_css$a);
  }
};
function add_css$9(target) {
  append_styles(target, "svelte-pivqfu", ".ms-member-tab__data-group.svelte-pivqfu{display:flex;align-items:center;gap:3px;margin-bottom:6px}.ms-member-tab__data-group.svelte-pivqfu:last-child{margin-bottom:0}.ms-member-tab__data-group.ms-member-tab__data-group--flex-top.svelte-pivqfu{align-items:flex-start}.ms-member-tab__data-group__label.svelte-pivqfu{width:150px;color:#e8e8e8;border:1px solid #4b4b4b;border-radius:4px;background:#444;font-size:9px;line-height:1;padding:6px;flex-shrink:0;width:auto}.ms-member-tab__data-group__copy-box.svelte-pivqfu{flex-grow:0;position:relative;display:flex;align-items:center;overflow:hidden;gap:6px}.ms-member-tab__data-group__copy-box__button.svelte-pivqfu{border:1px solid #4b4b4b;border-radius:4px;background:#000;color:#e8e8e8;font-size:10px;font-weight:700;line-height:1;padding:6px;flex-grow:1;text-align:left;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ms-member-tab__data-group__copy-box__icon{width:11px;height:auto;flex-shrink:0;fill:#e8e8e8;opacity:0;transition:opacity 0.2s ease-in-out}\n      .ms-member-tab__data-group__copy-box__button:hover\n        + .ms-member-tab__data-group__copy-box__icon\n    {opacity:1}.ms-member-tab__data-group__copy-box__icon:hover{opacity:1;cursor:pointer}");
}
function create_else_block$5(ctx) {
  let button;
  let t;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      t = text(
        /*buttonText*/
        ctx[0]
      );
      attr(button, "class", "ms-member-tab__data-group__copy-box__button svelte-pivqfu");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      append(button, t);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*copyToClipboard*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*buttonText*/
      1)
        set_data(
          t,
          /*buttonText*/
          ctx2[0]
        );
    },
    d(detaching) {
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_1$8(ctx) {
  let button;
  return {
    c() {
      button = element("button");
      attr(button, "class", "ms-member-tab__data-group__copy-box__button ms-member-tab__data-group__copy-box__button--image svelte-pivqfu");
      set_style(button, "background-image", "url(" + /*buttonText*/
      ctx[0] + ")");
      set_style(button, "min-width", "42px");
      set_style(button, "min-height", "42px");
      set_style(button, "background-size", "cover");
      set_style(button, "background-position", "center");
    },
    m(target, anchor) {
      insert(target, button, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*buttonText*/
      1) {
        set_style(button, "background-image", "url(" + /*buttonText*/
        ctx2[0] + ")");
      }
    },
    d(detaching) {
      if (detaching)
        detach(button);
    }
  };
}
function create_if_block$a(ctx) {
  let button;
  return {
    c() {
      button = element("button");
      attr(button, "class", "ms-member-tab__data-group__copy-box__button ms-member-tab__data-group__copy-box__button--color svelte-pivqfu");
      set_style(
        button,
        "background-color",
        /*buttonText*/
        ctx[0]
      );
      set_style(button, "min-width", "42px");
      set_style(button, "min-height", "23px");
    },
    m(target, anchor) {
      insert(target, button, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*buttonText*/
      1) {
        set_style(
          button,
          "background-color",
          /*buttonText*/
          ctx2[0]
        );
      }
    },
    d(detaching) {
      if (detaching)
        detach(button);
    }
  };
}
function create_fragment$g(ctx) {
  let div2;
  let div0;
  let t0;
  let t1;
  let div1;
  let show_if;
  let show_if_1;
  let t2;
  let copyicon;
  let div2_class_value;
  let current;
  function select_block_type(ctx2, dirty) {
    if (dirty & /*buttonText*/
    1)
      show_if = null;
    if (dirty & /*buttonText*/
    1)
      show_if_1 = null;
    if (show_if == null)
      show_if = !!/*buttonText*/
      (ctx2[0] && /*buttonText*/
      (ctx2[0].startsWith("#") || /*buttonText*/
      ctx2[0] && /*buttonText*/
      ctx2[0].startsWith("rgb")));
    if (show_if)
      return create_if_block$a;
    if (show_if_1 == null)
      show_if_1 = !!/*endsWith*/
      (ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".png"
      ) || /*endsWith*/
      ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".jpg"
      ) || /*endsWith*/
      ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".jpeg"
      ) || /*endsWith*/
      ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".gif"
      ));
    if (show_if_1)
      return create_if_block_1$8;
    return create_else_block$5;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  copyicon = new CopyIcon({
    props: {
      class: "ms-member-tab__data-group__copy-box__icon",
      copyText: (
        /*buttonText*/
        ctx[0]
      )
    }
  });
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(
        /*labelText*/
        ctx[1]
      );
      t1 = space();
      div1 = element("div");
      if_block.c();
      t2 = space();
      create_component(copyicon.$$.fragment);
      attr(div0, "class", "ms-member-tab__data-group__label svelte-pivqfu");
      attr(div1, "class", "ms-member-tab__data-group__copy-box svelte-pivqfu");
      attr(
        div2,
        "data-cy",
        /*cypress*/
        ctx[2]
      );
      attr(div2, "class", div2_class_value = "ms-member-tab__data-group " + /*endsWith*/
      (ctx[4](
        /*buttonText*/
        ctx[0],
        ".png"
      ) || /*endsWith*/
      ctx[4](
        /*buttonText*/
        ctx[0],
        ".jpg"
      ) || /*endsWith*/
      ctx[4](
        /*buttonText*/
        ctx[0],
        ".jpeg"
      ) || /*endsWith*/
      ctx[4](
        /*buttonText*/
        ctx[0],
        ".gif"
      ) ? "ms-member-tab__data-group--flex-top" : "") + " svelte-pivqfu");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div0, t0);
      append(div2, t1);
      append(div2, div1);
      if_block.m(div1, null);
      append(div1, t2);
      mount_component(copyicon, div1, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*labelText*/
      2)
        set_data(
          t0,
          /*labelText*/
          ctx2[1]
        );
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div1, t2);
        }
      }
      const copyicon_changes = {};
      if (dirty & /*buttonText*/
      1)
        copyicon_changes.copyText = /*buttonText*/
        ctx2[0];
      copyicon.$set(copyicon_changes);
      if (!current || dirty & /*cypress*/
      4) {
        attr(
          div2,
          "data-cy",
          /*cypress*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*buttonText*/
      1 && div2_class_value !== (div2_class_value = "ms-member-tab__data-group " + /*endsWith*/
      (ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".png"
      ) || /*endsWith*/
      ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".jpg"
      ) || /*endsWith*/
      ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".jpeg"
      ) || /*endsWith*/
      ctx2[4](
        /*buttonText*/
        ctx2[0],
        ".gif"
      ) ? "ms-member-tab__data-group--flex-top" : "") + " svelte-pivqfu")) {
        attr(div2, "class", div2_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(copyicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copyicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if_block.d();
      destroy_component(copyicon);
    }
  };
}
function instance$b($$self, $$props, $$invalidate) {
  let { labelText } = $$props;
  let { buttonText } = $$props;
  let { cypress } = $$props;
  function copyToClipboard() {
    navigator.clipboard.writeText(buttonText);
  }
  const endsWith = (text2, suffix) => typeof text2 === "string" && text2.endsWith(suffix);
  if (buttonText !== null && buttonText !== void 0 && typeof buttonText !== "string") {
    buttonText = buttonText.toString();
  }
  $$self.$$set = ($$props2) => {
    if ("labelText" in $$props2)
      $$invalidate(1, labelText = $$props2.labelText);
    if ("buttonText" in $$props2)
      $$invalidate(0, buttonText = $$props2.buttonText);
    if ("cypress" in $$props2)
      $$invalidate(2, cypress = $$props2.cypress);
  };
  return [buttonText, labelText, cypress, copyToClipboard, endsWith];
}
var CopyButtonGroup = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$b, create_fragment$g, safe_not_equal, { labelText: 1, buttonText: 0, cypress: 2 }, add_css$9);
  }
};
function create_fragment$f(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h357l-80 80H200v560h560v-278l80-80v358q0 33-23.5 56.5T760-120H200Zm280-360Zm-120 80v-97q0-16 6-30.5t17-25.5l344-344q12-12 27-18t30-6q16 0 30.5 6t26.5 18l56 57q11 12 17 26.5t6 29.5q0 15-5.5 29.5T897-728L553-384q-11 11-25.5 17.5T497-360h-97q-17 0-28.5-11.5T360-400Zm481-384-56-56 56 56ZM440-440h56l232-232-28-28-29-28-231 231v57Zm260-260-29-28 29 28 28 28-28-28Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "120 -921 800 801");
      attr(
        svg,
        "class",
        /*clazz*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*clazz*/
      1) {
        attr(
          svg,
          "class",
          /*clazz*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance$a($$self, $$props, $$invalidate) {
  let { class: clazz } = $$props;
  $$self.$$set = ($$props2) => {
    if ("class" in $$props2)
      $$invalidate(0, clazz = $$props2.class);
  };
  return [clazz];
}
var EditIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$a, create_fragment$f, safe_not_equal, { class: 0 });
  }
};
function add_css$8(target) {
  append_styles(target, "svelte-1l53fni", ".ms-section-header.svelte-1l53fni{display:flex;justify-content:space-between;align-items:center;margin-bottom:12px;width:100%}.ms-section-header__title.svelte-1l53fni{font-size:11px;line-height:1;font-weight:700;color:#e8e8e8}.ms-section-header__link.svelte-1l53fni{text-decoration:none;display:flex;align-items:center;gap:4px;color:#c1c1c1;font-size:10px;font-weight:400;transition:all 0.2s ease-in-out;border:1px solid #535353;border-radius:4px;background:#444;padding:1px 3px}.ms-section-header__link.svelte-1l53fni:hover{color:#fff}.ms-section-header__link__svg{width:13px;height:auto;fill:#c1c1c1}");
}
function create_if_block$9(ctx) {
  let a;
  let editicon;
  let span;
  let current;
  editicon = new EditIcon({
    props: { class: "ms-section-header__link__svg" }
  });
  return {
    c() {
      a = element("a");
      create_component(editicon.$$.fragment);
      span = element("span");
      span.textContent = "Edit";
      attr(a, "class", "ms-section-header__link svelte-1l53fni");
      attr(
        a,
        "href",
        /*editURL*/
        ctx[1]
      );
      attr(a, "target", "_blank");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      mount_component(editicon, a, null);
      append(a, span);
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*editURL*/
      2) {
        attr(
          a,
          "href",
          /*editURL*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(editicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(editicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(a);
      destroy_component(editicon);
    }
  };
}
function create_fragment$e(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let current;
  let if_block = (
    /*editURL*/
    ctx[1] && create_if_block$9(ctx)
  );
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text(
        /*titleText*/
        ctx[0]
      );
      t1 = space();
      if (if_block)
        if_block.c();
      attr(div0, "class", "ms-section-header__title svelte-1l53fni");
      attr(div1, "class", "ms-section-header svelte-1l53fni");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t0);
      append(div1, t1);
      if (if_block)
        if_block.m(div1, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*titleText*/
      1)
        set_data(
          t0,
          /*titleText*/
          ctx2[0]
        );
      if (
        /*editURL*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*editURL*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block)
        if_block.d();
    }
  };
}
function instance$9($$self, $$props, $$invalidate) {
  let { titleText } = $$props;
  let { editURL } = $$props;
  $$self.$$set = ($$props2) => {
    if ("titleText" in $$props2)
      $$invalidate(0, titleText = $$props2.titleText);
    if ("editURL" in $$props2)
      $$invalidate(1, editURL = $$props2.editURL);
  };
  return [titleText, editURL];
}
var SectionHeader = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$9, create_fragment$e, safe_not_equal, { titleText: 0, editURL: 1 }, add_css$8);
  }
};
function create_fragment$d(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q48 0 93.5 11t87.5 32q15 8 19.5 24t-5.5 30q-10 14-26.5 18t-32.5-4q-32-15-66.5-23t-69.5-8q-133 0-226.5 93.5T160-480q0 133 93.5 226.5T480-160q133 0 226.5-93.5T800-480q0-8-.5-15.5T798-511q-2-17 6.5-32.5T830-564q16-5 30 3t16 24q2 14 3 28t1 29q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-56-328 372-373q11-11 27.5-11.5T852-781q11 11 11 28t-11 28L452-324q-12 12-28 12t-28-12L282-438q-11-11-11-28t11-28q11-11 28-11t28 11l86 86Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "100%");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "100%");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var CheckIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$d, safe_not_equal, {});
  }
};
function add_css$7(target) {
  append_styles(target, "svelte-lh6dn1", ".ms-button-link.svelte-lh6dn1{display:flex;align-items:center;justify-content:space-between;gap:4px;color:#e8e8e8;font-size:11px;line-height:1;text-decoration:none;border:1px solid #373737;border-radius:4px;background:#535353;padding:5px 10px;transition:all 0.2s ease-in-out;margin-top:12px}.ms-app-tab__section__content--auth .ms-button-link{margin-top:0;margin-bottom:0.5em}.ms-button-link.svelte-lh6dn1:last-child{margin-bottom:0}.ms-button-link.svelte-lh6dn1:hover{color:#fff}.ms-button-link__svg{width:13px;height:auto;fill:#c1c1c1}.help-option__left-icon.svelte-lh6dn1{display:flex;align-items:center;justify-content:center;width:20px;height:20px;border-radius:3px;padding:2px;margin-left:-6px}.help-option__left-icon--enabled.svelte-lh6dn1{background:#5b9c6f\n  }.help-option__left-icon--disabled.svelte-lh6dn1{background:#292929\n  }.help-option__left-icon svg{width:100%;height:auto}.help-option__text.svelte-lh6dn1{flex:1}");
}
function create_if_block_1$7(ctx) {
  let span;
  let current_block_type_index;
  let if_block;
  let span_class_value;
  let current;
  const if_block_creators = [create_if_block_2$6, create_else_block$4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*status*/
      ctx2[1] === true
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      span = element("span");
      if_block.c();
      attr(span, "class", span_class_value = null_to_empty(`help-option__left-icon help-option__left-icon--${/*status*/
      ctx[1] ? "enabled" : "disabled"}`) + " svelte-lh6dn1");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      if_blocks[current_block_type_index].m(span, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        }
        transition_in(if_block, 1);
        if_block.m(span, null);
      }
      if (!current || dirty & /*status*/
      2 && span_class_value !== (span_class_value = null_to_empty(`help-option__left-icon help-option__left-icon--${/*status*/
      ctx2[1] ? "enabled" : "disabled"}`) + " svelte-lh6dn1")) {
        attr(span, "class", span_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if_blocks[current_block_type_index].d();
    }
  };
}
function create_else_block$4(ctx) {
  let xicon;
  let current;
  xicon = new XIcon({});
  return {
    c() {
      create_component(xicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(xicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(xicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(xicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(xicon, detaching);
    }
  };
}
function create_if_block_2$6(ctx) {
  let checkicon;
  let current;
  checkicon = new CheckIcon({});
  return {
    c() {
      create_component(checkicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(checkicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(checkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkicon, detaching);
    }
  };
}
function create_if_block$8(ctx) {
  let linkicon;
  let current;
  linkicon = new LinkIcon({});
  return {
    c() {
      create_component(linkicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(linkicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(linkicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(linkicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(linkicon, detaching);
    }
  };
}
function create_fragment$c(ctx) {
  let a;
  let t0;
  let span;
  let t1;
  let t2;
  let current;
  let if_block0 = (
    /*status*/
    ctx[1] !== void 0 && create_if_block_1$7(ctx)
  );
  let if_block1 = (
    /*showIcon*/
    ctx[3] && create_if_block$8()
  );
  return {
    c() {
      a = element("a");
      if (if_block0)
        if_block0.c();
      t0 = space();
      span = element("span");
      t1 = text(
        /*text*/
        ctx[2]
      );
      t2 = space();
      if (if_block1)
        if_block1.c();
      attr(span, "class", "help-option__text svelte-lh6dn1");
      attr(
        a,
        "href",
        /*link*/
        ctx[0]
      );
      attr(a, "target", "_blank");
      attr(a, "class", "ms-button-link svelte-lh6dn1");
      toggle_class(
        a,
        "ms-button-link--status",
        /*status*/
        ctx[1] === true
      );
    },
    m(target, anchor) {
      insert(target, a, anchor);
      if (if_block0)
        if_block0.m(a, null);
      append(a, t0);
      append(a, span);
      append(span, t1);
      append(a, t2);
      if (if_block1)
        if_block1.m(a, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*status*/
        ctx2[1] !== void 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*status*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1$7(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(a, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*text*/
      4)
        set_data(
          t1,
          /*text*/
          ctx2[2]
        );
      if (
        /*showIcon*/
        ctx2[3]
      ) {
        if (if_block1) {
          if (dirty & /*showIcon*/
          8) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$8();
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(a, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*link*/
      1) {
        attr(
          a,
          "href",
          /*link*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*status*/
      2) {
        toggle_class(
          a,
          "ms-button-link--status",
          /*status*/
          ctx2[1] === true
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(a);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
    }
  };
}
function instance$8($$self, $$props, $$invalidate) {
  let { link } = $$props;
  let { status } = $$props;
  let { text: text2 } = $$props;
  let { showIcon = true } = $$props;
  $$self.$$set = ($$props2) => {
    if ("link" in $$props2)
      $$invalidate(0, link = $$props2.link);
    if ("status" in $$props2)
      $$invalidate(1, status = $$props2.status);
    if ("text" in $$props2)
      $$invalidate(2, text2 = $$props2.text);
    if ("showIcon" in $$props2)
      $$invalidate(3, showIcon = $$props2.showIcon);
  };
  return [link, status, text2, showIcon];
}
var ButtonLink = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$8, create_fragment$c, safe_not_equal, { link: 0, status: 1, text: 2, showIcon: 3 }, add_css$7);
  }
};
function create_fragment$b(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "m440-380-237-30q-25-3-32.5-27t10.5-41l409-392q5-5 12-7.5t19-2.5q20 0 30.5 17t.5 35L520-580l237 30q25 3 32.5 27T779-482L370-90q-5 5-12 7.5T339-80q-20 0-30.5-17t-.5-35l132-248Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "168.29 -880 623.41 800");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LightningBoltIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$b, safe_not_equal, {});
  }
};
function create_fragment$a(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-1-120q14 0 24.5-10.5T514-235v-15q50-9 86-39t36-89q0-42-24-77t-96-61q-60-20-83-35t-23-41q0-26 18.5-41t53.5-15q20 0 35 7t25 19q10 12 22.5 16.5t23.5-.5q15-6 20.5-20.5T606-653q-16-23-39.5-39T516-710v-15q0-14-10.5-24.5T481-760q-14 0-24.5 10.5T446-725v15q-50 11-78 44t-28 74q0 47 27.5 76t86.5 50q63 23 87.5 41t24.5 47q0 33-23.5 48.5T486-314q-26 0-47-12.5T404-364q-8-14-21-19t-26 0q-14 5-20.5 19t-.5 27q16 34 43 55.5t65 29.5v17q0 14 10.5 24.5T479-200Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "height", "24");
      attr(svg, "viewBox", "0 -960 960 960");
      attr(svg, "width", "24");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var MoneyIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$a, safe_not_equal, {});
  }
};
function add_css$6(target) {
  append_styles(target, "svelte-1dd5p02", ".ms-member-plan-item.svelte-1dd5p02.svelte-1dd5p02{width:100%;background-color:#444;border:1px solid #5c5c5c;border-radius:4px;flex-wrap:wrap;margin-bottom:0.5em;display:flex;transition:height 0.2s ease-in-out;overflow:hidden}.ms-member-plan-item__tabs.svelte-1dd5p02.svelte-1dd5p02{display:flex;align-items:stretch;justify-content:space-between;width:100%}.ms-member-plan-item__tab.svelte-1dd5p02.svelte-1dd5p02{gap:6px;padding:4px;display:flex;align-items:center;background-color:transparent;transition:background-color 0.2s ease-in-out;width:100%}.ms-member-plan-item--free.svelte-1dd5p02 .ms-member-plan-item__icon.svelte-1dd5p02{background-color:#2962ff}.ms-member-plan-item--paid.svelte-1dd5p02 .ms-member-plan-item__icon.svelte-1dd5p02{background-color:#5b9c6f}.ms-member-plan-item__icon.svelte-1dd5p02.svelte-1dd5p02{width:22px;height:22px;display:flex;align-items:center;justify-content:center;background-color:#292929;border-radius:3px;color:#fff;padding:2px}.ms-member-plan-item__icon svg{width:100%;height:100%}.ms-member-plan-item__arrow.svelte-1dd5p02.svelte-1dd5p02{margin-left:auto;margin-right:8px;width:8px;transition:transform 0.2s ease-in-out}.ms-member-plan-item__content.svelte-1dd5p02.svelte-1dd5p02{width:100%}.ms-member-plan-item__wrapper.svelte-1dd5p02.svelte-1dd5p02{background-color:#292929;width:100%;padding:8px}.ms-member-plan-item__content-item.svelte-1dd5p02.svelte-1dd5p02{margin-bottom:10px}.ms-member-plan-item__content-item__title.svelte-1dd5p02.svelte-1dd5p02{font-weight:bold;margin-bottom:5px}.ms-member-plan-item__content-item__help.svelte-1dd5p02.svelte-1dd5p02{margin-top:10px}.ms-member-plan-item__content-item__help__title.svelte-1dd5p02.svelte-1dd5p02{display:flex;align-items:center;text-decoration:none;color:#007bff}.ms-member-plan-item__content-item__help__title--link.svelte-1dd5p02.svelte-1dd5p02{color:#28a745}");
}
function create_else_block_2(ctx) {
  let lightningbolticon;
  let current;
  lightningbolticon = new LightningBoltIcon({});
  return {
    c() {
      create_component(lightningbolticon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(lightningbolticon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(lightningbolticon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(lightningbolticon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(lightningbolticon, detaching);
    }
  };
}
function create_if_block_3$4(ctx) {
  let moneyicon;
  let current;
  moneyicon = new MoneyIcon({});
  return {
    c() {
      create_component(moneyicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(moneyicon, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(moneyicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(moneyicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(moneyicon, detaching);
    }
  };
}
function create_else_block_1(ctx) {
  let t_value = (
    /*memberPlanItem*/
    ctx[0].planName + ""
  );
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*memberPlanItem*/
      1 && t_value !== (t_value = /*memberPlanItem*/
      ctx2[0].planName + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_2$5(ctx) {
  let t_value = (
    /*memberPlanItem*/
    ctx[0].priceDetails.priceName + ""
  );
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*memberPlanItem*/
      1 && t_value !== (t_value = /*memberPlanItem*/
      ctx2[0].priceDetails.priceName + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block$7(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let div_transition;
  let current;
  const if_block_creators = [create_if_block_1$6, create_else_block$3];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*memberPlanItem*/
      ctx2[0] && /*memberPlanItem*/
      ctx2[0].priceDetails
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "ms-member-plan-item__wrapper svelte-1dd5p02");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
function create_else_block$3(ctx) {
  let copybuttongroup0;
  let t;
  let copybuttongroup1;
  let current;
  copybuttongroup0 = new CopyButtonGroup({
    props: {
      labelText: "ID",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].planId
      )
    }
  });
  copybuttongroup1 = new CopyButtonGroup({
    props: {
      labelText: "Priority",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priority
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup0.$$.fragment);
      t = space();
      create_component(copybuttongroup1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup0, target, anchor);
      insert(target, t, anchor);
      mount_component(copybuttongroup1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup0_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup0_changes.buttonText = /*memberPlanItem*/
        ctx2[0].planId;
      copybuttongroup0.$set(copybuttongroup0_changes);
      const copybuttongroup1_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup1_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priority;
      copybuttongroup1.$set(copybuttongroup1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup0.$$.fragment, local);
      transition_in(copybuttongroup1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup0.$$.fragment, local);
      transition_out(copybuttongroup1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup0, detaching);
      if (detaching)
        detach(t);
      destroy_component(copybuttongroup1, detaching);
    }
  };
}
function create_if_block_1$6(ctx) {
  let copybuttongroup0;
  let t0;
  let copybuttongroup1;
  let t1;
  let copybuttongroup2;
  let t2;
  let copybuttongroup3;
  let t3;
  let copybuttongroup4;
  let t4;
  let copybuttongroup5;
  let t5;
  let copybuttongroup6;
  let t6;
  let copybuttongroup7;
  let t7;
  let copybuttongroup8;
  let current;
  copybuttongroup0 = new CopyButtonGroup({
    props: {
      labelText: "ID",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].planId
      )
    }
  });
  copybuttongroup1 = new CopyButtonGroup({
    props: {
      labelText: "Priority",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priority
      )
    }
  });
  copybuttongroup2 = new CopyButtonGroup({
    props: {
      labelText: "Price Name",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priceDetails.priceName
      )
    }
  });
  copybuttongroup3 = new CopyButtonGroup({
    props: {
      labelText: "Amount",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priceDetails.amount
      )
    }
  });
  copybuttongroup4 = new CopyButtonGroup({
    props: {
      labelText: "Interval",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priceDetails.interval.type
      )
    }
  });
  copybuttongroup5 = new CopyButtonGroup({
    props: {
      labelText: "Inteval Count",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priceDetails.interval.count
      )
    }
  });
  copybuttongroup6 = new CopyButtonGroup({
    props: {
      labelText: "Type",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priceDetails.type
      )
    }
  });
  copybuttongroup7 = new CopyButtonGroup({
    props: {
      labelText: "Currency",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].priceDetails.currency
      )
    }
  });
  copybuttongroup8 = new CopyButtonGroup({
    props: {
      labelText: "Plan Name",
      buttonText: (
        /*memberPlanItem*/
        ctx[0].planName
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup0.$$.fragment);
      t0 = space();
      create_component(copybuttongroup1.$$.fragment);
      t1 = space();
      create_component(copybuttongroup2.$$.fragment);
      t2 = space();
      create_component(copybuttongroup3.$$.fragment);
      t3 = space();
      create_component(copybuttongroup4.$$.fragment);
      t4 = space();
      create_component(copybuttongroup5.$$.fragment);
      t5 = space();
      create_component(copybuttongroup6.$$.fragment);
      t6 = space();
      create_component(copybuttongroup7.$$.fragment);
      t7 = space();
      create_component(copybuttongroup8.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup0, target, anchor);
      insert(target, t0, anchor);
      mount_component(copybuttongroup1, target, anchor);
      insert(target, t1, anchor);
      mount_component(copybuttongroup2, target, anchor);
      insert(target, t2, anchor);
      mount_component(copybuttongroup3, target, anchor);
      insert(target, t3, anchor);
      mount_component(copybuttongroup4, target, anchor);
      insert(target, t4, anchor);
      mount_component(copybuttongroup5, target, anchor);
      insert(target, t5, anchor);
      mount_component(copybuttongroup6, target, anchor);
      insert(target, t6, anchor);
      mount_component(copybuttongroup7, target, anchor);
      insert(target, t7, anchor);
      mount_component(copybuttongroup8, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup0_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup0_changes.buttonText = /*memberPlanItem*/
        ctx2[0].planId;
      copybuttongroup0.$set(copybuttongroup0_changes);
      const copybuttongroup1_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup1_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priority;
      copybuttongroup1.$set(copybuttongroup1_changes);
      const copybuttongroup2_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup2_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priceDetails.priceName;
      copybuttongroup2.$set(copybuttongroup2_changes);
      const copybuttongroup3_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup3_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priceDetails.amount;
      copybuttongroup3.$set(copybuttongroup3_changes);
      const copybuttongroup4_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup4_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priceDetails.interval.type;
      copybuttongroup4.$set(copybuttongroup4_changes);
      const copybuttongroup5_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup5_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priceDetails.interval.count;
      copybuttongroup5.$set(copybuttongroup5_changes);
      const copybuttongroup6_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup6_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priceDetails.type;
      copybuttongroup6.$set(copybuttongroup6_changes);
      const copybuttongroup7_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup7_changes.buttonText = /*memberPlanItem*/
        ctx2[0].priceDetails.currency;
      copybuttongroup7.$set(copybuttongroup7_changes);
      const copybuttongroup8_changes = {};
      if (dirty & /*memberPlanItem*/
      1)
        copybuttongroup8_changes.buttonText = /*memberPlanItem*/
        ctx2[0].planName;
      copybuttongroup8.$set(copybuttongroup8_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup0.$$.fragment, local);
      transition_in(copybuttongroup1.$$.fragment, local);
      transition_in(copybuttongroup2.$$.fragment, local);
      transition_in(copybuttongroup3.$$.fragment, local);
      transition_in(copybuttongroup4.$$.fragment, local);
      transition_in(copybuttongroup5.$$.fragment, local);
      transition_in(copybuttongroup6.$$.fragment, local);
      transition_in(copybuttongroup7.$$.fragment, local);
      transition_in(copybuttongroup8.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup0.$$.fragment, local);
      transition_out(copybuttongroup1.$$.fragment, local);
      transition_out(copybuttongroup2.$$.fragment, local);
      transition_out(copybuttongroup3.$$.fragment, local);
      transition_out(copybuttongroup4.$$.fragment, local);
      transition_out(copybuttongroup5.$$.fragment, local);
      transition_out(copybuttongroup6.$$.fragment, local);
      transition_out(copybuttongroup7.$$.fragment, local);
      transition_out(copybuttongroup8.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup0, detaching);
      if (detaching)
        detach(t0);
      destroy_component(copybuttongroup1, detaching);
      if (detaching)
        detach(t1);
      destroy_component(copybuttongroup2, detaching);
      if (detaching)
        detach(t2);
      destroy_component(copybuttongroup3, detaching);
      if (detaching)
        detach(t3);
      destroy_component(copybuttongroup4, detaching);
      if (detaching)
        detach(t4);
      destroy_component(copybuttongroup5, detaching);
      if (detaching)
        detach(t5);
      destroy_component(copybuttongroup6, detaching);
      if (detaching)
        detach(t6);
      destroy_component(copybuttongroup7, detaching);
      if (detaching)
        detach(t7);
      destroy_component(copybuttongroup8, detaching);
    }
  };
}
function create_fragment$9(ctx) {
  let div2;
  let div0;
  let button;
  let span0;
  let current_block_type_index;
  let if_block0;
  let t0;
  let t1;
  let span1;
  let arrowicon;
  let t2;
  let div1;
  let div2_class_value;
  let div2_id_value;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_3$4, create_else_block_2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*memberPlanItem*/
      ctx2[0] && /*memberPlanItem*/
      ctx2[0].priceDetails
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  function select_block_type_1(ctx2, dirty) {
    if (
      /*memberPlanItem*/
      ctx2[0] && /*memberPlanItem*/
      ctx2[0].priceDetails
    )
      return create_if_block_2$5;
    return create_else_block_1;
  }
  let current_block_type = select_block_type_1(ctx);
  let if_block1 = current_block_type(ctx);
  arrowicon = new ArrowIcon({
    props: {
      style: "transform: rotate(" + /*openMemberPlanItem*/
      (ctx[1] ? "180deg" : "0deg") + ")"
    }
  });
  let if_block2 = (
    /*openMemberPlanItem*/
    ctx[1] && create_if_block$7(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      button = element("button");
      span0 = element("span");
      if_block0.c();
      t0 = space();
      if_block1.c();
      t1 = space();
      span1 = element("span");
      create_component(arrowicon.$$.fragment);
      t2 = space();
      div1 = element("div");
      if (if_block2)
        if_block2.c();
      attr(span0, "class", "ms-member-plan-item__icon svelte-1dd5p02");
      attr(span1, "class", "ms-member-plan-item__arrow svelte-1dd5p02");
      attr(button, "class", "ms-member-plan-item__tab svelte-1dd5p02");
      attr(button, "data-cy", "member-plan-item-button");
      attr(div0, "class", "ms-member-plan-item__tabs svelte-1dd5p02");
      attr(div1, "class", "ms-member-plan-item__content svelte-1dd5p02");
      attr(div2, "class", div2_class_value = "ms-member-plan-item " + addTypeClass(
        /*memberPlanItem*/
        ctx[0]
      ) + " svelte-1dd5p02");
      attr(div2, "id", div2_id_value = /*memberPlanItem*/
      ctx[0].id);
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div0, button);
      append(button, span0);
      if_blocks[current_block_type_index].m(span0, null);
      append(button, t0);
      if_block1.m(button, null);
      append(button, t1);
      append(button, span1);
      mount_component(arrowicon, span1, null);
      append(div2, t2);
      append(div2, div1);
      if (if_block2)
        if_block2.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        }
        transition_in(if_block0, 1);
        if_block0.m(span0, null);
      }
      if (current_block_type === (current_block_type = select_block_type_1(ctx2)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(button, t1);
        }
      }
      const arrowicon_changes = {};
      if (dirty & /*openMemberPlanItem*/
      2)
        arrowicon_changes.style = "transform: rotate(" + /*openMemberPlanItem*/
        (ctx2[1] ? "180deg" : "0deg") + ")";
      arrowicon.$set(arrowicon_changes);
      if (
        /*openMemberPlanItem*/
        ctx2[1]
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*openMemberPlanItem*/
          2) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block$7(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!current || dirty & /*memberPlanItem*/
      1 && div2_class_value !== (div2_class_value = "ms-member-plan-item " + addTypeClass(
        /*memberPlanItem*/
        ctx2[0]
      ) + " svelte-1dd5p02")) {
        attr(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*memberPlanItem*/
      1 && div2_id_value !== (div2_id_value = /*memberPlanItem*/
      ctx2[0].id)) {
        attr(div2, "id", div2_id_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(arrowicon.$$.fragment, local);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(arrowicon.$$.fragment, local);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if_blocks[current_block_type_index].d();
      if_block1.d();
      destroy_component(arrowicon);
      if (if_block2)
        if_block2.d();
      mounted = false;
      dispose();
    }
  };
}
function addTypeClass(memberPlanItem) {
  if (memberPlanItem && memberPlanItem.priceDetails) {
    return "ms-member-plan-item--paid";
  } else {
    return "ms-member-plan-item--free";
  }
}
function instance$7($$self, $$props, $$invalidate) {
  let { memberPlanItem } = $$props;
  let openMemberPlanItem = false;
  function showMemberPlanItemContent() {
    $$invalidate(1, openMemberPlanItem = !openMemberPlanItem);
  }
  const click_handler = () => showMemberPlanItemContent();
  $$self.$$set = ($$props2) => {
    if ("memberPlanItem" in $$props2)
      $$invalidate(0, memberPlanItem = $$props2.memberPlanItem);
  };
  return [memberPlanItem, openMemberPlanItem, showMemberPlanItemContent, click_handler];
}
var MemberPlanItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$7, create_fragment$9, safe_not_equal, { memberPlanItem: 0 }, add_css$6);
  }
};
function add_css$5(target) {
  append_styles(target, "svelte-1612fls", ".ms-member-tab__header.svelte-1612fls{margin-bottom:12px}.ms-member-tab-status.svelte-1612fls{display:flex;align-items:center;padding:6px 12px;border:1px solid #e06657;border-radius:4px}.ms-member-tab-status--active.svelte-1612fls{border-color:#5c9d6f}.ms-member-tab-status__indicator.svelte-1612fls{width:10px;height:10px;border-radius:50%;margin-right:10px;background-color:rgb(224, 102, 87)}.ms-member-tab-status__indicator--active.svelte-1612fls{background-color:#5c9d6f}.ms-member-tab-status__button.svelte-1612fls{font-size:11px;line-height:1;margin-left:auto;padding:4px;border:1px solid #5c5c5c;border-radius:4px;background-color:#444;color:#fff;cursor:pointer}.ms-member-tab__section.svelte-1612fls{padding-bottom:6px;margin-bottom:12px;border-bottom:1px solid #535353}.ms-member-tab__section.svelte-1612fls:last-child{border-bottom:none;margin-bottom:0}.ms-code-block.svelte-1612fls{background-color:#000;color:#fff;padding:4px 8px;border-radius:4px;overflow:auto;border:1px solid #4b4b4b;font-size:10px}");
}
function get_each_context$3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  return child_ctx;
}
function get_each_context_1$2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  return child_ctx;
}
function create_else_block$2(ctx) {
  let div;
  let t1;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      div.textContent = "You are Logged Out";
      t1 = space();
      button = element("button");
      button.textContent = "Login";
      attr(div, "class", "ms-member-tab-status__text");
      attr(button, "class", "ms-member-tab-status__button svelte-1612fls");
      attr(button, "data-cy", "member-login-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t1, anchor);
      insert(target, button, anchor);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler_1*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_6$1(ctx) {
  let div;
  let t1;
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      div.textContent = "You are Logged In";
      t1 = space();
      button = element("button");
      button.textContent = "Logout";
      attr(div, "class", "ms-member-tab-status__text");
      attr(button, "class", "ms-member-tab-status__button svelte-1612fls");
      attr(button, "data-cy", "member-logout-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      insert(target, t1, anchor);
      insert(target, button, anchor);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(button);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block$6(ctx) {
  let div0;
  let copybuttongroup0;
  let t0;
  let copybuttongroup1;
  let t1;
  let copybuttongroup2;
  let t2;
  let copybuttongroup3;
  let t3;
  let show_if_1 = (
    /*$InspectorStore*/
    ctx[0].memberData.customFields && Object.keys(
      /*$InspectorStore*/
      ctx[0].memberData.customFields
    ).some(
      /*func*/
      ctx[5]
    )
  );
  let t4;
  let t5;
  let show_if = (
    /*$InspectorStore*/
    ctx[0].memberData.metaData && Object.keys(
      /*$InspectorStore*/
      ctx[0].memberData.metaData
    ).length > 0
  );
  let t6;
  let t7;
  let div2;
  let sectionheader;
  let t8;
  let div1;
  let pre;
  let code;
  let t9_value = JSON.stringify(
    /*$InspectorStore*/
    ctx[0].memberData,
    null,
    2
  ) + "";
  let t9;
  let current;
  copybuttongroup0 = new CopyButtonGroup({
    props: {
      labelText: "Member ID",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].memberData.id
      ),
      cypress: "member-id"
    }
  });
  copybuttongroup1 = new CopyButtonGroup({
    props: {
      labelText: "Email",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].memberData.auth.email
      ),
      cypress: "member-email"
    }
  });
  copybuttongroup2 = new CopyButtonGroup({
    props: {
      labelText: "Created Date",
      buttonText: readableDate(
        /*$InspectorStore*/
        ctx[0].memberData.createdAt
      ),
      cypress: "member-created-date"
    }
  });
  copybuttongroup3 = new CopyButtonGroup({
    props: {
      labelText: "Verified",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].memberData.verified
      ),
      cypress: "member-verified"
    }
  });
  let if_block0 = show_if_1 && create_if_block_4$2(ctx);
  let if_block1 = (
    /*memberPlanData*/
    ctx[2].length > 0 && create_if_block_3$3(ctx)
  );
  let if_block2 = show_if && create_if_block_2$4(ctx);
  let if_block3 = (
    /*memberJSON*/
    ctx[1] && /*memberJSON*/
    ctx[1].data && create_if_block_1$5(ctx)
  );
  sectionheader = new SectionHeader({
    props: { titleText: "Member Data (raw)" }
  });
  return {
    c() {
      div0 = element("div");
      create_component(copybuttongroup0.$$.fragment);
      t0 = space();
      create_component(copybuttongroup1.$$.fragment);
      t1 = space();
      create_component(copybuttongroup2.$$.fragment);
      t2 = space();
      create_component(copybuttongroup3.$$.fragment);
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      t6 = space();
      if (if_block3)
        if_block3.c();
      t7 = space();
      div2 = element("div");
      create_component(sectionheader.$$.fragment);
      t8 = space();
      div1 = element("div");
      pre = element("pre");
      code = element("code");
      t9 = text(t9_value);
      attr(div0, "class", "ms-member-tab__section svelte-1612fls");
      attr(div0, "data-cy", "member-section-required");
      attr(pre, "class", "ms-code-block svelte-1612fls");
      attr(div1, "class", "ms-app-tab__section__content");
      attr(div1, "data-cy", "app-section-all-data-content");
      attr(div2, "class", "ms-app-tab__section");
      attr(div2, "data-cy", "app-section-all-data");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      mount_component(copybuttongroup0, div0, null);
      append(div0, t0);
      mount_component(copybuttongroup1, div0, null);
      append(div0, t1);
      mount_component(copybuttongroup2, div0, null);
      append(div0, t2);
      mount_component(copybuttongroup3, div0, null);
      insert(target, t3, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t4, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t5, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t6, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, t7, anchor);
      insert(target, div2, anchor);
      mount_component(sectionheader, div2, null);
      append(div2, t8);
      append(div2, div1);
      append(div1, pre);
      append(pre, code);
      append(code, t9);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup0_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup0_changes.buttonText = /*$InspectorStore*/
        ctx2[0].memberData.id;
      copybuttongroup0.$set(copybuttongroup0_changes);
      const copybuttongroup1_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup1_changes.buttonText = /*$InspectorStore*/
        ctx2[0].memberData.auth.email;
      copybuttongroup1.$set(copybuttongroup1_changes);
      const copybuttongroup2_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup2_changes.buttonText = readableDate(
          /*$InspectorStore*/
          ctx2[0].memberData.createdAt
        );
      copybuttongroup2.$set(copybuttongroup2_changes);
      const copybuttongroup3_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup3_changes.buttonText = /*$InspectorStore*/
        ctx2[0].memberData.verified;
      copybuttongroup3.$set(copybuttongroup3_changes);
      if (dirty & /*$InspectorStore*/
      1)
        show_if_1 = /*$InspectorStore*/
        ctx2[0].memberData.customFields && Object.keys(
          /*$InspectorStore*/
          ctx2[0].memberData.customFields
        ).some(
          /*func*/
          ctx2[5]
        );
      if (show_if_1) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_4$2(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t4.parentNode, t4);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*memberPlanData*/
        ctx2[2].length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*memberPlanData*/
          4) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_3$3(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t5.parentNode, t5);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (dirty & /*$InspectorStore*/
      1)
        show_if = /*$InspectorStore*/
        ctx2[0].memberData.metaData && Object.keys(
          /*$InspectorStore*/
          ctx2[0].memberData.metaData
        ).length > 0;
      if (show_if) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_2$4(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t6.parentNode, t6);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*memberJSON*/
        ctx2[1] && /*memberJSON*/
        ctx2[1].data
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*memberJSON*/
          2) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_1$5(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(t7.parentNode, t7);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*$InspectorStore*/
      1) && t9_value !== (t9_value = JSON.stringify(
        /*$InspectorStore*/
        ctx2[0].memberData,
        null,
        2
      ) + ""))
        set_data(t9, t9_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup0.$$.fragment, local);
      transition_in(copybuttongroup1.$$.fragment, local);
      transition_in(copybuttongroup2.$$.fragment, local);
      transition_in(copybuttongroup3.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(sectionheader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup0.$$.fragment, local);
      transition_out(copybuttongroup1.$$.fragment, local);
      transition_out(copybuttongroup2.$$.fragment, local);
      transition_out(copybuttongroup3.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(sectionheader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div0);
      destroy_component(copybuttongroup0);
      destroy_component(copybuttongroup1);
      destroy_component(copybuttongroup2);
      destroy_component(copybuttongroup3);
      if (detaching)
        detach(t3);
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t4);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t5);
      if (if_block2)
        if_block2.d(detaching);
      if (detaching)
        detach(t6);
      if (if_block3)
        if_block3.d(detaching);
      if (detaching)
        detach(t7);
      if (detaching)
        detach(div2);
      destroy_component(sectionheader);
    }
  };
}
function create_if_block_4$2(ctx) {
  let div;
  let sectionheader;
  let t0;
  let t1;
  let buttonlink;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Custom Fields",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/members/${/*$InspectorStore*/
      ctx[0].memberData.id}/profile`
    }
  });
  let each_value_2 = Object.keys(
    /*$InspectorStore*/
    ctx[0].memberData.customFields
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  buttonlink = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/7389502579355",
      text: "Documentation"
    }
  });
  return {
    c() {
      div = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      create_component(buttonlink.$$.fragment);
      attr(div, "class", "ms-member-tab__section svelte-1612fls");
      attr(div, "data-cy", "member-section-custom-fields");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(sectionheader, div, null);
      append(div, t0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      append(div, t1);
      mount_component(buttonlink, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/members/${/*$InspectorStore*/
        ctx2[0].memberData.id}/profile`;
      sectionheader.$set(sectionheader_changes);
      if (dirty & /*Object, $InspectorStore*/
      1) {
        each_value_2 = Object.keys(
          /*$InspectorStore*/
          ctx2[0].memberData.customFields
        );
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, t1);
          }
        }
        group_outros();
        for (i = each_value_2.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      for (let i = 0; i < each_value_2.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(buttonlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(buttonlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(sectionheader);
      destroy_each(each_blocks, detaching);
      destroy_component(buttonlink);
    }
  };
}
function create_if_block_5$1(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: (
        /*key*/
        ctx[11]
      ),
      buttonText: (
        /*$InspectorStore*/
        ctx[0].memberData.customFields[
          /*key*/
          ctx[11]
        ]
      ),
      cypress: `custom-field-${/*key*/
      ctx[11]}`
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.labelText = /*key*/
        ctx2[11];
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.buttonText = /*$InspectorStore*/
        ctx2[0].memberData.customFields[
          /*key*/
          ctx2[11]
        ];
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.cypress = `custom-field-${/*key*/
        ctx2[11]}`;
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_each_block_2(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*$InspectorStore*/
    ctx[0].memberData.customFields[
      /*key*/
      ctx[11]
    ] !== "" && /*$InspectorStore*/
    ctx[0].memberData.customFields[
      /*key*/
      ctx[11]
    ] !== null && create_if_block_5$1(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*$InspectorStore*/
        ctx2[0].memberData.customFields[
          /*key*/
          ctx2[11]
        ] !== "" && /*$InspectorStore*/
        ctx2[0].memberData.customFields[
          /*key*/
          ctx2[11]
        ] !== null
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_5$1(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block_3$3(ctx) {
  let div;
  let sectionheader;
  let t0;
  let copybuttongroup;
  let t1;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Plans",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/members/${/*$InspectorStore*/
      ctx[0].memberData.id}/profile`
    }
  });
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "Stripe ID",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].memberData.stripeCustomerId
      )
    }
  });
  let each_value_1 = (
    /*memberPlanData*/
    ctx[2]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      create_component(copybuttongroup.$$.fragment);
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "ms-member-tab__section svelte-1612fls");
      attr(div, "data-cy", "member-section-plans");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(sectionheader, div, null);
      append(div, t0);
      mount_component(copybuttongroup, div, null);
      append(div, t1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/members/${/*$InspectorStore*/
        ctx2[0].memberData.id}/profile`;
      sectionheader.$set(sectionheader_changes);
      const copybuttongroup_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.buttonText = /*$InspectorStore*/
        ctx2[0].memberData.stripeCustomerId;
      copybuttongroup.$set(copybuttongroup_changes);
      if (dirty & /*memberPlanData*/
      4) {
        each_value_1 = /*memberPlanData*/
        ctx2[2];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1$2(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_1$2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      transition_in(copybuttongroup.$$.fragment, local);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      transition_out(copybuttongroup.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(sectionheader);
      destroy_component(copybuttongroup);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_1$2(ctx) {
  let memberplanitem;
  let current;
  memberplanitem = new MemberPlanItem({
    props: {
      memberPlanItem: (
        /*planConnection*/
        ctx[14]
      )
    }
  });
  return {
    c() {
      create_component(memberplanitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(memberplanitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const memberplanitem_changes = {};
      if (dirty & /*memberPlanData*/
      4)
        memberplanitem_changes.memberPlanItem = /*planConnection*/
        ctx2[14];
      memberplanitem.$set(memberplanitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(memberplanitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(memberplanitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(memberplanitem, detaching);
    }
  };
}
function create_if_block_2$4(ctx) {
  let div;
  let sectionheader;
  let t0;
  let t1;
  let buttonlink;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Meta Data",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/members/${/*$InspectorStore*/
      ctx[0].memberData.id}/profile`
    }
  });
  let each_value = Object.keys(
    /*$InspectorStore*/
    ctx[0].memberData.metaData
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  buttonlink = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/7389627062299-Custom-Fields-vs-Metadata-vs-JSON",
      text: "Documentation"
    }
  });
  return {
    c() {
      div = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      create_component(buttonlink.$$.fragment);
      attr(div, "class", "ms-member-tab__section svelte-1612fls");
      attr(div, "data-cy", "member-section-meta-data");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(sectionheader, div, null);
      append(div, t0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      append(div, t1);
      mount_component(buttonlink, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/members/${/*$InspectorStore*/
        ctx2[0].memberData.id}/profile`;
      sectionheader.$set(sectionheader_changes);
      if (dirty & /*Object, $InspectorStore*/
      1) {
        each_value = Object.keys(
          /*$InspectorStore*/
          ctx2[0].memberData.metaData
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$3(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, t1);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(buttonlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(buttonlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(sectionheader);
      destroy_each(each_blocks, detaching);
      destroy_component(buttonlink);
    }
  };
}
function create_each_block$3(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: (
        /*key*/
        ctx[11]
      ),
      buttonText: (
        /*$InspectorStore*/
        ctx[0].memberData.metaData[
          /*key*/
          ctx[11]
        ]
      ),
      cypress: `meta-data-${/*key*/
      ctx[11]}`
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.labelText = /*key*/
        ctx2[11];
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.buttonText = /*$InspectorStore*/
        ctx2[0].memberData.metaData[
          /*key*/
          ctx2[11]
        ];
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup_changes.cypress = `meta-data-${/*key*/
        ctx2[11]}`;
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_if_block_1$5(ctx) {
  let div;
  let sectionheader;
  let t0;
  let pre;
  let code;
  let t1_value = JSON.stringify(
    /*memberJSON*/
    ctx[1].data,
    null,
    2
  ) + "";
  let t1;
  let t2;
  let buttonlink;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Member JSON",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/members/${/*$InspectorStore*/
      ctx[0].memberData.id}/profile`
    }
  });
  buttonlink = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/7389627062299-Custom-Fields-vs-Metadata-vs-JSON",
      text: "Documentation"
    }
  });
  return {
    c() {
      div = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      pre = element("pre");
      code = element("code");
      t1 = text(t1_value);
      t2 = space();
      create_component(buttonlink.$$.fragment);
      attr(pre, "class", "ms-code-block svelte-1612fls");
      attr(div, "class", "ms-member-tab__section svelte-1612fls");
      attr(div, "data-cy", "member-section-json");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(sectionheader, div, null);
      append(div, t0);
      append(div, pre);
      append(pre, code);
      append(code, t1);
      append(div, t2);
      mount_component(buttonlink, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/members/${/*$InspectorStore*/
        ctx2[0].memberData.id}/profile`;
      sectionheader.$set(sectionheader_changes);
      if ((!current || dirty & /*memberJSON*/
      2) && t1_value !== (t1_value = JSON.stringify(
        /*memberJSON*/
        ctx2[1].data,
        null,
        2
      ) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      transition_in(buttonlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      transition_out(buttonlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(sectionheader);
      destroy_component(buttonlink);
    }
  };
}
function create_fragment$8(ctx) {
  let div2;
  let div1;
  let div0;
  let t0;
  let t1;
  let if_block1_anchor;
  let current;
  function select_block_type(ctx2, dirty) {
    if (
      /*isLoggedIn*/
      ctx2[3]
    )
      return create_if_block_6$1;
    return create_else_block$2;
  }
  let current_block_type = select_block_type(ctx);
  let if_block0 = current_block_type(ctx);
  let if_block1 = (
    /*isLoggedIn*/
    ctx[3] && create_if_block$6(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      attr(div0, "class", "ms-member-tab-status__indicator svelte-1612fls");
      toggle_class(
        div0,
        "ms-member-tab-status__indicator--active",
        /*isLoggedIn*/
        ctx[3]
      );
      attr(div1, "class", "ms-member-tab-status svelte-1612fls");
      attr(div1, "data-cy", "member-tab-status");
      toggle_class(
        div1,
        "ms-member-tab-status--active",
        /*isLoggedIn*/
        ctx[3]
      );
      attr(div2, "class", "ms-member-tab__header svelte-1612fls");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, div0);
      append(div1, t0);
      if_block0.m(div1, null);
      insert(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & /*isLoggedIn*/
      8) {
        toggle_class(
          div0,
          "ms-member-tab-status__indicator--active",
          /*isLoggedIn*/
          ctx2[3]
        );
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div1, null);
        }
      }
      if (!current || dirty & /*isLoggedIn*/
      8) {
        toggle_class(
          div1,
          "ms-member-tab-status--active",
          /*isLoggedIn*/
          ctx2[3]
        );
      }
      if (
        /*isLoggedIn*/
        ctx2[3]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*isLoggedIn*/
          8) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block$6(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if_block0.d();
      if (detaching)
        detach(t1);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
    }
  };
}
function readableDate(date) {
  const options = {
    year: "numeric",
    month: "short",
    day: "numeric"
  };
  return new Date(date).toLocaleDateString(void 0, options);
}
function logoutMember() {
  return __async(this, null, function* () {
    yield window.$memberstackDom.logout();
    location.reload();
  });
}
function instance$6($$self, $$props, $$invalidate) {
  let isLoggedIn;
  let memberPlanData;
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(0, $InspectorStore = $$value));
  let memberJSON = null;
  onMount(() => __async(this, null, function* () {
    if (!$InspectorStore.memberData)
      return;
    if (!isLoggedIn)
      return;
    try {
      $$invalidate(1, memberJSON = yield window.$memberstackDom.getMemberJSON());
    } catch (error) {
      console.error("Failed to fetch member JSON:", error);
    }
  }));
  const findPlan = (planId) => $InspectorStore.appData.plans.find((plan) => plan.id === planId);
  const findPrice = (plan, priceId) => plan.prices.find((price) => price.id === priceId);
  const getPlanAndPriceDetails = (memberData, appData) => {
    const results = [];
    if (!memberData || !memberData.planConnections || !appData)
      return results;
    memberData.planConnections.forEach((connection) => {
      const plan = findPlan(connection.planId);
      if (plan) {
        const result = {
          planId: plan.id,
          planName: plan.name,
          priority: plan.priority || 0,
          priceDetails: null
        };
        if (connection.payment && connection.payment.priceId) {
          const price = findPrice(plan, connection.payment.priceId);
          if (price) {
            result.priceDetails = {
              priceId: price.id,
              priceName: price.name,
              type: price.type,
              amount: price.amount,
              currency: price.currency,
              interval: price.interval
            };
          }
        }
        results.push(result);
      }
    });
    return results;
  };
  function openLoginModal() {
    window.$memberstackDom.openModal("LOGIN").then((loginData) => {
      console.log("User logged in!", loginData);
      window.$memberstackDom.hideModal();
      UpdateMemberData();
    });
  }
  const func2 = (key) => $InspectorStore.memberData.customFields[key] !== "" && $InspectorStore.memberData.customFields[key] !== null;
  const click_handler = () => logoutMember();
  const click_handler_1 = () => openLoginModal();
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$InspectorStore*/
    1) {
      $$invalidate(3, isLoggedIn = $InspectorStore.memberData && $InspectorStore.memberData.id);
    }
    if ($$self.$$.dirty & /*$InspectorStore*/
    1) {
      $$invalidate(2, memberPlanData = getPlanAndPriceDetails($InspectorStore.memberData, $InspectorStore.appData));
    }
  };
  return [
    $InspectorStore,
    memberJSON,
    memberPlanData,
    isLoggedIn,
    openLoginModal,
    func2,
    click_handler,
    click_handler_1
  ];
}
var MemberTab = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$6, create_fragment$8, safe_not_equal, {}, add_css$5);
  }
};
function create_fragment$7(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240Zm240-200q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80Z");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "viewBox", "160 -920 640 840");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var LockIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$7, safe_not_equal, {});
  }
};
function add_css$4(target) {
  append_styles(target, "svelte-rd0m2l", ".ms-app-gated-content-item.svelte-rd0m2l{width:100%;background-color:#444;border:1px solid #5c5c5c;border-radius:4px;flex-wrap:wrap;margin-bottom:0.5em;display:flex;transition:height 0.2s ease-in-out;overflow:hidden}.ms-app-gated-content-item__tabs.svelte-rd0m2l{display:flex;align-items:stretch;justify-content:space-between;width:100%}.ms-app-gated-content-item__tab.svelte-rd0m2l{gap:6px;padding:4px;display:flex;align-items:center;background-color:transparent;transition:background-color 0.2s ease-in-out;width:100%;line-height:1}.ms-app-gated-content-item__icon.svelte-rd0m2l{width:22px;height:22px;display:flex;align-items:center;justify-content:center;background-color:#be822e;border-radius:3px;color:#fff;padding:2px}.ms-app-gated-content-item__icon svg{width:100%;height:100%}.ms-app-gated-content-item__arrow.svelte-rd0m2l{margin-left:auto;margin-right:8px;width:8px;transition:transform 0.2s ease-in-out}.ms-app-gated-content-item__content.svelte-rd0m2l{width:100%}.ms-app-gated-content-item__wrapper.svelte-rd0m2l{background-color:#292929;width:100%;padding:8px}.ms-app-gated-content-item__group.svelte-rd0m2l{background:#373737;padding:4px;margin-bottom:6px;border-radius:4px}.ms-app-gated-content-item__group-title.svelte-rd0m2l{font-size:9px;line-height:1;background:#444;padding:6px;margin-bottom:6px;border:1px solid #4b4b4b;border-radius:4px;display:inline-block}");
}
function get_each_context$2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i];
  return child_ctx;
}
function get_each_context_1$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_if_block$5(ctx) {
  let div3;
  let copybuttongroup0;
  let t0;
  let div2;
  let div0;
  let t2;
  let div1;
  let t3;
  let copybuttongroup1;
  let t4;
  let current_block_type_index;
  let if_block;
  let div3_transition;
  let current;
  copybuttongroup0 = new CopyButtonGroup({
    props: {
      labelText: "Key",
      buttonText: (
        /*appGatedContentItem*/
        ctx[0].key
      )
    }
  });
  let each_value_1 = (
    /*appGatedContentItem*/
    ctx[0].urls
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  copybuttongroup1 = new CopyButtonGroup({
    props: {
      labelText: "Access Denied",
      buttonText: "/" + /*appGatedContentItem*/
      ctx[0].redirect
    }
  });
  const if_block_creators = [create_if_block_1$4, create_else_block$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*appGatedContentItem*/
      ctx2[0].plans && /*appGatedContentItem*/
      ctx2[0].plans.length > 0
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div3 = element("div");
      create_component(copybuttongroup0.$$.fragment);
      t0 = space();
      div2 = element("div");
      div0 = element("div");
      div0.textContent = "Gated Pages & Folders";
      t2 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t3 = space();
      create_component(copybuttongroup1.$$.fragment);
      t4 = space();
      if_block.c();
      attr(div0, "class", "ms-app-gated-content-item__group-title svelte-rd0m2l");
      attr(div2, "class", "ms-app-gated-content-item__group svelte-rd0m2l");
      attr(div3, "class", "ms-app-gated-content-item__wrapper svelte-rd0m2l");
      attr(div3, "data-cy", "app-gated-content-item-content-wrapper");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      mount_component(copybuttongroup0, div3, null);
      append(div3, t0);
      append(div3, div2);
      append(div2, div0);
      append(div2, t2);
      append(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      append(div3, t3);
      mount_component(copybuttongroup1, div3, null);
      append(div3, t4);
      if_blocks[current_block_type_index].m(div3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup0_changes = {};
      if (dirty & /*appGatedContentItem*/
      1)
        copybuttongroup0_changes.buttonText = /*appGatedContentItem*/
        ctx2[0].key;
      copybuttongroup0.$set(copybuttongroup0_changes);
      if (dirty & /*appGatedContentItem*/
      1) {
        each_value_1 = /*appGatedContentItem*/
        ctx2[0].urls;
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1$1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_1$1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div1, null);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const copybuttongroup1_changes = {};
      if (dirty & /*appGatedContentItem*/
      1)
        copybuttongroup1_changes.buttonText = "/" + /*appGatedContentItem*/
        ctx2[0].redirect;
      copybuttongroup1.$set(copybuttongroup1_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div3, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup0.$$.fragment, local);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(copybuttongroup1.$$.fragment, local);
      transition_in(if_block);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div3_transition)
            div3_transition = create_bidirectional_transition(div3, slide, { duration: 300 }, true);
          div3_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup0.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(copybuttongroup1.$$.fragment, local);
      transition_out(if_block);
      if (local) {
        if (!div3_transition)
          div3_transition = create_bidirectional_transition(div3, slide, { duration: 300 }, false);
        div3_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(copybuttongroup0);
      destroy_each(each_blocks, detaching);
      destroy_component(copybuttongroup1);
      if_blocks[current_block_type_index].d();
      if (detaching && div3_transition)
        div3_transition.end();
    }
  };
}
function create_each_block_1$1(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: (
        /*url*/
        ctx[7].filter
      ),
      buttonText: "/" + /*url*/
      ctx[7].url
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*appGatedContentItem*/
      1)
        copybuttongroup_changes.labelText = /*url*/
        ctx2[7].filter;
      if (dirty & /*appGatedContentItem*/
      1)
        copybuttongroup_changes.buttonText = "/" + /*url*/
        ctx2[7].url;
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_else_block$1(ctx) {
  let div2;
  let div0;
  let t1;
  let div1;
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "All Members",
      buttonText: "true"
    }
  });
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      div0.textContent = "Grant Access to...";
      t1 = space();
      div1 = element("div");
      create_component(copybuttongroup.$$.fragment);
      attr(div0, "class", "ms-app-gated-content-item__group-title svelte-rd0m2l");
      attr(div2, "class", "ms-app-gated-content-item__group svelte-rd0m2l");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t1);
      append(div2, div1);
      mount_component(copybuttongroup, div1, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(copybuttongroup);
    }
  };
}
function create_if_block_1$4(ctx) {
  let div2;
  let div0;
  let t1;
  let div1;
  let current;
  let each_value = (
    /*appGatedContentItem*/
    ctx[0].plans
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      div0.textContent = "Grant Access to...";
      t1 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "ms-app-gated-content-item__group-title svelte-rd0m2l");
      attr(div2, "class", "ms-app-gated-content-item__group svelte-rd0m2l");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t1);
      append(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*appGatedContentItem*/
      1) {
        each_value = /*appGatedContentItem*/
        ctx2[0].plans;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div1, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block$2(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "Plan",
      buttonText: (
        /*plan*/
        ctx[4].id
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*appGatedContentItem*/
      1)
        copybuttongroup_changes.buttonText = /*plan*/
        ctx2[4].id;
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_fragment$6(ctx) {
  let div2;
  let div0;
  let button;
  let span0;
  let lockicon;
  let t0;
  let t1_value = (
    /*appGatedContentItem*/
    ctx[0].name + ""
  );
  let t1;
  let t2;
  let span1;
  let arrowicon;
  let t3;
  let div1;
  let div2_id_value;
  let current;
  let mounted;
  let dispose;
  lockicon = new LockIcon({});
  arrowicon = new ArrowIcon({
    props: {
      style: "transform: rotate(" + /*openAppGatedContentItem*/
      (ctx[1] ? "180deg" : "0deg") + ")"
    }
  });
  let if_block = (
    /*openAppGatedContentItem*/
    ctx[1] && create_if_block$5(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      button = element("button");
      span0 = element("span");
      create_component(lockicon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      span1 = element("span");
      create_component(arrowicon.$$.fragment);
      t3 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      attr(span0, "class", "ms-app-gated-content-item__icon svelte-rd0m2l");
      attr(span1, "class", "ms-app-gated-content-item__arrow svelte-rd0m2l");
      attr(button, "class", "ms-app-gated-content-item__tab svelte-rd0m2l");
      attr(button, "data-cy", "app-gated-content-item-button");
      attr(div0, "class", "ms-app-gated-content-item__tabs svelte-rd0m2l");
      attr(div1, "class", "ms-app-gated-content-item__content svelte-rd0m2l");
      attr(div1, "data-cy", "app-gated-content-item-content");
      attr(div2, "class", "ms-app-gated-content-item svelte-rd0m2l");
      attr(div2, "id", div2_id_value = /*appGatedContentItem*/
      ctx[0].key);
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div0, button);
      append(button, span0);
      mount_component(lockicon, span0, null);
      append(button, t0);
      append(button, t1);
      append(button, t2);
      append(button, span1);
      mount_component(arrowicon, span1, null);
      append(div2, t3);
      append(div2, div1);
      if (if_block)
        if_block.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*appGatedContentItem*/
      1) && t1_value !== (t1_value = /*appGatedContentItem*/
      ctx2[0].name + ""))
        set_data(t1, t1_value);
      const arrowicon_changes = {};
      if (dirty & /*openAppGatedContentItem*/
      2)
        arrowicon_changes.style = "transform: rotate(" + /*openAppGatedContentItem*/
        (ctx2[1] ? "180deg" : "0deg") + ")";
      arrowicon.$set(arrowicon_changes);
      if (
        /*openAppGatedContentItem*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*openAppGatedContentItem*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & /*appGatedContentItem*/
      1 && div2_id_value !== (div2_id_value = /*appGatedContentItem*/
      ctx2[0].key)) {
        attr(div2, "id", div2_id_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(lockicon.$$.fragment, local);
      transition_in(arrowicon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(lockicon.$$.fragment, local);
      transition_out(arrowicon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(lockicon);
      destroy_component(arrowicon);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$5($$self, $$props, $$invalidate) {
  let { appGatedContentItem } = $$props;
  let openAppGatedContentItem = false;
  function showAppGatedContentItemContent() {
    $$invalidate(1, openAppGatedContentItem = !openAppGatedContentItem);
  }
  const click_handler = () => showAppGatedContentItemContent();
  $$self.$$set = ($$props2) => {
    if ("appGatedContentItem" in $$props2)
      $$invalidate(0, appGatedContentItem = $$props2.appGatedContentItem);
  };
  return [
    appGatedContentItem,
    openAppGatedContentItem,
    showAppGatedContentItemContent,
    click_handler
  ];
}
var AppGatedContentItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$5, create_fragment$6, safe_not_equal, { appGatedContentItem: 0 }, add_css$4);
  }
};
function create_fragment$5(ctx) {
  let svg;
  let path;
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "fill", "currentColor");
      attr(path, "d", "M5 13h14v-2H5v2zm-2 4h14v-2H3v2zM7 7v2h14V7H7z");
      attr(svg, "aria-hidden", "true");
      attr(svg, "viewBox", "3 7 18 10");
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
var FieldsIcon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$5, safe_not_equal, {});
  }
};
function add_css$3(target) {
  append_styles(target, "svelte-k3hu84", ".ms-app-custom-fields-item.svelte-k3hu84{width:100%;background-color:#444;border:1px solid #5c5c5c;border-radius:4px;flex-wrap:wrap;margin-bottom:0.5em;display:flex;transition:height 0.2s ease-in-out;overflow:hidden}.ms-app-custom-fields-item__tabs.svelte-k3hu84{display:flex;align-items:stretch;justify-content:space-between;width:100%}.ms-app-custom-fields-item__tab.svelte-k3hu84{gap:6px;padding:4px;display:flex;align-items:center;background-color:transparent;transition:background-color 0.2s ease-in-out;width:100%;line-height:1}.ms-app-custom-fields-item__icon.svelte-k3hu84{width:22px;height:22px;display:flex;align-items:center;justify-content:center;background-color:#292929;border-radius:3px;color:#fff;padding:2px}.ms-app-custom-fields-item__icon svg{width:100%;height:100%}.ms-app-custom-fields-item__arrow.svelte-k3hu84{margin-left:auto;margin-right:8px;width:8px;transition:transform 0.2s ease-in-out}.ms-app-custom-fields-item__content.svelte-k3hu84{width:100%}.ms-app-custom-fields-item__wrapper.svelte-k3hu84{background-color:#292929;width:100%;padding:8px}");
}
function create_if_block$4(ctx) {
  let div;
  let t0;
  let t1;
  let t2;
  let div_transition;
  let current;
  let if_block0 = (
    /*appCustomFieldItem*/
    ctx[0].key && create_if_block_4$1(ctx)
  );
  let if_block1 = (
    /*appCustomFieldItem*/
    (ctx[0].order || /*appCustomFieldItem*/
    ctx[0].order === 0) && create_if_block_3$2(ctx)
  );
  let if_block2 = (
    /*appCustomFieldItem*/
    ctx[0].hidden && create_if_block_2$3(ctx)
  );
  let if_block3 = (
    /*appCustomFieldItem*/
    ctx[0].visibility && create_if_block_1$3(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      attr(div, "class", "ms-app-custom-fields-item__wrapper svelte-k3hu84");
      attr(div, "data-cy", "app-custom-fields-item-content-wrapper");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append(div, t0);
      if (if_block1)
        if_block1.m(div, null);
      append(div, t1);
      if (if_block2)
        if_block2.m(div, null);
      append(div, t2);
      if (if_block3)
        if_block3.m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*appCustomFieldItem*/
        ctx2[0].key
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*appCustomFieldItem*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_4$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*appCustomFieldItem*/
        ctx2[0].order || /*appCustomFieldItem*/
        ctx2[0].order === 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*appCustomFieldItem*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_3$2(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*appCustomFieldItem*/
        ctx2[0].hidden
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*appCustomFieldItem*/
          1) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_2$3(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div, t2);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*appCustomFieldItem*/
        ctx2[0].visibility
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*appCustomFieldItem*/
          1) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_1$3(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div, null);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!div_transition)
            div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, true);
          div_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      if (local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, false);
        div_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (detaching && div_transition)
        div_transition.end();
    }
  };
}
function create_if_block_4$1(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "Key",
      buttonText: (
        /*appCustomFieldItem*/
        ctx[0].key.toString()
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*appCustomFieldItem*/
      1)
        copybuttongroup_changes.buttonText = /*appCustomFieldItem*/
        ctx2[0].key.toString();
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_if_block_3$2(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "Order",
      buttonText: (
        /*appCustomFieldItem*/
        ctx[0].order.toString()
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*appCustomFieldItem*/
      1)
        copybuttongroup_changes.buttonText = /*appCustomFieldItem*/
        ctx2[0].order.toString();
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_if_block_2$3(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "Hidden",
      buttonText: (
        /*appCustomFieldItem*/
        ctx[0].hidden.toString()
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*appCustomFieldItem*/
      1)
        copybuttongroup_changes.buttonText = /*appCustomFieldItem*/
        ctx2[0].hidden.toString();
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_if_block_1$3(ctx) {
  let copybuttongroup;
  let current;
  copybuttongroup = new CopyButtonGroup({
    props: {
      labelText: "Visibility",
      buttonText: (
        /*appCustomFieldItem*/
        ctx[0].visibility.toString()
      )
    }
  });
  return {
    c() {
      create_component(copybuttongroup.$$.fragment);
    },
    m(target, anchor) {
      mount_component(copybuttongroup, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const copybuttongroup_changes = {};
      if (dirty & /*appCustomFieldItem*/
      1)
        copybuttongroup_changes.buttonText = /*appCustomFieldItem*/
        ctx2[0].visibility.toString();
      copybuttongroup.$set(copybuttongroup_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(copybuttongroup, detaching);
    }
  };
}
function create_fragment$4(ctx) {
  let div2;
  let div0;
  let button;
  let span0;
  let fieldsicon;
  let t0;
  let t1_value = (
    /*appCustomFieldItem*/
    ctx[0].label + ""
  );
  let t1;
  let t2;
  let span1;
  let arrowicon;
  let t3;
  let div1;
  let current;
  let mounted;
  let dispose;
  fieldsicon = new FieldsIcon({});
  arrowicon = new ArrowIcon({
    props: {
      style: "transform: rotate(" + /*openAppCustomFieldItem*/
      (ctx[1] ? "180deg" : "0deg") + ")"
    }
  });
  let if_block = (
    /*openAppCustomFieldItem*/
    ctx[1] && create_if_block$4(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      button = element("button");
      span0 = element("span");
      create_component(fieldsicon.$$.fragment);
      t0 = space();
      t1 = text(t1_value);
      t2 = space();
      span1 = element("span");
      create_component(arrowicon.$$.fragment);
      t3 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      attr(span0, "class", "ms-app-custom-fields-item__icon svelte-k3hu84");
      attr(span1, "class", "ms-app-custom-fields-item__arrow svelte-k3hu84");
      attr(button, "class", "ms-app-custom-fields-item__tab svelte-k3hu84");
      attr(button, "data-cy", "app-custom-fields-item-button");
      attr(div0, "class", "ms-app-custom-fields-item__tabs svelte-k3hu84");
      attr(div1, "class", "ms-app-custom-fields-item__content svelte-k3hu84");
      attr(div1, "data-cy", "app-custom-fields-item-content");
      attr(div2, "class", "ms-app-custom-fields-item svelte-k3hu84");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div0, button);
      append(button, span0);
      mount_component(fieldsicon, span0, null);
      append(button, t0);
      append(button, t1);
      append(button, t2);
      append(button, span1);
      mount_component(arrowicon, span1, null);
      append(div2, t3);
      append(div2, div1);
      if (if_block)
        if_block.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*click_handler*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*appCustomFieldItem*/
      1) && t1_value !== (t1_value = /*appCustomFieldItem*/
      ctx2[0].label + ""))
        set_data(t1, t1_value);
      const arrowicon_changes = {};
      if (dirty & /*openAppCustomFieldItem*/
      2)
        arrowicon_changes.style = "transform: rotate(" + /*openAppCustomFieldItem*/
        (ctx2[1] ? "180deg" : "0deg") + ")";
      arrowicon.$set(arrowicon_changes);
      if (
        /*openAppCustomFieldItem*/
        ctx2[1]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*openAppCustomFieldItem*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$4(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(fieldsicon.$$.fragment, local);
      transition_in(arrowicon.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(fieldsicon.$$.fragment, local);
      transition_out(arrowicon.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(fieldsicon);
      destroy_component(arrowicon);
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance$4($$self, $$props, $$invalidate) {
  let { appCustomFieldItem } = $$props;
  let openAppCustomFieldItem = false;
  function showAppCustomFieldItemContent() {
    $$invalidate(1, openAppCustomFieldItem = !openAppCustomFieldItem);
  }
  const click_handler = () => showAppCustomFieldItemContent();
  $$self.$$set = ($$props2) => {
    if ("appCustomFieldItem" in $$props2)
      $$invalidate(0, appCustomFieldItem = $$props2.appCustomFieldItem);
  };
  return [
    appCustomFieldItem,
    openAppCustomFieldItem,
    showAppCustomFieldItemContent,
    click_handler
  ];
}
var AppCustomFieldItem = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$4, create_fragment$4, safe_not_equal, { appCustomFieldItem: 0 }, add_css$3);
  }
};
function add_css$2(target) {
  append_styles(target, "svelte-1yhhrhe", ".ms-app-tab__header.svelte-1yhhrhe.svelte-1yhhrhe{margin-bottom:12px;display:flex}.ms-app-tab_header_link.svelte-1yhhrhe.svelte-1yhhrhe{display:flex;align-items:center;color:#bebebe;text-decoration:none}.ms-app-tab_header_link.svelte-1yhhrhe.svelte-1yhhrhe:hover{color:#fff}.ms-app-tab__header__indicator.svelte-1yhhrhe.svelte-1yhhrhe{width:4px;height:100%;border-radius:2px;margin-right:10px;background-color:#efd350}.ms-app-tab__header__text.svelte-1yhhrhe.svelte-1yhhrhe{font-size:10px;line-height:14px}.ms-app-tab__header__text.svelte-1yhhrhe span.svelte-1yhhrhe{text-decoration:underline;color:#fff}.ms-app-tab__section.svelte-1yhhrhe.svelte-1yhhrhe{padding-bottom:6px;margin-bottom:12px;border-bottom:1px solid #535353}.ms-app-tab__section.svelte-1yhhrhe.svelte-1yhhrhe:last-child{border-bottom:none;margin-bottom:0}.ms-code-block.svelte-1yhhrhe.svelte-1yhhrhe{background-color:#000;color:#fff;padding:4px 8px;border-radius:4px;overflow:auto;border:1px solid #4b4b4b;font-size:10px;max-height:420px}.ms-code-block--short.svelte-1yhhrhe.svelte-1yhhrhe{max-height:175px}");
}
function get_each_context$1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[1] = list[i];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i];
  return child_ctx;
}
function create_if_block_3$1(ctx) {
  let div;
  let sectionheader;
  let t0;
  let t1;
  let buttonlink;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Custom Fields",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/members`
    }
  });
  let each_value_1 = (
    /*$InspectorStore*/
    ctx[0].appData.customFields
  );
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  buttonlink = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/7389502579355",
      text: "Documentation"
    }
  });
  return {
    c() {
      div = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      create_component(buttonlink.$$.fragment);
      attr(div, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div, "data-cy", "app-section-custom-fields");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(sectionheader, div, null);
      append(div, t0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      append(div, t1);
      mount_component(buttonlink, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/members`;
      sectionheader.$set(sectionheader_changes);
      if (dirty & /*$InspectorStore*/
      1) {
        each_value_1 = /*$InspectorStore*/
        ctx2[0].appData.customFields;
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, t1);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(buttonlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(buttonlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(sectionheader);
      destroy_each(each_blocks, detaching);
      destroy_component(buttonlink);
    }
  };
}
function create_each_block_1(ctx) {
  let appcustomfielditem;
  let current;
  appcustomfielditem = new AppCustomFieldItem({
    props: {
      appCustomFieldItem: (
        /*customField*/
        ctx[4]
      )
    }
  });
  return {
    c() {
      create_component(appcustomfielditem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(appcustomfielditem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const appcustomfielditem_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        appcustomfielditem_changes.appCustomFieldItem = /*customField*/
        ctx2[4];
      appcustomfielditem.$set(appcustomfielditem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(appcustomfielditem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(appcustomfielditem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(appcustomfielditem, detaching);
    }
  };
}
function create_if_block_2$2(ctx) {
  let div;
  let sectionheader;
  let t0;
  let t1;
  let buttonlink;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Gated Content",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/gated-content`
    }
  });
  let each_value = (
    /*$InspectorStore*/
    ctx[0].appData.contentGroups
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  buttonlink = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/7402927868443-Gated-Content",
      text: "Documentation"
    }
  });
  return {
    c() {
      div = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      create_component(buttonlink.$$.fragment);
      attr(div, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div, "data-cy", "app-section-gated-content");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(sectionheader, div, null);
      append(div, t0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      append(div, t1);
      mount_component(buttonlink, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/gated-content`;
      sectionheader.$set(sectionheader_changes);
      if (dirty & /*$InspectorStore*/
      1) {
        each_value = /*$InspectorStore*/
        ctx2[0].appData.contentGroups;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context$1(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block$1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, t1);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(buttonlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(buttonlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(sectionheader);
      destroy_each(each_blocks, detaching);
      destroy_component(buttonlink);
    }
  };
}
function create_each_block$1(ctx) {
  let appgatedcontentitem;
  let current;
  appgatedcontentitem = new AppGatedContentItem({
    props: {
      appGatedContentItem: (
        /*contentGroup*/
        ctx[1]
      )
    }
  });
  return {
    c() {
      create_component(appgatedcontentitem.$$.fragment);
    },
    m(target, anchor) {
      mount_component(appgatedcontentitem, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const appgatedcontentitem_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        appgatedcontentitem_changes.appGatedContentItem = /*contentGroup*/
        ctx2[1];
      appgatedcontentitem.$set(appgatedcontentitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(appgatedcontentitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(appgatedcontentitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(appgatedcontentitem, detaching);
    }
  };
}
function create_if_block_1$2(ctx) {
  let div1;
  let sectionheader;
  let t0;
  let div0;
  let copybuttongroup0;
  let t1;
  let copybuttongroup1;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Branding",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/settings/design`
    }
  });
  copybuttongroup0 = new CopyButtonGroup({
    props: {
      labelText: "Color",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].appData.branding.colors.lightMode.primaryButton
      ),
      cypress: `branding-color`
    }
  });
  copybuttongroup1 = new CopyButtonGroup({
    props: {
      labelText: "Logo",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].appData.branding.logo
      ),
      cypress: `branding-logo`
    }
  });
  return {
    c() {
      div1 = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      div0 = element("div");
      create_component(copybuttongroup0.$$.fragment);
      t1 = space();
      create_component(copybuttongroup1.$$.fragment);
      attr(div0, "class", "ms-app-tab__section__content");
      attr(div0, "data-cy", "app-section-branding-content");
      attr(div1, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div1, "data-cy", "app-section-branding");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(sectionheader, div1, null);
      append(div1, t0);
      append(div1, div0);
      mount_component(copybuttongroup0, div0, null);
      append(div0, t1);
      mount_component(copybuttongroup1, div0, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/settings/design`;
      sectionheader.$set(sectionheader_changes);
      const copybuttongroup0_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup0_changes.buttonText = /*$InspectorStore*/
        ctx2[0].appData.branding.colors.lightMode.primaryButton;
      copybuttongroup0.$set(copybuttongroup0_changes);
      const copybuttongroup1_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup1_changes.buttonText = /*$InspectorStore*/
        ctx2[0].appData.branding.logo;
      copybuttongroup1.$set(copybuttongroup1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      transition_in(copybuttongroup0.$$.fragment, local);
      transition_in(copybuttongroup1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      transition_out(copybuttongroup0.$$.fragment, local);
      transition_out(copybuttongroup1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(sectionheader);
      destroy_component(copybuttongroup0);
      destroy_component(copybuttongroup1);
    }
  };
}
function create_if_block$3(ctx) {
  let div1;
  let sectionheader;
  let t0;
  let div0;
  let pre;
  let code;
  let t1_value = JSON.stringify(
    /*$InspectorStore*/
    ctx[0].appData.plans,
    null,
    2
  ) + "";
  let t1;
  let t2;
  let buttonlink;
  let current;
  sectionheader = new SectionHeader({
    props: {
      titleText: "Plans (raw)",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/plans`
    }
  });
  buttonlink = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/7384849448091-Getting-Started-with-Plans-Prices",
      text: "Documentation"
    }
  });
  return {
    c() {
      div1 = element("div");
      create_component(sectionheader.$$.fragment);
      t0 = space();
      div0 = element("div");
      pre = element("pre");
      code = element("code");
      t1 = text(t1_value);
      t2 = space();
      create_component(buttonlink.$$.fragment);
      attr(pre, "class", "ms-code-block ms-code-block--short svelte-1yhhrhe");
      attr(div0, "class", "ms-app-tab__section__content");
      attr(div0, "data-cy", "app-section-plans-content");
      attr(div1, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div1, "data-cy", "app-section-plans");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      mount_component(sectionheader, div1, null);
      append(div1, t0);
      append(div1, div0);
      append(div0, pre);
      append(pre, code);
      append(code, t1);
      append(div1, t2);
      mount_component(buttonlink, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheader_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/plans`;
      sectionheader.$set(sectionheader_changes);
      if ((!current || dirty & /*$InspectorStore*/
      1) && t1_value !== (t1_value = JSON.stringify(
        /*$InspectorStore*/
        ctx2[0].appData.plans,
        null,
        2
      ) + ""))
        set_data(t1, t1_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheader.$$.fragment, local);
      transition_in(buttonlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheader.$$.fragment, local);
      transition_out(buttonlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      destroy_component(sectionheader);
      destroy_component(buttonlink);
    }
  };
}
function create_fragment$3(ctx) {
  let div2;
  let t8;
  let div3;
  let copybuttongroup0;
  let t9;
  let copybuttongroup1;
  let t10;
  let t11;
  let t12;
  let div5;
  let sectionheader0;
  let t13;
  let div4;
  let buttonlink0;
  let t14;
  let buttonlink1;
  let t15;
  let buttonlink2;
  let t16;
  let buttonlink3;
  let t17;
  let buttonlink4;
  let t18;
  let buttonlink5;
  let t19;
  let buttonlink6;
  let t20;
  let t21;
  let t22;
  let div7;
  let sectionheader1;
  let t23;
  let div6;
  let pre;
  let code;
  let t24_value = JSON.stringify(
    /*$InspectorStore*/
    ctx[0].appData,
    null,
    2
  ) + "";
  let t24;
  let current;
  copybuttongroup0 = new CopyButtonGroup({
    props: {
      labelText: "Name",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].appData.name
      ),
      cypress: "app-name"
    }
  });
  copybuttongroup1 = new CopyButtonGroup({
    props: {
      labelText: "App ID",
      buttonText: (
        /*$InspectorStore*/
        ctx[0].appData.id
      ),
      cypress: "app-id"
    }
  });
  let if_block0 = (
    /*$InspectorStore*/
    ctx[0].appData.customFields.length > 0 && create_if_block_3$1(ctx)
  );
  let if_block1 = (
    /*$InspectorStore*/
    ctx[0].appData.contentGroups && /*$InspectorStore*/
    ctx[0].appData.contentGroups.length > 0 && create_if_block_2$2(ctx)
  );
  sectionheader0 = new SectionHeader({
    props: {
      titleText: "Authentication",
      editURL: `https://app.memberstack.com/apps/${/*$InspectorStore*/
      ctx[0].appData.id}/plans`
    }
  });
  buttonlink0 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/14052704355483",
      text: "Passwordless Login",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.additionalAuthMethods.passwordless.enabled
      )
    }
  });
  buttonlink1 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/8327236548379-Google-Authentication",
      text: "Google",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.authProviders.some(func)
      )
    }
  });
  buttonlink2 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/9116286679195-Facebook-Authentication",
      text: "Facebook",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.authProviders.some(func_1)
      )
    }
  });
  buttonlink3 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/9128407335835-LinkedIn-Authentication",
      text: "LinkedIn",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.authProviders.some(func_2)
      )
    }
  });
  buttonlink4 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/9151726845339-Dribbble-Authentication",
      text: "Dribble",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.authProviders.some(func_3)
      )
    }
  });
  buttonlink5 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/9151679451803-Spotify-Authentication",
      text: "Spotify",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.authProviders.some(func_4)
      )
    }
  });
  buttonlink6 = new ButtonLink({
    props: {
      link: "https://docs.memberstack.com/hc/en-us/articles/9151629563291-GitHub-Authentication",
      text: "Github",
      status: (
        /*$InspectorStore*/
        ctx[0].appData.authProviders.some(func_5)
      )
    }
  });
  let if_block2 = (
    /*$InspectorStore*/
    ctx[0].appData.branding && create_if_block_1$2(ctx)
  );
  let if_block3 = (
    /*$InspectorStore*/
    ctx[0].appData.plans.length > 0 && create_if_block$3(ctx)
  );
  sectionheader1 = new SectionHeader({ props: { titleText: "App Data (raw)" } });
  return {
    c() {
      div2 = element("div");
      div2.innerHTML = `<a class="ms-app-tab_header_link svelte-1yhhrhe" href="https://docs.memberstack.com/hc/en-us/articles/7595262385819-Managing-Test-Mode-and-Live-Mode" target="_blank"><div class="ms-app-tab__header__indicator svelte-1yhhrhe"></div> 

    <div class="ms-app-tab__header__text svelte-1yhhrhe">This domain is in <span class="svelte-1yhhrhe">Test Mode</span>. <br/>
      Click here when you&#39;re ready to <br/> 
      <span class="svelte-1yhhrhe">Go Live</span> and sign up real members.</div></a>`;
      t8 = space();
      div3 = element("div");
      create_component(copybuttongroup0.$$.fragment);
      t9 = space();
      create_component(copybuttongroup1.$$.fragment);
      t10 = space();
      if (if_block0)
        if_block0.c();
      t11 = space();
      if (if_block1)
        if_block1.c();
      t12 = space();
      div5 = element("div");
      create_component(sectionheader0.$$.fragment);
      t13 = space();
      div4 = element("div");
      create_component(buttonlink0.$$.fragment);
      t14 = space();
      create_component(buttonlink1.$$.fragment);
      t15 = space();
      create_component(buttonlink2.$$.fragment);
      t16 = space();
      create_component(buttonlink3.$$.fragment);
      t17 = space();
      create_component(buttonlink4.$$.fragment);
      t18 = space();
      create_component(buttonlink5.$$.fragment);
      t19 = space();
      create_component(buttonlink6.$$.fragment);
      t20 = space();
      if (if_block2)
        if_block2.c();
      t21 = space();
      if (if_block3)
        if_block3.c();
      t22 = space();
      div7 = element("div");
      create_component(sectionheader1.$$.fragment);
      t23 = space();
      div6 = element("div");
      pre = element("pre");
      code = element("code");
      t24 = text(t24_value);
      attr(div2, "class", "ms-app-tab__header svelte-1yhhrhe");
      attr(div3, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div3, "data-cy", "app-section-required");
      attr(div4, "class", "ms-app-tab__section__content ms-app-tab__section__content--auth");
      attr(div4, "data-cy", "app-section-authentication-content");
      attr(div5, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div5, "data-cy", "app-section-authentication");
      attr(pre, "class", "ms-code-block svelte-1yhhrhe");
      attr(div6, "class", "ms-app-tab__section__content");
      attr(div6, "data-cy", "app-section-all-data-content");
      attr(div7, "class", "ms-app-tab__section svelte-1yhhrhe");
      attr(div7, "data-cy", "app-section-all-data");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      insert(target, t8, anchor);
      insert(target, div3, anchor);
      mount_component(copybuttongroup0, div3, null);
      append(div3, t9);
      mount_component(copybuttongroup1, div3, null);
      insert(target, t10, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t11, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t12, anchor);
      insert(target, div5, anchor);
      mount_component(sectionheader0, div5, null);
      append(div5, t13);
      append(div5, div4);
      mount_component(buttonlink0, div4, null);
      append(div4, t14);
      mount_component(buttonlink1, div4, null);
      append(div4, t15);
      mount_component(buttonlink2, div4, null);
      append(div4, t16);
      mount_component(buttonlink3, div4, null);
      append(div4, t17);
      mount_component(buttonlink4, div4, null);
      append(div4, t18);
      mount_component(buttonlink5, div4, null);
      append(div4, t19);
      mount_component(buttonlink6, div4, null);
      insert(target, t20, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t21, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, t22, anchor);
      insert(target, div7, anchor);
      mount_component(sectionheader1, div7, null);
      append(div7, t23);
      append(div7, div6);
      append(div6, pre);
      append(pre, code);
      append(code, t24);
      current = true;
    },
    p(ctx2, [dirty]) {
      const copybuttongroup0_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup0_changes.buttonText = /*$InspectorStore*/
        ctx2[0].appData.name;
      copybuttongroup0.$set(copybuttongroup0_changes);
      const copybuttongroup1_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        copybuttongroup1_changes.buttonText = /*$InspectorStore*/
        ctx2[0].appData.id;
      copybuttongroup1.$set(copybuttongroup1_changes);
      if (
        /*$InspectorStore*/
        ctx2[0].appData.customFields.length > 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_3$1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t11.parentNode, t11);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*$InspectorStore*/
        ctx2[0].appData.contentGroups && /*$InspectorStore*/
        ctx2[0].appData.contentGroups.length > 0
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_2$2(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t12.parentNode, t12);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const sectionheader0_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        sectionheader0_changes.editURL = `https://app.memberstack.com/apps/${/*$InspectorStore*/
        ctx2[0].appData.id}/plans`;
      sectionheader0.$set(sectionheader0_changes);
      const buttonlink0_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink0_changes.status = /*$InspectorStore*/
        ctx2[0].appData.additionalAuthMethods.passwordless.enabled;
      buttonlink0.$set(buttonlink0_changes);
      const buttonlink1_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink1_changes.status = /*$InspectorStore*/
        ctx2[0].appData.authProviders.some(func);
      buttonlink1.$set(buttonlink1_changes);
      const buttonlink2_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink2_changes.status = /*$InspectorStore*/
        ctx2[0].appData.authProviders.some(func_1);
      buttonlink2.$set(buttonlink2_changes);
      const buttonlink3_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink3_changes.status = /*$InspectorStore*/
        ctx2[0].appData.authProviders.some(func_2);
      buttonlink3.$set(buttonlink3_changes);
      const buttonlink4_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink4_changes.status = /*$InspectorStore*/
        ctx2[0].appData.authProviders.some(func_3);
      buttonlink4.$set(buttonlink4_changes);
      const buttonlink5_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink5_changes.status = /*$InspectorStore*/
        ctx2[0].appData.authProviders.some(func_4);
      buttonlink5.$set(buttonlink5_changes);
      const buttonlink6_changes = {};
      if (dirty & /*$InspectorStore*/
      1)
        buttonlink6_changes.status = /*$InspectorStore*/
        ctx2[0].appData.authProviders.some(func_5);
      buttonlink6.$set(buttonlink6_changes);
      if (
        /*$InspectorStore*/
        ctx2[0].appData.branding
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_1$2(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t21.parentNode, t21);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*$InspectorStore*/
        ctx2[0].appData.plans.length > 0
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block$3(ctx2);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(t22.parentNode, t22);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if ((!current || dirty & /*$InspectorStore*/
      1) && t24_value !== (t24_value = JSON.stringify(
        /*$InspectorStore*/
        ctx2[0].appData,
        null,
        2
      ) + ""))
        set_data(t24, t24_value);
    },
    i(local) {
      if (current)
        return;
      transition_in(copybuttongroup0.$$.fragment, local);
      transition_in(copybuttongroup1.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(sectionheader0.$$.fragment, local);
      transition_in(buttonlink0.$$.fragment, local);
      transition_in(buttonlink1.$$.fragment, local);
      transition_in(buttonlink2.$$.fragment, local);
      transition_in(buttonlink3.$$.fragment, local);
      transition_in(buttonlink4.$$.fragment, local);
      transition_in(buttonlink5.$$.fragment, local);
      transition_in(buttonlink6.$$.fragment, local);
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(sectionheader1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(copybuttongroup0.$$.fragment, local);
      transition_out(copybuttongroup1.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(sectionheader0.$$.fragment, local);
      transition_out(buttonlink0.$$.fragment, local);
      transition_out(buttonlink1.$$.fragment, local);
      transition_out(buttonlink2.$$.fragment, local);
      transition_out(buttonlink3.$$.fragment, local);
      transition_out(buttonlink4.$$.fragment, local);
      transition_out(buttonlink5.$$.fragment, local);
      transition_out(buttonlink6.$$.fragment, local);
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(sectionheader1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (detaching)
        detach(t8);
      if (detaching)
        detach(div3);
      destroy_component(copybuttongroup0);
      destroy_component(copybuttongroup1);
      if (detaching)
        detach(t10);
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t11);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(t12);
      if (detaching)
        detach(div5);
      destroy_component(sectionheader0);
      destroy_component(buttonlink0);
      destroy_component(buttonlink1);
      destroy_component(buttonlink2);
      destroy_component(buttonlink3);
      destroy_component(buttonlink4);
      destroy_component(buttonlink5);
      destroy_component(buttonlink6);
      if (detaching)
        detach(t20);
      if (if_block2)
        if_block2.d(detaching);
      if (detaching)
        detach(t21);
      if (if_block3)
        if_block3.d(detaching);
      if (detaching)
        detach(t22);
      if (detaching)
        detach(div7);
      destroy_component(sectionheader1);
    }
  };
}
var func = (provider) => provider.provider === "google";
var func_1 = (provider) => provider.provider === "facebook";
var func_2 = (provider) => provider.provider === "linkedin";
var func_3 = (provider) => provider.provider === "dribbble";
var func_4 = (provider) => provider.provider === "spotify";
var func_5 = (provider) => provider.provider === "github";
function instance$3($$self, $$props, $$invalidate) {
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(0, $InspectorStore = $$value));
  $InspectorStore.appData.customFields.sort((a, b) => {
    if (a.order === null)
      return 1;
    if (b.order === null)
      return -1;
    return a.order - b.order;
  });
  return [$InspectorStore];
}
var AppTab = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$3, safe_not_equal, {}, add_css$2);
  }
};
function add_css$1(target) {
  append_styles(target, "svelte-1nz7e18", ".ms-inspector-sidebar.svelte-1nz7e18 .svelte-1nz7e18.svelte-1nz7e18{box-sizing:border-box;font-family:Plus Jakarta Sans, sans-serif !important;line-height:1.5em;font-size:11px !important}.ms-inspector-sidebar.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{position:fixed;top:0;right:0;bottom:0;width:242px;color:#fff;font-family:Plus Jakarta Sans, sans-serif !important;line-height:1.5em;font-size:11px !important;background:#292929;border-left:1px solid #000;box-shadow:0 0 10px rgba(0, 0, 0, 0.1);z-index:2147483648 !important}.ms-inspector-sidebar--left.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{left:0;right:auto;border-right:1px solid #000}.ms-inspector-sidebar__container.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{position:relative;height:100%;display:flex;flex-direction:column}.ms-inspector-sidebar__tabs.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:flex;gap:7px;padding:0 7px;border-bottom:1px solid #4f4f4f}.ms-inspector-sidebar__tab.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:flex;align-items:center;padding:17px 2px;height:30px;background-color:#292929;color:#fff;border:none;cursor:pointer;border-bottom:2px solid transparent}.ms-inspector-sidebar__tab--active.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{border-bottom:2px solid #c1c1c1;font-weight:700}.ms-inspector-sidebar__count.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:inline-block;border-radius:4px;background-color:#444;text-align:center;border:0.5px solid #535353;margin-right:0.5em;padding:0 3px}.ms-inspector-sidebar__member-status.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:inline-block;width:10px;height:10px;border-radius:50%;background-color:rgb(224, 102, 87);margin-right:5px}.ms-inspector-sidebar__member-status--active.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{background-color:#5c9d6f}.ms-inspector-sidebar__content.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{padding:7px;overflow-y:auto;flex-grow:1}.ms-inspector-footer.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:flex;align-items:stretch;justify-content:space-between;border-top:1px solid #4f4f4f;color:#919191}.ms-inspector-footer__link.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{text-decoration:none;border-right:1px solid #4f4f4f;position:relative;display:flex;align-items:center;justify-content:center;width:100%;padding:7px;transition:all 0.2s ease-in-out}.ms-inspector-footer__link.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18:last-child{border-right:none}.ms-inspector-footer__link.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18:hover{color:#fff;background-color:#444}.ms-inspector-footer__link.svelte-1nz7e18:hover .ms-inspector-footer__label.svelte-1nz7e18.svelte-1nz7e18{display:block}.ms-inspector-footer__link.svelte-1nz7e18:hover .ms-inspector-footer__icon.svelte-1nz7e18.svelte-1nz7e18{color:#fff}.ms-inspector-footer__icon.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{width:2em;height:2em;display:flex;align-items:center;justify-content:center;color:#919191;font-size:15px;font-weight:700}.ms-inspector-footer__label.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{font-size:11px;font-weight:700;width:90px;text-align:center;display:none;position:absolute;top:-25px;left:50%;transform:translateX(-50%);color:#fff}.ms-inspector-footer__text.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border-radius:3px;padding-left:0.8em;padding-right:0.8em;background-color:#292929}.ms-inspector-sidebar__side-switcher.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{position:absolute;top:0;bottom:0;left:-30px;display:none;align-items:center}.ms-inspector-sidebar.svelte-1nz7e18:hover .ms-inspector-sidebar__side-switcher.svelte-1nz7e18.svelte-1nz7e18{display:flex}.ms-inspector-sidebar--left.svelte-1nz7e18 .ms-inspector-sidebar__side-switcher.svelte-1nz7e18.svelte-1nz7e18{left:auto;right:-30px}.ms-inspector-sidebar__side-switcher-button.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{display:flex;align-items:center;justify-content:center;width:30px;height:30px;background-color:#292929;border:none;cursor:pointer;border-radius:4px 0px 0px 4px}.ms-inspector-sidebar--left.svelte-1nz7e18 .ms-inspector-sidebar__side-switcher-button.svelte-1nz7e18.svelte-1nz7e18{border-radius:0px 4px 4px 0px}.ms-inspector-sidebar__side-switcher-button-icon.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{width:13px;height:13px;display:flex;align-items:center;justify-content:center;color:#fff}.ms-inspector-sidebar__side-switcher-button-icon.svelte-1nz7e18 svg.svelte-1nz7e18.svelte-1nz7e18{transform:rotate(90deg)}.ms-inspector-sidebar__label.svelte-1nz7e18.svelte-1nz7e18.svelte-1nz7e18{position:absolute;top:50%;transform:translateY(-50%);left:-90px;display:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border-radius:3px;padding-left:0.8em;padding-right:0.8em;background-color:#292929}.ms-inspector-sidebar--left.svelte-1nz7e18 .ms-inspector-sidebar__label.svelte-1nz7e18.svelte-1nz7e18{left:auto;right:-90px}.ms-inspector-sidebar.svelte-1nz7e18:hover .ms-inspector-sidebar__side-switcher-button.svelte-1nz7e18:hover+.ms-inspector-sidebar__label.svelte-1nz7e18{display:inline-block}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[8] = list[i];
  return child_ctx;
}
function create_if_block_2$1(ctx) {
  let apptab;
  let current;
  apptab = new AppTab({});
  return {
    c() {
      create_component(apptab.$$.fragment);
    },
    m(target, anchor) {
      mount_component(apptab, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(apptab.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(apptab.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(apptab, detaching);
    }
  };
}
function create_if_block_1$1(ctx) {
  let membertab;
  let current;
  membertab = new MemberTab({});
  return {
    c() {
      create_component(membertab.$$.fragment);
    },
    m(target, anchor) {
      mount_component(membertab, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(membertab.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(membertab.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(membertab, detaching);
    }
  };
}
function create_if_block$2(ctx) {
  let inspectortab;
  let current;
  inspectortab = new InspectorTab({});
  return {
    c() {
      create_component(inspectortab.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inspectortab, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectortab.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectortab.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inspectortab, detaching);
    }
  };
}
function create_each_block(ctx) {
  let a;
  let div0;
  let switch_instance;
  let t0;
  let div1;
  let span;
  let t1_value = (
    /*footerItem*/
    ctx[8].label + ""
  );
  let t1;
  let t2;
  let current;
  var switch_value = (
    /*footerItem*/
    ctx[8].icon
  );
  function switch_props(ctx2) {
    return {};
  }
  if (switch_value) {
    switch_instance = construct_svelte_component(switch_value, switch_props());
  }
  return {
    c() {
      a = element("a");
      div0 = element("div");
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      t0 = space();
      div1 = element("div");
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      attr(div0, "class", "ms-inspector-footer__icon svelte-1nz7e18");
      attr(span, "class", "ms-inspector-footer__text svelte-1nz7e18");
      attr(div1, "class", "ms-inspector-footer__label svelte-1nz7e18");
      attr(
        a,
        "href",
        /*footerItem*/
        ctx[8].link
      );
      attr(a, "target", "_blank");
      attr(a, "class", "ms-inspector-footer__link svelte-1nz7e18");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, div0);
      if (switch_instance)
        mount_component(switch_instance, div0, null);
      append(a, t0);
      append(a, div1);
      append(div1, span);
      append(span, t1);
      append(a, t2);
      current = true;
    },
    p(ctx2, dirty) {
      if (switch_value !== (switch_value = /*footerItem*/
      ctx2[8].icon)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component(switch_value, switch_props());
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div0, null);
        } else {
          switch_instance = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(a);
      if (switch_instance)
        destroy_component(switch_instance);
    }
  };
}
function create_fragment$2(ctx) {
  let aside;
  let div3;
  let div0;
  let button0;
  let span0;
  let t0_value = (
    /*$InspectorStore*/
    (ctx[0].inspectorData.length || 0) + ""
  );
  let t0;
  let t1;
  let span1;
  let t3;
  let button1;
  let span2;
  let t4;
  let span3;
  let t6;
  let button2;
  let t8;
  let div1;
  let current_block_type_index;
  let if_block;
  let t9;
  let div2;
  let div3_transition;
  let t10;
  let div5;
  let button3;
  let t11;
  let div4;
  let aside_transition;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block$2, create_if_block_1$1, create_if_block_2$1];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*$InspectorStore*/
      ctx2[0].showTab === "inspector"
    )
      return 0;
    if (
      /*$InspectorStore*/
      ctx2[0].showTab === "member"
    )
      return 1;
    if (
      /*$InspectorStore*/
      ctx2[0].showTab === "app"
    )
      return 2;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  let each_value = (
    /*footerItems*/
    ctx[1]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      aside = element("aside");
      div3 = element("div");
      div0 = element("div");
      button0 = element("button");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      span1.textContent = "Inspector";
      t3 = space();
      button1 = element("button");
      span2 = element("span");
      t4 = space();
      span3 = element("span");
      span3.textContent = "Member";
      t6 = space();
      button2 = element("button");
      button2.innerHTML = `<span class="svelte-1nz7e18">App</span>`;
      t8 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      t9 = space();
      div2 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t10 = space();
      div5 = element("div");
      button3 = element("button");
      button3.innerHTML = `<span class="ms-inspector-sidebar__side-switcher-button-icon svelte-1nz7e18"><svg xmlns="http://www.w3.org/2000/svg" class="svg-icon svelte-1nz7e18" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1"><path d="M396.8 160H262.4v448H64l262.4 256 262.4-256h-192z" fill="#C9C9C9" class="svelte-1nz7e18"></path><path d="M697.6 160l-262.4 256h192v448h134.4v-448H960z" fill="#C9C9C9" class="svelte-1nz7e18"></path></svg></span>`;
      t11 = space();
      div4 = element("div");
      div4.innerHTML = `<span class="ms-inspector-sidebar__text svelte-1nz7e18">Switch Sides</span>`;
      attr(span0, "class", "ms-inspector-sidebar__count svelte-1nz7e18");
      attr(span1, "class", "svelte-1nz7e18");
      attr(button0, "class", "ms-inspector-sidebar__tab svelte-1nz7e18");
      attr(button0, "data-cy", "inspector-sidebar-inspector-tab");
      toggle_class(
        button0,
        "ms-inspector-sidebar__tab--active",
        /*$InspectorStore*/
        ctx[0].showTab === "inspector"
      );
      attr(span2, "class", "ms-inspector-sidebar__member-status svelte-1nz7e18");
      toggle_class(
        span2,
        "ms-inspector-sidebar__member-status--active",
        /*$InspectorStore*/
        ctx[0].memberData && /*$InspectorStore*/
        ctx[0].memberData.id
      );
      attr(span3, "class", "svelte-1nz7e18");
      attr(button1, "class", "ms-inspector-sidebar__tab svelte-1nz7e18");
      attr(button1, "data-cy", "inspector-sidebar-member-tab");
      toggle_class(
        button1,
        "ms-inspector-sidebar__tab--active",
        /*$InspectorStore*/
        ctx[0].showTab === "member"
      );
      attr(button2, "class", "ms-inspector-sidebar__tab svelte-1nz7e18");
      attr(button2, "data-cy", "inspector-sidebar-app-tab");
      toggle_class(
        button2,
        "ms-inspector-sidebar__tab--active",
        /*$InspectorStore*/
        ctx[0].showTab === "app"
      );
      attr(div0, "class", "ms-inspector-sidebar__tabs svelte-1nz7e18");
      attr(div1, "class", "ms-inspector-sidebar__content svelte-1nz7e18");
      attr(div2, "class", "ms-inspector-footer svelte-1nz7e18");
      attr(div3, "class", "ms-inspector-sidebar__container svelte-1nz7e18");
      attr(button3, "class", "ms-inspector-sidebar__side-switcher-button svelte-1nz7e18");
      attr(button3, "data-cy", "inspector-sidebar-switch-side-button");
      attr(div4, "class", "ms-inspector-sidebar__label svelte-1nz7e18");
      attr(div5, "class", "ms-inspector-sidebar__side-switcher svelte-1nz7e18");
      attr(aside, "class", "ms-inspector-sidebar svelte-1nz7e18");
      attr(aside, "data-cy", "inspector-sidebar");
      toggle_class(
        aside,
        "ms-inspector-sidebar--left",
        /*$InspectorStore*/
        ctx[0].showSide === "left"
      );
    },
    m(target, anchor) {
      insert(target, aside, anchor);
      append(aside, div3);
      append(div3, div0);
      append(div0, button0);
      append(button0, span0);
      append(span0, t0);
      append(button0, t1);
      append(button0, span1);
      append(div0, t3);
      append(div0, button1);
      append(button1, span2);
      append(button1, t4);
      append(button1, span3);
      append(div0, t6);
      append(div0, button2);
      append(div3, t8);
      append(div3, div1);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div1, null);
      }
      append(div3, t9);
      append(div3, div2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div2, null);
        }
      }
      append(aside, t10);
      append(aside, div5);
      append(div5, button3);
      append(div5, t11);
      append(div5, div4);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            button0,
            "click",
            /*click_handler*/
            ctx[4]
          ),
          listen(
            button1,
            "click",
            /*click_handler_1*/
            ctx[5]
          ),
          listen(
            button2,
            "click",
            /*click_handler_2*/
            ctx[6]
          ),
          listen(
            button3,
            "click",
            /*click_handler_3*/
            ctx[7]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & /*$InspectorStore*/
      1) && t0_value !== (t0_value = /*$InspectorStore*/
      (ctx2[0].inspectorData.length || 0) + ""))
        set_data(t0, t0_value);
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          button0,
          "ms-inspector-sidebar__tab--active",
          /*$InspectorStore*/
          ctx2[0].showTab === "inspector"
        );
      }
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          span2,
          "ms-inspector-sidebar__member-status--active",
          /*$InspectorStore*/
          ctx2[0].memberData && /*$InspectorStore*/
          ctx2[0].memberData.id
        );
      }
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          button1,
          "ms-inspector-sidebar__tab--active",
          /*$InspectorStore*/
          ctx2[0].showTab === "member"
        );
      }
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          button2,
          "ms-inspector-sidebar__tab--active",
          /*$InspectorStore*/
          ctx2[0].showTab === "app"
        );
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index !== previous_block_index) {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          }
          transition_in(if_block, 1);
          if_block.m(div1, null);
        } else {
          if_block = null;
        }
      }
      if (dirty & /*footerItems*/
      2) {
        each_value = /*footerItems*/
        ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div2, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (!current || dirty & /*$InspectorStore*/
      1) {
        toggle_class(
          aside,
          "ms-inspector-sidebar--left",
          /*$InspectorStore*/
          ctx2[0].showSide === "left"
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      add_render_callback(() => {
        if (!current)
          return;
        if (!div3_transition)
          div3_transition = create_bidirectional_transition(div3, fade, { duration: 400 }, true);
        div3_transition.run(1);
      });
      if (local) {
        add_render_callback(() => {
          if (!current)
            return;
          if (!aside_transition)
            aside_transition = create_bidirectional_transition(aside, slide, { duration: 150, axis: "x" }, true);
          aside_transition.run(1);
        });
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      if (!div3_transition)
        div3_transition = create_bidirectional_transition(div3, fade, { duration: 400 }, false);
      div3_transition.run(0);
      if (local) {
        if (!aside_transition)
          aside_transition = create_bidirectional_transition(aside, slide, { duration: 150, axis: "x" }, false);
        aside_transition.run(0);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(aside);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      destroy_each(each_blocks, detaching);
      if (detaching && div3_transition)
        div3_transition.end();
      if (detaching && aside_transition)
        aside_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(0, $InspectorStore = $$value));
  onDestroy(() => {
    removeXrays();
  });
  let footerItems = [
    {
      label: "Help Center",
      link: "https://docs.memberstack.com/hc/en-us",
      icon: HelpIcon
    },
    {
      label: "AI Bot",
      link: "https://rey.memberstack.com/",
      icon: AIIcon
    },
    {
      label: "Components",
      link: "https://www.memberstack.com/webflow-components",
      icon: ComponentsIcon
    },
    {
      label: "Forums",
      link: "https://docs.memberstack.com/hc/en-us/community/posts",
      icon: ForumsIcon
    },
    {
      label: "Slack",
      link: "https://www.memberstack.com/slack",
      icon: SlackIcon
    }
  ];
  function changeTab(tab) {
    SetShowTab(tab);
  }
  function switchSide() {
    if ($InspectorStore.showSide === "right") {
      SetShowSide("left");
    } else {
      SetShowSide("right");
    }
  }
  const click_handler = () => changeTab("inspector");
  const click_handler_1 = () => changeTab("member");
  const click_handler_2 = () => changeTab("app");
  const click_handler_3 = () => switchSide();
  return [
    $InspectorStore,
    footerItems,
    changeTab,
    switchSide,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3
  ];
}
var InspectorSidebar = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$2, safe_not_equal, {}, add_css$1);
  }
};
function create_if_block$1(ctx) {
  let inspectorsidebar;
  let current;
  inspectorsidebar = new InspectorSidebar({});
  return {
    c() {
      create_component(inspectorsidebar.$$.fragment);
    },
    m(target, anchor) {
      mount_component(inspectorsidebar, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectorsidebar.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(inspectorsidebar.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(inspectorsidebar, detaching);
    }
  };
}
function create_fragment$1(ctx) {
  let inspectorbadge;
  let t;
  let if_block_anchor;
  let current;
  inspectorbadge = new InspectorBadge({});
  let if_block = (
    /*$InspectorStore*/
    ctx[0].showSidebar && create_if_block$1()
  );
  return {
    c() {
      create_component(inspectorbadge.$$.fragment);
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(inspectorbadge, target, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*$InspectorStore*/
        ctx2[0].showSidebar
      ) {
        if (if_block) {
          if (dirty & /*$InspectorStore*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block$1();
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(inspectorbadge.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(inspectorbadge.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      destroy_component(inspectorbadge, detaching);
      if (detaching)
        detach(t);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance$1($$self, $$props, $$invalidate) {
  let $InspectorStore;
  component_subscribe($$self, InspectorStore, ($$value) => $$invalidate(0, $InspectorStore = $$value));
  onMount(() => {
    checker();
  });
  return [$InspectorStore];
}
var TestMode = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
  }
};
function add_css(target) {
  append_styles(target, "svelte-1blpd87", '@import url("https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap");.svelte-1blpd87{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}#msOverlay.svelte-1blpd87{position:fixed;display:flex;justify-content:center;align-items:center;width:100%;height:100%;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.5);z-index:99999;overflow-y:auto;overflow-x:hidden;font-family:"Plus Jakarta Sans", sans-serif;padding:5vh 5vw}.--hide{display:none}.--flex-h-center{display:flex;align-items:center}.ms__loader{position:relative;z-index:10000000}#msLoader path{fill:#007ace}.ms__profile__loader{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;background:rgb(255 255 255 / 75%)}.ms-modal{box-sizing:border-box;margin:auto;min-width:0;position:relative;outline:none;background:white;border-radius:16px;box-shadow:2px 2px 12px rgb(0 0 0 / 10%);width:360px;color:rgb(10, 10, 10)}.ms-modal--profile{width:700px}.ms-modal__close{box-sizing:border-box;margin:0;min-width:0;position:absolute;top:6px;right:6px;z-index:10;line-height:0}.ms-modal__close button{appearance:none;padding:0;outline:none;width:42px;padding:15px;border:0;background:transparent;cursor:pointer;color:#5c5c5c}.ms-modal__close button:hover{color:#0a0a0a}.ms-modal__back{box-sizing:border-box;margin:0;min-width:0;position:absolute;top:16px;left:16px;z-index:10;line-height:0}.ms-modal__back button{appearance:none;padding:0;outline:none;width:12px;border:0;background:transparent;cursor:pointer;color:#5c5c5c}\n      .ms-modal__back button:hover,\n      .ms-modal__profile-back button:hover\n    {color:#0a0a0a}.ms-modal__back svg{height:12px}.ms-modal__profile-back button{appearance:none;padding:5px;margin-right:6px;outline:none;width:25px;height:25px;border:0;background:transparent;cursor:pointer;color:#5c5c5c;display:flex;align-items:stretch;justify-content:center}.ms-modal__profile-back--mobile{box-sizing:border-box;margin:0;min-width:0;position:absolute;top:16px;left:16px;z-index:10;line-height:0}.ms-modal__profile-back--mobile button{appearance:none;padding:0;outline:none;height:11px;width:7px;border:0;background:transparent;cursor:pointer;color:#5c5c5c}.ms-modal__profile-back--mobile button:hover{color:#0a0a0a}.ms-modal__header{display:flex;align-items:center;padding:12px}.ms-modal__header--mobile{display:flex;padding:42px 42px 16px 42px;flex-direction:column;flex-wrap:wrap;justify-content:center;align-items:center}.ms-modal__header--center{display:flex;flex-direction:column;flex-wrap:wrap;justify-content:center;align-items:center}.ms-modal__content{padding:28px 28px 20px;width:100%;box-sizing:border-box;margin:0 auto}.ms-modal__content--profile{padding:0;display:flex;flex-wrap:wrap;align-content:stretch;align-items:stretch;border-top:1px solid #dddddd}.ms-modal__content-left{display:flex;flex-direction:column;align-items:flex-start;padding:20px;border-right:1px solid #dddddd;min-width:160px}.ms-modal__content-right{padding:20px;flex-grow:1;height:55vh;min-height:300px;overflow-y:auto;position:relative;transition:height 0.3s ease-in-out}.ms-modal__content-right h3{margin-top:40px !important;margin-bottom:10px !important;font-size:18px !important;line-height:1em !important;font-weight:700 !important}.ms-modal__content--mobile{padding:12px;flex-grow:1;height:42vh;min-height:300px;overflow-y:auto;position:relative;transition:height 0.3s ease-in-out}.ms-modal__mobile-profile-nav{display:flex;flex-direction:column;align-content:center;align-items:stretch;flex-wrap:nowrap}.ms-modal__mobile-profile-nav button{display:flex;flex-direction:row;align-content:center;align-items:center;flex-wrap:nowrap;justify-content:space-between;padding:12px;width:100%;margin-bottom:10px}.ms-modal__figure{margin:8px auto;display:flex;position:relative;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;flex-shrink:0;line-height:1}.ms-modal__figure--profile{width:24px;height:24px;padding:0px;margin:0px 8px 0px 0px}.ms-modal__figure--mobile{margin:0px 0px 8px 0px}.ms-modal__figure img, .ms-modal__figure svg{width:auto;height:100%;max-height:42px;text-align:center;object-fit:cover;color:transparent}.ms-modal__title-container{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px}.ms-modal__title{margin-bottom:36px;margin-top:0;text-align:center;font-size:24px;line-height:32px;font-weight:700}.ms-modal__title--profile{margin-bottom:0px}.ms-modal__title-group{display:flex;align-items:center}.ms-modal__title--sub-text{margin-bottom:8px}.ms-modal__text{font-weight:500;font-size:16px;line-height:28px;text-align:center;margin:0 0 20px 0}.ms-modal__regular-button{color:#fff;padding:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer;display:flex;align-items:center}.ms-modal__regular-button svg{height:16px;margin-left:6px}.ms-modal__regular-button--left-icon svg{margin-right:6px;margin-left:0px}.ms-modal__regular-button--right-icon svg{margin-left:6px;margin-right:0px}.ms-modal__regular-button--margin-right{margin-right:12px}.ms-modal__text-button{color:#fff;background-color:transparent;padding:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer;display:flex;align-items:center}.ms-modal__card{box-shadow:0 0 #0000, 0 0 #0000, 0 0 #0000, 0 0 #0000,\n      0px 2px 2px rgba(0, 0, 0, 0.04);padding:12px;display:flex;flex-direction:row;margin-bottom:12px;border:1px solid rgb(221, 221, 221);border-radius:10px;box-sizing:border-box;width:100%;cursor:default;background:rgb(255, 255, 255);align-items:center;justify-content:space-between}.ms-form{width:100% !important;min-width:0 !important;padding:0 !important;display:block !important}.ms-form__group{margin-bottom:20px}.ms-form__flex{display:flex;justify-content:space-between;align-content:center}.ms-form__flex--centered{justify-content:center}.ms-form__label{margin-bottom:4px;margin-top:0px;font-size:14px;line-height:24px;font-weight:700;text-align:left}.ms-form__fieldset{display:flex;justify-content:space-between;padding:0;border:none}.ms-form__input{box-sizing:border-box;margin:0px;border:1px solid rgb(201, 201, 201);border-radius:6px;font-size:16px;font-weight:400;padding:15px;width:100%}.ms-form__password-container{display:flex;justify-content:space-between;align-content:center;box-sizing:border-box;margin:0px;border:1px solid rgb(201, 201, 201);border-radius:6px;width:100%}.ms-form__password-container:focus-within{border:1px solid rgb(0, 68, 252);outline:rgb(0, 68, 252) solid 1px}.ms-form__password-container:focus-within input{outline:none;border-color:rgb(201, 201, 201);box-shadow:none}.ms-form__input--password{border:none}.ms-form__input--token{font-weight:500;font-size:24.19px;line-height:32px;text-align:center;color:#000000;padding:9px;max-width:42px}.ms-form__show-toggle{cursor:pointer;background:transparent;border-radius:0px 6px 6px 0px;padding:0px 8px;display:flex;align-items:center}.ms-form__eye{display:block;width:22px}.ms-form__eye-slash{display:block;width:22px}.ms-form__error{font-weight:500;font-size:12px;line-height:16px;color:#e40023;margin-top:4px;display:flex;align-items:baseline}.ms-form__error svg{width:10px;height:10px;margin-right:5px}.ms-form__label--right a{color:rgb(10, 10, 10) !important;text-decoration:none;font-weight:400}.ms-form__button{border-radius:6px;font-weight:700;font-size:16px;padding-left:22px;padding-right:22px;height:52px;border:none;display:block;width:100%;background-color:rgb(41, 98, 255);color:#fff;transition:background-color 0.5s ease;cursor:pointer}.ms-form__button:hover{background-color:#0745ff}.ms-form__button:disabled{background-color:#96c0fe;color:#fff;pointer-events:none;display:flex;justify-content:center;align-items:center}.ms-form__button--text{background-color:transparent;padding:0px;height:auto;margin-bottom:0px;margin-top:0px;font-size:14px;line-height:28px;font-weight:500;color:#0a0a0a;opacity:0.8}.ms-form__button--text:hover{background-color:transparent}.ms-form__button--top-spacing{margin-top:10px}#msFormLoader path{fill:#fff}a.ms-form__link, div.ms-form__link{margin-top:8px;font-weight:500;font-size:14px;line-height:24px;color:rgb(10, 10, 10);text-decoration:none;opacity:0.8;cursor:pointer}.ms-modal__cancel-button{background:#f6f6f6;color:#828282;padding:8px;margin-right:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer}.ms-modal__save-button{background:#2962ff;color:#fff;padding:8px;border-radius:4px;border:none;font-weight:700;font-size:14px;line-height:16px;cursor:pointer}.ms-modal__save-button:disabled{background:#80a1fc;color:#fff;cursor:default;opacity:0.4}.ms-modal__save-button--large{padding:12px;font-weight:700;font-size:14px;line-height:16px;width:100%}.ms-modal__outline-button{display:block !important;background:#fff;color:#0a0a0a;font-weight:700;font-size:14px;line-height:16px;padding:8px;margin-right:8px;border-radius:4px;border:1px solid #dddddd;cursor:pointer}.ms-modal__outline-button svg{display:inline !important;height:15px;margin-right:6px}.ms-modal__outline-button--mobile{width:100%}.ms-modal__button-label{margin-bottom:4px;margin-top:0px;font-size:14px;line-height:28px;font-weight:500}.ms-modal__profile-option{cursor:pointer;margin-bottom:20px;font-weight:500;font-size:16px;line-height:28px;background:transparent;border:none;padding:0px}.ms-modal__profile-option svg{display:inline !important;height:14px;margin-right:8px}.ms-modal__profile-option:hover{color:#2962ff}.ms-modal__profile-option--active{color:#2962ff}.ms-modal__profile-image-container{display:flex;justify-content:flex-start;width:100%;margin-bottom:21px;align-items:center;flex-direction:row;gap:12px}.ms-modal__profile-image{width:42px;height:42px;border-radius:50%;object-fit:cover;overflow:hidden;background:#ddd;border:1px solid #c9c9c9;display:flex;justify-content:center;align-items:center}.ms-modal__profile-image img{width:100%;height:100%;object-fit:cover}.ms-modal__social-button{display:flex;align-items:center;justify-content:center;width:100%;height:52px;border-radius:6px;font-weight:700;font-size:16px;line-height:28px;color:#0a0a0a;background:none;border:1px solid #c9c9c9;cursor:pointer;margin-bottom:8px}\n      .ms-modal__social-button img,\n      .ms-modal__social-button svg\n    {height:16px;margin-right:8px;width:auto}.ms-modal__social-button[disabled]{background:#f6f6f6}.ms-modal__social-divider{display:flex;align-items:center;margin:20px 0px}.ms-modal__divider-line{text-align:center;background:#dddddd;height:1px;width:100%}.ms-modal__divider-text{padding:0px 4px}.ms-modal__footer{text-align:center;width:100%;box-sizing:border-box;margin:0;min-width:0;background:#f6f6f6;padding-top:10px;padding-bottom:10px;border-bottom-left-radius:16px;border-bottom-right-radius:16px;border-top:1px solid;border-top-color:#dddddd;font-size:12px;line-height:16px;font-weight:500}.ms-modal__footer a{color:rgb(10, 10, 10);text-decoration:none;display:flex;justify-content:center;align-items:center}.ms-modal__footer svg{height:12px;width:12px;margin-right:5.5px}');
}
function create_if_block_11(ctx) {
  let testmode;
  let current;
  testmode = new TestMode({});
  return {
    c() {
      create_component(testmode.$$.fragment);
    },
    m(target, anchor) {
      mount_component(testmode, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(testmode.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(testmode.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(testmode, detaching);
    }
  };
}
function create_if_block(ctx) {
  let main;
  let current_block_type_index;
  let if_block;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [
    create_if_block_1,
    create_if_block_2,
    create_if_block_3,
    create_if_block_4,
    create_if_block_5,
    create_if_block_6,
    create_if_block_7,
    create_if_block_8,
    create_if_block_10
  ];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (
      /*showLoader*/
      ctx2[4]
    )
      return 0;
    if (
      /*display*/
      ctx2[0] === "login"
    )
      return 1;
    if (
      /*display*/
      ctx2[0] === "signup"
    )
      return 2;
    if (
      /*display*/
      ctx2[0] === "forgot_password"
    )
      return 3;
    if (
      /*display*/
      ctx2[0] === "reset_password"
    )
      return 4;
    if (
      /*display*/
      ctx2[0] === "reset_password_success"
    )
      return 5;
    if (
      /*display*/
      ctx2[0] === "passwordless_token"
    )
      return 6;
    if (
      /*display*/
      ctx2[0] === "profile"
    )
      return 7;
    if (
      /*display*/
      ctx2[0] === "test_card"
    )
      return 8;
    return -1;
  }
  if (~(current_block_type_index = select_block_type_1(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      main = element("main");
      if (if_block)
        if_block.c();
      attr(main, "id", "msOverlay");
      attr(main, "class", "svelte-1blpd87");
    },
    m(target, anchor) {
      insert(target, main, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(main, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen(
          main,
          "mousedown",
          /*closeModalOutside*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(main, null);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(main);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_10(ctx) {
  let testcardmodal;
  let updating_display;
  let updating_params;
  let current;
  function testcardmodal_display_binding(value) {
    ctx[20](value);
  }
  function testcardmodal_params_binding(value) {
    ctx[21](value);
  }
  let testcardmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessSubmit: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    testcardmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    testcardmodal_props.params = /*params*/
    ctx[1];
  }
  testcardmodal = new TestCardModal({ props: testcardmodal_props });
  binding_callbacks.push(() => bind(testcardmodal, "display", testcardmodal_display_binding));
  binding_callbacks.push(() => bind(testcardmodal, "params", testcardmodal_params_binding));
  return {
    c() {
      create_component(testcardmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(testcardmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const testcardmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        testcardmodal_changes.onSuccessSubmit = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        testcardmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        testcardmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      testcardmodal.$set(testcardmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(testcardmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(testcardmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(testcardmodal, detaching);
    }
  };
}
function create_if_block_8(ctx) {
  let mediaquery;
  let current;
  mediaquery = new MediaQuery({
    props: {
      query: "(max-width: 520px)",
      $$slots: {
        default: [
          create_default_slot,
          ({ matches }) => ({ 26: matches }),
          ({ matches }) => matches ? 67108864 : 0
        ]
      },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(mediaquery.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mediaquery, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mediaquery_changes = {};
      if (dirty & /*$$scope, onSuccess, member, display, matches*/
      201326605) {
        mediaquery_changes.$$scope = { dirty, ctx: ctx2 };
      }
      mediaquery.$set(mediaquery_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mediaquery.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mediaquery.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mediaquery, detaching);
    }
  };
}
function create_if_block_7(ctx) {
  let passwordlesstokenmodal;
  let updating_display;
  let updating_params;
  let current;
  function passwordlesstokenmodal_display_binding(value) {
    ctx[16](value);
  }
  function passwordlesstokenmodal_params_binding(value) {
    ctx[17](value);
  }
  let passwordlesstokenmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccess: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordlesstokenmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    passwordlesstokenmodal_props.params = /*params*/
    ctx[1];
  }
  passwordlesstokenmodal = new PasswordlessTokenModal({ props: passwordlesstokenmodal_props });
  binding_callbacks.push(() => bind(passwordlesstokenmodal, "display", passwordlesstokenmodal_display_binding));
  binding_callbacks.push(() => bind(passwordlesstokenmodal, "params", passwordlesstokenmodal_params_binding));
  return {
    c() {
      create_component(passwordlesstokenmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordlesstokenmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordlesstokenmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        passwordlesstokenmodal_changes.onSuccess = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordlesstokenmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        passwordlesstokenmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      passwordlesstokenmodal.$set(passwordlesstokenmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordlesstokenmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordlesstokenmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordlesstokenmodal, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let passwordsuccessmodal;
  let updating_display;
  let current;
  function passwordsuccessmodal_display_binding(value) {
    ctx[15](value);
  }
  let passwordsuccessmodal_props = { closeModal: (
    /*closeModal*/
    ctx[5]
  ) };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordsuccessmodal_props.display = /*display*/
    ctx[0];
  }
  passwordsuccessmodal = new PassSuccessModal({ props: passwordsuccessmodal_props });
  binding_callbacks.push(() => bind(passwordsuccessmodal, "display", passwordsuccessmodal_display_binding));
  return {
    c() {
      create_component(passwordsuccessmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordsuccessmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordsuccessmodal_changes = {};
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordsuccessmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordsuccessmodal.$set(passwordsuccessmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordsuccessmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordsuccessmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordsuccessmodal, detaching);
    }
  };
}
function create_if_block_5(ctx) {
  let passwordtokenmodal;
  let updating_display;
  let current;
  function passwordtokenmodal_display_binding(value) {
    ctx[14](value);
  }
  let passwordtokenmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessPasswordReset: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordtokenmodal_props.display = /*display*/
    ctx[0];
  }
  passwordtokenmodal = new PassTokenModal({ props: passwordtokenmodal_props });
  binding_callbacks.push(() => bind(passwordtokenmodal, "display", passwordtokenmodal_display_binding));
  return {
    c() {
      create_component(passwordtokenmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordtokenmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordtokenmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        passwordtokenmodal_changes.onSuccessPasswordReset = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordtokenmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordtokenmodal.$set(passwordtokenmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordtokenmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordtokenmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordtokenmodal, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let passwordresetmodal;
  let updating_display;
  let current;
  function passwordresetmodal_display_binding(value) {
    ctx[13](value);
  }
  let passwordresetmodal_props = { closeModal: (
    /*closeModal*/
    ctx[5]
  ) };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    passwordresetmodal_props.display = /*display*/
    ctx[0];
  }
  passwordresetmodal = new PassResetModal({ props: passwordresetmodal_props });
  binding_callbacks.push(() => bind(passwordresetmodal, "display", passwordresetmodal_display_binding));
  return {
    c() {
      create_component(passwordresetmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(passwordresetmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const passwordresetmodal_changes = {};
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        passwordresetmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      passwordresetmodal.$set(passwordresetmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(passwordresetmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(passwordresetmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(passwordresetmodal, detaching);
    }
  };
}
function create_if_block_3(ctx) {
  let signupmodal;
  let updating_display;
  let updating_params;
  let current;
  function signupmodal_display_binding(value) {
    ctx[11](value);
  }
  function signupmodal_params_binding(value) {
    ctx[12](value);
  }
  let signupmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessSignup: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    signupmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    signupmodal_props.params = /*params*/
    ctx[1];
  }
  signupmodal = new SignupModal({ props: signupmodal_props });
  binding_callbacks.push(() => bind(signupmodal, "display", signupmodal_display_binding));
  binding_callbacks.push(() => bind(signupmodal, "params", signupmodal_params_binding));
  return {
    c() {
      create_component(signupmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(signupmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const signupmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        signupmodal_changes.onSuccessSignup = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        signupmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        signupmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      signupmodal.$set(signupmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(signupmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(signupmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(signupmodal, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let loginmodal;
  let updating_display;
  let updating_params;
  let current;
  function loginmodal_display_binding(value) {
    ctx[9](value);
  }
  function loginmodal_params_binding(value) {
    ctx[10](value);
  }
  let loginmodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessLogin: (
      /*onSuccess*/
      ctx[2]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    loginmodal_props.display = /*display*/
    ctx[0];
  }
  if (
    /*params*/
    ctx[1] !== void 0
  ) {
    loginmodal_props.params = /*params*/
    ctx[1];
  }
  loginmodal = new LoginModal({ props: loginmodal_props });
  binding_callbacks.push(() => bind(loginmodal, "display", loginmodal_display_binding));
  binding_callbacks.push(() => bind(loginmodal, "params", loginmodal_params_binding));
  return {
    c() {
      create_component(loginmodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(loginmodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const loginmodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        loginmodal_changes.onSuccessLogin = /*onSuccess*/
        ctx2[2];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        loginmodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      if (!updating_params && dirty & /*params*/
      2) {
        updating_params = true;
        loginmodal_changes.params = /*params*/
        ctx2[1];
        add_flush_callback(() => updating_params = false);
      }
      loginmodal.$set(loginmodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(loginmodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loginmodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(loginmodal, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let loader;
  let current;
  loader = new Loader({});
  return {
    c() {
      create_component(loader.$$.fragment);
    },
    m(target, anchor) {
      mount_component(loader, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loader.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loader.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(loader, detaching);
    }
  };
}
function create_else_block(ctx) {
  let profilemodal;
  let updating_display;
  let current;
  function profilemodal_display_binding(value) {
    ctx[19](value);
  }
  let profilemodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessLogout: (
      /*onSuccess*/
      ctx[2]
    ),
    member: (
      /*member*/
      ctx[3]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    profilemodal_props.display = /*display*/
    ctx[0];
  }
  profilemodal = new ProfileModal({ props: profilemodal_props });
  binding_callbacks.push(() => bind(profilemodal, "display", profilemodal_display_binding));
  return {
    c() {
      create_component(profilemodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(profilemodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const profilemodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        profilemodal_changes.onSuccessLogout = /*onSuccess*/
        ctx2[2];
      if (dirty & /*member*/
      8)
        profilemodal_changes.member = /*member*/
        ctx2[3];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        profilemodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      profilemodal.$set(profilemodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(profilemodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(profilemodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(profilemodal, detaching);
    }
  };
}
function create_if_block_9(ctx) {
  let mobileprofilemodal;
  let updating_display;
  let current;
  function mobileprofilemodal_display_binding(value) {
    ctx[18](value);
  }
  let mobileprofilemodal_props = {
    closeModal: (
      /*closeModal*/
      ctx[5]
    ),
    onSuccessLogout: (
      /*onSuccess*/
      ctx[2]
    ),
    member: (
      /*member*/
      ctx[3]
    )
  };
  if (
    /*display*/
    ctx[0] !== void 0
  ) {
    mobileprofilemodal_props.display = /*display*/
    ctx[0];
  }
  mobileprofilemodal = new MobileProfileModal({ props: mobileprofilemodal_props });
  binding_callbacks.push(() => bind(mobileprofilemodal, "display", mobileprofilemodal_display_binding));
  return {
    c() {
      create_component(mobileprofilemodal.$$.fragment);
    },
    m(target, anchor) {
      mount_component(mobileprofilemodal, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const mobileprofilemodal_changes = {};
      if (dirty & /*onSuccess*/
      4)
        mobileprofilemodal_changes.onSuccessLogout = /*onSuccess*/
        ctx2[2];
      if (dirty & /*member*/
      8)
        mobileprofilemodal_changes.member = /*member*/
        ctx2[3];
      if (!updating_display && dirty & /*display*/
      1) {
        updating_display = true;
        mobileprofilemodal_changes.display = /*display*/
        ctx2[0];
        add_flush_callback(() => updating_display = false);
      }
      mobileprofilemodal.$set(mobileprofilemodal_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(mobileprofilemodal.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(mobileprofilemodal.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(mobileprofilemodal, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_9, create_else_block];
  const if_blocks = [];
  function select_block_type_2(ctx2, dirty) {
    if (
      /*matches*/
      ctx2[26]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_2(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_2(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_if_block_11];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*display*/
      ctx2[0] !== "inspector"
    )
      return 0;
    if (
      /*display*/
      ctx2[0] === "inspector"
    )
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(target, anchor);
      }
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d(detaching);
      }
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let showLoader2;
  let { display = "login" } = $$props;
  let { onSuccess } = $$props;
  let { params } = $$props;
  let appLoading = true;
  let memberLoading = display === "profile" ? true : false;
  let member;
  function setAppStore(data) {
    AppStore.update(() => data);
    TextStore.set({ text: data.ssoText || {} });
  }
  function closeModal() {
    $$invalidate(7, appLoading = true);
    onSuccess({ type: "CLOSED" });
    const modal2 = document.querySelector("#msOverlay");
    if (modal2) {
      modal2.remove();
    }
  }
  function closeModalOutside(e) {
    if (e.target.id === "msOverlay") {
      closeModal();
    }
  }
  const getApp = () => __async(this, null, function* () {
    const { data } = yield window.$memberstackDom.getApp();
    setAppStore(data);
  });
  function checkApp() {
    return __async(this, null, function* () {
      if (params && params.app) {
        setAppStore(params.app);
      } else {
        yield getApp();
      }
      $$invalidate(7, appLoading = false);
      $$invalidate(4, showLoader2 = false);
    });
  }
  const getMember = () => __async(this, null, function* () {
    const { data } = yield window.$memberstackDom.getCurrentMember();
    $$invalidate(8, memberLoading = false);
    $$invalidate(3, member = data);
    if (display === "profile" && !data) {
      closeModal();
      throw new Error("Member not logged in");
    }
  });
  onMount(() => {
    checkApp();
    if (display === "profile") {
      getMember();
    }
  });
  function loginmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function loginmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  function signupmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function signupmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  function passwordresetmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordtokenmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordsuccessmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordlesstokenmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function passwordlesstokenmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  function mobileprofilemodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function profilemodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function testcardmodal_display_binding(value) {
    display = value;
    $$invalidate(0, display);
  }
  function testcardmodal_params_binding(value) {
    params = value;
    $$invalidate(1, params);
  }
  $$self.$$set = ($$props2) => {
    if ("display" in $$props2)
      $$invalidate(0, display = $$props2.display);
    if ("onSuccess" in $$props2)
      $$invalidate(2, onSuccess = $$props2.onSuccess);
    if ("params" in $$props2)
      $$invalidate(1, params = $$props2.params);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*appLoading, memberLoading*/
    384) {
      $$invalidate(4, showLoader2 = appLoading || memberLoading);
    }
  };
  return [
    display,
    params,
    onSuccess,
    member,
    showLoader2,
    closeModal,
    closeModalOutside,
    appLoading,
    memberLoading,
    loginmodal_display_binding,
    loginmodal_params_binding,
    signupmodal_display_binding,
    signupmodal_params_binding,
    passwordresetmodal_display_binding,
    passwordtokenmodal_display_binding,
    passwordsuccessmodal_display_binding,
    passwordlesstokenmodal_display_binding,
    passwordlesstokenmodal_params_binding,
    mobileprofilemodal_display_binding,
    profilemodal_display_binding,
    testcardmodal_display_binding,
    testcardmodal_params_binding
  ];
}
var Main = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { display: 0, onSuccess: 2, params: 1 }, add_css);
  }
};

// src/methods/dom/methods.ts
var initDefaultMessageBox = () => {
  initCSS();
  addSuccessBox();
  addErrorBox();
};
var showMessage = (msg, isError) => __async(void 0, null, function* () {
  if (!msg)
    return;
  yield new Promise((resolve) => {
    if (document.readyState !== "loading") {
      resolve(true);
    } else {
      document.addEventListener("DOMContentLoaded", function(event) {
        resolve(true);
      });
    }
  });
  if (!document.querySelector("[data-ms-message='success']")) {
    initDefaultMessageBox();
  }
  let messageBox;
  if (isError) {
    messageBox = document.querySelector("[data-ms-message='error']");
  } else {
    messageBox = document.querySelector("[data-ms-message='success']");
  }
  const messageTextBox = messageBox.querySelector("[data-ms-message-text]");
  if (messageTextBox) {
    messageTextBox.innerHTML = msg;
  }
  messageBox.style.display = "block";
  const closeBtn = messageBox.querySelector("[data-ms-message-close]");
  closeBtn == null ? void 0 : closeBtn.addEventListener("click", () => {
    messageBox.style.display = "none";
  });
  setTimeout(() => {
    messageBox.style.display = "none";
  }, 7e3);
});
var showLoader = (element2) => {
  if (element2) {
    element2.style.display = "block";
    return;
  }
  const cssEl = document.createElement("style");
  const css = ".ms__loader { width: 100%; height: 100%; overflow: hidden; position: fixed; top: 0; left: 0; display: flex; justify-content: center; align-items: center; z-index: 10000000; } #msLoader path { fill: #007ace; }";
  cssEl.appendChild(document.createTextNode(css));
  document.head.appendChild(cssEl);
  const loaderHTML = '<?xml version="1.0"?><div class="ms__loader"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="msLoader" x="0px" y="0px" width="40px" height="40px" viewBox="0 0 50 50" style="enable-background: new 0 0 50 50; z-index:1000000" xml:space="preserve"><path fill="#000" d="M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z"><animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"/></path></svg></div>';
  const div = document.createElement("div");
  div.setAttribute("data-ms-loader", "true");
  div.innerHTML = loaderHTML;
  if (document.readyState !== "loading") {
    document.body.appendChild(div);
  } else {
    document.addEventListener("DOMContentLoaded", function(event) {
      document.body.appendChild(div);
    });
  }
};
var hideLoader = (element2) => {
  var _a;
  if (element2) {
    element2.style.display = "none";
    return;
  }
  (_a = document.querySelector("[data-ms-loader]")) == null ? void 0 : _a.remove();
};
var modal;
var openModal = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (type, params = {}) {
  let resolveModal;
  const modalPromise = new Promise((resolve) => {
    resolveModal = resolve;
  });
  modal = new Main({
    target: document.body,
    props: {
      display: type.toLowerCase(),
      params,
      onSuccess: resolveModal
    }
  });
  return modalPromise;
});
var hideModal = () => {
  try {
    modal == null ? void 0 : modal.$destroy();
  } catch (e) {
  }
};

// src/utils/cookies.ts

var memberAuthTokenName = "_ms-mid";
function isLocalStorageAvailable() {
  try {
    localStorage.setItem("test", "test");
    localStorage.removeItem("test");
    return true;
  } catch (e) {
    return false;
  }
}
var localStorageAvailable = isLocalStorageAvailable();
var useCookies = false;
var setCookieOnRootDomain = false;
var apiDomain;
var setUseCookies = (setCookieOnRoot) => {
  useCookies = true;
  if (setCookieOnRoot)
    setCookieOnRootDomain = true;
};
var setApiDomain = (domain) => {
  apiDomain = domain;
};
var extractDomainFromHostname = (hostname) => {
  const hostnameParts = hostname.split(".");
  const isCountryCodeTLD = hostnameParts.length >= 3 && hostnameParts[hostnameParts.length - 2].length <= 3;
  if (isCountryCodeTLD) {
    return hostnameParts.slice(-3).join(".");
  } else {
    return hostnameParts.slice(-2).join(".");
  }
};
var useCookiesValid = () => {
  if (!useCookies)
    return false;
  if (setCookieOnRootDomain) {
    const apiDomainHost = extractDomainFromHostname(apiDomain);
    const currentHost = extractDomainFromHostname(window.location.hostname);
    return apiDomainHost === currentHost;
  }
  return true;
};
var setMemberToken = (token, expires) => {
  if (localStorageAvailable && useCookiesValid() === false) {
    localStorage.setItem(memberAuthTokenName, token);
  } else {
    const domain = extractDomainFromHostname(window.location.hostname);
    js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].set(memberAuthTokenName, token, __spreadValues({
      expires: expires && Number(expires) || 14,
      sameSite: "strict"
    }, setCookieOnRootDomain && { domain }));
  }
};
var removeMemberToken = () => {
  if (localStorageAvailable) {
    localStorage.removeItem(memberAuthTokenName);
  }
  const domain = extractDomainFromHostname(window.location.hostname);
  js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].set(memberAuthTokenName, "", __spreadValues({
    expires: -1,
    sameSite: "strict"
  }, setCookieOnRootDomain && { domain }));
  js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].set(memberAuthTokenName, "", {
    expires: -1,
    sameSite: "strict"
  });
};
var getMemberToken = () => {
  if (localStorageAvailable) {
    const memAuthToken = localStorage.getItem(memberAuthTokenName);
    if (memAuthToken)
      return memAuthToken;
  }
  return js_cookie__WEBPACK_IMPORTED_MODULE_0__["default"].get(memberAuthTokenName);
};
var setMemberTokenIfAvailable = () => {
  if (typeof window !== "undefined") {
    const urlParams = new URLSearchParams(window.location.search);
    const memberToken = urlParams.get("memberToken");
    if (memberToken)
      setMemberToken(memberToken);
  }
};

// src/methods/requests/requests.ts


// src/constants/endpoints.ts
var endpoints = {
  API: "https://client.memberstack.com"
};

// src/methods/requests/requests.ts
var createRequestHandler = ({
  publicKey,
  appId,
  token,
  customEndpoint
}) => {
  return {
    sendRequest: (data, options) => __async(void 0, null, function* () {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      try {
        const { url } = data;
        const memberToken = getMemberToken();
        const authHeader = [
          (_b = (_a = data.headers) == null ? void 0 : _a["Authorization"]) == null ? void 0 : _b.replace("Bearer ", ""),
          memberToken,
          options == null ? void 0 : options.token
        ].find((x) => x);
        const formattedUrl = `${customEndpoint || endpoints.API}${url}`;
        const res = yield (0,axios__WEBPACK_IMPORTED_MODULE_1__["default"])({
          method: data.method,
          data: data.data,
          url: formattedUrl,
          headers: __spreadValues(__spreadProps(__spreadValues(__spreadValues(__spreadValues({}, authHeader && { authorization: `Bearer ${authHeader}` }), publicKey && { ["X-API-Key" /* API_KEY */]: publicKey }), appId && { ["X-APP-ID" /* APP_ID */]: appId }), {
            ["X-User-Agent" /* USER_AGENT */]: "@memberstack/client@1.2.0"
          }), data.contentType && { "Content-Type": data.contentType }),
          withCredentials: true
        });
        if ((_c = res == null ? void 0 : res.headers) == null ? void 0 : _c["ms-mid"]) {
          token = res.headers["ms-mid"];
        }
        if ((_d = res == null ? void 0 : res.data) == null ? void 0 : _d.error) {
          if (res.data.error.name === "JsonWebTokenError") {
            throw {
              code: "client/invalid-token",
              message: "An invalid token has been provided. Please make sure the token is valid."
            };
          }
          throw (_e = res.data) == null ? void 0 : _e.error;
        }
        return res == null ? void 0 : res.data;
      } catch (e) {
        if (!e.response)
          throw e;
        throw ((_g = (_f = e.response) == null ? void 0 : _f.data) == null ? void 0 : _g.error) || ((_h = e.response) == null ? void 0 : _h.data);
      }
    })
  };
};

// src/auth/index.ts
var createObservable = () => {
  const observer = /* @__PURE__ */ new Map();
  return {
    subscribe: (key, fn) => {
      if (typeof fn !== "function")
        return;
      return observer.set(key, fn);
    },
    unsubscribe: (key) => {
      return observer.delete(key);
    },
    notify: (data) => {
      return [...observer.values()].forEach((fn) => fn(data));
    }
  };
};
var observable = createObservable();
var getPersistedMember = () => {
  return JSON.parse(localStorage == null ? void 0 : localStorage.getItem("_ms-mem"));
};
var setPersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
    observable.notify(member);
  }
};
var updatePersistedMember = (member) => {
  if (member) {
    const data = JSON.stringify(member);
    if (data)
      localStorage == null ? void 0 : localStorage.setItem("_ms-mem", data);
  } else {
    localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
    removeMemberToken();
  }
};
var unsetPersistedMember = () => {
  localStorage == null ? void 0 : localStorage.removeItem("_ms-mem");
  removeMemberToken();
  observable.notify(null);
};
var onAuthChange = (cb) => {
  const id = Math.floor(Math.random() * 1e3);
  observable.subscribe(id, cb);
  return {
    unsubscribe: () => observable.unsubscribe(id)
  };
};

// src/methods/requests/index.ts
function getSessionDurationDays(unixTimestampMillis) {
  const now2 = Date.now();
  const differenceMillis = unixTimestampMillis - now2;
  return Math.ceil(differenceMillis / (24 * 60 * 60 * 1e3));
}
var addHeaders = (options) => __spreadValues({}, (options == null ? void 0 : options.token) && {
  Authorization: `Bearer ${options.token}`
});
var promiseResolve;
var promiseReject;
var receiveMessage = (event) => {
  var _a;
  const { data, origin } = event;
  if (API_ENDPOINT !== origin)
    return;
  if ((_a = data == null ? void 0 : data.data) == null ? void 0 : _a.member) {
    const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
    setPersistedMember(data.data.member);
    setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
  }
  if (data == null ? void 0 : data.error) {
    promiseReject(data.error);
  }
  promiseResolve(data);
};
var windowObjectReference = null;
var previousUrl = null;
var openSignInWindow = (url, name) => __async(void 0, null, function* () {
  window.removeEventListener("message", receiveMessage);
  const dualScreenLeft = window.screenLeft !== void 0 ? window.screenLeft : window.screenX;
  const dualScreenTop = window.screenTop !== void 0 ? window.screenTop : window.screenY;
  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
  const systemZoom = width / window.screen.availWidth;
  const left = (width - 600) / 2 / systemZoom + dualScreenLeft;
  const top = (height - 700) / 2 / systemZoom + dualScreenTop;
  const strWindowFeatures = `toolbar=no, menubar=no, width=${600 / systemZoom}, height=${700 / systemZoom}, top=${top}, left=${left}`;
  if (windowObjectReference === null || windowObjectReference.closed) {
    windowObjectReference = window.open(url, name, strWindowFeatures);
  } else if (previousUrl !== url) {
    windowObjectReference = window.open(url, name, strWindowFeatures);
    windowObjectReference.focus();
  } else {
    windowObjectReference.focus();
  }
  window.addEventListener("message", (event) => receiveMessage(event), false);
  previousUrl = url;
  window.addEventListener("beforeunload", () => {
    windowObjectReference == null ? void 0 : windowObjectReference.close();
  });
  return new Promise((resolve, reject) => {
    promiseResolve = resolve;
    promiseReject = reject;
  });
});
var API_ENDPOINT;
var initRequest = ({
  publicKey,
  appId,
  token,
  domain
  //sessionDurationDays
}) => {
  const { sendRequest } = createRequestHandler({
    publicKey,
    token,
    customEndpoint: domain,
    appId
  });
  API_ENDPOINT = domain;
  return {
    postIsTyping(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts/typing`,
          data: {
            channelKey: params.channelKey
          }
        });
      });
    },
    getChannelInfo(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          channelKey: params.channelKey
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/channels/info?${queryParams}`
        });
      });
    },
    subscribeToChannel(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/channels/manage-subscription`,
          data: {
            channelKey: params.channelKey,
            action: params.action
          }
        });
      });
    },
    getPosts(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues({
          channelKey: params.channelKey
        }, params.after && {
          after: params.after
        }), params.order && {
          order: params.order
        }), params.limit && {
          limit: params.limit.toString()
        }));
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/posts?${queryParams}`
        });
      });
    },
    getThreads(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues({
          postId: params.postId
        }, params.after && {
          after: params.after
        }), params.order && {
          order: params.order
        }), params.limit && {
          limit: params.limit.toString()
        }));
        return sendRequest({
          method: "GET" /* GET */,
          url: `/comments/threads?${queryParams}`
        });
      });
    },
    createPost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts`,
          data: {
            channelKey: params.channelKey,
            content: params.content,
            _url: window.location.origin + window.location.pathname
          }
        });
      });
    },
    updatePost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "PATCH" /* PATCH */,
          url: `/comments/posts/${params.postId}/update`,
          data: {
            content: params.content
          }
        });
      });
    },
    postVote(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/posts/${params.postId}/vote`,
          data: {
            vote: params.vote
          }
        });
      });
    },
    deletePost(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "DELETE" /* DELETE */,
          url: `/comments/posts/${params.postId}`
        });
      });
    },
    createThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/threads`,
          data: {
            postId: params.postId,
            content: params.content
          }
        });
      });
    },
    updateThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "PATCH" /* PATCH */,
          url: `/comments/threads/${params.threadId}/update`,
          data: {
            content: params.content
          }
        });
      });
    },
    // vote thread
    threadVote(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/comments/threads/${params.threadId}/vote`,
          data: {
            vote: params.vote
          }
        });
      });
    },
    deleteThread(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "DELETE" /* DELETE */,
          url: `/comments/threads/${params.threadId}`
        });
      });
    },
    getSecureContent(params) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: "/secure-content",
          data: {
            contentId: params.contentId
          }
        });
        return data;
      });
    },
    signupWithProvider(params) {
      return __async(this, null, function* () {
        const customFields = encodeURIComponent(params.customFields ? JSON.stringify(params.customFields) : "{}");
        const plans = encodeURIComponent(params.plans ? JSON.stringify(params.plans) : "[]");
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          customFields,
          plans,
          appId
        }, publicKey && {
          publicKey
        }), {
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/signup?${queryParams}`, "signup");
      });
    },
    loginWithProvider(params) {
      return __async(this, null, function* () {
        const allowSignup = encodeURIComponent(params.allowSignup === true ? true : false);
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          appId
        }, publicKey && {
          publicKey
        }), {
          origin: window.location.hostname,
          allowSignup
        }));
        return openSignInWindow(`${domain}/auth-provider/login?${queryParams}`, "login");
      });
    },
    connectProvider(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams(__spreadProps(__spreadValues({
          provider: params.provider,
          appId
        }, publicKey && {
          publicKey
        }), {
          member: getMemberToken(),
          origin: window.location.hostname
        }));
        return openSignInWindow(`${domain}/auth-provider/connect?${queryParams}`, "connect");
      });
    },
    disconnectProvider(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: "/member/disconnect-provider",
          data: {
            provider: params.provider
          }
        });
      });
    },
    getAppAndMember(params) {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          // @ts-ignore
          includeSSOText: window == null ? void 0 : window.ssoUI,
          trackPageView: params == null ? void 0 : params.trackPageView
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app-member?${queryParams}`
        });
      });
    },
    getApp() {
      return __async(this, null, function* () {
        const queryParams = new URLSearchParams({
          // @ts-ignore
          includeSSOText: window == null ? void 0 : window.ssoUI
        });
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app?${queryParams}`
        });
      });
    },
    loginMemberEmailPassword(params, options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/login`,
          data: {
            email: params.email,
            password: params.password,
            options
          }
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    sendMemberLoginPasswordlessEmail(params, options) {
      return __async(this, null, function* () {
        return yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/login/send`,
          data: {
            email: params.email
          }
        });
      });
    },
    sendMemberSignupPasswordlessEmail(params, options) {
      return __async(this, null, function* () {
        return yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/signup/send`,
          data: {
            email: params.email
          }
        });
      });
    },
    loginMemberPasswordless(params, options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/passwordless/login`,
          data: {
            passwordlessToken: params.passwordlessToken,
            email: params.email,
            options
          }
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    getPlan(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/app/plans/${params.planId}`
        });
      });
    },
    getPlans() {
      return __async(this, null, function* () {
        const { data } = yield sendRequest({
          method: "GET" /* GET */,
          url: `/app`
        });
        return {
          data: data.plans
        };
      });
    },
    getRestrictedUrlGroups() {
      return __async(this, null, function* () {
        const { data } = yield sendRequest({
          method: "GET" /* GET */,
          url: `/app`
        });
        return {
          data: data.contentGroups
        };
      });
    },
    getCurrentMember(options) {
      return __async(this, null, function* () {
        const memberToken = getMemberToken();
        if (!memberToken)
          return { data: null };
        const getMemberRequest = sendRequest({
          method: "GET" /* GET */,
          url: `/member`,
          headers: addHeaders(options)
        });
        function setMember() {
          return __async(this, null, function* () {
            const data = yield getMemberRequest;
            updatePersistedMember(data.data);
          });
        }
        setMember();
        if ((options == null ? void 0 : options.useCache) === true) {
          const member = getPersistedMember();
          return { data: member };
        } else {
          return getMemberRequest;
        }
      });
    },
    getMemberJSON(options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/member/json`,
          headers: addHeaders(options)
        });
      });
    },
    updateMemberJSON(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/json`,
          data: {
            json: params.json
          },
          headers: addHeaders(options)
        });
      });
    },
    addPlan(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/add`,
          data: {
            planId: params.planId
          },
          headers: addHeaders(options)
        });
      });
    },
    purchasePlansWithCheckout(params, options) {
      return __async(this, null, function* () {
        function getRedirectURL(URL) {
          let redirectUrl = window.location.href;
          const urlParam = URL;
          if (urlParam) {
            if (urlParam.indexOf("http://") === 0 || urlParam.indexOf("https://") === 0) {
              redirectUrl = urlParam;
            } else {
              redirectUrl = window.location.origin + urlParam;
            }
          }
          return redirectUrl;
        }
        const success_url = params.successUrl ? getRedirectURL(params.successUrl) : void 0;
        const cancel_url = getRedirectURL(params.cancelUrl);
        const request = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/create-checkout-session`,
          data: {
            priceId: params.priceId,
            couponId: params.couponId,
            metadataForCheckout: params.metadataForCheckout,
            //window.location requires dom
            success_url,
            cancel_url,
            origin_url: window.location.href
          },
          headers: addHeaders(options)
        });
        if (params.autoRedirect === false) {
          return request;
        }
        window.location.href = request.data.url;
      });
    },
    // used for plan updates
    launchStripeCustomerPortal(params, options) {
      return __async(this, null, function* () {
        function getRedirectURL(URL) {
          let redirectUrl = window.location.href;
          const urlParam = URL;
          if (urlParam) {
            if (urlParam.indexOf("http://") === 0 || urlParam.indexOf("https://") === 0) {
              redirectUrl = urlParam;
            } else {
              redirectUrl = window.location.origin + urlParam;
            }
          }
          return redirectUrl;
        }
        const returnUrl = (params == null ? void 0 : params.returnUrl) ? getRedirectURL(params.returnUrl) : void 0;
        const request = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/create-billing-portal-session`,
          data: __spreadValues({
            //window.location requires dom
            return_url: returnUrl,
            origin_url: window.location.href
          }, params && {
            priceIds: params.priceIds,
            configuration: params.configuration
          }),
          headers: addHeaders(options)
        });
        if ((params == null ? void 0 : params.autoRedirect) === false) {
          return request;
        }
        window.location.href = request.data.url;
      });
    },
    removePlan(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/plans/remove`,
          data: {
            planId: params.planId
          },
          headers: addHeaders(options)
        });
      });
    },
    updateMember(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member`,
          data: __spreadValues({}, params.customFields && { customFields: params.customFields }),
          headers: addHeaders(options)
        });
      });
    },
    updateMemberAuth(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member-auth`,
          data: __spreadValues(__spreadValues(__spreadValues({}, params.email && { email: params.email }), params.oldPassword && { oldPassword: params.oldPassword }), params.newPassword && { newPassword: params.newPassword }),
          headers: addHeaders(options)
        });
      });
    },
    setPassword(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/set-password`,
          data: {
            password: params.password
          },
          headers: addHeaders(options)
        });
      });
    },
    signupMemberPasswordless(params, options) {
      return __async(this, null, function* () {
        var _a2, _b;
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/signup?isPasswordless=true`,
          data: __spreadValues(__spreadProps(__spreadValues({
            email: params.email,
            customFields: params.customFields,
            passwordlessToken: params.passwordlessToken,
            metaData: params.metaData
          }, params.plans && { plans: params.plans }), {
            //internal use only
            origin_domain: window.location.origin,
            options
          }), ((_a2 = window.Rewardful) == null ? void 0 : _a2.referral) && {
            rewardfulData: {
              // @ts-ignore
              referral: window.Rewardful.referral,
              // @ts-ignore
              coupon: (_b = window.Rewardful.coupon) == null ? void 0 : _b.id
            }
          })
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    signupMemberEmailPassword(params, options) {
      return __async(this, null, function* () {
        var _a2, _b;
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/auth/signup`,
          data: __spreadValues(__spreadProps(__spreadValues({
            email: params.email,
            password: params.password,
            customFields: params.customFields,
            metaData: params.metaData,
            captchaToken: params.captchaToken,
            inviteToken: params.inviteToken
          }, params.plans && { plans: params.plans }), {
            //internal use only
            origin_domain: window.location.origin,
            options
          }), ((_a2 = window.Rewardful) == null ? void 0 : _a2.referral) && {
            rewardfulData: {
              // @ts-ignore
              referral: window.Rewardful.referral,
              // @ts-ignore
              coupon: (_b = window.Rewardful.coupon) == null ? void 0 : _b.id
            }
          })
        });
        const sessionDurationDays = getSessionDurationDays(data.data.tokens.expires);
        setPersistedMember(data.data.member);
        setMemberToken(data.data.tokens.accessToken, sessionDurationDays);
        return data;
      });
    },
    joinTeam(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/team/join`,
          data: {
            inviteToken: params.inviteToken
          },
          headers: addHeaders(options)
        });
      });
    },
    getTeam(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "GET" /* GET */,
          url: `/member/team/${params.teamId}`,
          headers: addHeaders(options)
        });
      });
    },
    removeMemberFromTeam(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/team/remove-member`,
          data: {
            teamId: params.teamId,
            memberId: params.memberId
          },
          headers: addHeaders(options)
        });
      });
    },
    generateInviteToken(params, options) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/member/team/generate-invite-link`,
          data: {
            teamId: params.teamId
          },
          headers: addHeaders(options)
        });
      });
    },
    updateMemberProfileImage(params) {
      return __async(this, null, function* () {
        if (params.profileImage) {
          const formData = new FormData();
          formData.append("profileImage", params.profileImage);
          return sendRequest({
            method: "POST" /* POST */,
            url: `/member/profile-image`,
            data: formData,
            contentType: "multipart/form-data"
          });
        }
      });
    },
    sendMemberVerificationEmail() {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/send-email-verification`,
          data: {
            //internal use only
            origin_domain: window.location.origin
          }
        });
      });
    },
    sendMemberResetPasswordEmail(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/send-reset-password-email`,
          data: {
            email: params.email
          }
        });
      });
    },
    resetMemberPassword(params) {
      return __async(this, null, function* () {
        return sendRequest({
          method: "POST" /* POST */,
          url: `/auth/reset-password`,
          data: {
            token: params.token,
            newPassword: params.newPassword
          }
        });
      });
    },
    logout(options) {
      return __async(this, null, function* () {
        const data = yield sendRequest({
          method: "POST" /* POST */,
          url: `/member/logout`,
          headers: addHeaders(options)
        });
        unsetPersistedMember();
        return data;
      });
    }
  };
};

// src/methods/index.ts
var captchaReadyPromise = new Promise((resolve) => {
  if (typeof window !== "undefined") {
    window._hcaptchaReady = resolve;
  }
});
var methods = {
  openModal,
  hideModal,
  _hideLoader: hideLoader,
  _showLoader: showLoader,
  _showMessage: showMessage,
  getMemberCookie: getMemberToken,
  onAuthChange,
  _captchaReady: captchaReadyPromise
};
function init2(props) {
  const apiDomain2 = props.domain || endpoints.API;
  setApiDomain(apiDomain2);
  if (props.useCookies)
    setUseCookies(props.setCookieOnRootDomain);
  setMemberTokenIfAvailable();
  const requests = initRequest({
    publicKey: props.publicKey,
    appId: props.appId,
    token: getMemberToken(),
    domain: apiDomain2
  });
  const allMethods = Object.assign(methods, requests);
  if (typeof window !== "undefined") {
    window.$memberstackDom = allMethods;
  }
  return allMethods;
}
var methods_default = { init: (props) => init2(props) };

// src/index.ts
var src_default = { init: methods_default.init };



/***/ }),

/***/ "./node_modules/axios/lib/adapters/adapters.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http.js */ "./node_modules/axios/lib/helpers/null.js");
/* harmony import */ var _xhr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");





const knownAdapters = {
  http: _http_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  xhr: _xhr_js__WEBPACK_IMPORTED_MODULE_1__["default"]
}

_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  getAdapter: (adapters) => {
    adapters = _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_3__["default"](
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});


/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js");
/* harmony import */ var _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../helpers/cookies.js */ "./node_modules/axios/lib/helpers/cookies.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../helpers/isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
/* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js");
















function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = (0,_helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(50, 250);

  return e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  };
}

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers).normalize();
    let {responseType, withXSRFToken} = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let contentType;

    if (_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFormData(requestData)) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].hasStandardBrowserEnv || _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false); // Let the browser set it
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        // fix semicolon duplication issue for ReactNative FormData implementation
        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
      }
    }

    let request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }

    const fullPath = (0,_core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_5__["default"])(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Request aborted', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_8__["default"];
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"](
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if(_platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].hasStandardBrowserEnv) {
      withXSRFToken && _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));

      if (withXSRFToken || (withXSRFToken !== false && (0,_helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_9__["default"])(fullPath))) {
        // Add xsrf header
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_10__["default"].read(config.xsrfCookieName);

        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_11__["default"](null, config, request) : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = (0,_helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_12__["default"])(fullPath);

    if (protocol && _platform_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].protocols.indexOf(protocol) === -1) {
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Unsupported protocol ' + protocol + ':', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");
/* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js");
/* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");
/* harmony import */ var _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./helpers/HttpStatusCode.js */ "./node_modules/axios/lib/helpers/HttpStatusCode.js");




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"](defaultConfig);
  const instance = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype.request, context);

  // Copy axios.prototype to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype, context, {allOwnKeys: true});

  // Copy context to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance((0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(_defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]);

// Expose Axios class to allow class inheritance
axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_0__["default"];

// Expose Cancel & CancelToken
axios.CanceledError = _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_5__["default"];
axios.CancelToken = _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_6__["default"];
axios.isCancel = _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_7__["default"];
axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_8__.VERSION;
axios.toFormData = _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_9__["default"];

// Expose AxiosError class
axios.AxiosError = _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_10__["default"];

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = _helpers_spread_js__WEBPACK_IMPORTED_MODULE_11__["default"];

// Expose isAxiosError
axios.isAxiosError = _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_12__["default"];

// Expose mergeConfig
axios.mergeConfig = _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"];

axios.AxiosHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_13__["default"];

axios.formToJSON = thing => (0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_14__["default"])(_utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_15__["default"].getAdapter;

axios.HttpStatusCode = _helpers_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_16__["default"];

axios.default = axios;

// this module should only have a default export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axios);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CancelToken);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, message == null ? 'canceled' : message, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(CanceledError, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"], {
  __CANCEL__: true
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanceledError);


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isCancel)
/* harmony export */ });


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js");
/* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js");
/* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");











const validators = _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
      response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_1__["default"]()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';

        if (!err.stack) {
          err.stack = stack;
          // match without the 2 top stack lines
        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
          err.stack += '\n' + stack
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        _helpers_validator_js__WEBPACK_IMPORTED_MODULE_0__["default"].assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].merge(
      headers.common,
      headers[config.method]
    );

    headers && _utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [_dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_5__["default"].call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this.defaults, config);
    const fullPath = (0,_buildFullPath_js__WEBPACK_IMPORTED_MODULE_6__["default"])(config.baseURL, config.url);
    return (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_7__["default"])(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

_utils_js__WEBPACK_IMPORTED_MODULE_3__["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_2__["default"])(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Axios);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);

  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosError);


/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js");





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)) return;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders((0,_helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      const key = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosHeaders);


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InterceptorManager);


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildFullPath)
/* harmony export */ });
/* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
/* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js");





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !(0,_helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(requestedURL)) {
    return (0,_helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(baseURL, requestedURL);
  }
  return requestedURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ dispatchRequest)
/* harmony export */ });
/* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../adapters/adapters.js */ "./node_modules/axios/lib/adapters/adapters.js");









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(config.headers);

  // Transform request data
  config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = _adapters_adapters_js__WEBPACK_IMPORTED_MODULE_3__["default"].getAdapter(config.adapter || _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"].adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
      config,
      config.transformResponse,
      response
    );

    response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!(0,_cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_5__["default"])(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_2__["default"].call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeConfig)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");





const headersToObject = (thing) => thing instanceof _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(target) && _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge.call({caseless}, target, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].merge({}, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ settle)
/* harmony export */ });
/* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"](
      'Request failed with status code ' + response.status,
      [_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_REQUEST, _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ transformData)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  const context = response || config;
  const headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(context.headers);
  let data = context.data;

  _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: _transitional_js__WEBPACK_IMPORTED_MODULE_1__["default"],

  adapter: ['xhr', 'http'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(data);

    if (isObjectPayload && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify((0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data)) : data;
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(data) ||
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data)
    ) {
      return data;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBufferView(data)) {
      return data.buffer;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return (0,_helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_3__["default"])(data, this.formSerializer).toString();
      }

      if ((isFileList = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return (0,_helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_4__["default"])(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (data && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].from(e, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_5__["default"].ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.FormData,
    Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_6__["default"].classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaults);


/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VERSION: () => (/* binding */ VERSION)
/* harmony export */ });
const VERSION = "1.6.8";

/***/ }),

/***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosURLSearchParams);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/HttpStatusCode.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HttpStatusCode);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bind)
/* harmony export */ });


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildURL)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(params) ?
      params.toString() :
      new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__["default"](params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ combineURLs)
/* harmony export */ });


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(path) && cookie.push('path=' + path);

      _utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });



/***/ }),

/***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target) ? target.length : name;

    if (isLast) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(formData) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(formData.entries)) {
    const obj = {};

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formDataToJSON);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAbsoluteURL)
/* harmony export */ });


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAxiosError)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(payload) && (payload.isAxiosError === true);
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());


/***/ }),

/***/ "./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line strict
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (null);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseProtocol)
/* harmony export */ });


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (speedometer);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ spread)
/* harmony export */ });


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/node/classes/FormData.js */ "./node_modules/axios/lib/helpers/null.js");




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(thing) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) && !arr.some(isVisitable);
}

const predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (_platform_node_classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isSpecCompliantForm(formData);

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('Blob is not supported. Use a Buffer instead.');
    }

    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) && isFlatArray(value)) ||
        ((_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]')) && (arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(value, function each(el, key) {
      const result = !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && visitor.call(
        formData, el, _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toFormData);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toURLEncodedForm)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");






function toURLEncodedForm(data, options) {
  return (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, new _platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].isNode && _utils_js__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('options must be an object', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('option ' + opt + ' must be ' + result, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Unknown option ' + opt, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  assertOptions,
  validators
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/Blob.js":
/*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof Blob !== 'undefined' ? Blob : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof FormData !== 'undefined' ? FormData : null);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js");
/* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js");
/* harmony import */ var _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classes/Blob.js */ "./node_modules/axios/lib/platform/browser/classes/Blob.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isBrowser: true,
  classes: {
    URLSearchParams: _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    FormData: _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    Blob: _classes_Blob_js__WEBPACK_IMPORTED_MODULE_2__["default"]
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});


/***/ }),

/***/ "./node_modules/axios/lib/platform/common/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasBrowserEnv: () => (/* binding */ hasBrowserEnv),
/* harmony export */   hasStandardBrowserEnv: () => (/* binding */ hasStandardBrowserEnv),
/* harmony export */   hasStandardBrowserWebWorkerEnv: () => (/* binding */ hasStandardBrowserWebWorkerEnv)
/* harmony export */ });
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();




/***/ }),

/***/ "./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node/index.js */ "./node_modules/axios/lib/platform/browser/index.js");
/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/utils.js */ "./node_modules/axios/lib/platform/common/utils.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ..._common_utils_js__WEBPACK_IMPORTED_MODULE_0__,
  ..._node_index_js__WEBPACK_IMPORTED_MODULE_1__["default"]
});


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");




// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
}

const ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
});


/***/ }),

/***/ "./node_modules/js-cookie/dist/js.cookie.mjs":
/*!***************************************************!*\
  !*** ./node_modules/js-cookie/dist/js.cookie.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ api)
/* harmony export */ });
/*! js-cookie v3.0.5 | MIT */
/* eslint-disable no-var */
function assign (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target
}
/* eslint-enable no-var */

/* eslint-disable no-var */
var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
  },
  write: function (value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    )
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init (converter, defaultAttributes) {
  function set (name, value, attributes) {
    if (typeof document === 'undefined') {
      return
    }

    attributes = assign({}, defaultAttributes, attributes);

    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }

    name = encodeURIComponent(name)
      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
      .replace(/[()]/g, escape);

    var stringifiedAttributes = '';
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue
      }

      stringifiedAttributes += '; ' + attributeName;

      if (attributes[attributeName] === true) {
        continue
      }

      // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...
      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }

    return (document.cookie =
      name + '=' + converter.write(value, name) + stringifiedAttributes)
  }

  function get (name) {
    if (typeof document === 'undefined' || (arguments.length && !name)) {
      return
    }

    // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.
    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');

      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);

        if (name === found) {
          break
        }
      } catch (e) {}
    }

    return name ? jar[name] : jar
  }

  return Object.create(
    {
      set,
      get,
      remove: function (name, attributes) {
        set(
          name,
          '',
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function (attributes) {
        return init(this.converter, assign({}, this.attributes, attributes))
      },
      withConverter: function (converter) {
        return init(assign({}, this.converter, converter), this.attributes)
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  )
}

var api = init(defaultConverter, { path: '/' });
/* eslint-enable no-var */




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!*************************************!*\
  !*** ./src/scripts/mobile-login.ts ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _memberstack_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @memberstack/dom */ "./node_modules/@memberstack/dom/lib/index.mjs");

const memberstack = _memberstack_dom__WEBPACK_IMPORTED_MODULE_0__["default"].init({
  publicKey: "pk_5269dd1743be245aa255"
});
document.querySelector('.forgot-password-button')?.addEventListener('click', e => {
  e.stopImmediatePropagation();
  e.preventDefault();
  window.ReactNativeWebView.postMessage(JSON.stringify({
    msg: 'forgot-password'
  }));
});
document.querySelector('.login-button')?.addEventListener('click', async e => {
  e.stopImmediatePropagation();
  e.preventDefault();
  const $email = document.querySelector('#email');
  const $password = document.querySelector('#password');
  if ($email && $email.value.length === 0) {
    $email.parentNode.parentNode.classList.add('error');
  } else {
    $email.parentNode.parentNode.classList.remove('error');
  }
  if ($password.value.length === 0) {
    $password.parentNode.parentNode.classList.add('error');
  } else {
    $password.parentNode.parentNode.classList.remove('error');
  }
  const email = $email.value;
  const password = $password.value;
  window.ReactNativeWebView.postMessage(JSON.stringify({
    msg: memberstack ? 'login' : 'memberstack is null'
  }));
  try {
    const loginResult = await memberstack.loginMemberEmailPassword({
      email,
      password
    });
    window.ReactNativeWebView.postMessage(JSON.stringify({
      msg: 'login',
      data: JSON.stringify(loginResult)
    }));
  } catch (e) {
    window.ReactNativeWebView.postMessage(JSON.stringify({
      msg: 'login',
      data: JSON.stringify({
        error: e.message
      })
    }));
  }
});
function test() {
  window.ReactNativeWebView.postMessage(JSON.stringify({
    msg: 'test'
  }));
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDhCQUE4QixFQUFFLEtBQUs7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUVBQWlFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlCQUF5QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDZCQUE2QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDZDQUE2QztBQUM3QyxHQUFHO0FBQ0gsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsbUJBQW1CLFlBQVk7QUFDdkMsUUFBUSxRQUFRO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsVUFBVTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsYUFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZUFBZTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0JBQXdCO0FBQ2hDLFFBQVEsb0JBQW9CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSw2QkFBNkI7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMEJBQTBCO0FBQ2xDLFFBQVEsYUFBYTtBQUNyQixRQUFRLHFDQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxHQUFHO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrQ0FBa0M7QUFDMUMsUUFBUSw2QkFBNkI7QUFDckMsUUFBUSxrREFBa0Q7QUFDMUQsUUFBUSx5Q0FBeUM7QUFDakQsUUFBUSxnQkFBZ0I7QUFDeEIsUUFBUSxVQUFVO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDRCQUE0QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3QkFBd0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlCQUF5QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGFBQWE7QUFDckIsUUFBUSxVQUFVO0FBQ2xCLFFBQVEsaUJBQWlCO0FBQ3pCLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLGNBQWM7QUFDZDtBQUNBLDJCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLHlCQUF5QjtBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQSxTQUFTO0FBQ1QseUJBQXlCLHFCQUFxQjtBQUM5QyxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx3RUFBd0Usd0JBQXdCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsNEJBQTRCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx3QkFBd0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1Qiw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsNEJBQTRCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsYUFBYTtBQUNyQixRQUFRLFVBQVU7QUFDbEIsUUFBUSx5QkFBeUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxNQUFNLGtCQUFrQixPQUFPO0FBQ3RHO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CLFlBQVkscURBQXFELHlDQUF5QztBQUM5STtBQUNBLGlDQUFpQyxrQ0FBa0M7QUFDbkU7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxzQ0FBc0M7QUFDdEMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxhQUFhO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxlQUFlO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLGtFQUFrRTtBQUNsRTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixpRUFBaUU7QUFDakU7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QkFBc0I7QUFDNUM7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxTQUFTO0FBQ2pCLFFBQVEsa0JBQWtCO0FBQzFCLFFBQVEsaUJBQWlCO0FBQ3pCLFFBQVEsZ0JBQWdCO0FBQ3hCLFFBQVEsMENBQTBDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsU0FBUyxTQUFTLG9DQUFvQyxTQUFTLFNBQVMseUJBQXlCLGNBQWMsU0FBUyxrQ0FBa0MsY0FBYyxRQUFRO0FBQ3pPO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEIsWUFBWTtBQUN0RDtBQUNBLDBCQUEwQixzQkFBc0I7QUFDaEQsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlCQUF5QjtBQUN6RDtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw0QkFBNEI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsNkJBQTZCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsNkJBQTZCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3QkFBd0I7QUFDaEMsUUFBUSx5QkFBeUI7QUFDakMsUUFBUSx3QkFBd0I7QUFDaEMsUUFBUTtBQUNSLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3QkFBd0I7QUFDaEMsUUFBUTtBQUNSLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsMkJBQTJCO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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S0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsK0JBQStCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGtDQUFrQztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Qsa0NBQWtDO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxpQ0FBaUM7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDhCQUE4QjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrQkFBa0I7QUFDMUIsUUFBUSxhQUFhO0FBQ3JCLFFBQVEsNkJBQTZCO0FBQ3JDLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxTQUFTO0FBQ2pCLFFBQVEsa0JBQWtCO0FBQzFCLFFBQVEsaUJBQWlCO0FBQ3pCLFFBQVEsZ0JBQWdCO0FBQ3hCLFFBQVEsMENBQTBDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MseUJBQXlCO0FBQ3pEO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlCQUFpQjtBQUN6QixRQUFRLFNBQVM7QUFDakIsUUFBUSxhQUFhO0FBQ3JCLFFBQVEsZ0JBQWdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CLFlBQVksa0RBQWtELG1CQUFtQjtBQUNySDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQixZQUFZLG9EQUFvRCxVQUFVO0FBQ3BILGdFQUFnRTtBQUNoRSwrQ0FBK0M7QUFDL0M7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTyxpREFBaUQsVUFBVTtBQUNsRixnRUFBZ0U7QUFDaEUsK0NBQStDO0FBQy9DO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDRCQUE0QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw2QkFBNkI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw2QkFBNkI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQjtBQUN4QixRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CLGlCQUFpQjtBQUN2RDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWLGtCQUFrQixvQkFBb0IsaUJBQWlCLDZDQUE2Qyw0QkFBNEI7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsNkJBQTZCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCx3Q0FBd0M7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELHdDQUF3QztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsdUNBQXVDO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Qsb0NBQW9DO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrQkFBa0I7QUFDMUIsUUFBUSxhQUFhO0FBQ3JCLFFBQVEsaUNBQWlDO0FBQ3pDLFFBQVEsU0FBUztBQUNqQixRQUFRLG1DQUFtQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixnQ0FBZ0M7QUFDaEMsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGFBQWE7QUFDckIsUUFBUSxVQUFVO0FBQ2xCLFFBQVEsa0JBQWtCO0FBQzFCLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSEFBb0g7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSw0UEFBNFAsUUFBUSxxQ0FBcUM7QUFDelMsT0FBTztBQUNQO0FBQ0E7QUFDQSw4S0FBOEs7QUFDOUs7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGVBQWU7QUFDekY7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHdFQUF3RSxlQUFlO0FBQ3ZGO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsOEJBQThCO0FBQzVELCtCQUErQiwrQkFBK0I7QUFDOUQsdUJBQXVCLG1EQUFtRDtBQUMxRSx3QkFBd0IsK0JBQStCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4QkFBOEI7QUFDMUMsYUFBYSwrQkFBK0I7QUFDNUMsY0FBYyxnQkFBZ0I7QUFDOUIsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsS0FBSyxFQUFFLE1BQU0sSUFBSSxxQkFBcUI7QUFDL0QsSUFBSTtBQUNKLHlCQUF5QixLQUFLLEVBQUUsTUFBTTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxZQUFZLDBCQUEwQjtBQUN0QyxhQUFhLCtCQUErQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsVUFBVTtBQUMzRCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxZQUFZLGFBQWEsdUJBQXVCLG1CQUFtQixhQUFhLFNBQVM7QUFDeEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGLGtCQUFrQix5Q0FBeUMsMEJBQTBCLFdBQVcsc0JBQXNCLCtDQUErQyxXQUFXLDREQUE0RCxXQUFXLG9CQUFvQixpQkFBaUIseUJBQXlCLHlCQUF5QixrQkFBa0IsOEJBQThCLG1CQUFtQixpQkFBaUIsbUJBQW1CLGlCQUFpQixrQkFBa0Isa0JBQWtCLGFBQWEsV0FBVyxrRUFBa0UscUJBQXFCLHNCQUFzQixrRUFBa0UseUJBQXlCLHlCQUF5QiwrQkFBK0IsOEJBQThCLHFCQUFxQixpRUFBaUUsZ0JBQWdCLHdEQUF3RCxrQkFBa0I7QUFDL2lDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxlQUFlO0FBQzFGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGVBQWU7QUFDeEY7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxVQUFVLFlBQVk7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsYUFBYTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsVUFBVTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msd0JBQXdCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsZUFBZTtBQUM1RjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsZUFBZTtBQUMxRjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixLQUFLO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGtCQUFrQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxxR0FBcUcsYUFBYSxtQkFBbUIsOEJBQThCLGtCQUFrQixlQUFlLFdBQVcsY0FBYyxZQUFZLHlEQUF5RCxnQkFBZ0IsMERBQTBELGFBQWEsbUJBQW1CLFFBQVEsMERBQTBELGtCQUFrQixxQkFBcUIsV0FBVyxZQUFZLFNBQVMsVUFBVSxnRUFBZ0UsVUFBVSxRQUFRLFNBQVMsMERBQTBELGtCQUFrQixlQUFlLE1BQU0sT0FBTyxRQUFRLFNBQVMsc0JBQXNCLHlCQUF5Qix3QkFBd0IsZ0JBQWdCLG9CQUFvQixpRUFBaUUsa0JBQWtCLFdBQVcsWUFBWSxXQUFXLFNBQVMsV0FBVyx5QkFBeUIsd0JBQXdCLGdCQUFnQixrQkFBa0Isd0VBQXdFLHlCQUF5QixxQkFBcUIsc0VBQXNFLDJCQUEyQiwrRUFBK0UsbUNBQW1DLCtCQUErQiwyQkFBMkIsbUJBQW1CLFdBQVcsc0JBQXNCLHlCQUF5QixrQkFBa0IsZUFBZSxvQkFBb0IsYUFBYSxtQ0FBbUMsZ0JBQWdCLHlCQUF5QixhQUFhLG9CQUFvQiw4QkFBOEIsV0FBVyx3QkFBd0IsUUFBUSxZQUFZLGFBQWEsbUJBQW1CLDZCQUE2Qiw2Q0FBNkMsb0NBQW9DLFlBQVksOEJBQThCLHlCQUF5QiwwQkFBMEIscUJBQXFCLDRCQUE0QixxQkFBcUIseUJBQXlCLFdBQVcsWUFBWSxhQUFhLG1CQUFtQix1QkFBdUIseUJBQXlCLGtCQUFrQixXQUFXLDZCQUE2QixZQUFZLGtEQUFrRCx5QkFBeUIsbURBQW1ELHlCQUF5Qiw4RUFBOEUseUJBQXlCLDJFQUEyRSx5QkFBeUIsbURBQW1ELHlCQUF5QixxREFBcUQseUJBQXlCLGNBQWMsNEJBQTRCLFdBQVcsYUFBYSxzQkFBc0IsbUJBQW1CLHVCQUF1Qiw0QkFBNEIsV0FBVyxpQ0FBaUMsWUFBWSwyQ0FBMkMsV0FBVyxxQ0FBcUMscURBQXFELGtCQUFrQiwwQkFBMEIsU0FBUyxVQUFVLG1DQUFtQywyQkFBMkIsa0JBQWtCLGNBQWMsMEJBQTBCLDhDQUE4QyxnQkFBZ0IsbUNBQW1DLDBCQUEwQixXQUFXLG9CQUFvQix3Q0FBd0MsZ0JBQWdCLGVBQWUsa0JBQWtCLGNBQWMsOENBQThDLFdBQVcsb0JBQW9CLGlCQUFpQix5QkFBeUIseUJBQXlCLGtCQUFrQiw4QkFBOEIsbUJBQW1CLGlCQUFpQixtQkFBbUIsaUJBQWlCLGtCQUFrQixrQkFBa0IsYUFBYSxXQUFXLG9EQUFvRCxxQkFBcUIsc0JBQXNCLG9EQUFvRCxxQkFBcUIsb0RBQW9ELGdCQUFnQiwwQkFBMEIsa0JBQWtCLHNCQUFzQixjQUFjLGdCQUFnQixnQkFBZ0IsY0FBYyxZQUFZLFNBQVMsMEJBQTBCLGlCQUFpQixpQkFBaUIsVUFBVSxzQ0FBc0M7QUFDOTBJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseUJBQXlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5QkFBeUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlCQUF5QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5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QUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsWUFBWTtBQUNwQixRQUFRLGFBQWE7QUFDckIsUUFBUSxVQUFVO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUseUNBQXlDO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNM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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkdBQTZHO0FBQzdHLHNDQUFzQztBQUN0QyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSEFBb0g7QUFDcEgsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsT0FBTztBQUNmLFFBQVEsU0FBUztBQUNqQixRQUFRLGNBQWM7QUFDdEIsUUFBUSxrQkFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDBDQUEwQztBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLDhGQUE4RixXQUFXLHNCQUFzQix5QkFBeUIsa0JBQWtCLGVBQWUsb0JBQW9CLGFBQWEsbUNBQW1DLGdCQUFnQix5REFBeUQsYUFBYSxvQkFBb0IsOEJBQThCLFdBQVcsd0RBQXdELFFBQVEsWUFBWSxhQUFhLG1CQUFtQiw2QkFBNkIsNkNBQTZDLFdBQVcsb0ZBQW9GLHlCQUF5QixvRkFBb0YseUJBQXlCLHlEQUF5RCxXQUFXLFlBQVksYUFBYSxtQkFBbUIsdUJBQXVCLHlCQUF5QixrQkFBa0IsV0FBVyxZQUFZLCtCQUErQixXQUFXLFlBQVksMERBQTBELGlCQUFpQixpQkFBaUIsVUFBVSxzQ0FBc0MsNERBQTRELFdBQVcsNERBQTRELHlCQUF5QixXQUFXLFlBQVksaUVBQWlFLG1CQUFtQix3RUFBd0UsaUJBQWlCLGtCQUFrQix1RUFBdUUsZ0JBQWdCLDhFQUE4RSxhQUFhLG1CQUFtQixxQkFBcUIsY0FBYyxvRkFBb0YsY0FBYztBQUNsM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxlQUFlO0FBQzFGO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsZUFBZTtBQUN4RjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpQkFBaUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxtQkFBbUI7QUFDNUY7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLG1CQUFtQixxQ0FBcUMsYUFBYSxtQkFBbUIsaUJBQWlCLHlCQUF5QixrQkFBa0IsNkNBQTZDLHFCQUFxQixnREFBZ0QsV0FBVyxZQUFZLGtCQUFrQixrQkFBa0IsbUNBQW1DLHdEQUF3RCx5QkFBeUIsNkNBQTZDLGVBQWUsY0FBYyxpQkFBaUIsWUFBWSx5QkFBeUIsa0JBQWtCLHNCQUFzQixXQUFXLGVBQWUsdUNBQXVDLG1CQUFtQixtQkFBbUIsZ0NBQWdDLGtEQUFrRCxtQkFBbUIsZ0JBQWdCLDhCQUE4QixzQkFBc0IsV0FBVyxnQkFBZ0Isa0JBQWtCLGNBQWMseUJBQXlCLGVBQWU7QUFDamlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RSwyQkFBMkIsV0FBVztBQUN0Qyw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHdCQUF3QjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsdUJBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0JBQXNCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLHdCQUF3QjtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRixXQUFXLHNCQUFzQix5QkFBeUIsa0JBQWtCLGVBQWUsb0JBQW9CLGFBQWEsbUNBQW1DLGdCQUFnQiwrQ0FBK0MsYUFBYSxvQkFBb0IsOEJBQThCLFdBQVcsOENBQThDLFFBQVEsWUFBWSxhQUFhLG1CQUFtQiw2QkFBNkIsNkNBQTZDLFdBQVcsY0FBYywrQ0FBK0MsV0FBVyxZQUFZLGFBQWEsbUJBQW1CLHVCQUF1Qix5QkFBeUIsa0JBQWtCLFdBQVcsWUFBWSxxQ0FBcUMsV0FBVyxZQUFZLGdEQUFnRCxpQkFBaUIsaUJBQWlCLFVBQVUsc0NBQXNDLGtEQUFrRCxXQUFXLGtEQUFrRCx5QkFBeUIsV0FBVyxZQUFZO0FBQzVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLGVBQWU7QUFDMUY7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxlQUFlO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FB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O0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQsd0JBQXdCO0FBQ3hCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELHdCQUF3QjtBQUN4QjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxTQUFTLCtCQUErQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7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QUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTZFLDBCQUEwQjtBQUN2RztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDRCQUE0QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUyxRQUFRLGFBQWE7QUFDM0MsYUFBYSxTQUFTO0FBQ3RCO0FBQ0EsT0FBTztBQUNQLGlCQUFpQjtBQUNqQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QscUNBQXFDO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsbUNBQW1DO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGlDQUFpQztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsaUNBQWlDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywwQkFBMEI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlCQUF5QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDJCQUEyQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxpQ0FBaUM7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Es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LE1BQU0sQ0FBQ0Msa0JBQWtCLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUM7SUFBRUMsR0FBRyxFQUFFakIsV0FBVyxHQUFHLE9BQU8sR0FBRztFQUFzQixDQUFDLENBQUMsQ0FBQztFQUM3RyxJQUFJO0lBQ0YsTUFBTTRCLFdBQVcsR0FBRyxNQUFNNUIsV0FBVyxDQUFDNkIsd0JBQXdCLENBQUM7TUFDN0RILEtBQUs7TUFDTEM7SUFDRixDQUFDLENBQUM7SUFDRmYsTUFBTSxDQUFDQyxrQkFBa0IsQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztNQUFFQyxHQUFHLEVBQUUsT0FBTztNQUFFYSxJQUFJLEVBQUVmLElBQUksQ0FBQ0MsU0FBUyxDQUFDWSxXQUFXO0lBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUcsQ0FBQyxDQUFDLE9BQU9uQixDQUFNLEVBQUU7SUFDZkcsTUFBTSxDQUFDQyxrQkFBa0IsQ0FBQ0MsV0FBVyxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztNQUFFQyxHQUFHLEVBQUUsT0FBTztNQUFFYSxJQUFJLEVBQUVmLElBQUksQ0FBQ0MsU0FBUyxDQUFDO1FBQUNlLEtBQUssRUFBRXRCLENBQUMsQ0FBQ3VCO01BQU8sQ0FBQztJQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ25IO0FBRUYsQ0FBQyxDQUFDO0FBQ0YsU0FBU0MsSUFBSUEsQ0FBQSxFQUFHO0VBQ2RyQixNQUFNLENBQUNDLGtCQUFrQixDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDO0lBQUVDLEdBQUcsRUFBRTtFQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9AbWVtYmVyc3RhY2svZG9tL2xpYi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2NvbW1vbi91dGlscy5qcyIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90Ly4vbm9kZV9tb2R1bGVzL2pzLWNvb2tpZS9kaXN0L2pzLmNvb2tpZS5tanMiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2ludGVydmlld19jb3BpbG90L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vaW50ZXJ2aWV3X2NvcGlsb3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9pbnRlcnZpZXdfY29waWxvdC8uL3NyYy9zY3JpcHRzL21vYmlsZS1sb2dpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG5cbi8vIHNyYy91dGlscy9kZWZhdWx0TWVzc2FnZUJveC50c1xudmFyIGNsb3NlSWNvbjtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGNsb3NlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNsb3NlSWNvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm1zLXN0YXR1cy1jbG9zZVwiKTtcbiAgY2xvc2VJY29uLnNldEF0dHJpYnV0ZShcImRhdGEtbXMtbWVzc2FnZS1jbG9zZVwiLCBcIlwiKTtcbiAgY2xvc2VJY29uLmlubmVySFRNTCA9IGA8c3ZnIHdpZHRoPVwiMTRcIiBoZWlnaHQ9XCIxNFwiIHZpZXdCb3g9XCIwIDAgMTQgMTRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTE0IDEuNDFMMTIuNTkgMEw3IDUuNTlMMS40MSAwTDAgMS40MUw1LjU5IDdMMCAxMi41OUwxLjQxIDE0TDcgOC40MUwxMi41OSAxNEwxNCAxMi41OUw4LjQxIDdMMTQgMS40MVpcIiBmaWxsPVwid2hpdGVcIi8+PC9zdmc+YDtcbn1cbnZhciBhZGRTdWNjZXNzQm94ID0gKCkgPT4ge1xuICBjb25zdCBzdWNjZXNzU3RhdHVzSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHN1Y2Nlc3NTdGF0dXNJY29uLnNldEF0dHJpYnV0ZShcImlkXCIsIFwibXMtc3RhdHVzLWljb25cIik7XG4gIHN1Y2Nlc3NTdGF0dXNJY29uLmlubmVySFRNTCA9IGA8c3ZnIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PGNpcmNsZSBjeD1cIjEwXCIgY3k9XCIxMFwiIHI9XCIxMFwiIGZpbGw9XCIjNjJkMzdmXCIvPjxwYXRoIGQ9XCJNMTAgMEM0LjQ4IDAgMCA0LjQ4IDAgMTBzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE1LjUyIDAgMTAgMFptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDhabTQuNTktMTIuNDJMOCAxMi4xNyA1LjQxIDkuNTkgNCAxMWw0IDQgOC04LTEuNDEtMS40MlpcIiBmaWxsPVwiI2ZmZlwiLz48L3N2Zz5gO1xuICBjb25zdCBzdWNjZXNzSFRNTCA9IGA8ZGl2IGRhdGEtbXMtbWVzc2FnZSBjbGFzcz1cIm1zLWVycm9yLW1lc3NhZ2VcIj5cblx0XHQke3N1Y2Nlc3NTdGF0dXNJY29uLm91dGVySFRNTH1cblx0XHQ8ZGl2IGlkPVwibXMtbWVzc2FnZVwiIGRhdGEtbXMtbWVzc2FnZS10ZXh0PjwvZGl2PlxuXHRcdCR7Y2xvc2VJY29uLm91dGVySFRNTH1cblx0XHQ8L2Rpdj5gO1xuICBjb25zdCBzdWNjZXNzZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgc3VjY2Vzc2Rpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLW1lc3NhZ2VcIiwgXCJzdWNjZXNzXCIpO1xuICBzdWNjZXNzZGl2LmlubmVySFRNTCA9IHN1Y2Nlc3NIVE1MO1xuICBzdWNjZXNzZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdWNjZXNzZGl2KTtcbn07XG52YXIgYWRkRXJyb3JCb3ggPSAoKSA9PiB7XG4gIGNvbnN0IGVycm9yU3RhdHVzSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGVycm9yU3RhdHVzSWNvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm1zLXN0YXR1cy1pY29uXCIpO1xuICBlcnJvclN0YXR1c0ljb24uaW5uZXJIVE1MID0gYDxzdmcgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgdmlld0JveD1cIjAgMCAyMCAyMFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTAgMEM0LjQ4IDAgMCA0LjQ4IDAgMTBDMCAxNS41MiA0LjQ4IDIwIDEwIDIwQzE1LjUyIDIwIDIwIDE1LjUyIDIwIDEwQzIwIDQuNDggMTUuNTIgMCAxMCAwWk0xMSAxNUg5VjEzSDExVjE1Wk0xMSAxMUg5VjVIMTFWMTFaXCIgZmlsbD1cIiNFNDAwMjNcIi8+PC9zdmc+YDtcbiAgY29uc3QgZXJyb3JIVE1MID0gYDxkaXYgZGF0YS1tcy1tZXNzYWdlIGNsYXNzPVwibXMtZXJyb3ItbWVzc2FnZVwiPlxuXHRcdCR7ZXJyb3JTdGF0dXNJY29uLm91dGVySFRNTH1cblx0XHQ8ZGl2IGlkPVwibXMtbWVzc2FnZVwiIGRhdGEtbXMtbWVzc2FnZS10ZXh0PjwvZGl2PlxuXHRcdCR7Y2xvc2VJY29uLm91dGVySFRNTH1cblx0XHQ8L2Rpdj5gO1xuICBjb25zdCBlcnJvcmRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGVycm9yZGl2LnNldEF0dHJpYnV0ZShcImRhdGEtbXMtbWVzc2FnZVwiLCBcImVycm9yXCIpO1xuICBlcnJvcmRpdi5pbm5lckhUTUwgPSBlcnJvckhUTUw7XG4gIGVycm9yZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlcnJvcmRpdik7XG59O1xudmFyIGluaXRDU1MgPSAoKSA9PiB7XG4gIGNvbnN0IGNzc0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBjb25zdCBjc3MgPSBgXG5cdFx0QGtleWZyYW1lcyBmYWRlSW4ge1xuXHRcdFx0MCUge1xuXHRcdFx0XHRvcGFjaXR5OiAwO1xuXHRcdFx0fVxuXHRcdFx0MTAwJSB7XG5cdFx0XHRcdG9wYWNpdHk6IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC5tcy1lcnJvci1tZXNzYWdlIHsgXG5cdFx0XHRcdHBvc2l0aW9uOiBmaXhlZDtcblx0XHRcdFx0bGVmdDogNTAlO1xuXHRcdFx0XHRib3R0b206IDMlO1xuXHRcdFx0XHR0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcblx0XHRcdFx0bWFyZ2luOiAwIGF1dG87XG5cdFx0XHRcdHotaW5kZXg6IDEwMDAwMDAwOyBcblx0XHRcdFx0ZGlzcGxheTogZmxleDsgXG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRcdHBhZGRpbmc6IDEycHggMTZweDtcblx0XHRcdFx0Ym9yZGVyLXJhZGl1czogOHB4OyBcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogIzBBMEEwQTsgXG5cdFx0XHRcdGNvbG9yOiAjZmZmOyBcblx0XHRcdFx0Zm9udC1zaXplOiAxNi44cHg7IFxuXHRcdFx0XHRsaW5lLWhlaWdodDogMjhweDsgXG5cdFx0XHRcdGZvbnQtd2VpZ2h0OiA1MDA7IFxuXHRcdFx0XHR0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXI7XG5cdFx0XHRcdGFuaW1hdGlvbjogZmFkZUluIDAuMnMgZWFzZS1pbjtcblx0XHRcdFx0LXdlYmtpdC1hbmltYXRpb246IGZhZGVJbiAwLjJzIGVhc2UtaW47XG5cdFx0XHRcdC1tb3otYW5pbWF0aW9uOiBmYWRlSW4gMC4ycyBlYXNlLWluO1xuXHRcdFx0XHQtby1hbmltYXRpb246IGZhZGVJbiAwLjJzIGVhc2UtaW47XG5cdFx0XHRcdC1tcy1hbmltYXRpb246IGZhZGVJbiAwLjJzIGVhc2UtaW47XG5cdFx0XHR9XG5cdFx0XHQjbXMtc3RhdHVzLWljb24ge1xuXHRcdFx0XHR3aWR0aDogMjBweDtcblx0XHRcdFx0aGVpZ2h0OiAyMHB4O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6IDEycHg7XG5cdFx0XHRcdH1cblx0XHRcdFx0I21zLXN0YXR1cy1jbG9zZSB7XG5cdFx0XHRcdFx0bWFyZ2luLWxlZnQ6IDIwcHg7XG5cdFx0XHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQjbXMtc3RhdHVzLWNsb3NlIHN2ZyB7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDEycHg7XG5cdFx0XHRcdFx0fWA7XG4gIGNzc0VsLnNldEF0dHJpYnV0ZShcImRhdGEtbXMtc3R5bGVcIiwgXCJcIik7XG4gIGNzc0VsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGNzc0VsKTtcbn07XG5cbi8vIHNyYy9tZXRob2RzL2RvbS9tYWluLWRvbS5qc1xuZnVuY3Rpb24gbm9vcCgpIHtcbn1cbnZhciBpZGVudGl0eSA9ICh4KSA9PiB4O1xuZnVuY3Rpb24gYXNzaWduKHRhciwgc3JjKSB7XG4gIGZvciAoY29uc3QgayBpbiBzcmMpXG4gICAgdGFyW2tdID0gc3JjW2tdO1xuICByZXR1cm4gdGFyO1xufVxuZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gIHJldHVybiBmbigpO1xufVxuZnVuY3Rpb24gYmxhbmtfb2JqZWN0KCkge1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICBmbnMuZm9yRWFjaChydW4pO1xufVxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odGhpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoYSAmJiB0eXBlb2YgYSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgYSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cbnZhciBzcmNfdXJsX2VxdWFsX2FuY2hvcjtcbmZ1bmN0aW9uIHNyY191cmxfZXF1YWwoZWxlbWVudF9zcmMsIHVybCkge1xuICBpZiAoIXNyY191cmxfZXF1YWxfYW5jaG9yKSB7XG4gICAgc3JjX3VybF9lcXVhbF9hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgfVxuICBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuICByZXR1cm4gZWxlbWVudF9zcmMgPT09IHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWY7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcbiAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICByZXR1cm4gbm9vcDtcbiAgfVxuICBjb25zdCB1bnN1YiA9IHN0b3JlLnN1YnNjcmliZSguLi5jYWxsYmFja3MpO1xuICByZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5mdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcbiAgbGV0IHZhbHVlO1xuICBzdWJzY3JpYmUoc3RvcmUsIChfKSA9PiB2YWx1ZSA9IF8pKCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gIGlmIChkZWZpbml0aW9uKSB7XG4gICAgY29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICBpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgaWYgKCQkc2NvcGUuZGlydHkgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGxldHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgY29uc3QgbWVyZ2VkID0gW107XG4gICAgICBjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfVxuICAgIHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcbiAgfVxuICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICBpZiAoc2xvdF9jaGFuZ2VzKSB7XG4gICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgc2xvdC5wKHNsb3RfY29udGV4dCwgc2xvdF9jaGFuZ2VzKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKCQkc2NvcGUpIHtcbiAgaWYgKCQkc2NvcGUuY3R4Lmxlbmd0aCA+IDMyKSB7XG4gICAgY29uc3QgZGlydHkgPSBbXTtcbiAgICBjb25zdCBsZW5ndGggPSAkJHNjb3BlLmN0eC5sZW5ndGggLyAzMjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBkaXJ0eVtpXSA9IC0xO1xuICAgIH1cbiAgICByZXR1cm4gZGlydHk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgIGlmIChrWzBdICE9PSBcIiRcIilcbiAgICAgIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHJlc3QgPSB7fTtcbiAga2V5cyA9IG5ldyBTZXQoa2V5cyk7XG4gIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICBpZiAoIWtleXMuaGFzKGspICYmIGtbMF0gIT09IFwiJFwiKVxuICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICByZXR1cm4gcmVzdDtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWU7XG59XG52YXIgaXNfY2xpZW50ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbnZhciBub3cgPSBpc19jbGllbnQgPyAoKSA9PiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiAoKSA9PiBEYXRlLm5vdygpO1xudmFyIHJhZiA9IGlzX2NsaWVudCA/IChjYikgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSA6IG5vb3A7XG52YXIgdGFza3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdzIpIHtcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgIGlmICghdGFzay5jKG5vdzIpKSB7XG4gICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICB0YXNrLmYoKTtcbiAgICB9XG4gIH0pO1xuICBpZiAodGFza3Muc2l6ZSAhPT0gMClcbiAgICByYWYocnVuX3Rhc2tzKTtcbn1cbmZ1bmN0aW9uIGxvb3AoY2FsbGJhY2spIHtcbiAgbGV0IHRhc2s7XG4gIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgIHJhZihydW5fdGFza3MpO1xuICByZXR1cm4ge1xuICAgIHByb21pc2U6IG5ldyBQcm9taXNlKChmdWxmaWxsKSA9PiB7XG4gICAgICB0YXNrcy5hZGQodGFzayA9IHsgYzogY2FsbGJhY2ssIGY6IGZ1bGZpbGwgfSk7XG4gICAgfSksXG4gICAgYWJvcnQoKSB7XG4gICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzKHRhcmdldCwgc3R5bGVfc2hlZXRfaWQsIHN0eWxlcykge1xuICBjb25zdCBhcHBlbmRfc3R5bGVzX3RvID0gZ2V0X3Jvb3RfZm9yX3N0eWxlKHRhcmdldCk7XG4gIGlmICghYXBwZW5kX3N0eWxlc190by5nZXRFbGVtZW50QnlJZChzdHlsZV9zaGVldF9pZCkpIHtcbiAgICBjb25zdCBzdHlsZSA9IGVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICBzdHlsZS5pZCA9IHN0eWxlX3NoZWV0X2lkO1xuICAgIHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVzO1xuICAgIGFwcGVuZF9zdHlsZXNoZWV0KGFwcGVuZF9zdHlsZXNfdG8sIHN0eWxlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpIHtcbiAgaWYgKCFub2RlKVxuICAgIHJldHVybiBkb2N1bWVudDtcbiAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0Um9vdE5vZGUgPyBub2RlLmdldFJvb3ROb2RlKCkgOiBub2RlLm93bmVyRG9jdW1lbnQ7XG4gIGlmIChyb290ICYmIHJvb3QuaG9zdCkge1xuICAgIHJldHVybiByb290O1xuICB9XG4gIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSB7XG4gIGNvbnN0IHN0eWxlX2VsZW1lbnQgPSBlbGVtZW50KFwic3R5bGVcIik7XG4gIGFwcGVuZF9zdHlsZXNoZWV0KGdldF9yb290X2Zvcl9zdHlsZShub2RlKSwgc3R5bGVfZWxlbWVudCk7XG4gIHJldHVybiBzdHlsZV9lbGVtZW50LnNoZWV0O1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlc2hlZXQobm9kZSwgc3R5bGUpIHtcbiAgYXBwZW5kKG5vZGUuaGVhZCB8fCBub2RlLCBzdHlsZSk7XG4gIHJldHVybiBzdHlsZS5zaGVldDtcbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGRldGFjaChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgfVxufVxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gc3ZnX2VsZW1lbnQobmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgbmFtZSk7XG59XG5mdW5jdGlvbiB0ZXh0KGRhdGEpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gIHJldHVybiB0ZXh0KFwiIFwiKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gdGV4dChcIlwiKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICByZXR1cm4gKCkgPT4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRfZGVmYXVsdChmbikge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHN0b3BfcHJvcGFnYXRpb24oZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gIGVsc2UgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgIT09IHZhbHVlKVxuICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudDIpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudDIuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YSh0ZXh0MiwgZGF0YSkge1xuICBkYXRhID0gXCJcIiArIGRhdGE7XG4gIGlmICh0ZXh0Mi5kYXRhID09PSBkYXRhKVxuICAgIHJldHVybjtcbiAgdGV4dDIuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9zdHlsZShub2RlLCBrZXksIHZhbHVlLCBpbXBvcnRhbnQpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlLCBpbXBvcnRhbnQgPyBcImltcG9ydGFudFwiIDogXCJcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50MiwgbmFtZSwgdG9nZ2xlKSB7XG4gIGVsZW1lbnQyLmNsYXNzTGlzdFt0b2dnbGUgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGJ1YmJsZXMgPSBmYWxzZSwgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkge1xuICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgYnViYmxlcywgY2FuY2VsYWJsZSwgZGV0YWlsKTtcbiAgcmV0dXJuIGU7XG59XG52YXIgSHRtbFRhZyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaXNfc3ZnID0gZmFsc2UpIHtcbiAgICB0aGlzLmlzX3N2ZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNfc3ZnID0gaXNfc3ZnO1xuICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gIH1cbiAgYyhodG1sKSB7XG4gICAgdGhpcy5oKGh0bWwpO1xuICB9XG4gIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgaWYgKCF0aGlzLmUpIHtcbiAgICAgIGlmICh0aGlzLmlzX3N2ZylcbiAgICAgICAgdGhpcy5lID0gc3ZnX2VsZW1lbnQodGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZVR5cGUgPT09IDExID8gXCJURU1QTEFURVwiIDogdGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgIHRoaXMudCA9IHRhcmdldC50YWdOYW1lICE9PSBcIlRFTVBMQVRFXCIgPyB0YXJnZXQgOiB0YXJnZXQuY29udGVudDtcbiAgICAgIHRoaXMuYyhodG1sKTtcbiAgICB9XG4gICAgdGhpcy5pKGFuY2hvcik7XG4gIH1cbiAgaChodG1sKSB7XG4gICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUubm9kZU5hbWUgPT09IFwiVEVNUExBVEVcIiA/IHRoaXMuZS5jb250ZW50LmNoaWxkTm9kZXMgOiB0aGlzLmUuY2hpbGROb2Rlcyk7XG4gIH1cbiAgaShhbmNob3IpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgIH1cbiAgfVxuICBwKGh0bWwpIHtcbiAgICB0aGlzLmQoKTtcbiAgICB0aGlzLmgoaHRtbCk7XG4gICAgdGhpcy5pKHRoaXMuYSk7XG4gIH1cbiAgZCgpIHtcbiAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICB9XG59O1xuZnVuY3Rpb24gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoY29tcG9uZW50LCBwcm9wcykge1xuICByZXR1cm4gbmV3IGNvbXBvbmVudChwcm9wcyk7XG59XG52YXIgbWFuYWdlZF9zdHlsZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xudmFyIGFjdGl2ZSA9IDA7XG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICBsZXQgaGFzaDIgPSA1MzgxO1xuICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gIHdoaWxlIChpLS0pXG4gICAgaGFzaDIgPSAoaGFzaDIgPDwgNSkgLSBoYXNoMiBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuICByZXR1cm4gaGFzaDIgPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKSB7XG4gIGNvbnN0IGluZm8gPSB7IHN0eWxlc2hlZXQ6IGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpLCBydWxlczoge30gfTtcbiAgbWFuYWdlZF9zdHlsZXMuc2V0KGRvYywgaW5mbyk7XG4gIHJldHVybiBpbmZvO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICBjb25zdCBzdGVwID0gMTYuNjY2IC8gZHVyYXRpb247XG4gIGxldCBrZXlmcmFtZXMgPSBcIntcXG5cIjtcbiAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgY29uc3QgdCA9IGEgKyAoYiAtIGEpICogZWFzZShwKTtcbiAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cbmA7XG4gIH1cbiAgY29uc3QgcnVsZSA9IGtleWZyYW1lcyArIGAxMDAlIHske2ZuKGIsIDEgLSBiKX19XG59YDtcbiAgY29uc3QgbmFtZSA9IGBfX3N2ZWx0ZV8ke2hhc2gocnVsZSl9XyR7dWlkfWA7XG4gIGNvbnN0IGRvYyA9IGdldF9yb290X2Zvcl9zdHlsZShub2RlKTtcbiAgY29uc3QgeyBzdHlsZXNoZWV0LCBydWxlcyB9ID0gbWFuYWdlZF9zdHlsZXMuZ2V0KGRvYykgfHwgY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSk7XG4gIGlmICghcnVsZXNbbmFtZV0pIHtcbiAgICBydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7bmFtZX0gJHtydWxlfWAsIHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgfVxuICBjb25zdCBhbmltYXRpb24gPSBub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCBcIlwiO1xuICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiBcIlwifSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICBhY3RpdmUgKz0gMTtcbiAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG4gIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8IFwiXCIpLnNwbGl0KFwiLCBcIik7XG4gIGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIoXG4gICAgbmFtZSA/IChhbmltKSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIDogKGFuaW0pID0+IGFuaW0uaW5kZXhPZihcIl9fc3ZlbHRlXCIpID09PSAtMVxuICAgIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcbiAgKTtcbiAgY29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuICBpZiAoZGVsZXRlZCkge1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKFwiLCBcIik7XG4gICAgYWN0aXZlIC09IGRlbGV0ZWQ7XG4gICAgaWYgKCFhY3RpdmUpXG4gICAgICBjbGVhcl9ydWxlcygpO1xuICB9XG59XG5mdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcbiAgcmFmKCgpID0+IHtcbiAgICBpZiAoYWN0aXZlKVxuICAgICAgcmV0dXJuO1xuICAgIG1hbmFnZWRfc3R5bGVzLmZvckVhY2goKGluZm8pID0+IHtcbiAgICAgIGNvbnN0IHsgb3duZXJOb2RlIH0gPSBpbmZvLnN0eWxlc2hlZXQ7XG4gICAgICBpZiAob3duZXJOb2RlKVxuICAgICAgICBkZXRhY2gob3duZXJOb2RlKTtcbiAgICB9KTtcbiAgICBtYW5hZ2VkX3N0eWxlcy5jbGVhcigpO1xuICB9KTtcbn1cbnZhciBjdXJyZW50X2NvbXBvbmVudDtcbmZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgY3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG4gIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uXCIpO1xuICByZXR1cm4gY3VycmVudF9jb21wb25lbnQ7XG59XG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG52YXIgZGlydHlfY29tcG9uZW50cyA9IFtdO1xudmFyIGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG52YXIgcmVuZGVyX2NhbGxiYWNrcyA9IFtdO1xudmFyIGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xudmFyIHJlc29sdmVkX3Byb21pc2UgPSAvKiBAX19QVVJFX18gKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG52YXIgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICB1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICByZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG4gIHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcbiAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxudmFyIHNlZW5fY2FsbGJhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbnZhciBmbHVzaGlkeCA9IDA7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgaWYgKGZsdXNoaWR4ICE9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICBkbyB7XG4gICAgdHJ5IHtcbiAgICAgIHdoaWxlIChmbHVzaGlkeCA8IGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHNbZmx1c2hpZHhdO1xuICAgICAgICBmbHVzaGlkeCsrO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgZmx1c2hpZHggPSAwO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgIGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICBmbHVzaGlkeCA9IDA7XG4gICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gIHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gIH1cbiAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuICBzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xuICBzZXRfY3VycmVudF9jb21wb25lbnQoc2F2ZWRfY29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZSgkJCkge1xuICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAkJC51cGRhdGUoKTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgJCQuZGlydHkgPSBbLTFdO1xuICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoX3JlbmRlcl9jYWxsYmFja3MoZm5zKSB7XG4gIGNvbnN0IGZpbHRlcmVkID0gW107XG4gIGNvbnN0IHRhcmdldHMgPSBbXTtcbiAgcmVuZGVyX2NhbGxiYWNrcy5mb3JFYWNoKChjKSA9PiBmbnMuaW5kZXhPZihjKSA9PT0gLTEgPyBmaWx0ZXJlZC5wdXNoKGMpIDogdGFyZ2V0cy5wdXNoKGMpKTtcbiAgdGFyZ2V0cy5mb3JFYWNoKChjKSA9PiBjKCkpO1xuICByZW5kZXJfY2FsbGJhY2tzID0gZmlsdGVyZWQ7XG59XG52YXIgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gIGlmICghcHJvbWlzZSkge1xuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyBcImludHJvXCIgOiBcIm91dHJvXCJ9JHtraW5kfWApKTtcbn1cbnZhciBvdXRyb2luZyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG52YXIgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICBvdXRyb3MgPSB7XG4gICAgcjogMCxcbiAgICBjOiBbXSxcbiAgICBwOiBvdXRyb3NcbiAgICAvLyBwYXJlbnQgZ3JvdXBcbiAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrX291dHJvcygpIHtcbiAgaWYgKCFvdXRyb3Mucikge1xuICAgIHJ1bl9hbGwob3V0cm9zLmMpO1xuICB9XG4gIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgaWYgKGJsb2NrICYmIGJsb2NrLmkpIHtcbiAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgIGJsb2NrLmkobG9jYWwpO1xuICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaDIsIGNhbGxiYWNrKSB7XG4gIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgaWYgKG91dHJvaW5nLmhhcyhibG9jaykpXG4gICAgICByZXR1cm47XG4gICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGRldGFjaDIpXG4gICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBibG9jay5vKGxvY2FsKTtcbiAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn1cbnZhciBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7IGRpcmVjdGlvbjogXCJib3RoXCIgfTtcbiAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcywgb3B0aW9ucyk7XG4gIGxldCB0ID0gaW50cm8gPyAwIDogMTtcbiAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICBsZXQgYW5pbWF0aW9uX25hbWUgPSBudWxsO1xuICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQzKHByb2dyYW0sIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZCA9IHByb2dyYW0uYiAtIHQ7XG4gICAgZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IHQsXG4gICAgICBiOiBwcm9ncmFtLmIsXG4gICAgICBkLFxuICAgICAgZHVyYXRpb24sXG4gICAgICBzdGFydDogcHJvZ3JhbS5zdGFydCxcbiAgICAgIGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuICAgICAgZ3JvdXA6IHByb2dyYW0uZ3JvdXBcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdvKGIpIHtcbiAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICBzdGFydDogbm93KCkgKyBkZWxheSxcbiAgICAgIGJcbiAgICB9O1xuICAgIGlmICghYikge1xuICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgfVxuICAgIGlmIChydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3NzKSB7XG4gICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgfVxuICAgICAgaWYgKGIpXG4gICAgICAgIHRpY2soMCwgMSk7XG4gICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0Myhwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsIFwic3RhcnRcIikpO1xuICAgICAgbG9vcCgobm93MikgPT4ge1xuICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdzIgPiBwZW5kaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0MyhwZW5kaW5nX3Byb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBcInN0YXJ0XCIpO1xuICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgaWYgKG5vdzIgPj0gcnVubmluZ19wcm9ncmFtLmVuZCkge1xuICAgICAgICAgICAgdGljayh0ID0gcnVubmluZ19wcm9ncmFtLmIsIDEgLSB0KTtcbiAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBcImVuZFwiKTtcbiAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghLS1ydW5uaW5nX3Byb2dyYW0uZ3JvdXAucilcbiAgICAgICAgICAgICAgICAgIHJ1bl9hbGwocnVubmluZ19wcm9ncmFtLmdyb3VwLmMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm93MiA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub3cyIC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgcnVuKGIpIHtcbiAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG4gICAgICAgICAgZ28oYik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ28oYik7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbmQoKSB7XG4gICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZTIsIGluZm8pIHtcbiAgY29uc3QgdG9rZW4gPSBpbmZvLnRva2VuID0ge307XG4gIGZ1bmN0aW9uIHVwZGF0ZTIodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICByZXR1cm47XG4gICAgaW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICBpZiAoa2V5ICE9PSB2b2lkIDApIHtcbiAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgIGlmIChpbmZvLmJsb2NrKSB7XG4gICAgICBpZiAoaW5mby5ibG9ja3MpIHtcbiAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2syLCBpKSA9PiB7XG4gICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrMikge1xuICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jazIsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jazIpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrLmMoKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICB9XG4gICAgaW5mby5ibG9jayA9IGJsb2NrO1xuICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgZmx1c2goKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzX3Byb21pc2UocHJvbWlzZTIpKSB7XG4gICAgY29uc3QgY3VycmVudF9jb21wb25lbnQyID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcHJvbWlzZTIudGhlbigodmFsdWUpID0+IHtcbiAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudDIpO1xuICAgICAgdXBkYXRlMihpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudDIpO1xuICAgICAgdXBkYXRlMihpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICBpZiAoIWluZm8uaGFzQ2F0Y2gpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICB1cGRhdGUyKGluZm8ucGVuZGluZywgMCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICB1cGRhdGUyKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgcHJvbWlzZTIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlMjtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaChpbmZvLCBjdHgsIGRpcnR5KSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjb25zdCB7IHJlc29sdmVkIH0gPSBpbmZvO1xuICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLnRoZW4pIHtcbiAgICBjaGlsZF9jdHhbaW5mby52YWx1ZV0gPSByZXNvbHZlZDtcbiAgfVxuICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLmNhdGNoKSB7XG4gICAgY2hpbGRfY3R4W2luZm8uZXJyb3JdID0gcmVzb2x2ZWQ7XG4gIH1cbiAgaW5mby5ibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xufVxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gIGJsb2NrLmQoMSk7XG4gIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jazIsIG5leHQsIGdldF9jb250ZXh0KSB7XG4gIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gIGxldCBpID0gbztcbiAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgd2hpbGUgKGktLSlcbiAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gIGNvbnN0IG5ld19sb29rdXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBkZWx0YXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCB1cGRhdGVzID0gW107XG4gIGkgPSBuO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcbiAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgIGlmICghYmxvY2spIHtcbiAgICAgIGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2syKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgIGJsb2NrLmMoKTtcbiAgICB9IGVsc2UgaWYgKGR5bmFtaWMpIHtcbiAgICAgIHVwZGF0ZXMucHVzaCgoKSA9PiBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpKTtcbiAgICB9XG4gICAgbmV3X2xvb2t1cC5zZXQoa2V5LCBuZXdfYmxvY2tzW2ldID0gYmxvY2spO1xuICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgfVxuICBjb25zdCB3aWxsX21vdmUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBjb25zdCBkaWRfbW92ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGZ1bmN0aW9uIGluc2VydDIoYmxvY2spIHtcbiAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgIGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG4gICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgIG4tLTtcbiAgfVxuICB3aGlsZSAobyAmJiBuKSB7XG4gICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgY29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG4gICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgby0tO1xuICAgICAgbi0tO1xuICAgIH0gZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG4gICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICAgIG8tLTtcbiAgICB9IGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgIGluc2VydDIobmV3X2Jsb2NrKTtcbiAgICB9IGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgby0tO1xuICAgIH0gZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgIGluc2VydDIobmV3X2Jsb2NrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgIG8tLTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG8tLSkge1xuICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSlcbiAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICB9XG4gIHdoaWxlIChuKVxuICAgIGluc2VydDIobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICBydW5fYWxsKHVwZGF0ZXMpO1xuICByZXR1cm4gbmV3X2Jsb2Nrcztcbn1cbmZ1bmN0aW9uIGJpbmQoY29tcG9uZW50LCBuYW1lLCBjYWxsYmFjaykge1xuICBjb25zdCBpbmRleCA9IGNvbXBvbmVudC4kJC5wcm9wc1tuYW1lXTtcbiAgaWYgKGluZGV4ICE9PSB2b2lkIDApIHtcbiAgICBjb21wb25lbnQuJCQuYm91bmRbaW5kZXhdID0gY2FsbGJhY2s7XG4gICAgY2FsbGJhY2soY29tcG9uZW50LiQkLmN0eFtpbmRleF0pO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVfY29tcG9uZW50KGJsb2NrKSB7XG4gIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIHRhcmdldCwgYW5jaG9yLCBjdXN0b21FbGVtZW50KSB7XG4gIGNvbnN0IHsgZnJhZ21lbnQsIGFmdGVyX3VwZGF0ZSB9ID0gY29tcG9uZW50LiQkO1xuICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgaWYgKCFjdXN0b21FbGVtZW50KSB7XG4gICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IGNvbXBvbmVudC4kJC5vbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgaWYgKGNvbXBvbmVudC4kJC5vbl9kZXN0cm95KSB7XG4gICAgICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICB9XG4gICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICB9KTtcbiAgfVxuICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gIGNvbnN0ICQkID0gY29tcG9uZW50LiQkO1xuICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICBmbHVzaF9yZW5kZXJfY2FsbGJhY2tzKCQkLmFmdGVyX3VwZGF0ZSk7XG4gICAgcnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcbiAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5kKGRldGFjaGluZyk7XG4gICAgJCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAkJC5jdHggPSBbXTtcbiAgfVxufVxuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcbiAgaWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcbiAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICBjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcbiAgfVxuICBjb21wb25lbnQuJCQuZGlydHlbaSAvIDMxIHwgMF0gfD0gMSA8PCBpICUgMzE7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UyLCBjcmVhdGVfZnJhZ21lbnQyLCBub3RfZXF1YWwsIHByb3BzLCBhcHBlbmRfc3R5bGVzMiwgZGlydHkgPSBbLTFdKSB7XG4gIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgIGZyYWdtZW50OiBudWxsLFxuICAgIGN0eDogW10sXG4gICAgLy8gc3RhdGVcbiAgICBwcm9wcyxcbiAgICB1cGRhdGU6IG5vb3AsXG4gICAgbm90X2VxdWFsLFxuICAgIGJvdW5kOiBibGFua19vYmplY3QoKSxcbiAgICAvLyBsaWZlY3ljbGVcbiAgICBvbl9tb3VudDogW10sXG4gICAgb25fZGVzdHJveTogW10sXG4gICAgb25fZGlzY29ubmVjdDogW10sXG4gICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICBjb250ZXh0OiBuZXcgTWFwKG9wdGlvbnMuY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKSxcbiAgICBkaXJ0eSxcbiAgICBza2lwX2JvdW5kOiBmYWxzZSxcbiAgICByb290OiBvcHRpb25zLnRhcmdldCB8fCBwYXJlbnRfY29tcG9uZW50LiQkLnJvb3RcbiAgfTtcbiAgYXBwZW5kX3N0eWxlczIgJiYgYXBwZW5kX3N0eWxlczIoJCQucm9vdCk7XG4gIGxldCByZWFkeSA9IGZhbHNlO1xuICAkJC5jdHggPSBpbnN0YW5jZTIgPyBpbnN0YW5jZTIoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSByZXN0Lmxlbmd0aCA/IHJlc3RbMF0gOiByZXQ7XG4gICAgaWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2ldLCAkJC5jdHhbaV0gPSB2YWx1ZSkpIHtcbiAgICAgIGlmICghJCQuc2tpcF9ib3VuZCAmJiAkJC5ib3VuZFtpXSlcbiAgICAgICAgJCQuYm91bmRbaV0odmFsdWUpO1xuICAgICAgaWYgKHJlYWR5KVxuICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0pIDogW107XG4gICQkLnVwZGF0ZSgpO1xuICByZWFkeSA9IHRydWU7XG4gIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50MiA/IGNyZWF0ZV9mcmFnbWVudDIoJCQuY3R4KSA6IGZhbHNlO1xuICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICBpZiAob3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50Lmwobm9kZXMpO1xuICAgICAgbm9kZXMuZm9yRWFjaChkZXRhY2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICBmbHVzaCgpO1xuICB9XG4gIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbn1cbnZhciBTdmVsdGVDb21wb25lbnQgPSBjbGFzcyB7XG4gICRkZXN0cm95KCkge1xuICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICB9XG4gICRvbih0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmICghaXNfZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pO1xuICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG4gICRzZXQoJCRwcm9wcykge1xuICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG52YXIgc3Vic2NyaWJlcl9xdWV1ZSA9IFtdO1xuZnVuY3Rpb24gd3JpdGFibGUodmFsdWUsIHN0YXJ0ID0gbm9vcCkge1xuICBsZXQgc3RvcDtcbiAgY29uc3Qgc3Vic2NyaWJlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBmdW5jdGlvbiBzZXQobmV3X3ZhbHVlKSB7XG4gICAgaWYgKHNhZmVfbm90X2VxdWFsKHZhbHVlLCBuZXdfdmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IG5ld192YWx1ZTtcbiAgICAgIGlmIChzdG9wKSB7XG4gICAgICAgIGNvbnN0IHJ1bl9xdWV1ZSA9ICFzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDtcbiAgICAgICAgZm9yIChjb25zdCBzdWJzY3JpYmVyIG9mIHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgc3Vic2NyaWJlclsxXSgpO1xuICAgICAgICAgIHN1YnNjcmliZXJfcXVldWUucHVzaChzdWJzY3JpYmVyLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bl9xdWV1ZSkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZVtpXVswXShzdWJzY3JpYmVyX3F1ZXVlW2kgKyAxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1YnNjcmliZXJfcXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUyKGZuKSB7XG4gICAgc2V0KGZuKHZhbHVlKSk7XG4gIH1cbiAgZnVuY3Rpb24gc3Vic2NyaWJlMihydW4yLCBpbnZhbGlkYXRlID0gbm9vcCkge1xuICAgIGNvbnN0IHN1YnNjcmliZXIgPSBbcnVuMiwgaW52YWxpZGF0ZV07XG4gICAgc3Vic2NyaWJlcnMuYWRkKHN1YnNjcmliZXIpO1xuICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAxKSB7XG4gICAgICBzdG9wID0gc3RhcnQoc2V0KSB8fCBub29wO1xuICAgIH1cbiAgICBydW4yKHZhbHVlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDAgJiYgc3RvcCkge1xuICAgICAgICBzdG9wKCk7XG4gICAgICAgIHN0b3AgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHsgc2V0LCB1cGRhdGU6IHVwZGF0ZTIsIHN1YnNjcmliZTogc3Vic2NyaWJlMiB9O1xufVxudmFyIEFwcFN0b3JlID0gd3JpdGFibGUoe1xuICBpbml0aWFsVmFsdWU6IHRydWUsXG4gIGN1c3RvbUZpZWxkczogW10sXG4gIGlzUGFpZDogZmFsc2UsXG4gIGJyYW5kaW5nOiB7XG4gICAgbG9nbzogXCJcIixcbiAgICBjb2xvcnM6IHtcbiAgICAgIGxpZ2h0TW9kZToge31cbiAgICB9XG4gIH0sXG4gIGF1dGhQcm92aWRlcnM6IFtdLFxuICBhZGRpdGlvbmFsQXV0aE1ldGhvZHM6IHtcbiAgICBwYXNzd29yZGxlc3M6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgaXNEZWZhdWx0OiBmYWxzZVxuICAgIH1cbiAgfVxufSk7XG52YXIgVGV4dFN0b3JlID0gd3JpdGFibGUoe1xuICB0ZXh0OiB7XG4gICAgLy8gXCJsb2dpbl90b195b3VyX2FjY291bnRcIjogXCJMb2dpbiB0byB5b3VyIGFjY291bnQgKFQpXCIsXG4gICAgLy8gXCJkb250X2hhdmVfYW5fYWNjb3VudFwiOiBcIkRvbid0IGhhdmUgYW4gYWNjb3VudD8gKFQpXCIsXG4gICAgLy8gXCJlbWFpbF9hZGRyZXNzXCI6IFwiRW1haWwgQWRkcmVzcyAoVClcIixcbiAgICAvLyBcImVtYWlsX2Vycm9yX21lc3NhZ2VcIjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzIChUKVwiLFxuICAgIC8vIFwicGFzc3dvcmRcIjogXCJQYXNzd29yZCAoVClcIixcbiAgICAvLyBcInBhc3N3b3JkX3BsYWNlaG9sZGVyXCI6IFwiRW50ZXIgcGFzc3dvcmQgKFQpXCIsXG4gICAgLy8gXCJwYXNzd29yZF9lcnJvcl9tZXNzYWdlXCI6IFwiTWluaW11bSA4IGNoYXJhY3RlcnMgcmVxdWlyZWQgKFQpXCIsXG4gICAgLy8gXCJmb3Jnb3RfcGFzc3dvcmRcIjogXCJGb3Jnb3QgcGFzc3dvcmQ/IChUKVwiLFxuICAgIC8vIFwibG9naW5cIjogXCJMb2cgaW4gKFQpXCIsXG4gICAgLy8gXCJjb250aW51ZV93aXRoXCI6IFwiQ29udGludWUgd2l0aCAoVClcIixcbiAgICAvLyBcIm9yXCI6IFwib3IgKFQpXCIsXG4gICAgLy8gXCJyZXNldF95b3VyX3Bhc3N3b3JkXCI6IFwiUmVzZXQgeW91ciBwYXNzd29yZCAoVClcIixcbiAgICAvLyBcInJlc2V0X2luc3RydWN0aW9uc1wiOiBcIldl4oCZbGwgZW1haWwgeW91IGEgc2VjdXJlIGxpbmsgdG8gcmVzZXQgdGhlIHBhc3N3b3JkIGZvciB5b3VyIGFjY291bnQuIChUKVwiLFxuICAgIC8vIFwicmVzZXRcIjogXCJTZW5kIGxpbmsgKFQpXCIsXG4gICAgLy8gXCJyZXNldF9hbHJlYWR5X2hhdmVfY29kZVwiOiBcIkkgYWxyZWFkeSBoYXZlIGEgY29kZSAoVClcIixcbiAgICAvLyBcInJlc2V0X2VudGVyX2NvZGVcIjogXCJFbnRlciB5b3VyIDYtZGlnaXQgY29kZSAoVClcIixcbiAgICAvLyBcInJlc2V0X2NvbmZpcm1fcmVzZXRcIjogXCJDb25maXJtICYgUmVzZXQgKFQpXCIsXG4gIH1cbn0pO1xudmFyIGdldF9kZWZhdWx0X3Nsb3RfY2hhbmdlcyA9IChkaXJ0eSkgPT4gKHsgbWF0Y2hlczogZGlydHkgJiAvKm1hdGNoZXMqL1xuMSB9KTtcbnZhciBnZXRfZGVmYXVsdF9zbG90X2NvbnRleHQgPSAoY3R4KSA9PiAoeyBtYXRjaGVzOiAoXG4gIC8qbWF0Y2hlcyovXG4gIGN0eFswXVxuKSB9KTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxbihjdHgpIHtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvbnN0IGRlZmF1bHRfc2xvdF90ZW1wbGF0ZSA9IChcbiAgICAvKiNzbG90cyovXG4gICAgY3R4WzRdLmRlZmF1bHRcbiAgKTtcbiAgY29uc3QgZGVmYXVsdF9zbG90ID0gY3JlYXRlX3Nsb3QoXG4gICAgZGVmYXVsdF9zbG90X3RlbXBsYXRlLFxuICAgIGN0eCxcbiAgICAvKiQkc2NvcGUqL1xuICAgIGN0eFszXSxcbiAgICBnZXRfZGVmYXVsdF9zbG90X2NvbnRleHRcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgaWYgKGRlZmF1bHRfc2xvdClcbiAgICAgICAgZGVmYXVsdF9zbG90LmMoKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGlmIChkZWZhdWx0X3Nsb3QpIHtcbiAgICAgICAgZGVmYXVsdF9zbG90Lm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmIChkZWZhdWx0X3Nsb3QpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRfc2xvdC5wICYmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qJCRzY29wZSwgbWF0Y2hlcyovXG4gICAgICAgIDkpKSB7XG4gICAgICAgICAgdXBkYXRlX3Nsb3RfYmFzZShcbiAgICAgICAgICAgIGRlZmF1bHRfc2xvdCxcbiAgICAgICAgICAgIGRlZmF1bHRfc2xvdF90ZW1wbGF0ZSxcbiAgICAgICAgICAgIGN0eDIsXG4gICAgICAgICAgICAvKiQkc2NvcGUqL1xuICAgICAgICAgICAgY3R4MlszXSxcbiAgICAgICAgICAgICFjdXJyZW50ID8gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKFxuICAgICAgICAgICAgICAvKiQkc2NvcGUqL1xuICAgICAgICAgICAgICBjdHgyWzNdXG4gICAgICAgICAgICApIDogZ2V0X3Nsb3RfY2hhbmdlcyhcbiAgICAgICAgICAgICAgZGVmYXVsdF9zbG90X3RlbXBsYXRlLFxuICAgICAgICAgICAgICAvKiQkc2NvcGUqL1xuICAgICAgICAgICAgICBjdHgyWzNdLFxuICAgICAgICAgICAgICBkaXJ0eSxcbiAgICAgICAgICAgICAgZ2V0X2RlZmF1bHRfc2xvdF9jaGFuZ2VzXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZ2V0X2RlZmF1bHRfc2xvdF9jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oZGVmYXVsdF9zbG90LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGRlZmF1bHRfc2xvdCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZWZhdWx0X3Nsb3QpXG4gICAgICAgIGRlZmF1bHRfc2xvdC5kKGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkSigkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyAkJHNsb3RzOiBzbG90cyA9IHt9LCAkJHNjb3BlIH0gPSAkJHByb3BzO1xuICBsZXQgeyBxdWVyeSB9ID0gJCRwcm9wcztcbiAgbGV0IG1xbDtcbiAgbGV0IG1xbExpc3RlbmVyO1xuICBsZXQgd2FzTW91bnRlZCA9IGZhbHNlO1xuICBsZXQgbWF0Y2hlcyA9IGZhbHNlO1xuICBvbk1vdW50KCgpID0+IHtcbiAgICAkJGludmFsaWRhdGUoMiwgd2FzTW91bnRlZCA9IHRydWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZW1vdmVBY3RpdmVMaXN0ZW5lcigpO1xuICAgIH07XG4gIH0pO1xuICBmdW5jdGlvbiBhZGROZXdMaXN0ZW5lcihxdWVyeTIpIHtcbiAgICBtcWwgPSB3aW5kb3cubWF0Y2hNZWRpYShxdWVyeTIpO1xuICAgIG1xbExpc3RlbmVyID0gKHYpID0+ICQkaW52YWxpZGF0ZSgwLCBtYXRjaGVzID0gdi5tYXRjaGVzKTtcbiAgICBtcWwuYWRkTGlzdGVuZXIobXFsTGlzdGVuZXIpO1xuICAgICQkaW52YWxpZGF0ZSgwLCBtYXRjaGVzID0gbXFsLm1hdGNoZXMpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUFjdGl2ZUxpc3RlbmVyKCkge1xuICAgIGlmIChtcWwgJiYgbXFsTGlzdGVuZXIpIHtcbiAgICAgIG1xbC5yZW1vdmVMaXN0ZW5lcihtcWxMaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcInF1ZXJ5XCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMSwgcXVlcnkgPSAkJHByb3BzMi5xdWVyeSk7XG4gICAgaWYgKFwiJCRzY29wZVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDMsICQkc2NvcGUgPSAkJHByb3BzMi4kJHNjb3BlKTtcbiAgfTtcbiAgJCRzZWxmLiQkLnVwZGF0ZSA9ICgpID0+IHtcbiAgICBpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyp3YXNNb3VudGVkLCBxdWVyeSovXG4gICAgNikge1xuICAgICAge1xuICAgICAgICBpZiAod2FzTW91bnRlZCkge1xuICAgICAgICAgIHJlbW92ZUFjdGl2ZUxpc3RlbmVyKCk7XG4gICAgICAgICAgYWRkTmV3TGlzdGVuZXIocXVlcnkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gW21hdGNoZXMsIHF1ZXJ5LCB3YXNNb3VudGVkLCAkJHNjb3BlLCBzbG90c107XG59XG52YXIgTWVkaWFRdWVyeSA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRKLCBjcmVhdGVfZnJhZ21lbnQkMW4sIHNhZmVfbm90X2VxdWFsLCB7IHF1ZXJ5OiAxIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDFtKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgbGV0IGFuaW1hdGVUcmFuc2Zvcm07XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGFuaW1hdGVUcmFuc2Zvcm0gPSBzdmdfZWxlbWVudChcImFuaW1hdGVUcmFuc2Zvcm1cIik7XG4gICAgICBhdHRyKGFuaW1hdGVUcmFuc2Zvcm0sIFwiYXR0cmlidXRlTmFtZVwiLCBcInRyYW5zZm9ybVwiKTtcbiAgICAgIGF0dHIoYW5pbWF0ZVRyYW5zZm9ybSwgXCJhdHRyaWJ1dGVUeXBlXCIsIFwieG1sXCIpO1xuICAgICAgYXR0cihhbmltYXRlVHJhbnNmb3JtLCBcImR1clwiLCBcIjAuNnNcIik7XG4gICAgICBhdHRyKGFuaW1hdGVUcmFuc2Zvcm0sIFwiZnJvbVwiLCBcIjAgMjUgMjVcIik7XG4gICAgICBhdHRyKGFuaW1hdGVUcmFuc2Zvcm0sIFwicmVwZWF0Q291bnRcIiwgXCJpbmRlZmluaXRlXCIpO1xuICAgICAgYXR0cihhbmltYXRlVHJhbnNmb3JtLCBcInRvXCIsIFwiMzYwIDI1IDI1XCIpO1xuICAgICAgYXR0cihhbmltYXRlVHJhbnNmb3JtLCBcInR5cGVcIiwgXCJyb3RhdGVcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwibTQzLjkzNSAyNS4xNDVjMC0xMC4zMTgtOC4zNjQtMTguNjgzLTE4LjY4My0xOC42ODMtMTAuMzE4IDAtMTguNjgzIDguMzY1LTE4LjY4MyAxOC42ODNoNC4wNjhjMC04LjA3MSA2LjU0My0xNC42MTUgMTQuNjE1LTE0LjYxNXMxNC42MTUgNi41NDMgMTQuNjE1IDE0LjYxNWg0LjA2OHpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjQwcHhcIik7XG4gICAgICBhdHRyKHN2ZywgXCJoZWlnaHRcIiwgXCI0MHB4XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZW5hYmxlLWJhY2tncm91bmRcIiwgXCJuZXcgMCAwIDUwIDUwXCIpO1xuICAgICAgc2V0X3N0eWxlKHN2ZywgXCJ6LWluZGV4XCIsIFwiMTAwMDAwMFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZlcnNpb25cIiwgXCIxLjFcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDUwIDUwXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgICBhcHBlbmQocGF0aCwgYW5pbWF0ZVRyYW5zZm9ybSk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIExvYWRpbmdJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQxbSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxbChjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGxvYWRpbmdpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbG9hZGluZ2ljb24gPSBuZXcgTG9hZGluZ0ljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChsb2FkaW5naWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zX19sb2FkZXJcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQobG9hZGluZ2ljb24sIGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obG9hZGluZ2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobG9hZGluZ2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGxvYWRpbmdpY29uKTtcbiAgICB9XG4gIH07XG59XG52YXIgTG9hZGVyID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQxbCwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxayhjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcInNoYXBlLXJlbmRlcmluZ1wiLCBcImdlb21ldHJpY1ByZWNpc2lvblwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTE0IDEuNDFMMTIuNTkgMEw3IDUuNTlMMS40MSAwTDAgMS40MUw1LjU5IDdMMCAxMi41OUwxLjQxIDE0TDcgOC40MUwxMi41OSAxNEwxNCAxMi41OUw4LjQxIDdMMTQgMS40MVpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIHNldF9zdHlsZShzdmcsIFwid2lkdGhcIiwgXCIxMDAlXCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgMCAxNCAxNFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgQ2xvc2VJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQxaywgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxaihjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IGNsb3NlaWNvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgY2xvc2VpY29uID0gbmV3IENsb3NlSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjbG9zZWljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY2xvc2VcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBidXR0b24pO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNsb3NlaWNvbiwgYnV0dG9uLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oYnV0dG9uLCBcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChpc19mdW5jdGlvbihcbiAgICAgICAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICAgICAgICBjdHhbMF1cbiAgICAgICAgICApKVxuICAgICAgICAgICAgY3R4WzBdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0pO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAobmV3X2N0eCwgW2RpcnR5XSkge1xuICAgICAgY3R4ID0gbmV3X2N0eDtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNsb3NlaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjbG9zZWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNsb3NlaWNvbik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkSSgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyBjbG9zZU1vZGFsIH0gPSAkJHByb3BzO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJjbG9zZU1vZGFsXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgY2xvc2VNb2RhbCA9ICQkcHJvcHMyLmNsb3NlTW9kYWwpO1xuICB9O1xuICByZXR1cm4gW2Nsb3NlTW9kYWxdO1xufVxudmFyIENsb3NlQnV0dG9uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJEksIGNyZWF0ZV9mcmFnbWVudCQxaiwgc2FmZV9ub3RfZXF1YWwsIHsgY2xvc2VNb2RhbDogMCB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxaShjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGgwO1xuICBsZXQgcGF0aDE7XG4gIGxldCBwYXRoMjtcbiAgbGV0IHBhdGgzO1xuICBsZXQgcGF0aDQ7XG4gIGxldCBwYXRoNTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoMCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIHBhdGgxID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgcGF0aDIgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBwYXRoMyA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIHBhdGg0ID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgcGF0aDUgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImRcIiwgXCJtMjU5LjA3OCAxOTAuNTgyIDE2Ljc5Ny0zOS42MTFjNy4zMTUtMjAuNDIxIDI2Ljk4Mi0zNC42NjUgNDkuODk3LTM0LjY2NSAxMy4xODcgMCAyNS4zNDQgNC44MTcgMzQuNiAxMi44MThsMzIuODE4IDczLjExOGM5LjY1NiAyMS43MDktLjA5NyA0Ny4xNDQtMjEuNzg2IDU2LjgwOS0yMS42ODggOS42NjYtNDcuMDk3LS4wOTgtNTYuNzUzLTIxLjgwN2wtMzguNTczLTg2LjcyMy0xNyA0MC4wODh2LS4wMjdaXCIpO1xuICAgICAgYXR0cihwYXRoMCwgXCJmaWxsXCIsIFwiIzJBQThGRlwiKTtcbiAgICAgIGF0dHIocGF0aDEsIFwiZFwiLCBcIm0xMTEuMzEgMTY5LjY0IDguMDAyLTE4LjY3OWMtNy4yMi0yMC41ODUtMjYuODItMzUuMzQ1LTQ5Ljg2Ni0zNS4zNDUtMTIuNjc4IDAtMjQuOTAxIDQuODY1LTM0LjAwNyAxMi4zMTQgNi42MDYzLTIuNzk2IDE0LjM0LTMuNTc1IDIxLjk4OC0zLjU3NSAyNi45OTkgMCA0OS40MzUgMTkuNDQ1IDUzLjg4NCA0NS4yODV6XCIpO1xuICAgICAgYXR0cihwYXRoMiwgXCJkXCIsIFwibTExMS4zMSAxNjkuNjQtMjguNjYgNjguMTI2Yy05LjI3NjIgMjEuODc1LTM0LjUxMSAzMi4wODEtNTYuMzY1IDIyLjc5NS0yMS44NTMtOS4yODUtMzIuMDQ5LTM0LjU0NS0yMi43NzMtNTYuNDJsMzEuOTI1LTc2LjIxMWM2Ljc0NDgtMi45ODggMTQuMTQyLTMuNTc1IDIxLjk4OC0zLjU3NSAyNy4wODYgMCA0OS41MzcgMTkuMzIxIDUzLjg4NCA0NS4yODV6XCIpO1xuICAgICAgYXR0cihwYXRoMiwgXCJmaWxsXCIsIFwiIzM5MzkzOVwiKTtcbiAgICAgIGF0dHIocGF0aDMsIFwiZFwiLCBcIm0xOTcuNTcgMTE1LjQ2LTM5Ljc1Ni04OS41MDZjLTcuMTQ4LTE2LjA3LTIyLjkyOS0yNS41OTUtMzkuNDQzLTI1LjUzNy0xNi43ODYtMC4wNTg1NzYtMzIuNzY2IDkuNzg5Ni0zOS43MzYgMjYuMjI3bC00My4xOTkgMTAxLjI4YzkuMTA2NC03LjQ1IDIxLjMyOS0xMi4zMTQgMzQuMDA4LTEyLjMxNCAyMy4wNDYgMCA0Mi42NDYgMTQuNzYgNDkuODY2IDM1LjM0NWwwLjA5MyAwLjMzN2M1Ljc4NCAxLjY1OCAxMS44OTMgMi41NDYgMTguMjEgMi41NDYgMjYuNTc4IDAgNDkuNDg3LTE1LjcyMiA1OS45NTgtMzguMzgyelwiKTtcbiAgICAgIGF0dHIocGF0aDMsIFwiZmlsbFwiLCBcIiMwMTdBQ0VcIik7XG4gICAgICBhdHRyKHBhdGg0LCBcImRcIiwgXCJtMTk3LjU3IDExNS40NmMtMTAuMDcxIDIxLjc5Ni0zMS42NTEgMzcuMTcyLTU2LjkzNCAzOC4zMTQtMS4wNTIgMC4wNS0yLjExIDAuMDc1LTMuMTc1IDAuMDc1LTYuMzE2IDAtMTIuNDI1LTAuODg4LTE4LjIxLTIuNTQ2bDM4LjQyNSA4Ni4zODdjMy45OTYgOC45ODYgMTAuNjkyIDE1LjkyNiAxOC43MDYgMjAuMjg4IDEuOTA4IDEuMTk2IDMuOTM1IDIuMjU3IDYuMDczIDMuMTY1IDIxLjg1MyA5LjI4NiA0Ny4wODgtMC45MiA1Ni4zNjQtMjIuNzk1bDM3LjA1NS04Ny4zODFjNy4zMTUtMjAuNDIxIDI2Ljk4Mi0zNC42NjUgNDkuODk2LTM0LjY2NSAxMy4xODggMCAyNS4zNDUgNC44MTcgMzQuNjAxIDEyLjgxOGwtNDUuOTk0LTEwMy4xN2MtNy4xNDgtMTYuMDctMjIuOTI5LTI1LjU5NS0zOS40NDItMjUuNTM3LTE2Ljc4Ni0wLjA1ODU3Ni0zMi43NjcgOS43ODk2LTM5LjczNyAyNi4yMjdsLTM3LjYyOCA4OC44MTZ6XCIpO1xuICAgICAgYXR0cihwYXRoNCwgXCJmaWxsXCIsIFwiI0FFREVGRlwiKTtcbiAgICAgIGF0dHIocGF0aDUsIFwiZFwiLCBcIm0zMjUuNzcgMTE2LjMxYy0yMi45MTUgMC00Mi4zNzkgMTMuNzk1LTQ5LjY5NCAzNC4yMTZsOC45MTkgMjAuMDUyYzUuODczLTI1Ljc2MyAyOC45MzEtNDQuOTg5IDU2LjQ4MS00NC45ODkgNi42NyAwIDEyLjkzMSAxLjQ2NSAxOC44OTQgMy41MzktOS4yNTYtOC0yMS40MTMtMTIuODE4LTM0LjYtMTIuODE4elwiKTtcbiAgICAgIGF0dHIocGF0aDUsIFwiZmlsbFwiLCBcIiMyRDkxRDdcIik7XG4gICAgICBzZXRfc3R5bGUoc3ZnLCBcIndpZHRoXCIsIFwiMTAwJVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgMzk3IDI2NVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoMCk7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoMSk7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoMik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoMyk7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoNCk7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoNSk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIE1lbWJlcnN0YWNrSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkMWksIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayRpKGN0eCkge1xuICBsZXQgbWVtYmVyc3RhY2tpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbWVtYmVyc3RhY2tpY29uID0gbmV3IE1lbWJlcnN0YWNrSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobWVtYmVyc3RhY2tpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtZW1iZXJzdGFja2ljb24sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihtZW1iZXJzdGFja2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobWVtYmVyc3RhY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobWVtYmVyc3RhY2tpY29uLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRBKGN0eCkge1xuICBsZXQgaW1nO1xuICBsZXQgaW1nX3NyY192YWx1ZTtcbiAgbGV0IGltZ19hbHRfdmFsdWU7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGltZyA9IGVsZW1lbnQoXCJpbWdcIik7XG4gICAgICBpZiAoIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qYXBwKi9cbiAgICAgIGN0eFswXS5icmFuZGluZy5sb2dvKSlcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUgPSAvKmFwcCovXG4gICAgICBjdHhbMF0ubmFtZSk7XG4gICAgICBhdHRyKGltZywgXCJkYXRhLWN5XCIsIFwibG9nb1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGltZywgYW5jaG9yKTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qYXBwKi9cbiAgICAgIDEgJiYgIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qYXBwKi9cbiAgICAgIGN0eDJbMF0uYnJhbmRpbmcubG9nbykpIHtcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyphcHAqL1xuICAgICAgMSAmJiBpbWdfYWx0X3ZhbHVlICE9PSAoaW1nX2FsdF92YWx1ZSA9IC8qYXBwKi9cbiAgICAgIGN0eDJbMF0ubmFtZSkpIHtcbiAgICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goaW1nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMWgoY3R4KSB7XG4gIGxldCBmaWd1cmU7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jaztcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9jayRBLCBjcmVhdGVfZWxzZV9ibG9jayRpXTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKFxuICAgICAgLyphcHAqL1xuICAgICAgY3R4MlswXS5icmFuZGluZy5sb2dvXG4gICAgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4KTtcbiAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZmlndXJlID0gZWxlbWVudChcImZpZ3VyZVwiKTtcbiAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIGF0dHIoZmlndXJlLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2ZpZ3VyZVwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGZpZ3VyZSwgYW5jaG9yKTtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLm0oZmlndXJlLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBsZXQgcHJldmlvdXNfYmxvY2tfaW5kZXggPSBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gICAgICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgyKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPT09IHByZXZpb3VzX2Jsb2NrX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICBpZl9ibG9jay5tKGZpZ3VyZSwgbnVsbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZmlndXJlKTtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRIKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCBhcHAgPSB7fTtcbiAgQXBwU3RvcmUuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGFwcCA9IGRhdGEpO1xuICB9KTtcbiAgcmV0dXJuIFthcHBdO1xufVxudmFyIEZpZ3VyZUVsZW1lbnQgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkSCwgY3JlYXRlX2ZyYWdtZW50JDFoLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2skaChjdHgpIHtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IGxvYWRpbmdpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbG9hZGluZ2ljb24gPSBuZXcgTG9hZGluZ0ljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChsb2FkaW5naWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2J1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICBzZXRfc3R5bGUoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXG4gICAgICAgIC8qYnV0dG9uQ29sb3IqL1xuICAgICAgICBjdHhbMl1cbiAgICAgICk7XG4gICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGxvYWRpbmdpY29uLCBidXR0b24sIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmJ1dHRvbkNvbG9yKi9cbiAgICAgIDQpIHtcbiAgICAgICAgc2V0X3N0eWxlKFxuICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIixcbiAgICAgICAgICAvKmJ1dHRvbkNvbG9yKi9cbiAgICAgICAgICBjdHgyWzJdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihsb2FkaW5naWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChsb2FkaW5naWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobG9hZGluZ2ljb24pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayR6KGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgdDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHQgPSB0ZXh0KFxuICAgICAgICAvKmJ1dHRvblRleHQqL1xuICAgICAgICBjdHhbMF1cbiAgICAgICk7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2J1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgICBzZXRfc3R5bGUoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXG4gICAgICAgIC8qYnV0dG9uQ29sb3IqL1xuICAgICAgICBjdHhbMl1cbiAgICAgICk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0KTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qYnV0dG9uVGV4dCovXG4gICAgICAxKVxuICAgICAgICBzZXRfZGF0YShcbiAgICAgICAgICB0LFxuICAgICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgICAgY3R4MlswXVxuICAgICAgICApO1xuICAgICAgaWYgKGRpcnR5ICYgLypidXR0b25Db2xvciovXG4gICAgICA0KSB7XG4gICAgICAgIHNldF9zdHlsZShcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXG4gICAgICAgICAgLypidXR0b25Db2xvciovXG4gICAgICAgICAgY3R4MlsyXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMWcoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jaztcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9jayR6LCBjcmVhdGVfZWxzZV9ibG9jayRoXTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKCEvKmlzTG9hZGluZyovXG4gICAgY3R4MlsxXSlcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eCk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZl9ibG9jay5jKCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ID09PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgaWZfYmxvY2subShkaXYsIG51bGwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkRygkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgJGFwcDtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEFwcFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDMsICRhcHAgPSAkJHZhbHVlKSk7XG4gIGxldCB7IGJ1dHRvblRleHQgPSBcIlN1Ym1pdFwiIH0gPSAkJHByb3BzO1xuICBsZXQgeyBpc0xvYWRpbmcgPSBmYWxzZSB9ID0gJCRwcm9wcztcbiAgbGV0IGJ1dHRvbkNvbG9yID0gXCJyZ2IoNDEsIDk4LCAyNTUpXCI7XG4gIGlmICgkYXBwLmJyYW5kaW5nLmNvbG9ycy5saWdodE1vZGUucHJpbWFyeUJ1dHRvbikge1xuICAgIGJ1dHRvbkNvbG9yID0gJGFwcC5icmFuZGluZy5jb2xvcnMubGlnaHRNb2RlLnByaW1hcnlCdXR0b247XG4gIH1cbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwiYnV0dG9uVGV4dFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGJ1dHRvblRleHQgPSAkJHByb3BzMi5idXR0b25UZXh0KTtcbiAgICBpZiAoXCJpc0xvYWRpbmdcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBpc0xvYWRpbmcgPSAkJHByb3BzMi5pc0xvYWRpbmcpO1xuICB9O1xuICByZXR1cm4gW2J1dHRvblRleHQsIGlzTG9hZGluZywgYnV0dG9uQ29sb3JdO1xufVxudmFyIFN1Ym1pdEJ1dHRvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRHLCBjcmVhdGVfZnJhZ21lbnQkMWcsIHNhZmVfbm90X2VxdWFsLCB7IGJ1dHRvblRleHQ6IDAsIGlzTG9hZGluZzogMSB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxZihjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJtMTAgMGMtNS41MiAwLTEwIDQuNDgtMTAgMTBzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwLTQuNDgtMTAtMTAtMTB6bTEgMTVoLTJ2LTJoMnYyem0wLTRoLTJ2LTZoMnY2elwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgMCAyMCAyMFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgRXJyb3JJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQxZiwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayR5KGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgZXJyb3JpY29uO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGVycm9yaWNvbiA9IG5ldyBFcnJvckljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChlcnJvcmljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgdDEgPSB0ZXh0KFxuICAgICAgICAvKmVycm9yTWVzc2FnZSovXG4gICAgICAgIGN0eFs0XVxuICAgICAgKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZXJyb3JcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoZXJyb3JpY29uLCBkaXYsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdiwgdDApO1xuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGVycm9yaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChlcnJvcmljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGVycm9yaWNvbik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDFlKGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgbGFiZWw7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgaW5wdXQ7XG4gIGxldCB0MjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbGV0IGlmX2Jsb2NrID0gKFxuICAgIC8qaW5wdXRFcnJvciovXG4gICAgY3R4WzJdICYmIGNyZWF0ZV9pZl9ibG9jayR5KGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGxhYmVsID0gZWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgdDAgPSB0ZXh0KFxuICAgICAgICAvKmVtYWlsTGFiZWwqL1xuICAgICAgICBjdHhbM11cbiAgICAgICk7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBpbnB1dCA9IGVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgYXR0cihsYWJlbCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xhYmVsXCIpO1xuICAgICAgYXR0cihsYWJlbCwgXCJmb3JcIiwgXCJlbWwtXCIgKyAvKnJhbmRvbUlkKi9cbiAgICAgIGN0eFs1XSk7XG4gICAgICBhdHRyKGlucHV0LCBcImNsYXNzXCIsIFwibXMtZm9ybV9faW5wdXRcIik7XG4gICAgICBhdHRyKGlucHV0LCBcImlkXCIsIFwiZW1sLVwiICsgLypyYW5kb21JZCovXG4gICAgICBjdHhbNV0pO1xuICAgICAgYXR0cihpbnB1dCwgXCJ0eXBlXCIsIFwiZW1haWxcIik7XG4gICAgICBhdHRyKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgXCJwbGFjZWhvbGRlclwiLFxuICAgICAgICAvKnBsYWNlaG9sZGVyKi9cbiAgICAgICAgY3R4WzFdXG4gICAgICApO1xuICAgICAgYXR0cihpbnB1dCwgXCJuYW1lXCIsIFwiZW1sXCIpO1xuICAgICAgaW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19ncm91cFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYsIGxhYmVsKTtcbiAgICAgIGFwcGVuZChsYWJlbCwgdDApO1xuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgYXBwZW5kKGRpdiwgaW5wdXQpO1xuICAgICAgc2V0X2lucHV0X3ZhbHVlKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgLyplbWFpbFZhbHVlKi9cbiAgICAgICAgY3R4WzBdXG4gICAgICApO1xuICAgICAgYXBwZW5kKGRpdiwgdDIpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgXCJpbnB1dFwiLFxuICAgICAgICAgICAgLyp2YWxpZGF0ZUZpZWxkKi9cbiAgICAgICAgICAgIGN0eFs2XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBcImlucHV0XCIsXG4gICAgICAgICAgICAvKmlucHV0X2lucHV0X2hhbmRsZXIqL1xuICAgICAgICAgICAgY3R4WzhdXG4gICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypwbGFjZWhvbGRlciovXG4gICAgICAyKSB7XG4gICAgICAgIGF0dHIoXG4gICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgXCJwbGFjZWhvbGRlclwiLFxuICAgICAgICAgIC8qcGxhY2Vob2xkZXIqL1xuICAgICAgICAgIGN0eDJbMV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qZW1haWxWYWx1ZSovXG4gICAgICAxICYmIGlucHV0LnZhbHVlICE9PSAvKmVtYWlsVmFsdWUqL1xuICAgICAgY3R4MlswXSkge1xuICAgICAgICBzZXRfaW5wdXRfdmFsdWUoXG4gICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgLyplbWFpbFZhbHVlKi9cbiAgICAgICAgICBjdHgyWzBdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qaW5wdXRFcnJvciovXG4gICAgICAgIGN0eDJbMl1cbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKmlucHV0RXJyb3IqL1xuICAgICAgICAgIDQpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9jayR5KGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZCgpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRGKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkdGV4dFN0b3JlO1xuICBjb21wb25lbnRfc3Vic2NyaWJlKCQkc2VsZiwgVGV4dFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDksICR0ZXh0U3RvcmUgPSAkJHZhbHVlKSk7XG4gIGxldCB7IGVtYWlsSW5wdXRWYWxpZCA9IGZhbHNlIH0gPSAkJHByb3BzO1xuICBsZXQgeyBlbWFpbFZhbHVlIH0gPSAkJHByb3BzO1xuICBsZXQgeyBwbGFjZWhvbGRlciA9IFwiZXhhbXBsZUBkb21haW4uY29tXCIgfSA9ICQkcHJvcHM7XG4gIGxldCB0ZXh0MiA9ICR0ZXh0U3RvcmUudGV4dDtcbiAgbGV0IGVtYWlsTGFiZWwgPSB0ZXh0MltcImVtYWlsX2FkZHJlc3NcIl0gfHwgXCJFbWFpbCBBZGRyZXNzXCI7XG4gIGxldCBpbnB1dEVycm9yID0gZmFsc2U7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSB0ZXh0MltcImVtYWlsX2Vycm9yX21lc3NhZ2VcIl0gfHwgXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCI7XG4gIGNvbnN0IHJhbmRvbUlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDEwKTtcbiAgY29uc3QgdmFsaWRhdGVGaWVsZCA9IChlKSA9PiB7XG4gICAgY29uc3QgZW1haWxJbnB1dCA9IGUudGFyZ2V0O1xuICAgIGNvbnN0IGhhc1ZhbGlkRW1haWwgPSBlbWFpbElucHV0LnZhbHVlLm1hdGNoKC8uK0AuK1xcLi57Mix9Lyk7XG4gICAgaWYgKCFoYXNWYWxpZEVtYWlsICYmIGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICQkaW52YWxpZGF0ZSg3LCBlbWFpbElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICAkJGludmFsaWRhdGUoMiwgaW5wdXRFcnJvciA9IHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkJGludmFsaWRhdGUoNywgZW1haWxJbnB1dFZhbGlkID0gdHJ1ZSk7XG4gICAgICAkJGludmFsaWRhdGUoMiwgaW5wdXRFcnJvciA9IGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGlucHV0X2lucHV0X2hhbmRsZXIoKSB7XG4gICAgZW1haWxWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGVtYWlsVmFsdWUpO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImVtYWlsSW5wdXRWYWxpZFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDcsIGVtYWlsSW5wdXRWYWxpZCA9ICQkcHJvcHMyLmVtYWlsSW5wdXRWYWxpZCk7XG4gICAgaWYgKFwiZW1haWxWYWx1ZVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGVtYWlsVmFsdWUgPSAkJHByb3BzMi5lbWFpbFZhbHVlKTtcbiAgICBpZiAoXCJwbGFjZWhvbGRlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIHBsYWNlaG9sZGVyID0gJCRwcm9wczIucGxhY2Vob2xkZXIpO1xuICB9O1xuICByZXR1cm4gW1xuICAgIGVtYWlsVmFsdWUsXG4gICAgcGxhY2Vob2xkZXIsXG4gICAgaW5wdXRFcnJvcixcbiAgICBlbWFpbExhYmVsLFxuICAgIGVycm9yTWVzc2FnZSxcbiAgICByYW5kb21JZCxcbiAgICB2YWxpZGF0ZUZpZWxkLFxuICAgIGVtYWlsSW5wdXRWYWxpZCxcbiAgICBpbnB1dF9pbnB1dF9oYW5kbGVyXG4gIF07XG59XG52YXIgRW1haWxJbnB1dCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRGLCBjcmVhdGVfZnJhZ21lbnQkMWUsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBlbWFpbElucHV0VmFsaWQ6IDcsXG4gICAgICBlbWFpbFZhbHVlOiAwLFxuICAgICAgcGxhY2Vob2xkZXI6IDFcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxZChjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJtMTEgMC41Yy01IDAtOS4yNyAzLjExLTExIDcuNSAxLjczIDQuMzkgNiA3LjUgMTEgNy41czkuMjctMy4xMSAxMS03LjVjLTEuNzMtNC4zOS02LTcuNS0xMS03LjV6bTAgMTIuNWMtMi43NiAwLTUtMi4yNC01LTVzMi4yNC01IDUtNSA1IDIuMjQgNSA1LTIuMjQgNS01IDV6bTAtOGMtMS42NiAwLTMgMS4zNC0zIDNzMS4zNCAzIDMgMyAzLTEuMzQgMy0zLTEuMzQtMy0zLTN6XCIpO1xuICAgICAgYXR0cihzdmcsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19leWVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgMjIgMTZcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIEV5ZUljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JDFkLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDFjKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIm0xMSA0YzIuNzYgMCA1IDIuMjQgNSA1IDAgMC42NS0wLjEzIDEuMjYtMC4zNiAxLjgzbDIuOTIgMi45MmMxLjUxLTEuMjYgMi43LTIuODkgMy40My00Ljc1LTEuNzMtNC4zOS02LTcuNS0xMS03LjUtMS40IDAtMi43NCAwLjI1LTMuOTggMC43bDIuMTYgMi4xNmMwLjU3LTAuMjMgMS4xOC0wLjM2IDEuODMtMC4zNnptLTEwLTIuNzMgMi43NCAyLjc0Yy0xLjY2IDEuMjktMi45NiAzLjAxLTMuNzQgNC45OSAxLjczIDQuMzkgNiA3LjUgMTEgNy41IDEuNTUgMCAzLjAzLTAuMyA0LjM4LTAuODRsMC40MiAwLjQyIDIuOTMgMi45MiAxLjI3LTEuMjctMTcuNzMtMTcuNzMtMS4yNyAxLjI3em01LjUzIDUuNTMgMS41NSAxLjU1Yy0wLjA1IDAuMjEtMC4wOCAwLjQzLTAuMDggMC42NSAwIDEuNjYgMS4zNCAzIDMgMyAwLjIyIDAgMC40NC0wLjAzIDAuNjUtMC4wOGwxLjU1IDEuNTVjLTAuNjcgMC4zMy0xLjQxIDAuNTMtMi4yIDAuNTMtMi43NiAwLTUtMi4yNC01LTUgMC0wLjc5IDAuMi0xLjUzIDAuNTMtMi4yem00LjMxLTAuNzggMy4xNSAzLjE1IDAuMDItMC4xNmMwLTEuNjYtMS4zNC0zLTMtM2wtMC4xNyAwLjAxelwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZXllLXNsYXNoXCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDIyIDE5XCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBFeWVTbGFzaEljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JDFjLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkayhjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJmb3Jnb3RfcGFzc3dvcmRcIl0gfHwgXCJGb3Jnb3QgUGFzc3dvcmQ/XCJ9YDtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJmb3Jnb3QtcGFzc3dvcmQtYnRuXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19idXR0b24gbXMtZm9ybV9fYnV0dG9uLS10ZXh0XCIpO1xuICAgICAgYXR0cihidXR0b24sIFwidGFiaW5kZXhcIiwgXCItMVwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xhYmVsIG1zLWZvcm1fX2xhYmVsLS1yaWdodFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYsIGJ1dHRvbik7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlciovXG4gICAgICAgICAgY3R4WzE0XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrJGcoY3R4KSB7XG4gIGxldCBleWVzbGFzaGljb247XG4gIGxldCBjdXJyZW50O1xuICBleWVzbGFzaGljb24gPSBuZXcgRXllU2xhc2hJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChleWVzbGFzaGljb24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGV5ZXNsYXNoaWNvbiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihleWVzbGFzaGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZXllc2xhc2hpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZXllc2xhc2hpY29uLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJHAoY3R4KSB7XG4gIGxldCBleWVpY29uO1xuICBsZXQgY3VycmVudDtcbiAgZXllaWNvbiA9IG5ldyBFeWVJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChleWVpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChleWVpY29uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGV5ZWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZXllaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGV5ZWljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJHgoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBlcnJvcmljb247XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgY3VycmVudDtcbiAgZXJyb3JpY29uID0gbmV3IEVycm9ySWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGVycm9yaWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICB0MSA9IHRleHQoXG4gICAgICAgIC8qZXJyb3JNZXNzYWdlKi9cbiAgICAgICAgY3R4WzldXG4gICAgICApO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19lcnJvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChlcnJvcmljb24sIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MSk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oZXJyb3JpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGVycm9yaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZXJyb3JpY29uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMWIoY3R4KSB7XG4gIGxldCBkaXYzO1xuICBsZXQgZGl2MDtcbiAgbGV0IGxhYmVsO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IHQyO1xuICBsZXQgZGl2MjtcbiAgbGV0IGlucHV0O1xuICBsZXQgaW5wdXRfdmFsdWVfdmFsdWU7XG4gIGxldCB0MztcbiAgbGV0IGRpdjE7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jazE7XG4gIGxldCB0NDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbGV0IGlmX2Jsb2NrMCA9IChcbiAgICAvKnNob3dGb3Jnb3RQYXNzd29yZExhYmVsKi9cbiAgICBjdHhbMl0gJiYgY3JlYXRlX2lmX2Jsb2NrXzIkayhjdHgpXG4gICk7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja18xJHAsIGNyZWF0ZV9lbHNlX2Jsb2NrJGddO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoIS8qcGFzc3dvcmRWaXNpYmxlKi9cbiAgICBjdHgyWzVdKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4KTtcbiAgaWZfYmxvY2sxID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eCk7XG4gIGxldCBpZl9ibG9jazIgPSAoXG4gICAgLyppbnB1dEVycm9yKi9cbiAgICBjdHhbNl0gJiYgY3JlYXRlX2lmX2Jsb2NrJHgoY3R4KVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYzID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgbGFiZWwgPSBlbGVtZW50KFwibGFiZWxcIik7XG4gICAgICB0MCA9IHRleHQoXG4gICAgICAgIC8qcGFzc3dvcmRMYWJlbCovXG4gICAgICAgIGN0eFszXVxuICAgICAgKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlucHV0ID0gZWxlbWVudChcImlucHV0XCIpO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgIGF0dHIobGFiZWwsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19sYWJlbFwiKTtcbiAgICAgIGF0dHIobGFiZWwsIFwiZm9yXCIsIFwicHN3LVwiICsgLypyYW5kb21JZCovXG4gICAgICBjdHhbMTBdKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2ZsZXhcIik7XG4gICAgICBhdHRyKGlucHV0LCBcImRhdGEtbXMtaW50ZXJuYWwtcGFzc3dvcmRcIiwgXCJcIik7XG4gICAgICBhdHRyKGlucHV0LCBcImNsYXNzXCIsIFwibXMtZm9ybV9faW5wdXQgbXMtZm9ybV9faW5wdXQtLXBhc3N3b3JkXCIpO1xuICAgICAgYXR0cihpbnB1dCwgXCJpZFwiLCBcInBzdy1cIiArIC8qcmFuZG9tSWQqL1xuICAgICAgY3R4WzEwXSk7XG4gICAgICBhdHRyKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgXCJ0eXBlXCIsXG4gICAgICAgIC8qdHlwZSovXG4gICAgICAgIGN0eFs3XVxuICAgICAgKTtcbiAgICAgIGF0dHIoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBcInBsYWNlaG9sZGVyXCIsXG4gICAgICAgIC8qcGFzc3dvcmRQbGFjZWhvbGRlciovXG4gICAgICAgIGN0eFs0XVxuICAgICAgKTtcbiAgICAgIGlucHV0LnZhbHVlID0gaW5wdXRfdmFsdWVfdmFsdWUgPSAvKnBhc3N3b3JkVmFsdWUqL1xuICAgICAgY3R4WzBdIHx8IFwiXCI7XG4gICAgICBhdHRyKGlucHV0LCBcIm5hbWVcIiwgXCJwc3dcIik7XG4gICAgICBpbnB1dC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19zaG93LXRvZ2dsZVwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJpZFwiLCBcInRvZ2dsZVBhc3N3b3JkXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fcGFzc3dvcmQtY29udGFpbmVyXCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYzLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGxhYmVsKTtcbiAgICAgIGFwcGVuZChsYWJlbCwgdDApO1xuICAgICAgYXBwZW5kKGRpdjAsIHQxKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5tKGRpdjAsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQyKTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIGFwcGVuZChkaXYyLCBpbnB1dCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDMpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjEpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShkaXYxLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0NCk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubShkaXYzLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBbXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBcImlucHV0XCIsXG4gICAgICAgICAgICAvKmhhbmRsZUlucHV0Ki9cbiAgICAgICAgICAgIGN0eFsxMl1cbiAgICAgICAgICApLFxuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGRpdjEsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKnRvZ2dsZVBhc3N3b3JkKi9cbiAgICAgICAgICAgIGN0eFsxMV1cbiAgICAgICAgICApXG4gICAgICAgIF07XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKnBhc3N3b3JkTGFiZWwqL1xuICAgICAgOClcbiAgICAgICAgc2V0X2RhdGEoXG4gICAgICAgICAgdDAsXG4gICAgICAgICAgLypwYXNzd29yZExhYmVsKi9cbiAgICAgICAgICBjdHgyWzNdXG4gICAgICAgICk7XG4gICAgICBpZiAoXG4gICAgICAgIC8qc2hvd0ZvcmdvdFBhc3N3b3JkTGFiZWwqL1xuICAgICAgICBjdHgyWzJdXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMC5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBjcmVhdGVfaWZfYmxvY2tfMiRrKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgaWZfYmxvY2swLm0oZGl2MCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgIGlmX2Jsb2NrMC5kKDEpO1xuICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyp0eXBlKi9cbiAgICAgIDEyOCkge1xuICAgICAgICBhdHRyKFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgIFwidHlwZVwiLFxuICAgICAgICAgIC8qdHlwZSovXG4gICAgICAgICAgY3R4Mls3XVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypwYXNzd29yZFBsYWNlaG9sZGVyKi9cbiAgICAgIDE2KSB7XG4gICAgICAgIGF0dHIoXG4gICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgXCJwbGFjZWhvbGRlclwiLFxuICAgICAgICAgIC8qcGFzc3dvcmRQbGFjZWhvbGRlciovXG4gICAgICAgICAgY3R4Mls0XVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypwYXNzd29yZFZhbHVlKi9cbiAgICAgIDEgJiYgaW5wdXRfdmFsdWVfdmFsdWUgIT09IChpbnB1dF92YWx1ZV92YWx1ZSA9IC8qcGFzc3dvcmRWYWx1ZSovXG4gICAgICBjdHgyWzBdIHx8IFwiXCIpICYmIGlucHV0LnZhbHVlICE9PSBpbnB1dF92YWx1ZV92YWx1ZSkge1xuICAgICAgICBpbnB1dC52YWx1ZSA9IGlucHV0X3ZhbHVlX3ZhbHVlO1xuICAgICAgfVxuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ICE9PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgaWZfYmxvY2sxLm0oZGl2MSwgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qaW5wdXRFcnJvciovXG4gICAgICAgIGN0eDJbNl1cbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgICAgaWZfYmxvY2syLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qaW5wdXRFcnJvciovXG4gICAgICAgICAgNjQpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2syID0gY3JlYXRlX2lmX2Jsb2NrJHgoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgaWZfYmxvY2syLm0oZGl2MywgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazIsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazIgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Myk7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuZCgpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLmQoKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHJ1bl9hbGwoZGlzcG9zZSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkRSgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgdHlwZTtcbiAgbGV0ICR0ZXh0U3RvcmU7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBUZXh0U3RvcmUsICgkJHZhbHVlKSA9PiAkJGludmFsaWRhdGUoMTUsICR0ZXh0U3RvcmUgPSAkJHZhbHVlKSk7XG4gIGxldCB0ZXh0MiA9ICR0ZXh0U3RvcmUudGV4dDtcbiAgbGV0IHsgc2hvd0ZvcmdvdFBhc3N3b3JkTGFiZWwgPSBmYWxzZSB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcGFzc3dvcmRJbnB1dFZhbGlkID0gZmFsc2UgfSA9ICQkcHJvcHM7XG4gIGxldCB7IHBhc3N3b3JkTGFiZWwgPSB0ZXh0MltcInBhc3N3b3JkXCJdIHx8IFwiUGFzc3dvcmRcIiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcGFzc3dvcmRQbGFjZWhvbGRlciA9IFwiRW50ZXIgUGFzc3dvcmRcIiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcGFzc3dvcmRWYWx1ZSB9ID0gJCRwcm9wcztcbiAgbGV0IHsgZGlzcGxheSB9ID0gJCRwcm9wcztcbiAgbGV0IGlucHV0RXJyb3IgPSBmYWxzZTtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IHRleHQyW1wicGFzc3dvcmRfZXJyb3JfbWVzc2FnZVwiXSB8fCBcIk1pbmltdW0gOCBjaGFyYWN0ZXJzIHJlcXVpcmVkXCI7XG4gIGxldCBwYXNzd29yZFZpc2libGUgPSBmYWxzZTtcbiAgY29uc3QgcmFuZG9tSWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTApO1xuICBmdW5jdGlvbiB0b2dnbGVQYXNzd29yZCgpIHtcbiAgICAkJGludmFsaWRhdGUoNSwgcGFzc3dvcmRWaXNpYmxlID0gIXBhc3N3b3JkVmlzaWJsZSk7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlSW5wdXQoZSkge1xuICAgICQkaW52YWxpZGF0ZSgwLCBwYXNzd29yZFZhbHVlID0gZS50YXJnZXQudmFsdWUpO1xuICAgIHZhbGlkYXRlRmllbGQoZSk7XG4gIH1cbiAgY29uc3QgdmFsaWRhdGVGaWVsZCA9IChlKSA9PiB7XG4gICAgY29uc3QgaGFzVmFsaWRQYXNzd29yZCA9IGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA+PSA4ID8gdHJ1ZSA6IGZhbHNlO1xuICAgIGlmICghaGFzVmFsaWRQYXNzd29yZCkge1xuICAgICAgJCRpbnZhbGlkYXRlKDEzLCBwYXNzd29yZElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICAkJGludmFsaWRhdGUoNiwgaW5wdXRFcnJvciA9IHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkJGludmFsaWRhdGUoMTMsIHBhc3N3b3JkSW5wdXRWYWxpZCA9IHRydWUpO1xuICAgICAgJCRpbnZhbGlkYXRlKDYsIGlucHV0RXJyb3IgPSBmYWxzZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gJCRpbnZhbGlkYXRlKDEsIGRpc3BsYXkgPSBcImZvcmdvdF9wYXNzd29yZFwiKTtcbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwic2hvd0ZvcmdvdFBhc3N3b3JkTGFiZWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgyLCBzaG93Rm9yZ290UGFzc3dvcmRMYWJlbCA9ICQkcHJvcHMyLnNob3dGb3Jnb3RQYXNzd29yZExhYmVsKTtcbiAgICBpZiAoXCJwYXNzd29yZElucHV0VmFsaWRcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxMywgcGFzc3dvcmRJbnB1dFZhbGlkID0gJCRwcm9wczIucGFzc3dvcmRJbnB1dFZhbGlkKTtcbiAgICBpZiAoXCJwYXNzd29yZExhYmVsXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMywgcGFzc3dvcmRMYWJlbCA9ICQkcHJvcHMyLnBhc3N3b3JkTGFiZWwpO1xuICAgIGlmIChcInBhc3N3b3JkUGxhY2Vob2xkZXJcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSg0LCBwYXNzd29yZFBsYWNlaG9sZGVyID0gJCRwcm9wczIucGFzc3dvcmRQbGFjZWhvbGRlcik7XG4gICAgaWYgKFwicGFzc3dvcmRWYWx1ZVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIHBhc3N3b3JkVmFsdWUgPSAkJHByb3BzMi5wYXNzd29yZFZhbHVlKTtcbiAgICBpZiAoXCJkaXNwbGF5XCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMSwgZGlzcGxheSA9ICQkcHJvcHMyLmRpc3BsYXkpO1xuICB9O1xuICAkJHNlbGYuJCQudXBkYXRlID0gKCkgPT4ge1xuICAgIGlmICgkJHNlbGYuJCQuZGlydHkgJiAvKnBhc3N3b3JkVmlzaWJsZSovXG4gICAgMzIpIHtcbiAgICAgICQkaW52YWxpZGF0ZSg3LCB0eXBlID0gcGFzc3dvcmRWaXNpYmxlID8gXCJ0ZXh0XCIgOiBcInBhc3N3b3JkXCIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFtcbiAgICBwYXNzd29yZFZhbHVlLFxuICAgIGRpc3BsYXksXG4gICAgc2hvd0ZvcmdvdFBhc3N3b3JkTGFiZWwsXG4gICAgcGFzc3dvcmRMYWJlbCxcbiAgICBwYXNzd29yZFBsYWNlaG9sZGVyLFxuICAgIHBhc3N3b3JkVmlzaWJsZSxcbiAgICBpbnB1dEVycm9yLFxuICAgIHR5cGUsXG4gICAgdGV4dDIsXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIHJhbmRvbUlkLFxuICAgIHRvZ2dsZVBhc3N3b3JkLFxuICAgIGhhbmRsZUlucHV0LFxuICAgIHBhc3N3b3JkSW5wdXRWYWxpZCxcbiAgICBjbGlja19oYW5kbGVyXG4gIF07XG59XG52YXIgUGFzc3dvcmRJbnB1dCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRFLCBjcmVhdGVfZnJhZ21lbnQkMWIsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBzaG93Rm9yZ290UGFzc3dvcmRMYWJlbDogMixcbiAgICAgIHBhc3N3b3JkSW5wdXRWYWxpZDogMTMsXG4gICAgICBwYXNzd29yZExhYmVsOiAzLFxuICAgICAgcGFzc3dvcmRQbGFjZWhvbGRlcjogNCxcbiAgICAgIHBhc3N3b3JkVmFsdWU6IDAsXG4gICAgICBkaXNwbGF5OiAxXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMWEoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJnZW9tZXRyaWNQcmVjaXNpb25cIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIm05IDAtOSA0djZjMCA1LjU1IDMuODQgMTAuNzQgOSAxMiA1LjE2LTEuMjYgOS02LjQ1IDktMTJ2LTZsLTktNHptLTIgMTYtNC00IDEuNDEtMS40MSAyLjU5IDIuNTggNi41OS02LjU5IDEuNDEgMS40Mi04IDh6XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDE4IDIyXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBTZWN1cmVkSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkMWEsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skdyhjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGE7XG4gIGxldCBzZWN1cmVkaWNvbjtcbiAgbGV0IHQ7XG4gIGxldCBjdXJyZW50O1xuICBzZWN1cmVkaWNvbiA9IG5ldyBTZWN1cmVkSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBhID0gZWxlbWVudChcImFcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHNlY3VyZWRpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQgPSB0ZXh0KFwiIFNlY3VyZWQgYnkgTWVtYmVyc3RhY2tcIik7XG4gICAgICBhdHRyKGEsIFwiaHJlZlwiLCBcImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbVwiKTtcbiAgICAgIGF0dHIoYSwgXCJ0YXJnZXRcIiwgXCJfYmxhbmtcIik7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19mb290ZXJcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBhKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChzZWN1cmVkaWNvbiwgYSwgbnVsbCk7XG4gICAgICBhcHBlbmQoYSwgdCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHNlY3VyZWRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNlY3VyZWRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN1cmVkaWNvbik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDE5KGN0eCkge1xuICBsZXQgaWZfYmxvY2tfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGlmX2Jsb2NrID0gIS8qJGFwcCovXG4gIGN0eFswXS5pc1BhaWQgJiYgY3JlYXRlX2lmX2Jsb2NrJHcoKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBpZl9ibG9ja19hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoIS8qJGFwcCovXG4gICAgICBjdHgyWzBdLmlzUGFpZCkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9jayR3KCk7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oaWZfYmxvY2tfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrX2FuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJEQoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0ICRhcHA7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBBcHBTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSgwLCAkYXBwID0gJCR2YWx1ZSkpO1xuICByZXR1cm4gWyRhcHBdO1xufVxudmFyIE1vZGFsRm9vdGVyID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJEQsIGNyZWF0ZV9mcmFnbWVudCQxOSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxOChjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTE5LDRINUEzLDMsMCwwLDAsMiw3VjE3YTMsMywwLDAsMCwzLDNIMTlhMywzLDAsMCwwLDMtM1Y3QTMsMywwLDAsMCwxOSw0Wk01LDZIMTlhMSwxLDAsMCwxLDEsMWwtOCw0Ljg4TDQsN0ExLDEsMCwwLDEsNSw2Wk0yMCwxN2ExLDEsMCwwLDEtMSwxSDVhMSwxLDAsMCwxLTEtMVY5LjI4bDcuNDgsNC41N2ExLDEsMCwwLDAsMSwwTDIwLDkuMjhaXCIpO1xuICAgICAgYXR0cihzdmcsIFwiY2xhc3NcIiwgXCJtcy1lbWFpbFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDI0IDI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBFbWFpbEljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JDE4LCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xudmFyIFBhc3N3b3JkbGVzc1N0b3JlID0gd3JpdGFibGUoe1xuICBwYXNzd29yZGxlc3NNb2RhbFR5cGU6IFwiXCIsXG4gIHBhc3N3b3JkbGVzc0VtYWlsOiBcIlwiLFxuICBwYXNzd29yZGxlc3NNb2RlOiBmYWxzZSxcbiAgcGFzc3dvcmRsZXNzQ3VzdG9tRmllbGRzOiBbXSxcbiAgcGFzc3dvcmRsZXNzUGxhbnM6IFtdXG59KTtcbnZhciBzZXRQYXNzd29yZGxlc3NNb2RhbFR5cGUgPSAodHlwZSkgPT4ge1xuICBQYXNzd29yZGxlc3NTdG9yZS51cGRhdGUoKHN0b3JlKSA9PiB7XG4gICAgc3RvcmUucGFzc3dvcmRsZXNzTW9kYWxUeXBlID0gdHlwZTtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xufTtcbnZhciBzZXRQYXNzd29yZGxlc3NFbWFpbCA9IChlbWFpbCkgPT4ge1xuICBQYXNzd29yZGxlc3NTdG9yZS51cGRhdGUoKHN0b3JlKSA9PiB7XG4gICAgc3RvcmUucGFzc3dvcmRsZXNzRW1haWwgPSBlbWFpbDtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xufTtcbnZhciBzZXRQYXNzd29yZGxlc3NDdXN0b21GaWVsZHMgPSAoY3VzdG9tRmllbGRzKSA9PiB7XG4gIFBhc3N3b3JkbGVzc1N0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS5wYXNzd29yZGxlc3NDdXN0b21GaWVsZHMgPSBjdXN0b21GaWVsZHM7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9KTtcbn07XG52YXIgc2V0UGFzc3dvcmRsZXNzUGxhbnMgPSAocGxhbnMpID0+IHtcbiAgUGFzc3dvcmRsZXNzU3RvcmUudXBkYXRlKChzdG9yZSkgPT4ge1xuICAgIHN0b3JlLnBhc3N3b3JkbGVzc1BsYW5zID0gcGxhbnM7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9KTtcbn07XG52YXIgc2V0UGFzc3dvcmRsZXNzTW9kZSA9IChtb2RlKSA9PiB7XG4gIFBhc3N3b3JkbGVzc1N0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS5wYXNzd29yZGxlc3NNb2RlID0gbW9kZTtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xufTtcbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQkZChjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFsyMl0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzYkNShjdHgpIHtcbiAgbGV0IGNsb3NlYnV0dG9uO1xuICBsZXQgY3VycmVudDtcbiAgY2xvc2VidXR0b24gPSBuZXcgQ2xvc2VCdXR0b24oe1xuICAgIHByb3BzOiB7IGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbMV1cbiAgICApIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY2xvc2VidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGNsb3NlYnV0dG9uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGNsb3NlYnV0dG9uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qY2xvc2VNb2RhbCovXG4gICAgICAyKVxuICAgICAgICBjbG9zZWJ1dHRvbl9jaGFuZ2VzLmNsb3NlTW9kYWwgPSAvKmNsb3NlTW9kYWwqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgY2xvc2VidXR0b24uJHNldChjbG9zZWJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY2xvc2VidXR0b24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2tfMSQ4KGN0eCkge1xuICBsZXQgc3VibWl0YnV0dG9uO1xuICBsZXQgY3VycmVudDtcbiAgc3VibWl0YnV0dG9uID0gbmV3IFN1Ym1pdEJ1dHRvbih7XG4gICAgcHJvcHM6IHtcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyp0ZXh0Ki9cbiAgICAgICAgY3R4WzhdW1wibG9naW5fd2l0aF9lbWFpbFwiXSB8fCBcIkNvbnRpbnVlIHdpdGggRW1haWxcIlxuICAgICAgKSxcbiAgICAgIGlzTG9hZGluZzogKFxuICAgICAgICAvKnNob3dMb2FkZXIqL1xuICAgICAgICBjdHhbM11cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoc3VibWl0YnV0dG9uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dMb2FkZXIqL1xuICAgICAgOClcbiAgICAgICAgc3VibWl0YnV0dG9uX2NoYW5nZXMuaXNMb2FkaW5nID0gLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4MlszXTtcbiAgICAgIHN1Ym1pdGJ1dHRvbi4kc2V0KHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzdWJtaXRidXR0b24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzUkNyhjdHgpIHtcbiAgbGV0IHBhc3N3b3JkaW5wdXQ7XG4gIGxldCB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQ7XG4gIGxldCB1cGRhdGluZ19kaXNwbGF5O1xuICBsZXQgdDtcbiAgbGV0IHN1Ym1pdGJ1dHRvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTRdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0X2Rpc3BsYXlfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxNV0odmFsdWUpO1xuICB9XG4gIGxldCBwYXNzd29yZGlucHV0X3Byb3BzID0ge1xuICAgIHBhc3N3b3JkUGxhY2Vob2xkZXI6IChcbiAgICAgIC8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJsb2dpbl9wYXNzd29yZF9wbGFjZWhvbGRlclwiXVxuICAgICksXG4gICAgXCJ8fFwiOiB0cnVlLFxuICAgIHNob3dGb3Jnb3RQYXNzd29yZExhYmVsOiB0cnVlXG4gIH07XG4gIGlmIChcbiAgICAvKnBhc3N3b3JkSW5wdXRWYWxpZCovXG4gICAgY3R4WzVdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dF9wcm9wcy5wYXNzd29yZElucHV0VmFsaWQgPSAvKnBhc3N3b3JkSW5wdXRWYWxpZCovXG4gICAgY3R4WzVdO1xuICB9XG4gIGlmIChcbiAgICAvKmRpc3BsYXkqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXRfcHJvcHMuZGlzcGxheSA9IC8qZGlzcGxheSovXG4gICAgY3R4WzBdO1xuICB9XG4gIHBhc3N3b3JkaW5wdXQgPSBuZXcgUGFzc3dvcmRJbnB1dCh7IHByb3BzOiBwYXNzd29yZGlucHV0X3Byb3BzIH0pO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocGFzc3dvcmRpbnB1dCwgXCJwYXNzd29yZElucHV0VmFsaWRcIiwgcGFzc3dvcmRpbnB1dF9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocGFzc3dvcmRpbnB1dCwgXCJkaXNwbGF5XCIsIHBhc3N3b3JkaW5wdXRfZGlzcGxheV9iaW5kaW5nKSk7XG4gIHN1Ym1pdGJ1dHRvbiA9IG5ldyBTdWJtaXRCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qdGV4dCovXG4gICAgICAgIGN0eFs4XVtcImxvZ2luXCJdIHx8IFwiTG9nIGluXCJcbiAgICAgICksXG4gICAgICBpc0xvYWRpbmc6IChcbiAgICAgICAgLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4WzNdXG4gICAgICApLFxuICAgICAgXCJkYXRhLWN5XCI6IFwic3VibWl0LWJ1dHRvblwiXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICAgIHQgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoc3VibWl0YnV0dG9uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgJiYgZGlydHkgJiAvKnBhc3N3b3JkSW5wdXRWYWxpZCovXG4gICAgICAzMikge1xuICAgICAgICB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0X2NoYW5nZXMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypwYXNzd29yZElucHV0VmFsaWQqL1xuICAgICAgICBjdHgyWzVdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5ICYmIGRpcnR5ICYgLypkaXNwbGF5Ki9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5wdXRfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZGlucHV0LiRzZXQocGFzc3dvcmRpbnB1dF9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dMb2FkZXIqL1xuICAgICAgOClcbiAgICAgICAgc3VibWl0YnV0dG9uX2NoYW5nZXMuaXNMb2FkaW5nID0gLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4MlszXTtcbiAgICAgIHN1Ym1pdGJ1dHRvbi4kc2V0KHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHBhc3N3b3JkaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oc3VibWl0YnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHBhc3N3b3JkaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQsIGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzdWJtaXRidXR0b24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzQkOChjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJkb250X2hhdmVfYW5fYWNjb3VudFwiXSB8fCBcIkRvbid0IGhhdmUgYW4gYWNjb3VudD9cIn1gO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19idXR0b24gbXMtZm9ybV9fYnV0dG9uLS10ZXh0XCIpO1xuICAgICAgYXR0cihidXR0b24sIFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZmxleCBtcy1mb3JtX19mbGV4LS1jZW50ZXJlZFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYsIGJ1dHRvbik7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8xKi9cbiAgICAgICAgICBjdHhbMTddXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkYihjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJkb250X2hhdmVfYW5fYWNjb3VudFwiXSB8fCBcIkRvbid0IGhhdmUgYW4gYWNjb3VudD9cIn1gO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19idXR0b24gbXMtZm9ybV9fYnV0dG9uLS10ZXh0XCIpO1xuICAgICAgYXR0cihidXR0b24sIFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZmxleCBtcy1mb3JtX19mbGV4LS1jZW50ZXJlZFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYsIGJ1dHRvbik7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlciovXG4gICAgICAgICAgY3R4WzE2XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayR2KGN0eCkge1xuICBsZXQgZGl2NDtcbiAgbGV0IGRpdjM7XG4gIGxldCBkaXYwO1xuICBsZXQgdDA7XG4gIGxldCBkaXYxO1xuICBsZXQgdDI7XG4gIGxldCBkaXYyO1xuICBsZXQgdDM7XG4gIGxldCB0NDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBpZl9ibG9jayA9IChcbiAgICAvKiRhcHAqL1xuICAgIGN0eFs3XS5hZGRpdGlvbmFsQXV0aE1ldGhvZHMucGFzc3dvcmRsZXNzLmVuYWJsZWQgPT09IHRydWUgJiYgY3JlYXRlX2lmX2Jsb2NrXzEkbyhjdHgpXG4gICk7XG4gIGxldCBlYWNoX3ZhbHVlID0gKFxuICAgIC8qJGFwcCovXG4gICAgY3R4WzddLmF1dGhQcm92aWRlcnNcbiAgKTtcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2skZChnZXRfZWFjaF9jb250ZXh0JGQoY3R4LCBlYWNoX3ZhbHVlLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYzID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYxLnRleHRDb250ZW50ID0gYCR7Lyp0ZXh0Ki9cbiAgICAgIGN0eFs4XVtcIm9yXCJdIHx8IFwib3JcIn1gO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIHQ0ID0gc3BhY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgfVxuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2RpdmlkZXItbGluZVwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19kaXZpZGVyLXRleHRcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fZGl2aWRlci1saW5lXCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NvY2lhbC1kaXZpZGVyXCIpO1xuICAgICAgYXR0cihkaXY0LCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NvY2lhbFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjQsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2Myk7XG4gICAgICBhcHBlbmQoZGl2MywgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDApO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjEpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQyKTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0Myk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLm0oZGl2NCwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2NCwgdDQpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdjQsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLyokYXBwKi9cbiAgICAgICAgY3R4Mls3XS5hZGRpdGlvbmFsQXV0aE1ldGhvZHMucGFzc3dvcmRsZXNzLmVuYWJsZWQgPT09IHRydWVcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgICAgIDEyOCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrXzEkbyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgaWZfYmxvY2subShkaXY0LCB0NCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKnN1Ym1pdExvZ2luV2l0aFByb3ZpZGVyLCAkYXBwLCB0ZXh0Ki9cbiAgICAgIDI0MzIpIHtcbiAgICAgICAgZWFjaF92YWx1ZSA9IC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uYXV0aFByb3ZpZGVycztcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dCRkKGN0eDIsIGVhY2hfdmFsdWUsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayRkKGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdjQsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0uZCgxKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoX2Jsb2Nrcy5sZW5ndGggPSBlYWNoX3ZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXY0KTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZCgpO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJG8oY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jaztcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja18yJGosIGNyZWF0ZV9lbHNlX2Jsb2NrJGZdO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGVfMihjdHgyLCBkaXJ0eSkge1xuICAgIGlmIChcbiAgICAgIC8qJFBhc3N3b3JkbGVzc1N0b3JlKi9cbiAgICAgIGN0eDJbNl0ucGFzc3dvcmRsZXNzTW9kZSA9PT0gZmFsc2VcbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZV8yKGN0eCk7XG4gIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eCk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uc1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLm0oZGl2LCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGVfMihjdHgyKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPT09IHByZXZpb3VzX2Jsb2NrX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayRmKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgc3BhbjtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJsb2dpbl93aXRoX3Bhc3N3b3JkXCJdIHx8IFwiTG9nIGluIHdpdGggUGFzc3dvcmRcIn1gO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJjb250aW51ZS13aXRoLXBhc3N3b3JkXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4pO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfMyovXG4gICAgICAgICAgY3R4WzE5XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiRqKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgZW1haWxpY29uO1xuICBsZXQgdDA7XG4gIGxldCBzcGFuO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBlbWFpbGljb24gPSBuZXcgRW1haWxJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoZW1haWxpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBgJHsvKnRleHQqL1xuICAgICAgY3R4WzhdW1wibG9naW5fd2l0aF9lbWFpbFwiXSB8fCBcIkNvbnRpbnVlIHdpdGggRW1haWxcIn1gO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJjb250aW51ZS13aXRoLWVtYWlsXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChlbWFpbGljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfMiovXG4gICAgICAgICAgY3R4WzE4XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oZW1haWxpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGVtYWlsaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZW1haWxpY29uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9jayRkKGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgYnV0dG9uO1xuICBsZXQgaW1nO1xuICBsZXQgaW1nX3NyY192YWx1ZTtcbiAgbGV0IGltZ19hbHRfdmFsdWU7XG4gIGxldCB0MDtcbiAgbGV0IHNwYW47XG4gIGxldCB0MV92YWx1ZSA9IChcbiAgICAvKnRleHQqL1xuICAgIChjdHhbOF1bXCJjb250aW51ZV93aXRoXCJdIHx8IFwiQ29udGludWUgd2l0aFwiKSArIFwiXCJcbiAgKTtcbiAgbGV0IHQxO1xuICBsZXQgdDI7XG4gIGxldCB0M192YWx1ZSA9IChcbiAgICAvKnByb3ZpZGVyKi9cbiAgICBjdHhbMjJdLm5hbWUgKyBcIlwiXG4gICk7XG4gIGxldCB0MztcbiAgbGV0IHQ0O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGZ1bmN0aW9uIGNsaWNrX2hhbmRsZXJfNCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLypjbGlja19oYW5kbGVyXzQqL1xuICAgICAgY3R4WzIwXShcbiAgICAgICAgLypwcm92aWRlciovXG4gICAgICAgIGN0eFsyMl1cbiAgICAgIClcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgaW1nID0gZWxlbWVudChcImltZ1wiKTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHQxID0gdGV4dCh0MV92YWx1ZSk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICB0MyA9IHRleHQodDNfdmFsdWUpO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgaWYgKCFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsyMl0uaWNvbikpXG4gICAgICAgIGF0dHIoaW1nLCBcInNyY1wiLCBpbWdfc3JjX3ZhbHVlKTtcbiAgICAgIGF0dHIoaW1nLCBcImFsdFwiLCBpbWdfYWx0X3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMjJdLm5hbWUpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uc1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYsIGJ1dHRvbik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBpbWcpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3Bhbik7XG4gICAgICBhcHBlbmQoc3BhbiwgdDEpO1xuICAgICAgYXBwZW5kKHNwYW4sIHQyKTtcbiAgICAgIGFwcGVuZChzcGFuLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2LCB0NCk7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihidXR0b24sIFwiY2xpY2tcIiwgY2xpY2tfaGFuZGxlcl80KTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDEyOCAmJiAhc3JjX3VybF9lcXVhbChpbWcuc3JjLCBpbWdfc3JjX3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMjJdLmljb24pKSB7XG4gICAgICAgIGF0dHIoaW1nLCBcInNyY1wiLCBpbWdfc3JjX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjggJiYgaW1nX2FsdF92YWx1ZSAhPT0gKGltZ19hbHRfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsyMl0ubmFtZSkpIHtcbiAgICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDEyOCAmJiB0M192YWx1ZSAhPT0gKHQzX3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMjJdLm5hbWUgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDMsIHQzX3ZhbHVlKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMTcoY3R4KSB7XG4gIGxldCBkaXYxO1xuICBsZXQgdDA7XG4gIGxldCBkaXYwO1xuICBsZXQgZmlndXJlZWxlbWVudDtcbiAgbGV0IHQxO1xuICBsZXQgaDI7XG4gIGxldCB0MztcbiAgbGV0IGZvcm07XG4gIGxldCBlbWFpbGlucHV0O1xuICBsZXQgdXBkYXRpbmdfZW1haWxJbnB1dFZhbGlkO1xuICBsZXQgdDQ7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jazE7XG4gIGxldCB0NTtcbiAgbGV0IHQ2O1xuICBsZXQgdDc7XG4gIGxldCBtb2RhbGZvb3RlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbGV0IGlmX2Jsb2NrMCA9ICghLypwYXJhbXMqL1xuICBjdHhbMl0gfHwgIS8qcGFyYW1zKi9cbiAgY3R4WzJdLmhpZGVDbG9zZUJ1dHRvbikgJiYgY3JlYXRlX2lmX2Jsb2NrXzYkNShjdHgpO1xuICBmaWd1cmVlbGVtZW50ID0gbmV3IEZpZ3VyZUVsZW1lbnQoe30pO1xuICBmdW5jdGlvbiBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzEzXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IGVtYWlsaW5wdXRfcHJvcHMgPSB7XG4gICAgcGxhY2Vob2xkZXI6IChcbiAgICAgIC8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJsb2dpbl9lbWFpbF9wbGFjZWhvbGRlclwiXVxuICAgIClcbiAgfTtcbiAgaWYgKFxuICAgIC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbNF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBlbWFpbGlucHV0X3Byb3BzLmVtYWlsSW5wdXRWYWxpZCA9IC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbNF07XG4gIH1cbiAgZW1haWxpbnB1dCA9IG5ldyBFbWFpbElucHV0KHsgcHJvcHM6IGVtYWlsaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChlbWFpbGlucHV0LCBcImVtYWlsSW5wdXRWYWxpZFwiLCBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja181JDcsIGNyZWF0ZV9lbHNlX2Jsb2NrXzEkOF07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmICghLyokUGFzc3dvcmRsZXNzU3RvcmUqL1xuICAgIGN0eDJbNl0ucGFzc3dvcmRsZXNzTW9kZSlcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKFxuICAgICAgLypwYXJhbXMqL1xuICAgICAgY3R4MlsyXSAmJiAvKnBhcmFtcyovXG4gICAgICBjdHgyWzJdLnNpZ251cCAmJiAvKnBhcmFtcyovXG4gICAgICBjdHgyWzJdLnNpZ251cC5wbGFuc1xuICAgIClcbiAgICAgIHJldHVybiBjcmVhdGVfaWZfYmxvY2tfMyRiO1xuICAgIGlmIChcbiAgICAgIC8qc2lnbnVwQnV0dG9uVVJMKi9cbiAgICAgIGN0eDJbOV1cbiAgICApXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrXzQkODtcbiAgfVxuICBsZXQgY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgpO1xuICBsZXQgaWZfYmxvY2syID0gY3VycmVudF9ibG9ja190eXBlICYmIGN1cnJlbnRfYmxvY2tfdHlwZShjdHgpO1xuICBsZXQgaWZfYmxvY2szID0gKFxuICAgIC8qJGFwcCovXG4gICAgKGN0eFs3XS5hdXRoUHJvdmlkZXJzLmxlbmd0aCA+IDAgfHwgLyokYXBwKi9cbiAgICBjdHhbN10uYWRkaXRpb25hbEF1dGhNZXRob2RzLnBhc3N3b3JkbGVzcy5lbmFibGVkID09PSB0cnVlKSAmJiBjcmVhdGVfaWZfYmxvY2skdihjdHgpXG4gICk7XG4gIG1vZGFsZm9vdGVyID0gbmV3IE1vZGFsRm9vdGVyKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgaDIgPSBlbGVtZW50KFwiaDJcIik7XG4gICAgICBoMi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJsb2dpbl90b195b3VyX2FjY291bnRcIl0gfHwgXCJMb2dpbiB0byB5b3VyIGFjY291bnRcIn1gO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgZm9ybSA9IGVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChlbWFpbGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICAgIHQ0ID0gc3BhY2UoKTtcbiAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0NSA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgdDYgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLmMoKTtcbiAgICAgIHQ3ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihoMiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZVwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJjbGFzc1wiLCBcIm1zLWZvcm1cIik7XG4gICAgICBhdHRyKGZvcm0sIFwiYWN0aW9uXCIsIFwiXCIpO1xuICAgICAgYXR0cihmb3JtLCBcIm1ldGhvZFwiLCBcInBvc3RcIik7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY29udGVudFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImlkXCIsIFwiTG9naW5Nb2RhbFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAubShkaXYxLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoZmlndXJlZWxlbWVudCwgZGl2MCwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjAsIGgyKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MCwgZm9ybSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoZW1haWxpbnB1dCwgZm9ybSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZm9ybSwgdDQpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShmb3JtLCBudWxsKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0NSk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubShmb3JtLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0Nik7XG4gICAgICBpZiAoaWZfYmxvY2szKVxuICAgICAgICBpZl9ibG9jazMubShkaXYwLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0Nyk7XG4gICAgICBtb3VudF9jb21wb25lbnQobW9kYWxmb290ZXIsIGRpdjEsIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3Rlbihmb3JtLCBcInN1Ym1pdFwiLCBzdG9wX3Byb3BhZ2F0aW9uKHByZXZlbnRfZGVmYXVsdChcbiAgICAgICAgICAvKnN1Ym1pdExvZ2luKi9cbiAgICAgICAgICBjdHhbMTBdXG4gICAgICAgICkpKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmICghLypwYXJhbXMqL1xuICAgICAgY3R4MlsyXSB8fCAhLypwYXJhbXMqL1xuICAgICAgY3R4MlsyXS5oaWRlQ2xvc2VCdXR0b24pIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMC5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKnBhcmFtcyovXG4gICAgICAgICAgNCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBjcmVhdGVfaWZfYmxvY2tfNiQ1KGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKGRpdjEsIHQwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMCwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtYWlsaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgJiYgZGlydHkgJiAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICAxNikge1xuICAgICAgICB1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgPSB0cnVlO1xuICAgICAgICBlbWFpbGlucHV0X2NoYW5nZXMuZW1haWxJbnB1dFZhbGlkID0gLyplbWFpbElucHV0VmFsaWQqL1xuICAgICAgICBjdHgyWzRdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZW1haWxJbnB1dFZhbGlkID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgZW1haWxpbnB1dC4kc2V0KGVtYWlsaW5wdXRfY2hhbmdlcyk7XG4gICAgICBsZXQgcHJldmlvdXNfYmxvY2tfaW5kZXggPSBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gICAgICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgyKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPT09IHByZXZpb3VzX2Jsb2NrX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jazEgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICBpZl9ibG9jazEubShmb3JtLCB0NSk7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlID09PSAoY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgyKSkgJiYgaWZfYmxvY2syKSB7XG4gICAgICAgIGlmX2Jsb2NrMi5wKGN0eDIsIGRpcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgICAgaWZfYmxvY2syLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrMiA9IGN1cnJlbnRfYmxvY2tfdHlwZSAmJiBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICAgIGlmIChpZl9ibG9jazIpIHtcbiAgICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgICAgIGlmX2Jsb2NrMi5tKGZvcm0sIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uYXV0aFByb3ZpZGVycy5sZW5ndGggPiAwIHx8IC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uYWRkaXRpb25hbEF1dGhNZXRob2RzLnBhc3N3b3JkbGVzcy5lbmFibGVkID09PSB0cnVlXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMykge1xuICAgICAgICAgIGlmX2Jsb2NrMy5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgICAgIDEyOCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazMsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazMgPSBjcmVhdGVfaWZfYmxvY2skdihjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazMuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazMubShkaXYwLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazMpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMyA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oZW1haWxpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazMpO1xuICAgICAgdHJhbnNpdGlvbl9pbihtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZmlndXJlZWxlbWVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZW1haWxpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMyk7XG4gICAgICB0cmFuc2l0aW9uX291dChtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYxKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChmaWd1cmVlbGVtZW50KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGVtYWlsaW5wdXQpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICBpZl9ibG9jazIuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLmQoKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1vZGFsZm9vdGVyKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRDKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkUGFzc3dvcmRsZXNzU3RvcmU7XG4gIGxldCAkYXBwO1xuICBsZXQgJHRleHRTdG9yZTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIFBhc3N3b3JkbGVzc1N0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDYsICRQYXNzd29yZGxlc3NTdG9yZSA9ICQkdmFsdWUpKTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEFwcFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDcsICRhcHAgPSAkJHZhbHVlKSk7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBUZXh0U3RvcmUsICgkJHZhbHVlKSA9PiAkJGludmFsaWRhdGUoMjEsICR0ZXh0U3RvcmUgPSAkJHZhbHVlKSk7XG4gIGxldCB7IGNsb3NlTW9kYWwgfSA9ICQkcHJvcHM7XG4gIGxldCB7IGRpc3BsYXkgfSA9ICQkcHJvcHM7XG4gIGxldCB7IG9uU3VjY2Vzc0xvZ2luIH0gPSAkJHByb3BzO1xuICBsZXQgeyBwYXJhbXMgfSA9ICQkcHJvcHM7XG4gIGxldCB0ZXh0MiA9ICR0ZXh0U3RvcmUudGV4dDtcbiAgbGV0IHNob3dMb2FkZXIyID0gZmFsc2U7XG4gIGxldCBlbWFpbElucHV0VmFsaWQgPSBmYWxzZTtcbiAgbGV0IHBhc3N3b3JkSW5wdXRWYWxpZCA9IGZhbHNlO1xuICBpZiAoJGFwcC5hZGRpdGlvbmFsQXV0aE1ldGhvZHMucGFzc3dvcmRsZXNzLmlzRGVmYXVsdCA9PT0gdHJ1ZSkge1xuICAgIHNldFBhc3N3b3JkbGVzc01vZGUodHJ1ZSk7XG4gIH1cbiAgbGV0IHNpZ251cEJ1dHRvblVSTCA9IEJvb2xlYW4od2luZG93LnNzb1VJKSAmJiAkYXBwLnNzb1NpZ251cEJ1dHRvblVSTDtcbiAgZnVuY3Rpb24gc3VibWl0TG9naW4oZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBlbWFpbElucHV0ID0gZS50YXJnZXQucXVlcnlTZWxlY3RvcihcIltuYW1lPWVtbF1cIik7XG4gICAgICBjb25zdCBwYXNzd29yZElucHV0ID0gZS50YXJnZXQucXVlcnlTZWxlY3RvcihcIltuYW1lPXBzd11cIik7XG4gICAgICBpZiAoJFBhc3N3b3JkbGVzc1N0b3JlLnBhc3N3b3JkbGVzc01vZGUgIT09IHRydWUpIHtcbiAgICAgICAgaWYgKCFlbWFpbElucHV0VmFsaWQgfHwgIXBhc3N3b3JkSW5wdXRWYWxpZClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgICQkaW52YWxpZGF0ZSgzLCBzaG93TG9hZGVyMiA9IHRydWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5sb2dpbk1lbWJlckVtYWlsUGFzc3dvcmQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVtYWlsOiBlbWFpbElucHV0LnZhbHVlLFxuICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRJbnB1dC52YWx1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZUNvbnRlbnRHcm91cHM6IHRydWUgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgb25TdWNjZXNzTG9naW4oeyB0eXBlOiBcIkxPR0lOXCIsIGRhdGEgfSk7XG4gICAgICAgICAgJCRpbnZhbGlkYXRlKDMsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAkJGludmFsaWRhdGUoMywgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWVtYWlsSW5wdXRWYWxpZClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgICQkaW52YWxpZGF0ZSgzLCBzaG93TG9hZGVyMiA9IHRydWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uc2VuZE1lbWJlckxvZ2luUGFzc3dvcmRsZXNzRW1haWwoeyBlbWFpbDogZW1haWxJbnB1dC52YWx1ZSB9KTtcbiAgICAgICAgICBzZXRQYXNzd29yZGxlc3NNb2RhbFR5cGUoXCJsb2dpblwiKTtcbiAgICAgICAgICBzZXRQYXNzd29yZGxlc3NFbWFpbChlbWFpbElucHV0LnZhbHVlKTtcbiAgICAgICAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheSA9IFwicGFzc3dvcmRsZXNzX3Rva2VuXCIpO1xuICAgICAgICAgICQkaW52YWxpZGF0ZSgzLCBzaG93TG9hZGVyMiA9IGZhbHNlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgJCRpbnZhbGlkYXRlKDMsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHN1Ym1pdExvZ2luV2l0aFByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5sb2dpbldpdGhQcm92aWRlcih7XG4gICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgICAgYWxsb3dTaWdudXA6IHBhcmFtcyAmJiBwYXJhbXMubG9naW4gJiYgcGFyYW1zLmxvZ2luLmFsbG93U2lnbnVwXG4gICAgICAgIH0pO1xuICAgICAgICBvblN1Y2Nlc3NMb2dpbih7IHR5cGU6IFwiTE9HSU5cIiwgZGF0YSB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAkJGludmFsaWRhdGUoMywgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZW1haWxJbnB1dFZhbGlkID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDQsIGVtYWlsSW5wdXRWYWxpZCk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dF9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIHBhc3N3b3JkSW5wdXRWYWxpZCA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg1LCBwYXNzd29yZElucHV0VmFsaWQpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXRfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZGlzcGxheSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5KTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSBcInNpZ251cFwiKTtcbiAgY29uc3QgY2xpY2tfaGFuZGxlcl8xID0gKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzaWdudXBCdXR0b25VUkw7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMiA9ICgpID0+IHNldFBhc3N3b3JkbGVzc01vZGUodHJ1ZSk7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMyA9ICgpID0+IHNldFBhc3N3b3JkbGVzc01vZGUoZmFsc2UpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzQgPSAocHJvdmlkZXIpID0+IHN1Ym1pdExvZ2luV2l0aFByb3ZpZGVyKHByb3ZpZGVyLnByb3ZpZGVyKTtcbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwiY2xvc2VNb2RhbFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIGNsb3NlTW9kYWwgPSAkJHByb3BzMi5jbG9zZU1vZGFsKTtcbiAgICBpZiAoXCJkaXNwbGF5XCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheSA9ICQkcHJvcHMyLmRpc3BsYXkpO1xuICAgIGlmIChcIm9uU3VjY2Vzc0xvZ2luXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMTIsIG9uU3VjY2Vzc0xvZ2luID0gJCRwcm9wczIub25TdWNjZXNzTG9naW4pO1xuICAgIGlmIChcInBhcmFtc1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIHBhcmFtcyA9ICQkcHJvcHMyLnBhcmFtcyk7XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheSxcbiAgICBjbG9zZU1vZGFsLFxuICAgIHBhcmFtcyxcbiAgICBzaG93TG9hZGVyMixcbiAgICBlbWFpbElucHV0VmFsaWQsXG4gICAgcGFzc3dvcmRJbnB1dFZhbGlkLFxuICAgICRQYXNzd29yZGxlc3NTdG9yZSxcbiAgICAkYXBwLFxuICAgIHRleHQyLFxuICAgIHNpZ251cEJ1dHRvblVSTCxcbiAgICBzdWJtaXRMb2dpbixcbiAgICBzdWJtaXRMb2dpbldpdGhQcm92aWRlcixcbiAgICBvblN1Y2Nlc3NMb2dpbixcbiAgICBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nLFxuICAgIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbnB1dF9kaXNwbGF5X2JpbmRpbmcsXG4gICAgY2xpY2tfaGFuZGxlcixcbiAgICBjbGlja19oYW5kbGVyXzEsXG4gICAgY2xpY2tfaGFuZGxlcl8yLFxuICAgIGNsaWNrX2hhbmRsZXJfMyxcbiAgICBjbGlja19oYW5kbGVyXzRcbiAgXTtcbn1cbnZhciBMb2dpbk1vZGFsID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJEMsIGNyZWF0ZV9mcmFnbWVudCQxNywgc2FmZV9ub3RfZXF1YWwsIHtcbiAgICAgIGNsb3NlTW9kYWw6IDEsXG4gICAgICBkaXNwbGF5OiAwLFxuICAgICAgb25TdWNjZXNzTG9naW46IDEyLFxuICAgICAgcGFyYW1zOiAyXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRfY3NzJGwodGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS0xdzhsYmQ4XCIsIFwiLnJleS13YXMtaGVyZS5zdmVsdGUtMXc4bGJkOHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH1cIik7XG59XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0JGMoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbMjVdID0gbGlzdFtpXTtcbiAgcmV0dXJuIGNoaWxkX2N0eDtcbn1cbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHRfMSQ1KGN0eCwgbGlzdCwgaSkge1xuICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgY2hpbGRfY3R4WzI4XSA9IGxpc3RbaV07XG4gIGNoaWxkX2N0eFszMF0gPSBpO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzYkNChjdHgpIHtcbiAgbGV0IGNsb3NlYnV0dG9uO1xuICBsZXQgY3VycmVudDtcbiAgY2xvc2VidXR0b24gPSBuZXcgQ2xvc2VCdXR0b24oe1xuICAgIHByb3BzOiB7IGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbMV1cbiAgICApIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY2xvc2VidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGNsb3NlYnV0dG9uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGNsb3NlYnV0dG9uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qY2xvc2VNb2RhbCovXG4gICAgICAyKVxuICAgICAgICBjbG9zZWJ1dHRvbl9jaGFuZ2VzLmNsb3NlTW9kYWwgPSAvKmNsb3NlTW9kYWwqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgY2xvc2VidXR0b24uJHNldChjbG9zZWJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY2xvc2VidXR0b24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzUkNihjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBkaXYwO1xuICBsZXQgbGFiZWw7XG4gIGxldCB0MF92YWx1ZSA9IChcbiAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICBjdHhbMjhdLmxhYmVsICsgXCJcIlxuICApO1xuICBsZXQgdDA7XG4gIGxldCBsYWJlbF9mb3JfdmFsdWU7XG4gIGxldCB0MTtcbiAgbGV0IGlucHV0O1xuICBsZXQgaW5wdXRfcGxhY2Vob2xkZXJfdmFsdWU7XG4gIGxldCBpbnB1dF9uYW1lX3ZhbHVlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgbGFiZWwgPSBlbGVtZW50KFwibGFiZWxcIik7XG4gICAgICB0MCA9IHRleHQodDBfdmFsdWUpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgaW5wdXQgPSBlbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICBhdHRyKGxhYmVsLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fbGFiZWxcIik7XG4gICAgICBhdHRyKGxhYmVsLCBcImZvclwiLCBsYWJlbF9mb3JfdmFsdWUgPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eFsyOF0ua2V5KTtcbiAgICAgIGF0dHIoaW5wdXQsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19pbnB1dFwiKTtcbiAgICAgIGF0dHIoaW5wdXQsIFwiZGF0YS1tcy1jdXN0b20tZmllbGRcIiwgXCJcIik7XG4gICAgICBhdHRyKGlucHV0LCBcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgYXR0cihpbnB1dCwgXCJwbGFjZWhvbGRlclwiLCBpbnB1dF9wbGFjZWhvbGRlcl92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzI4XS5sYWJlbCk7XG4gICAgICBhdHRyKGlucHV0LCBcIm5hbWVcIiwgaW5wdXRfbmFtZV92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzI4XS5rZXkpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY3VzdG9tLWZpZWxkLWNvbnRhaW5lclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgbGFiZWwpO1xuICAgICAgYXBwZW5kKGxhYmVsLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjAsIGlucHV0KTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjggJiYgdDBfdmFsdWUgIT09ICh0MF92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4MlsyOF0ubGFiZWwgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDAsIHQwX3ZhbHVlKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjggJiYgbGFiZWxfZm9yX3ZhbHVlICE9PSAobGFiZWxfZm9yX3ZhbHVlID0gLypjdXN0b21GaWVsZCovXG4gICAgICBjdHgyWzI4XS5rZXkpKSB7XG4gICAgICAgIGF0dHIobGFiZWwsIFwiZm9yXCIsIGxhYmVsX2Zvcl92YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTI4ICYmIGlucHV0X3BsYWNlaG9sZGVyX3ZhbHVlICE9PSAoaW5wdXRfcGxhY2Vob2xkZXJfdmFsdWUgPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eDJbMjhdLmxhYmVsKSkge1xuICAgICAgICBhdHRyKGlucHV0LCBcInBsYWNlaG9sZGVyXCIsIGlucHV0X3BsYWNlaG9sZGVyX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjggJiYgaW5wdXRfbmFtZV92YWx1ZSAhPT0gKGlucHV0X25hbWVfdmFsdWUgPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eDJbMjhdLmtleSkpIHtcbiAgICAgICAgYXR0cihpbnB1dCwgXCJuYW1lXCIsIGlucHV0X25hbWVfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYxKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9ja18xJDUoY3R4KSB7XG4gIGxldCBpZl9ibG9ja19hbmNob3I7XG4gIGxldCBpZl9ibG9jayA9IChcbiAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICBjdHhbMjhdLmhpZGRlbiAhPT0gdHJ1ZSAmJiBjcmVhdGVfaWZfYmxvY2tfNSQ2KGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBpZl9ibG9ja19hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrX2FuY2hvciwgYW5jaG9yKTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLypjdXN0b21GaWVsZCovXG4gICAgICAgIGN0eDJbMjhdLmhpZGRlbiAhPT0gdHJ1ZVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrXzUkNihjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgaWZfYmxvY2subShpZl9ibG9ja19hbmNob3IucGFyZW50Tm9kZSwgaWZfYmxvY2tfYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jaykge1xuICAgICAgICBpZl9ibG9jay5kKDEpO1xuICAgICAgICBpZl9ibG9jayA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5kKGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goaWZfYmxvY2tfYW5jaG9yKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNCQ3KGN0eCkge1xuICBsZXQgcGFzc3dvcmRpbnB1dDtcbiAgbGV0IHVwZGF0aW5nX3Bhc3N3b3JkSW5wdXRWYWxpZDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTNdKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRpbnB1dF9wcm9wcyA9IHt9O1xuICBpZiAoXG4gICAgLypwYXNzd29yZElucHV0VmFsaWQqL1xuICAgIGN0eFs1XSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXRfcHJvcHMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypwYXNzd29yZElucHV0VmFsaWQqL1xuICAgIGN0eFs1XTtcbiAgfVxuICBwYXNzd29yZGlucHV0ID0gbmV3IFBhc3N3b3JkSW5wdXQoeyBwcm9wczogcGFzc3dvcmRpbnB1dF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5wdXQsIFwicGFzc3dvcmRJbnB1dFZhbGlkXCIsIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZGlucHV0LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgJiYgZGlydHkgJiAvKnBhc3N3b3JkSW5wdXRWYWxpZCovXG4gICAgICAzMikge1xuICAgICAgICB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0X2NoYW5nZXMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypwYXNzd29yZElucHV0VmFsaWQqL1xuICAgICAgICBjdHgyWzVdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgcGFzc3dvcmRpbnB1dC4kc2V0KHBhc3N3b3JkaW5wdXRfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwYXNzd29yZGlucHV0LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHBhc3N3b3JkaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwYXNzd29yZGlucHV0LCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrXzEkNyhjdHgpIHtcbiAgbGV0IHN1Ym1pdGJ1dHRvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIHN1Ym1pdGJ1dHRvbiA9IG5ldyBTdWJtaXRCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBidXR0b25UZXh0OiBcIkNvbnRpbnVlIHdpdGggRW1haWxcIixcbiAgICAgIGlzTG9hZGluZzogKFxuICAgICAgICAvKnNob3dMb2FkZXIqL1xuICAgICAgICBjdHhbM11cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoc3VibWl0YnV0dG9uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dMb2FkZXIqL1xuICAgICAgOClcbiAgICAgICAgc3VibWl0YnV0dG9uX2NoYW5nZXMuaXNMb2FkaW5nID0gLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4MlszXTtcbiAgICAgIHN1Ym1pdGJ1dHRvbi4kc2V0KHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzdWJtaXRidXR0b24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkYShjdHgpIHtcbiAgbGV0IHN1Ym1pdGJ1dHRvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIHN1Ym1pdGJ1dHRvbiA9IG5ldyBTdWJtaXRCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBidXR0b25UZXh0OiBcIlNpZ24gdXBcIixcbiAgICAgIGlzTG9hZGluZzogKFxuICAgICAgICAvKnNob3dMb2FkZXIqL1xuICAgICAgICBjdHhbM11cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoc3VibWl0YnV0dG9uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dMb2FkZXIqL1xuICAgICAgOClcbiAgICAgICAgc3VibWl0YnV0dG9uX2NoYW5nZXMuaXNMb2FkaW5nID0gLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4MlszXTtcbiAgICAgIHN1Ym1pdGJ1dHRvbi4kc2V0KHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzdWJtaXRidXR0b24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJHUoY3R4KSB7XG4gIGxldCBkaXY0O1xuICBsZXQgZGl2MztcbiAgbGV0IHQzO1xuICBsZXQgdDQ7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLyokYXBwKi9cbiAgICBjdHhbN10uYWRkaXRpb25hbEF1dGhNZXRob2RzLnBhc3N3b3JkbGVzcy5lbmFibGVkID09PSB0cnVlICYmIGNyZWF0ZV9pZl9ibG9ja18xJG4oY3R4KVxuICApO1xuICBsZXQgZWFjaF92YWx1ZSA9IChcbiAgICAvKiRhcHAqL1xuICAgIGN0eFs3XS5hdXRoUHJvdmlkZXJzXG4gICk7XG4gIGxldCBlYWNoX2Jsb2NrcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJGMoZ2V0X2VhY2hfY29udGV4dCRjKGN0eCwgZWFjaF92YWx1ZSwgaSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjQgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYzLmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPVwibXMtbW9kYWxfX2RpdmlkZXItbGluZVwiPjwvZGl2PiBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibXMtbW9kYWxfX2RpdmlkZXItdGV4dFwiPm9yPC9kaXY+IFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtcy1tb2RhbF9fZGl2aWRlci1saW5lXCI+PC9kaXY+YDtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICBhdHRyKGRpdjMsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWRpdmlkZXJcIik7XG4gICAgICBhdHRyKGRpdjQsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2NCwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXY0LCBkaXYzKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0Myk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLm0oZGl2NCwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2NCwgdDQpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdjQsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLyokYXBwKi9cbiAgICAgICAgY3R4Mls3XS5hZGRpdGlvbmFsQXV0aE1ldGhvZHMucGFzc3dvcmRsZXNzLmVuYWJsZWQgPT09IHRydWVcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgICAgIDEyOCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrXzEkbihjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgaWZfYmxvY2subShkaXY0LCB0NCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKnN1Ym1pdFNpZ251cFdpdGhQcm92aWRlciwgJGFwcCovXG4gICAgICAxMTUyKSB7XG4gICAgICAgIGVhY2hfdmFsdWUgPSAvKiRhcHAqL1xuICAgICAgICBjdHgyWzddLmF1dGhQcm92aWRlcnM7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHQkYyhjdHgyLCBlYWNoX3ZhbHVlLCBpKTtcbiAgICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2skYyhjaGlsZF9jdHgpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXY0LCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLmQoMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaF9ibG9ja3MubGVuZ3RoID0gZWFjaF92YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2NCk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmQoKTtcbiAgICAgIGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcywgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRuKGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICBsZXQgaWZfYmxvY2s7XG4gIGxldCBjdXJyZW50O1xuICBjb25zdCBpZl9ibG9ja19jcmVhdG9ycyA9IFtjcmVhdGVfaWZfYmxvY2tfMiRpLCBjcmVhdGVfZWxzZV9ibG9jayRlXTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzEoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKiRQYXNzd29yZGxlc3NTdG9yZSovXG4gICAgICBjdHgyWzZdLnBhc3N3b3JkbGVzc01vZGUgPT09IGZhbHNlXG4gICAgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgpO1xuICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvbnNcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ID09PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgaWZfYmxvY2subShkaXYsIG51bGwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2skZShjdHgpIHtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IHNwYW47XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBgJHsvKnRleHQqL1xuICAgICAgY3R4WzhdW1wic2lnbnVwX3dpdGhfcGFzc3dvcmRcIl0gfHwgXCJTaWdudXAgd2l0aCBQYXNzd29yZFwifWA7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiZGF0YS1jeVwiLCBcImNvbnRpbnVlLXdpdGgtcGFzc3dvcmRcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3Bhbik7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8yKi9cbiAgICAgICAgICBjdHhbMTZdXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18yJGkoY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBlbWFpbGljb247XG4gIGxldCB0MDtcbiAgbGV0IHNwYW47XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGVtYWlsaWNvbiA9IG5ldyBFbWFpbEljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChlbWFpbGljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbOF1bXCJjb250aW51ZV93aXRoX2VtYWlsXCJdIHx8IFwiQ29udGludWUgd2l0aCBFbWFpbFwifWA7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiZGF0YS1jeVwiLCBcImNvbnRpbnVlLXdpdGgtZW1haWxcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGVtYWlsaWNvbiwgYnV0dG9uLCBudWxsKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQwKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4pO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8xKi9cbiAgICAgICAgICBjdHhbMTVdXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihlbWFpbGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZW1haWxpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGJ1dHRvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChlbWFpbGljb24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrJGMoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBidXR0b247XG4gIGxldCBpbWc7XG4gIGxldCBpbWdfc3JjX3ZhbHVlO1xuICBsZXQgaW1nX2FsdF92YWx1ZTtcbiAgbGV0IHQwO1xuICBsZXQgc3BhbjtcbiAgbGV0IHQxO1xuICBsZXQgdDJfdmFsdWUgPSAoXG4gICAgLypwcm92aWRlciovXG4gICAgY3R4WzI1XS5uYW1lICsgXCJcIlxuICApO1xuICBsZXQgdDI7XG4gIGxldCB0MztcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBmdW5jdGlvbiBjbGlja19oYW5kbGVyXzMoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qY2xpY2tfaGFuZGxlcl8zKi9cbiAgICAgIGN0eFsxN10oXG4gICAgICAgIC8qcHJvdmlkZXIqL1xuICAgICAgICBjdHhbMjVdXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGltZyA9IGVsZW1lbnQoXCJpbWdcIik7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICB0MSA9IHRleHQoXCJDb250aW51ZSB3aXRoIFwiKTtcbiAgICAgIHQyID0gdGV4dCh0Ml92YWx1ZSk7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBpZiAoIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzI1XS5pY29uKSlcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsyNV0ubmFtZSk7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwidHlwZVwiLCBcImJ1dHRvblwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NvY2lhbC1idXR0b25zXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdiwgYnV0dG9uKTtcbiAgICAgIGFwcGVuZChidXR0b24sIGltZyk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuKTtcbiAgICAgIGFwcGVuZChzcGFuLCB0MSk7XG4gICAgICBhcHBlbmQoc3BhbiwgdDIpO1xuICAgICAgYXBwZW5kKGRpdiwgdDMpO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oYnV0dG9uLCBcImNsaWNrXCIsIGNsaWNrX2hhbmRsZXJfMyk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChuZXdfY3R4LCBkaXJ0eSkge1xuICAgICAgY3R4ID0gbmV3X2N0eDtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjggJiYgIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzI1XS5pY29uKSkge1xuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTI4ICYmIGltZ19hbHRfdmFsdWUgIT09IChpbWdfYWx0X3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMjVdLm5hbWUpKSB7XG4gICAgICAgIGF0dHIoaW1nLCBcImFsdFwiLCBpbWdfYWx0X3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjggJiYgdDJfdmFsdWUgIT09ICh0Ml92YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzI1XS5uYW1lICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQyLCB0Ml92YWx1ZSk7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDE2KGN0eCkge1xuICBsZXQgZGl2NDtcbiAgbGV0IHQwO1xuICBsZXQgZGl2MztcbiAgbGV0IGZpZ3VyZWVsZW1lbnQ7XG4gIGxldCB0MTtcbiAgbGV0IGgyO1xuICBsZXQgdDM7XG4gIGxldCBmb3JtO1xuICBsZXQgdDQ7XG4gIGxldCBlbWFpbGlucHV0O1xuICBsZXQgdXBkYXRpbmdfZW1haWxJbnB1dFZhbGlkO1xuICBsZXQgdDU7XG4gIGxldCBkaXYwO1xuICBsZXQgdDg7XG4gIGxldCB0OTtcbiAgbGV0IGRpdjE7XG4gIGxldCB0MTA7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jazI7XG4gIGxldCB0MTE7XG4gIGxldCBkaXYyO1xuICBsZXQgYnV0dG9uO1xuICBsZXQgdDEzO1xuICBsZXQgdDE0O1xuICBsZXQgbW9kYWxmb290ZXI7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGxldCBpZl9ibG9jazAgPSAoIS8qcGFyYW1zKi9cbiAgY3R4WzJdIHx8ICEvKnBhcmFtcyovXG4gIGN0eFsyXS5oaWRlQ2xvc2VCdXR0b24pICYmIGNyZWF0ZV9pZl9ibG9ja182JDQoY3R4KTtcbiAgZmlndXJlZWxlbWVudCA9IG5ldyBGaWd1cmVFbGVtZW50KHt9KTtcbiAgbGV0IGVhY2hfdmFsdWVfMSA9IChcbiAgICAvKiRhcHAqL1xuICAgIGN0eFs3XS5jdXN0b21GaWVsZHNcbiAgKTtcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9ja18xJDUoZ2V0X2VhY2hfY29udGV4dF8xJDUoY3R4LCBlYWNoX3ZhbHVlXzEsIGkpKTtcbiAgfVxuICBmdW5jdGlvbiBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzEyXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IGVtYWlsaW5wdXRfcHJvcHMgPSB7fTtcbiAgaWYgKFxuICAgIC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbNF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBlbWFpbGlucHV0X3Byb3BzLmVtYWlsSW5wdXRWYWxpZCA9IC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbNF07XG4gIH1cbiAgZW1haWxpbnB1dCA9IG5ldyBFbWFpbElucHV0KHsgcHJvcHM6IGVtYWlsaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChlbWFpbGlucHV0LCBcImVtYWlsSW5wdXRWYWxpZFwiLCBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIGxldCBpZl9ibG9jazEgPSAoXG4gICAgLyokUGFzc3dvcmRsZXNzU3RvcmUqL1xuICAgIGN0eFs2XS5wYXNzd29yZGxlc3NNb2RlID09PSBmYWxzZSAmJiBjcmVhdGVfaWZfYmxvY2tfNCQ3KGN0eClcbiAgKTtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbY3JlYXRlX2lmX2Jsb2NrXzMkYSwgY3JlYXRlX2Vsc2VfYmxvY2tfMSQ3XTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKFxuICAgICAgLyokUGFzc3dvcmRsZXNzU3RvcmUqL1xuICAgICAgY3R4Mls2XS5wYXNzd29yZGxlc3NNb2RlID09PSBmYWxzZVxuICAgIClcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGlmX2Jsb2NrMiA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICBsZXQgaWZfYmxvY2szID0gKFxuICAgIC8qJGFwcCovXG4gICAgKGN0eFs3XS5hdXRoUHJvdmlkZXJzLmxlbmd0aCA+IDAgfHwgLyokYXBwKi9cbiAgICBjdHhbN10uYWRkaXRpb25hbEF1dGhNZXRob2RzLnBhc3N3b3JkbGVzcy5lbmFibGVkID09PSB0cnVlKSAmJiBjcmVhdGVfaWZfYmxvY2skdShjdHgpXG4gICk7XG4gIG1vZGFsZm9vdGVyID0gbmV3IE1vZGFsRm9vdGVyKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgaDIgPSBlbGVtZW50KFwiaDJcIik7XG4gICAgICBoMi50ZXh0Q29udGVudCA9IFwiQ3JlYXRlIGFuIGFjY291bnRcIjtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGZvcm0gPSBlbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgfVxuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChlbWFpbGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICAgIHQ1ID0gc3BhY2UoKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MC5pbm5lckhUTUwgPSBgPGxhYmVsIGNsYXNzPVwibXMtZm9ybV9fbGFiZWxcIiBmb3I9XCJSZXlcIj5SZXkgd2FzIGhlcmU8L2xhYmVsPiBcbiAgICAgICAgPGlucHV0IGNsYXNzPVwibXMtZm9ybV9faW5wdXRcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiUmV5JiMzOTtzIEZhdm9yaXRlIENvbG9yXCIgbmFtZT1cIlJleVwiLz5gO1xuICAgICAgdDggPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIHQ5ID0gc3BhY2UoKTtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdDEwID0gc3BhY2UoKTtcbiAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICB0MTEgPSBzcGFjZSgpO1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gXCJBbHJlYWR5IGhhdmUgYW4gYWNjb3VudD9cIjtcbiAgICAgIHQxMyA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2szKVxuICAgICAgICBpZl9ibG9jazMuYygpO1xuICAgICAgdDE0ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihoMiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZVwiKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2dyb3VwIHJleS13YXMtaGVyZSBzdmVsdGUtMXc4bGJkOFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJpZFwiLCBcImhjYXB0Y2hhXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwiaC1jYXB0Y2hhXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19idXR0b24gbXMtZm9ybV9fYnV0dG9uLS10ZXh0IG1zLWZvcm1fX2J1dHRvbi0tdG9wLXNwYWNpbmdcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19mbGV4IG1zLWZvcm1fX2ZsZXgtLWNlbnRlcmVkXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImNsYXNzXCIsIFwibXMtZm9ybVwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJhY3Rpb25cIiwgXCJcIik7XG4gICAgICBhdHRyKGZvcm0sIFwibWV0aG9kXCIsIFwicG9zdFwiKTtcbiAgICAgIGF0dHIoZGl2MywgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXY0LCBcImNsYXNzXCIsIFwibXMtbW9kYWxcIik7XG4gICAgICBhdHRyKGRpdjQsIFwiaWRcIiwgXCJTaWdudXBNb2RhbFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjQsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAubShkaXY0LCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0MCk7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2Myk7XG4gICAgICBtb3VudF9jb21wb25lbnQoZmlndXJlZWxlbWVudCwgZGl2MywgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDEpO1xuICAgICAgYXBwZW5kKGRpdjMsIGgyKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MywgZm9ybSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZm9ybSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGVuZChmb3JtLCB0NCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoZW1haWxpbnB1dCwgZm9ybSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZm9ybSwgdDUpO1xuICAgICAgYXBwZW5kKGZvcm0sIGRpdjApO1xuICAgICAgYXBwZW5kKGZvcm0sIHQ4KTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5tKGZvcm0sIG51bGwpO1xuICAgICAgYXBwZW5kKGZvcm0sIHQ5KTtcbiAgICAgIGFwcGVuZChmb3JtLCBkaXYxKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0MTApO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShmb3JtLCBudWxsKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0MTEpO1xuICAgICAgYXBwZW5kKGZvcm0sIGRpdjIpO1xuICAgICAgYXBwZW5kKGRpdjIsIGJ1dHRvbik7XG4gICAgICBhcHBlbmQoZGl2MywgdDEzKTtcbiAgICAgIGlmIChpZl9ibG9jazMpXG4gICAgICAgIGlmX2Jsb2NrMy5tKGRpdjMsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxNCk7XG4gICAgICBtb3VudF9jb21wb25lbnQobW9kYWxmb290ZXIsIGRpdjQsIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IFtcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgICAgY3R4WzE0XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKGZvcm0sIFwic3VibWl0XCIsIHN0b3BfcHJvcGFnYXRpb24ocHJldmVudF9kZWZhdWx0KFxuICAgICAgICAgICAgLypzdWJtaXRTaWdudXAqL1xuICAgICAgICAgICAgY3R4WzldXG4gICAgICAgICAgKSkpXG4gICAgICAgIF07XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoIS8qcGFyYW1zKi9cbiAgICAgIGN0eDJbMl0gfHwgIS8qcGFyYW1zKi9cbiAgICAgIGN0eDJbMl0uaGlkZUNsb3NlQnV0dG9uKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypwYXJhbXMqL1xuICAgICAgICAgIDQpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzYkNChjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazAubShkaXY0LCB0MCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazAsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTI4KSB7XG4gICAgICAgIGVhY2hfdmFsdWVfMSA9IC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uY3VzdG9tRmllbGRzO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVhY2hfdmFsdWVfMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHRfMSQ1KGN0eDIsIGVhY2hfdmFsdWVfMSwgaSk7XG4gICAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrXzEkNShjaGlsZF9jdHgpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShmb3JtLCB0NCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5kKDEpO1xuICAgICAgICB9XG4gICAgICAgIGVhY2hfYmxvY2tzLmxlbmd0aCA9IGVhY2hfdmFsdWVfMS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBjb25zdCBlbWFpbGlucHV0X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmICghdXBkYXRpbmdfZW1haWxJbnB1dFZhbGlkICYmIGRpcnR5ICYgLyplbWFpbElucHV0VmFsaWQqL1xuICAgICAgMTYpIHtcbiAgICAgICAgdXBkYXRpbmdfZW1haWxJbnB1dFZhbGlkID0gdHJ1ZTtcbiAgICAgICAgZW1haWxpbnB1dF9jaGFuZ2VzLmVtYWlsSW5wdXRWYWxpZCA9IC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICAgICAgY3R4Mls0XTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2VtYWlsSW5wdXRWYWxpZCA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGVtYWlsaW5wdXQuJHNldChlbWFpbGlucHV0X2NoYW5nZXMpO1xuICAgICAgaWYgKFxuICAgICAgICAvKiRQYXNzd29yZGxlc3NTdG9yZSovXG4gICAgICAgIGN0eDJbNl0ucGFzc3dvcmRsZXNzTW9kZSA9PT0gZmFsc2VcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgICAgaWZfYmxvY2sxLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qJFBhc3N3b3JkbGVzc1N0b3JlKi9cbiAgICAgICAgICA2NCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBjcmVhdGVfaWZfYmxvY2tfNCQ3KGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5tKGZvcm0sIHQ5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ucChjdHgyLCBkaXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrMiA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrMikge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMi5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgIGlmX2Jsb2NrMi5tKGZvcm0sIHQxMSk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uYXV0aFByb3ZpZGVycy5sZW5ndGggPiAwIHx8IC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uYWRkaXRpb25hbEF1dGhNZXRob2RzLnBhc3N3b3JkbGVzcy5lbmFibGVkID09PSB0cnVlXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMykge1xuICAgICAgICAgIGlmX2Jsb2NrMy5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgICAgIDEyOCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazMsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazMgPSBjcmVhdGVfaWZfYmxvY2skdShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazMuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazMubShkaXYzLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazMpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMyA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oZW1haWxpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazMpO1xuICAgICAgdHJhbnNpdGlvbl9pbihtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZmlndXJlZWxlbWVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZW1haWxpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMik7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazMpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2NCk7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuZCgpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZmlndXJlZWxlbWVudCk7XG4gICAgICBkZXN0cm95X2VhY2goZWFjaF9ibG9ja3MsIGRldGFjaGluZyk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChlbWFpbGlucHV0KTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5kKCk7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgICBpZiAoaWZfYmxvY2szKVxuICAgICAgICBpZl9ibG9jazMuZCgpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobW9kYWxmb290ZXIpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG52YXIgaGNhcHRjaGFTaXRla2V5ID0gXCI4Mzg3MTFmOS0wZTMwLTQ4ZTktODllNi04ZjFlYzRiNzk3MDVcIjtcbmZ1bmN0aW9uIGV4ZWN1dGVDYXB0Y2hhKCkge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHsgcmVzcG9uc2UgfSA9IHlpZWxkIHdpbmRvdy5oY2FwdGNoYS5leGVjdXRlKHsgYXN5bmM6IHRydWUgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJEIoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgdmFyIF9hO1xuICBsZXQgJFBhc3N3b3JkbGVzc1N0b3JlO1xuICBsZXQgJGFwcDtcbiAgbGV0ICR0ZXh0U3RvcmU7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBQYXNzd29yZGxlc3NTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSg2LCAkUGFzc3dvcmRsZXNzU3RvcmUgPSAkJHZhbHVlKSk7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBBcHBTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSg3LCAkYXBwID0gJCR2YWx1ZSkpO1xuICBjb21wb25lbnRfc3Vic2NyaWJlKCQkc2VsZiwgVGV4dFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDE5LCAkdGV4dFN0b3JlID0gJCR2YWx1ZSkpO1xuICBsZXQgeyBjbG9zZU1vZGFsIH0gPSAkJHByb3BzO1xuICBsZXQgeyBkaXNwbGF5IH0gPSAkJHByb3BzO1xuICBsZXQgeyBvblN1Y2Nlc3NTaWdudXAgfSA9ICQkcHJvcHM7XG4gIGxldCB7IHBhcmFtcyB9ID0gJCRwcm9wcztcbiAgaWYgKCRhcHAuYWRkaXRpb25hbEF1dGhNZXRob2RzLnBhc3N3b3JkbGVzcy5pc0RlZmF1bHQgPT09IHRydWUpIHtcbiAgICBzZXRQYXNzd29yZGxlc3NNb2RlKHRydWUpO1xuICB9XG4gIGxldCB0ZXh0MiA9ICR0ZXh0U3RvcmUudGV4dDtcbiAgbGV0IHNob3dMb2FkZXIyID0gZmFsc2U7XG4gIGxldCBlbWFpbElucHV0VmFsaWQgPSBmYWxzZTtcbiAgbGV0IHBhc3N3b3JkSW5wdXRWYWxpZCA9IGZhbHNlO1xuICBsZXQgY2FwdGNoYVJlcXVpcmVkID0gJGFwcC5jYXB0Y2hhUmVxdWlyZWQ7XG4gIGxldCBoY2FwdGNoYVdpZGdldElEO1xuICBjb25zdCBwbGFucyA9ICgoKF9hID0gcGFyYW1zID09IG51bGwgPyB2b2lkIDAgOiBwYXJhbXMuc2lnbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX2EucGxhbnMpIHx8IFtdKS5tYXAoKHBsYW4pID0+IHtcbiAgICByZXR1cm4geyBwbGFuSWQ6IHBsYW4gfTtcbiAgfSk7XG4gIGZ1bmN0aW9uIHJlbmRlckNhcHRjaGEoKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGlmIChjYXB0Y2hhUmVxdWlyZWQpIHtcbiAgICAgICAgeWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fY2FwdGNoYVJlYWR5O1xuICAgICAgICBoY2FwdGNoYVdpZGdldElEID0gd2luZG93LmhjYXB0Y2hhLnJlbmRlcihcImhjYXB0Y2hhXCIsIHsgc2l0ZWtleTogaGNhcHRjaGFTaXRla2V5LCB0aGVtZTogXCJsaWdodFwiIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJlbmRlckNhcHRjaGEoKTtcbiAgZnVuY3Rpb24gZ2V0Q2FwdGNoYSgpIHtcbiAgICByZXR1cm4gd2luZG93LmhjYXB0Y2hhLmdldFJlc3BvbnNlKGhjYXB0Y2hhV2lkZ2V0SUQpO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0Q2FwdGNoYSgpIHtcbiAgICBpZiAoY2FwdGNoYVJlcXVpcmVkICYmIHdpbmRvdy5oY2FwdGNoYSkge1xuICAgICAgd2luZG93LmhjYXB0Y2hhLnJlc2V0KGhjYXB0Y2hhV2lkZ2V0SUQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzdWJtaXRTaWdudXAoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICB2YXIgX2EyO1xuICAgICAgY29uc3QgZW1haWxJbnB1dCA9IGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCJbdHlwZT1lbWFpbF1cIik7XG4gICAgICBjb25zdCBwYXNzd29yZElucHV0ID0gZS50YXJnZXQucXVlcnlTZWxlY3RvcihcIltkYXRhLW1zLWludGVybmFsLXBhc3N3b3JkXVwiKTtcbiAgICAgIGNvbnN0IGN1c3RvbUZpZWxkcyA9IHt9O1xuICAgICAgY29uc3QgY3VzdG9tRmllbGRJbnB1dHMgPSBBcnJheS5mcm9tKGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1tcy1jdXN0b20tZmllbGRdXCIpKTtcbiAgICAgIGN1c3RvbUZpZWxkSW5wdXRzLm1hcCgoaW5wdXQpID0+IHtcbiAgICAgICAgY3VzdG9tRmllbGRzW2lucHV0LmdldEF0dHJpYnV0ZShcIm5hbWVcIildID0gaW5wdXQudmFsdWU7XG4gICAgICB9KS5sZW5ndGg7XG4gICAgICBpZiAoJFBhc3N3b3JkbGVzc1N0b3JlLnBhc3N3b3JkbGVzc01vZGUgIT09IHRydWUpIHtcbiAgICAgICAgaWYgKCFlbWFpbElucHV0VmFsaWQgfHwgIXBhc3N3b3JkSW5wdXRWYWxpZClcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWVtYWlsSW5wdXRWYWxpZClcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkJGludmFsaWRhdGUoMywgc2hvd0xvYWRlcjIgPSB0cnVlKTtcbiAgICAgIGlmIChlLnRhcmdldC5xdWVyeVNlbGVjdG9yKFwiW25hbWU9UmV5XVwiKS52YWx1ZSkge1xuICAgICAgICBlLnRhcmdldC5yZXNldCgpO1xuICAgICAgICAkJGludmFsaWRhdGUoMywgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBjYXB0Y2hhVG9rZW47XG4gICAgICBpZiAoY2FwdGNoYVJlcXVpcmVkKSB7XG4gICAgICAgIHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX2NhcHRjaGFSZWFkeTtcbiAgICAgICAgY2FwdGNoYVRva2VuID0gZ2V0Q2FwdGNoYSgpO1xuICAgICAgICBpZiAoIWNhcHRjaGFUb2tlbikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYXB0Y2hhVG9rZW4gPSB5aWVsZCBleGVjdXRlQ2FwdGNoYSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgJCRpbnZhbGlkYXRlKDMsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCRQYXNzd29yZGxlc3NTdG9yZS5wYXNzd29yZGxlc3NNb2RlICE9PSB0cnVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnNpZ251cE1lbWJlckVtYWlsUGFzc3dvcmQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVtYWlsOiBlbWFpbElucHV0LnZhbHVlLFxuICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRJbnB1dC52YWx1ZSxcbiAgICAgICAgICAgICAgcGxhbnMsXG4gICAgICAgICAgICAgIGN1c3RvbUZpZWxkcyxcbiAgICAgICAgICAgICAgY2FwdGNoYVRva2VuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBpbmNsdWRlQ29udGVudEdyb3VwczogdHJ1ZSB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBvblN1Y2Nlc3NTaWdudXAoeyB0eXBlOiBcIlNJR05VUFwiLCBkYXRhIH0pO1xuICAgICAgICAgICQkaW52YWxpZGF0ZSgzLCBzaG93TG9hZGVyMiA9IGZhbHNlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgJCRpbnZhbGlkYXRlKDMsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgICByZXNldENhcHRjaGEoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnNlbmRNZW1iZXJTaWdudXBQYXNzd29yZGxlc3NFbWFpbCh7IGVtYWlsOiBlbWFpbElucHV0LnZhbHVlIH0pO1xuICAgICAgICAgIHNldFBhc3N3b3JkbGVzc01vZGFsVHlwZShcInNpZ251cFwiKTtcbiAgICAgICAgICBzZXRQYXNzd29yZGxlc3NFbWFpbChlbWFpbElucHV0LnZhbHVlKTtcbiAgICAgICAgICBzZXRQYXNzd29yZGxlc3NQbGFucygoKF9hMiA9IHBhcmFtcyA9PSBudWxsID8gdm9pZCAwIDogcGFyYW1zLnNpZ251cCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5wbGFucykgfHwgW10pO1xuICAgICAgICAgIHNldFBhc3N3b3JkbGVzc0N1c3RvbUZpZWxkcyhjdXN0b21GaWVsZHMpO1xuICAgICAgICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5ID0gXCJwYXNzd29yZGxlc3NfdG9rZW5cIik7XG4gICAgICAgICAgJCRpbnZhbGlkYXRlKDMsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAkJGludmFsaWRhdGUoMywgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICAgIHJlc2V0Q2FwdGNoYSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gc3VibWl0U2lnbnVwV2l0aFByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5zaWdudXBXaXRoUHJvdmlkZXIoeyBwcm92aWRlciwgcGxhbnMgfSk7XG4gICAgICAgIG9uU3VjY2Vzc1NpZ251cCh7IHR5cGU6IFwiU0lHTlVQXCIsIGRhdGEgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDMsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW1haWxpbnB1dF9lbWFpbElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIGVtYWlsSW5wdXRWYWxpZCA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg0LCBlbWFpbElucHV0VmFsaWQpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwYXNzd29yZElucHV0VmFsaWQgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoNSwgcGFzc3dvcmRJbnB1dFZhbGlkKTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSBcImxvZ2luXCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAoKSA9PiBzZXRQYXNzd29yZGxlc3NNb2RlKHRydWUpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzIgPSAoKSA9PiBzZXRQYXNzd29yZGxlc3NNb2RlKGZhbHNlKTtcbiAgY29uc3QgY2xpY2tfaGFuZGxlcl8zID0gKHByb3ZpZGVyKSA9PiBzdWJtaXRTaWdudXBXaXRoUHJvdmlkZXIocHJvdmlkZXIucHJvdmlkZXIpO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJjbG9zZU1vZGFsXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMSwgY2xvc2VNb2RhbCA9ICQkcHJvcHMyLmNsb3NlTW9kYWwpO1xuICAgIGlmIChcImRpc3BsYXlcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5ID0gJCRwcm9wczIuZGlzcGxheSk7XG4gICAgaWYgKFwib25TdWNjZXNzU2lnbnVwXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMTEsIG9uU3VjY2Vzc1NpZ251cCA9ICQkcHJvcHMyLm9uU3VjY2Vzc1NpZ251cCk7XG4gICAgaWYgKFwicGFyYW1zXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMiwgcGFyYW1zID0gJCRwcm9wczIucGFyYW1zKTtcbiAgfTtcbiAgcmV0dXJuIFtcbiAgICBkaXNwbGF5LFxuICAgIGNsb3NlTW9kYWwsXG4gICAgcGFyYW1zLFxuICAgIHNob3dMb2FkZXIyLFxuICAgIGVtYWlsSW5wdXRWYWxpZCxcbiAgICBwYXNzd29yZElucHV0VmFsaWQsXG4gICAgJFBhc3N3b3JkbGVzc1N0b3JlLFxuICAgICRhcHAsXG4gICAgdGV4dDIsXG4gICAgc3VibWl0U2lnbnVwLFxuICAgIHN1Ym1pdFNpZ251cFdpdGhQcm92aWRlcixcbiAgICBvblN1Y2Nlc3NTaWdudXAsXG4gICAgZW1haWxpbnB1dF9lbWFpbElucHV0VmFsaWRfYmluZGluZyxcbiAgICBwYXNzd29yZGlucHV0X3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMixcbiAgICBjbGlja19oYW5kbGVyXzNcbiAgXTtcbn1cbnZhciBTaWdudXBNb2RhbCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdChcbiAgICAgIHRoaXMsXG4gICAgICBvcHRpb25zLFxuICAgICAgaW5zdGFuY2UkQixcbiAgICAgIGNyZWF0ZV9mcmFnbWVudCQxNixcbiAgICAgIHNhZmVfbm90X2VxdWFsLFxuICAgICAge1xuICAgICAgICBjbG9zZU1vZGFsOiAxLFxuICAgICAgICBkaXNwbGF5OiAwLFxuICAgICAgICBvblN1Y2Nlc3NTaWdudXA6IDExLFxuICAgICAgICBwYXJhbXM6IDJcbiAgICAgIH0sXG4gICAgICBhZGRfY3NzJGxcbiAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDE1KGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk03LjQxIDEuNDFMNiAwTDAgNkw2IDEyTDcuNDEgMTAuNTlMMi44MyA2TDcuNDEgMS40MVpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgOCAxMlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgQmFja0ljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JDE1LCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDE0KGN0eCkge1xuICBsZXQgZGl2NDtcbiAgbGV0IGRpdjA7XG4gIGxldCBidXR0b247XG4gIGxldCBiYWNraWNvbjtcbiAgbGV0IHQwO1xuICBsZXQgZGl2MztcbiAgbGV0IGZpZ3VyZWVsZW1lbnQ7XG4gIGxldCB0MTtcbiAgbGV0IGgyO1xuICBsZXQgdDM7XG4gIGxldCBwO1xuICBsZXQgdDU7XG4gIGxldCBmb3JtO1xuICBsZXQgZW1haWxpbnB1dDtcbiAgbGV0IHVwZGF0aW5nX2VtYWlsSW5wdXRWYWxpZDtcbiAgbGV0IHQ2O1xuICBsZXQgc3VibWl0YnV0dG9uO1xuICBsZXQgdDc7XG4gIGxldCBkaXYyO1xuICBsZXQgZGl2MTtcbiAgbGV0IHQ5O1xuICBsZXQgbW9kYWxmb290ZXI7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGJhY2tpY29uID0gbmV3IEJhY2tJY29uKHt9KTtcbiAgZmlndXJlZWxlbWVudCA9IG5ldyBGaWd1cmVFbGVtZW50KHt9KTtcbiAgZnVuY3Rpb24gZW1haWxpbnB1dF9lbWFpbElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFs3XSh2YWx1ZSk7XG4gIH1cbiAgbGV0IGVtYWlsaW5wdXRfcHJvcHMgPSB7XG4gICAgcGxhY2Vob2xkZXI6IChcbiAgICAgIC8qdGV4dCovXG4gICAgICBjdHhbM11bXCJyZXNldF9lbWFpbF9wbGFjZWhvbGRlclwiXVxuICAgIClcbiAgfTtcbiAgaWYgKFxuICAgIC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbMV0gIT09IHZvaWQgMFxuICApIHtcbiAgICBlbWFpbGlucHV0X3Byb3BzLmVtYWlsSW5wdXRWYWxpZCA9IC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgZW1haWxpbnB1dCA9IG5ldyBFbWFpbElucHV0KHsgcHJvcHM6IGVtYWlsaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChlbWFpbGlucHV0LCBcImVtYWlsSW5wdXRWYWxpZFwiLCBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIHN1Ym1pdGJ1dHRvbiA9IG5ldyBTdWJtaXRCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qdGV4dCovXG4gICAgICAgIGN0eFszXVtcInJlc2V0XCJdIHx8IFwiU2VuZCBMaW5rXCJcbiAgICAgICksXG4gICAgICBpc0xvYWRpbmc6IChcbiAgICAgICAgLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4WzJdXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgbW9kYWxmb290ZXIgPSBuZXcgTW9kYWxGb290ZXIoe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXY0ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYmFja2ljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgaDIgPSBlbGVtZW50KFwiaDJcIik7XG4gICAgICBoMi50ZXh0Q29udGVudCA9IGAkey8qdGV4dCovXG4gICAgICBjdHhbM11bXCJyZXNldF95b3VyX3Bhc3N3b3JkXCJdIHx8IFwiUmVzZXQgeW91ciBwYXNzd29yZFwifWA7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBwID0gZWxlbWVudChcInBcIik7XG4gICAgICBwLnRleHRDb250ZW50ID0gYCR7Lyp0ZXh0Ki9cbiAgICAgIGN0eFszXVtcInJlc2V0X2luc3RydWN0aW9uc1wiXSB8fCBcIldlXFx1MjAxOWxsIGVtYWlsIHlvdSBhIHNlY3VyZSBsaW5rIHRvIHJlc2V0IHRoZSBwYXNzd29yZCBmb3IgeW91ciBhY2NvdW50LlwifWA7XG4gICAgICB0NSA9IHNwYWNlKCk7XG4gICAgICBmb3JtID0gZWxlbWVudChcImZvcm1cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGVtYWlsaW5wdXQuJCQuZnJhZ21lbnQpO1xuICAgICAgdDYgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDcgPSBzcGFjZSgpO1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjEudGV4dENvbnRlbnQgPSBgJHsvKnRleHQqL1xuICAgICAgY3R4WzNdW1wicmVzZXRfYWxyZWFkeV9oYXZlX2NvZGVcIl0gfHwgXCJJIGFscmVhZHkgaGF2ZSBhIGNvZGVcIn1gO1xuICAgICAgdDkgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGRpdjAsIFwiZGF0YS1jeVwiLCBcImJhY2stYnRuXCIpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2JhY2tcIik7XG4gICAgICBhdHRyKGgyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlIG1zLW1vZGFsX190aXRsZS0tc3ViLXRleHRcIik7XG4gICAgICBhdHRyKHAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGV4dFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xpbmtcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19mbGV4IG1zLWZvcm1fX2ZsZXgtLWNlbnRlcmVkXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImNsYXNzXCIsIFwibXMtZm9ybVwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJhY3Rpb25cIiwgXCJcIik7XG4gICAgICBhdHRyKGZvcm0sIFwibWV0aG9kXCIsIFwicG9zdFwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIik7XG4gICAgICBhdHRyKGRpdjMsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY29udGVudFwiKTtcbiAgICAgIGF0dHIoZGl2NCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsXCIpO1xuICAgICAgYXR0cihkaXY0LCBcImlkXCIsIFwiUGFzc3dvcmRSZXNldE1vZGFsXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2NCwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXY0LCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYwLCBidXR0b24pO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJhY2tpY29uLCBidXR0b24sIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQwKTtcbiAgICAgIGFwcGVuZChkaXY0LCBkaXYzKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChmaWd1cmVlbGVtZW50LCBkaXYzLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MywgaDIpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQzKTtcbiAgICAgIGFwcGVuZChkaXYzLCBwKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0NSk7XG4gICAgICBhcHBlbmQoZGl2MywgZm9ybSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoZW1haWxpbnB1dCwgZm9ybSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZm9ybSwgdDYpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHN1Ym1pdGJ1dHRvbiwgZm9ybSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZm9ybSwgdDcpO1xuICAgICAgYXBwZW5kKGZvcm0sIGRpdjIpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjEpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQ5KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtb2RhbGZvb3RlciwgZGl2NCwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlciovXG4gICAgICAgICAgICBjdHhbNl1cbiAgICAgICAgICApLFxuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGRpdjEsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfMSovXG4gICAgICAgICAgICBjdHhbOF1cbiAgICAgICAgICApLFxuICAgICAgICAgIGxpc3Rlbihmb3JtLCBcInN1Ym1pdFwiLCBzdG9wX3Byb3BhZ2F0aW9uKHByZXZlbnRfZGVmYXVsdChcbiAgICAgICAgICAgIC8qc3VibWl0UGFzc3dvcmRSZXNldCovXG4gICAgICAgICAgICBjdHhbNF1cbiAgICAgICAgICApKSlcbiAgICAgICAgXTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGNvbnN0IGVtYWlsaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgJiYgZGlydHkgJiAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX2VtYWlsSW5wdXRWYWxpZCA9IHRydWU7XG4gICAgICAgIGVtYWlsaW5wdXRfY2hhbmdlcy5lbWFpbElucHV0VmFsaWQgPSAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBlbWFpbGlucHV0LiRzZXQoZW1haWxpbnB1dF9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dMb2FkZXIqL1xuICAgICAgNClcbiAgICAgICAgc3VibWl0YnV0dG9uX2NoYW5nZXMuaXNMb2FkaW5nID0gLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4MlsyXTtcbiAgICAgIHN1Ym1pdGJ1dHRvbi4kc2V0KHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGJhY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oZW1haWxpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4obW9kYWxmb290ZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYmFja2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGVtYWlsaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2NCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChiYWNraWNvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChmaWd1cmVlbGVtZW50KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGVtYWlsaW5wdXQpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoc3VibWl0YnV0dG9uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1vZGFsZm9vdGVyKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHJ1bl9hbGwoZGlzcG9zZSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkQSgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgJHRleHRTdG9yZTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIFRleHRTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSg5LCAkdGV4dFN0b3JlID0gJCR2YWx1ZSkpO1xuICBsZXQgdGV4dDIgPSAkdGV4dFN0b3JlLnRleHQ7XG4gIGxldCB7IGNsb3NlTW9kYWwgfSA9ICQkcHJvcHM7XG4gIGxldCB7IGRpc3BsYXkgfSA9ICQkcHJvcHM7XG4gIGxldCBlbWFpbElucHV0VmFsaWQgPSBmYWxzZTtcbiAgbGV0IHNob3dMb2FkZXIyID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHN1Ym1pdFBhc3N3b3JkUmVzZXQoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBjb25zdCBlbWFpbElucHV0ID0gZS50YXJnZXRbMF07XG4gICAgICBpZiAoIWVtYWlsSW5wdXRWYWxpZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgJCRpbnZhbGlkYXRlKDIsIHNob3dMb2FkZXIyID0gdHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnNlbmRNZW1iZXJSZXNldFBhc3N3b3JkRW1haWwoeyBlbWFpbDogZW1haWxJbnB1dC52YWx1ZSB9KTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSBcInJlc2V0X3Bhc3N3b3JkXCIpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBzaG93TG9hZGVyMiA9IGZhbHNlKTtcbiAgICAgICAgaWYgKGVyci5tZXNzYWdlKSB7XG4gICAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheSA9IFwibG9naW5cIik7XG4gIGZ1bmN0aW9uIGVtYWlsaW5wdXRfZW1haWxJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBlbWFpbElucHV0VmFsaWQgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgZW1haWxJbnB1dFZhbGlkKTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheSA9IFwicmVzZXRfcGFzc3dvcmRcIik7XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImNsb3NlTW9kYWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSg1LCBjbG9zZU1vZGFsID0gJCRwcm9wczIuY2xvc2VNb2RhbCk7XG4gICAgaWYgKFwiZGlzcGxheVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSAkJHByb3BzMi5kaXNwbGF5KTtcbiAgfTtcbiAgcmV0dXJuIFtcbiAgICBkaXNwbGF5LFxuICAgIGVtYWlsSW5wdXRWYWxpZCxcbiAgICBzaG93TG9hZGVyMixcbiAgICB0ZXh0MixcbiAgICBzdWJtaXRQYXNzd29yZFJlc2V0LFxuICAgIGNsb3NlTW9kYWwsXG4gICAgY2xpY2tfaGFuZGxlcixcbiAgICBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nLFxuICAgIGNsaWNrX2hhbmRsZXJfMVxuICBdO1xufVxudmFyIFBhc3NSZXNldE1vZGFsID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJEEsIGNyZWF0ZV9mcmFnbWVudCQxNCwgc2FmZV9ub3RfZXF1YWwsIHsgY2xvc2VNb2RhbDogNSwgZGlzcGxheTogMCB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayR0KGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgZXJyb3JpY29uO1xuICBsZXQgdDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGVycm9yaWNvbiA9IG5ldyBFcnJvckljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChlcnJvcmljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdCA9IHRleHQoXCIgUGxlYXNlIGVudGVyIGEgdmFsaWQgY29kZVwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZXJyb3JcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoZXJyb3JpY29uLCBkaXYsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdiwgdCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGVycm9yaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChlcnJvcmljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGVycm9yaWNvbik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDEzKGN0eCkge1xuICBsZXQgZGl2MztcbiAgbGV0IGRpdjA7XG4gIGxldCBidXR0b247XG4gIGxldCBiYWNraWNvbjtcbiAgbGV0IHQwO1xuICBsZXQgY2xvc2VidXR0b247XG4gIGxldCB0MTtcbiAgbGV0IGRpdjI7XG4gIGxldCBmaWd1cmVlbGVtZW50O1xuICBsZXQgdDI7XG4gIGxldCBoMjtcbiAgbGV0IHQ0O1xuICBsZXQgZm9ybTtcbiAgbGV0IGRpdjE7XG4gIGxldCBsYWJlbDtcbiAgbGV0IHQ2O1xuICBsZXQgZmllbGRzZXQ7XG4gIGxldCB0MTI7XG4gIGxldCB0MTM7XG4gIGxldCBwYXNzd29yZGlucHV0O1xuICBsZXQgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkO1xuICBsZXQgdDE0O1xuICBsZXQgc3VibWl0YnV0dG9uO1xuICBsZXQgdDE1O1xuICBsZXQgbW9kYWxmb290ZXI7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGJhY2tpY29uID0gbmV3IEJhY2tJY29uKHt9KTtcbiAgY2xvc2VidXR0b24gPSBuZXcgQ2xvc2VCdXR0b24oe1xuICAgIHByb3BzOiB7IGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbMV1cbiAgICApIH1cbiAgfSk7XG4gIGZpZ3VyZWVsZW1lbnQgPSBuZXcgRmlndXJlRWxlbWVudCh7fSk7XG4gIGxldCBpZl9ibG9jayA9ICEvKnRva2VuSW5wdXRWYWxpZCovXG4gIGN0eFszXSAmJiBjcmVhdGVfaWZfYmxvY2skdCgpO1xuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0X3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzldKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRpbnB1dF9wcm9wcyA9IHtcbiAgICBwYXNzd29yZFBsYWNlaG9sZGVyOiAoXG4gICAgICAvKnRleHQqL1xuICAgICAgY3R4WzVdW1wicmVzZXRfcGFzc3dvcmRfcGxhY2Vob2xkZXJcIl0gfHwgXCJOZXcgcGFzc3dvcmRcIlxuICAgICksXG4gICAgcGFzc3dvcmRMYWJlbDogKFxuICAgICAgLyp0ZXh0Ki9cbiAgICAgIGN0eFs1XVtcInBhc3N3b3JkXCJdIHx8IFwiRW50ZXIgYSBuZXcgcGFzc3dvcmRcIlxuICAgIClcbiAgfTtcbiAgaWYgKFxuICAgIC8qcGFzc3dvcmRJbnB1dFZhbGlkKi9cbiAgICBjdHhbNF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwYXNzd29yZGlucHV0X3Byb3BzLnBhc3N3b3JkSW5wdXRWYWxpZCA9IC8qcGFzc3dvcmRJbnB1dFZhbGlkKi9cbiAgICBjdHhbNF07XG4gIH1cbiAgcGFzc3dvcmRpbnB1dCA9IG5ldyBQYXNzd29yZElucHV0KHsgcHJvcHM6IHBhc3N3b3JkaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGlucHV0LCBcInBhc3N3b3JkSW5wdXRWYWxpZFwiLCBwYXNzd29yZGlucHV0X3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIHN1Ym1pdGJ1dHRvbiA9IG5ldyBTdWJtaXRCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qdGV4dCovXG4gICAgICAgIGN0eFs1XVtcInJlc2V0X2NvbmZpcm1fcmVzZXRcIl0gfHwgXCJDb25maXJtICYgUmVzZXRcIlxuICAgICAgKSxcbiAgICAgIGlzTG9hZGluZzogKFxuICAgICAgICAvKnNob3dMb2FkZXIqL1xuICAgICAgICBjdHhbMl1cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICBtb2RhbGZvb3RlciA9IG5ldyBNb2RhbEZvb3Rlcih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjMgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChiYWNraWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGRpdjIgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChmaWd1cmVlbGVtZW50LiQkLmZyYWdtZW50KTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGgyID0gZWxlbWVudChcImgyXCIpO1xuICAgICAgaDIudGV4dENvbnRlbnQgPSBgJHsvKnRleHQqL1xuICAgICAgY3R4WzVdW1wicmVzZXRfeW91cl9wYXNzd29yZFwiXSB8fCBcIlJlc2V0IHlvdXIgcGFzc3dvcmRcIn1gO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgZm9ybSA9IGVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBsYWJlbCA9IGVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gYCR7Lyp0ZXh0Ki9cbiAgICAgIGN0eFs1XVtcInJlc2V0X2VudGVyX2NvZGVcIl0gfHwgXCJFbnRlciB5b3VyIDYtZGlnaXQgY29kZVwifWA7XG4gICAgICB0NiA9IHNwYWNlKCk7XG4gICAgICBmaWVsZHNldCA9IGVsZW1lbnQoXCJmaWVsZHNldFwiKTtcbiAgICAgIGZpZWxkc2V0LmlubmVySFRNTCA9IGA8aW5wdXQgdHlwZT1cInRlbFwiIG5hbWU9XCJ0b2tlblwiIGNsYXNzPVwibXMtZm9ybV9faW5wdXQgbXMtZm9ybV9faW5wdXQtLXRva2VuXCIgcmVxdWlyZWQ9XCJcIi8+IFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGVsXCIgbmFtZT1cInRva2VuXCIgY2xhc3M9XCJtcy1mb3JtX19pbnB1dCBtcy1mb3JtX19pbnB1dC0tdG9rZW5cIiByZXF1aXJlZD1cIlwiLz4gXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZWxcIiBuYW1lPVwidG9rZW5cIiBjbGFzcz1cIm1zLWZvcm1fX2lucHV0IG1zLWZvcm1fX2lucHV0LS10b2tlblwiIHJlcXVpcmVkPVwiXCIvPiBcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRlbFwiIG5hbWU9XCJ0b2tlblwiIGNsYXNzPVwibXMtZm9ybV9faW5wdXQgbXMtZm9ybV9faW5wdXQtLXRva2VuXCIgcmVxdWlyZWQ9XCJcIi8+IFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGVsXCIgbmFtZT1cInRva2VuXCIgY2xhc3M9XCJtcy1mb3JtX19pbnB1dCBtcy1mb3JtX19pbnB1dC0tdG9rZW5cIiByZXF1aXJlZD1cIlwiLz4gXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZWxcIiBuYW1lPVwidG9rZW5cIiBjbGFzcz1cIm1zLWZvcm1fX2lucHV0IG1zLWZvcm1fX2lucHV0LS10b2tlblwiLz5gO1xuICAgICAgdDEyID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgdDEzID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocGFzc3dvcmRpbnB1dC4kJC5mcmFnbWVudCk7XG4gICAgICB0MTQgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDE1ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2JhY2tcIik7XG4gICAgICBhdHRyKGgyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlXCIpO1xuICAgICAgYXR0cihsYWJlbCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xhYmVsXCIpO1xuICAgICAgYXR0cihsYWJlbCwgXCJmb3JcIiwgXCJ0b2tlbi1maWVsZHNldFwiKTtcbiAgICAgIGF0dHIoZmllbGRzZXQsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19maWVsZHNldFwiKTtcbiAgICAgIGF0dHIoZmllbGRzZXQsIFwibmFtZVwiLCBcInRva2VuLWZpZWxkc2V0XCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgICBhdHRyKGZvcm0sIFwiY2xhc3NcIiwgXCJtcy1mb3JtXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImFjdGlvblwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuICAgICAgYXR0cihmb3JtLCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtbW9kYWxcIik7XG4gICAgICBhdHRyKGRpdjMsIFwiaWRcIiwgXCJQYXNzd29yZFRva2VuTW9kYWxcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYzLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbik7XG4gICAgICBtb3VudF9jb21wb25lbnQoYmFja2ljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDApO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNsb3NlYnV0dG9uLCBkaXYzLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MywgZGl2Mik7XG4gICAgICBtb3VudF9jb21wb25lbnQoZmlndXJlZWxlbWVudCwgZGl2MiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDIpO1xuICAgICAgYXBwZW5kKGRpdjIsIGgyKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0NCk7XG4gICAgICBhcHBlbmQoZGl2MiwgZm9ybSk7XG4gICAgICBhcHBlbmQoZm9ybSwgZGl2MSk7XG4gICAgICBhcHBlbmQoZGl2MSwgbGFiZWwpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQ2KTtcbiAgICAgIGFwcGVuZChkaXYxLCBmaWVsZHNldCk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDEyKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2subShkaXYxLCBudWxsKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0MTMpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQsIGZvcm0sIG51bGwpO1xuICAgICAgYXBwZW5kKGZvcm0sIHQxNCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoc3VibWl0YnV0dG9uLCBmb3JtLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0MTUpO1xuICAgICAgbW91bnRfY29tcG9uZW50KG1vZGFsZm9vdGVyLCBkaXYzLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBbXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICAgIGN0eFs4XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKGZvcm0sIFwic3VibWl0XCIsIHN0b3BfcHJvcGFnYXRpb24ocHJldmVudF9kZWZhdWx0KFxuICAgICAgICAgICAgLypzdWJtaXRQYXNzd29yZFRva2VuKi9cbiAgICAgICAgICAgIGN0eFs2XVxuICAgICAgICAgICkpKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgY29uc3QgY2xvc2VidXR0b25fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypjbG9zZU1vZGFsKi9cbiAgICAgIDIpXG4gICAgICAgIGNsb3NlYnV0dG9uX2NoYW5nZXMuY2xvc2VNb2RhbCA9IC8qY2xvc2VNb2RhbCovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICBjbG9zZWJ1dHRvbi4kc2V0KGNsb3NlYnV0dG9uX2NoYW5nZXMpO1xuICAgICAgaWYgKCEvKnRva2VuSW5wdXRWYWxpZCovXG4gICAgICBjdHgyWzNdKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qdG9rZW5JbnB1dFZhbGlkKi9cbiAgICAgICAgICA4KSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBjcmVhdGVfaWZfYmxvY2skdCgpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGRpdjEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFzc3dvcmRpbnB1dF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoIXVwZGF0aW5nX3Bhc3N3b3JkSW5wdXRWYWxpZCAmJiBkaXJ0eSAmIC8qcGFzc3dvcmRJbnB1dFZhbGlkKi9cbiAgICAgIDE2KSB7XG4gICAgICAgIHVwZGF0aW5nX3Bhc3N3b3JkSW5wdXRWYWxpZCA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5wdXRfY2hhbmdlcy5wYXNzd29yZElucHV0VmFsaWQgPSAvKnBhc3N3b3JkSW5wdXRWYWxpZCovXG4gICAgICAgIGN0eDJbNF07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZGlucHV0LiRzZXQocGFzc3dvcmRpbnB1dF9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dMb2FkZXIqL1xuICAgICAgNClcbiAgICAgICAgc3VibWl0YnV0dG9uX2NoYW5nZXMuaXNMb2FkaW5nID0gLypzaG93TG9hZGVyKi9cbiAgICAgICAgY3R4MlsyXTtcbiAgICAgIHN1Ym1pdGJ1dHRvbi4kc2V0KHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGJhY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgdHJhbnNpdGlvbl9pbihwYXNzd29yZGlucHV0LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChiYWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY2xvc2VidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHBhc3N3b3JkaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Myk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChiYWNraWNvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjbG9zZWJ1dHRvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChmaWd1cmVlbGVtZW50KTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZCgpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGFzc3dvcmRpbnB1dCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzdWJtaXRidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobW9kYWxmb290ZXIpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSR6KCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkdGV4dFN0b3JlO1xuICBjb21wb25lbnRfc3Vic2NyaWJlKCQkc2VsZiwgVGV4dFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDEwLCAkdGV4dFN0b3JlID0gJCR2YWx1ZSkpO1xuICBsZXQgdGV4dDIgPSAkdGV4dFN0b3JlLnRleHQ7XG4gIGxldCB7IGNsb3NlTW9kYWwgfSA9ICQkcHJvcHM7XG4gIGxldCB7IGRpc3BsYXkgfSA9ICQkcHJvcHM7XG4gIGxldCB7IG9uU3VjY2Vzc1Bhc3N3b3JkUmVzZXQgfSA9ICQkcHJvcHM7XG4gIGxldCBzaG93TG9hZGVyMiA9IGZhbHNlO1xuICBsZXQgdG9rZW5JbnB1dFZhbGlkID0gdHJ1ZTtcbiAgbGV0IHBhc3N3b3JkSW5wdXRWYWxpZCA9IHRydWU7XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IHRva2VuRWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0Lm1zLWZvcm1fX2lucHV0LS10b2tlblwiKV07XG4gICAgdG9rZW5FbGVtZW50cy5mb3JFYWNoKChlbGUsIGluZGV4KSA9PiB7XG4gICAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOCAmJiBlLnRhcmdldC52YWx1ZSA9PT0gXCJcIilcbiAgICAgICAgICB0b2tlbkVsZW1lbnRzW01hdGgubWF4KDAsIGluZGV4IC0gMSldLmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgW2ZpcnN0LCAuLi5yZXN0XSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBlLnRhcmdldC52YWx1ZSA9IGZpcnN0ICE9IG51bGwgPyBmaXJzdCA6IFwiXCI7XG4gICAgICAgIGNvbnN0IGxhc3RJbnB1dEJveCA9IGluZGV4ID09PSB0b2tlbkVsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IGluc2VydGVkQ29udGVudCA9IGZpcnN0ICE9PSB2b2lkIDA7XG4gICAgICAgIGlmIChpbnNlcnRlZENvbnRlbnQgJiYgIWxhc3RJbnB1dEJveCkge1xuICAgICAgICAgIHRva2VuRWxlbWVudHNbaW5kZXggKyAxXS5mb2N1cygpO1xuICAgICAgICAgIHRva2VuRWxlbWVudHNbaW5kZXggKyAxXS52YWx1ZSA9IHJlc3Quam9pbihcIlwiKTtcbiAgICAgICAgICB0b2tlbkVsZW1lbnRzW2luZGV4ICsgMV0uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgdmFsaWRhdGVGaWVsZHMgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHRva2VuRWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0Lm1zLWZvcm1fX2lucHV0LS10b2tlblwiKV07XG4gICAgY29uc3QgaGFzRW1wdHkgPSB0b2tlbkVsZW1lbnRzLnNvbWUoKGVsKSA9PiB7XG4gICAgICBpZiAoIWVsLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIGlmIChoYXNFbXB0eSkge1xuICAgICAgJCRpbnZhbGlkYXRlKDMsIHRva2VuSW5wdXRWYWxpZCA9IGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCRpbnZhbGlkYXRlKDMsIHRva2VuSW5wdXRWYWxpZCA9IHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gIWhhc0VtcHR5O1xuICB9O1xuICBmdW5jdGlvbiBzdWJtaXRQYXNzd29yZFRva2VuKGUpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IGUudGFyZ2V0WzddO1xuICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlRmllbGRzKCk7XG4gICAgICBpZiAoIWlzVmFsaWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHRva2VuID0gWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwidG9rZW5cIildLmZpbHRlcigoeyBuYW1lIH0pID0+IG5hbWUpLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSkuam9pbihcIlwiKTtcbiAgICAgIHRyeSB7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBzaG93TG9hZGVyMiA9IHRydWUpO1xuICAgICAgICBjb25zdCB7IF9pbnRlcm5hbFVzZU9ubHk6IHsgbWVzc2FnZSB9IH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnJlc2V0TWVtYmVyUGFzc3dvcmQoeyB0b2tlbiwgbmV3UGFzc3dvcmQ6IHBhc3N3b3JkSW5wdXQudmFsdWUgfSk7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKG1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgb25TdWNjZXNzUGFzc3dvcmRSZXNldCh7IHR5cGU6IFwiUEFTU1dPUkRfUkVTRVRcIiwgZGF0YToge30gfSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBzaG93TG9hZGVyMiA9IGZhbHNlKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSBcInJlc2V0X3Bhc3N3b3JkX3N1Y2Nlc3NcIik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDIsIHNob3dMb2FkZXIyID0gZmFsc2UpO1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICBpZiAoZXJyLm1lc3NhZ2UpIHtcbiAgICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSBcImZvcmdvdF9wYXNzd29yZFwiKTtcbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dF9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIHBhc3N3b3JkSW5wdXRWYWxpZCA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg0LCBwYXNzd29yZElucHV0VmFsaWQpO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImNsb3NlTW9kYWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBjbG9zZU1vZGFsID0gJCRwcm9wczIuY2xvc2VNb2RhbCk7XG4gICAgaWYgKFwiZGlzcGxheVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSAkJHByb3BzMi5kaXNwbGF5KTtcbiAgICBpZiAoXCJvblN1Y2Nlc3NQYXNzd29yZFJlc2V0XCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoNywgb25TdWNjZXNzUGFzc3dvcmRSZXNldCA9ICQkcHJvcHMyLm9uU3VjY2Vzc1Bhc3N3b3JkUmVzZXQpO1xuICB9O1xuICByZXR1cm4gW1xuICAgIGRpc3BsYXksXG4gICAgY2xvc2VNb2RhbCxcbiAgICBzaG93TG9hZGVyMixcbiAgICB0b2tlbklucHV0VmFsaWQsXG4gICAgcGFzc3dvcmRJbnB1dFZhbGlkLFxuICAgIHRleHQyLFxuICAgIHN1Ym1pdFBhc3N3b3JkVG9rZW4sXG4gICAgb25TdWNjZXNzUGFzc3dvcmRSZXNldCxcbiAgICBjbGlja19oYW5kbGVyLFxuICAgIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmdcbiAgXTtcbn1cbnZhciBQYXNzVG9rZW5Nb2RhbCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSR6LCBjcmVhdGVfZnJhZ21lbnQkMTMsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBjbG9zZU1vZGFsOiAxLFxuICAgICAgZGlzcGxheTogMCxcbiAgICAgIG9uU3VjY2Vzc1Bhc3N3b3JkUmVzZXQ6IDdcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQxMihjdHgpIHtcbiAgbGV0IGRpdjI7XG4gIGxldCBkaXYwO1xuICBsZXQgdDA7XG4gIGxldCBjbG9zZWJ1dHRvbjtcbiAgbGV0IHQxO1xuICBsZXQgZGl2MTtcbiAgbGV0IGZpZ3VyZWVsZW1lbnQ7XG4gIGxldCB0MjtcbiAgbGV0IGgyO1xuICBsZXQgdDQ7XG4gIGxldCBwO1xuICBsZXQgdDc7XG4gIGxldCBtb2RhbGZvb3RlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNsb3NlYnV0dG9uID0gbmV3IENsb3NlQnV0dG9uKHtcbiAgICBwcm9wczogeyBjbG9zZU1vZGFsOiAoXG4gICAgICAvKmNsb3NlTW9kYWwqL1xuICAgICAgY3R4WzBdXG4gICAgKSB9XG4gIH0pO1xuICBmaWd1cmVlbGVtZW50ID0gbmV3IEZpZ3VyZUVsZW1lbnQoe30pO1xuICBtb2RhbGZvb3RlciA9IG5ldyBNb2RhbEZvb3Rlcih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjIgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChmaWd1cmVlbGVtZW50LiQkLmZyYWdtZW50KTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGgyID0gZWxlbWVudChcImgyXCIpO1xuICAgICAgaDIudGV4dENvbnRlbnQgPSBcIlN1Y2Nlc3MhXCI7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBwID0gZWxlbWVudChcInBcIik7XG4gICAgICBwLmlubmVySFRNTCA9IGBZb3VyIHBhc3N3b3JkIGhhcyBiZWVuIHJlc2V0LiA8YnIvPlxuICAgICAgUGxlYXNlIGxvZ2luIHdpdGggeW91ciBuZXcgY3JlZGVudGlhbHMuYDtcbiAgICAgIHQ3ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihkaXYwLCBcImRhdGEtY3lcIiwgXCJiYWNrLWJ0blwiKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19iYWNrXCIpO1xuICAgICAgYXR0cihoMiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZSBtcy1tb2RhbF9fdGl0bGUtLXN1Yi10ZXh0XCIpO1xuICAgICAgYXR0cihwLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RleHRcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY29udGVudFwiKTtcbiAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImlkXCIsIFwiUGFzc3dvcmRTdWNjZXNzTW9kYWxcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYyLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjIsIHQwKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjbG9zZWJ1dHRvbiwgZGl2MiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGZpZ3VyZWVsZW1lbnQsIGRpdjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQyKTtcbiAgICAgIGFwcGVuZChkaXYxLCBoMik7XG4gICAgICBhcHBlbmQoZGl2MSwgdDQpO1xuICAgICAgYXBwZW5kKGRpdjEsIHApO1xuICAgICAgYXBwZW5kKGRpdjIsIHQ3KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtb2RhbGZvb3RlciwgZGl2MiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgY29uc3QgY2xvc2VidXR0b25fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypjbG9zZU1vZGFsKi9cbiAgICAgIDEpXG4gICAgICAgIGNsb3NlYnV0dG9uX2NoYW5nZXMuY2xvc2VNb2RhbCA9IC8qY2xvc2VNb2RhbCovXG4gICAgICAgIGN0eDJbMF07XG4gICAgICBjbG9zZWJ1dHRvbi4kc2V0KGNsb3NlYnV0dG9uX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY2xvc2VidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oZmlndXJlZWxlbWVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjbG9zZWJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZmlndXJlZWxlbWVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQobW9kYWxmb290ZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Mik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjbG9zZWJ1dHRvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChmaWd1cmVlbGVtZW50KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1vZGFsZm9vdGVyKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSR5KCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCB7IGNsb3NlTW9kYWwgfSA9ICQkcHJvcHM7XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImNsb3NlTW9kYWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBjbG9zZU1vZGFsID0gJCRwcm9wczIuY2xvc2VNb2RhbCk7XG4gIH07XG4gIHJldHVybiBbY2xvc2VNb2RhbF07XG59XG52YXIgUGFzc1N1Y2Nlc3NNb2RhbCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSR5LCBjcmVhdGVfZnJhZ21lbnQkMTIsIHNhZmVfbm90X2VxdWFsLCB7IGNsb3NlTW9kYWw6IDAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9ja18xJDYoY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBiYWNraWNvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgYmFja2ljb24gPSBuZXcgQmFja0ljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChiYWNraWNvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoYmFja2ljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKFxuICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgLypjbGlja19oYW5kbGVyXzEqL1xuICAgICAgICAgIGN0eFsxMF1cbiAgICAgICAgKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGJhY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGJhY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGJ1dHRvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChiYWNraWNvbik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkaChjdHgpIHtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IGJhY2tpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBiYWNraWNvbiA9IG5ldyBCYWNrSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGJhY2tpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChiYWNraWNvbiwgYnV0dG9uLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgIGN0eFs5XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oYmFja2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYmFja2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGJhY2tpY29uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayRkKGN0eCkge1xuICBsZXQgaDI7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGgyID0gZWxlbWVudChcImgyXCIpO1xuICAgICAgaDIudGV4dENvbnRlbnQgPSBgJHsvKnRleHQqL1xuICAgICAgY3R4WzVdW1wicGFzc3dvcmRsZXNzX3Rva2VuX2hlYWRpbmdcIl0gfHwgXCJDcmVhdGUgYW4gYWNjb3VudFwifWA7XG4gICAgICBhdHRyKGgyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlIG1zLW1vZGFsX190aXRsZS0tc3ViLXRleHRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBoMiwgYW5jaG9yKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChoMik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzEkbShjdHgpIHtcbiAgbGV0IGgyO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBoMiA9IGVsZW1lbnQoXCJoMlwiKTtcbiAgICAgIGgyLnRleHRDb250ZW50ID0gYCR7Lyp0ZXh0Ki9cbiAgICAgIGN0eFs1XVtcImxvZ2luX3RvX3lvdXJfYWNjb3VudFwiXSB8fCBcIkxvZ2luIHRvIHlvdXIgYWNjb3VudFwifWA7XG4gICAgICBhdHRyKGgyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlIG1zLW1vZGFsX190aXRsZS0tc3ViLXRleHRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBoMiwgYW5jaG9yKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChoMik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJHMoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBlcnJvcmljb247XG4gIGxldCB0O1xuICBsZXQgY3VycmVudDtcbiAgZXJyb3JpY29uID0gbmV3IEVycm9ySWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGVycm9yaWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0ID0gdGV4dChcIiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBjb2RlXCIpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19lcnJvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChlcnJvcmljb24sIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oZXJyb3JpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGVycm9yaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZXJyb3JpY29uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMTEoY3R4KSB7XG4gIGxldCBkaXYzO1xuICBsZXQgZGl2MDtcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrMDtcbiAgbGV0IHQwO1xuICBsZXQgY2xvc2VidXR0b247XG4gIGxldCB0MTtcbiAgbGV0IGRpdjI7XG4gIGxldCBmaWd1cmVlbGVtZW50O1xuICBsZXQgdDI7XG4gIGxldCB0MztcbiAgbGV0IHA7XG4gIGxldCB0NTtcbiAgbGV0IGZvcm07XG4gIGxldCBkaXYxO1xuICBsZXQgbGFiZWw7XG4gIGxldCB0NztcbiAgbGV0IGZpZWxkc2V0O1xuICBsZXQgdDEzO1xuICBsZXQgdDE0O1xuICBsZXQgc3VibWl0YnV0dG9uO1xuICBsZXQgdDE1O1xuICBsZXQgbW9kYWxmb290ZXI7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja18yJGgsIGNyZWF0ZV9lbHNlX2Jsb2NrXzEkNl07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmIChcbiAgICAgIC8qJFBhc3N3b3JkbGVzc1N0b3JlKi9cbiAgICAgIGN0eDJbNF0ucGFzc3dvcmRsZXNzTW9kYWxUeXBlID09PSBcImxvZ2luXCJcbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpO1xuICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgY2xvc2VidXR0b24gPSBuZXcgQ2xvc2VCdXR0b24oe1xuICAgIHByb3BzOiB7IGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbMV1cbiAgICApIH1cbiAgfSk7XG4gIGZpZ3VyZWVsZW1lbnQgPSBuZXcgRmlndXJlRWxlbWVudCh7fSk7XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzEoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKiRQYXNzd29yZGxlc3NTdG9yZSovXG4gICAgICBjdHgyWzRdLnBhc3N3b3JkbGVzc01vZGFsVHlwZSA9PT0gXCJsb2dpblwiXG4gICAgKVxuICAgICAgcmV0dXJuIGNyZWF0ZV9pZl9ibG9ja18xJG07XG4gICAgcmV0dXJuIGNyZWF0ZV9lbHNlX2Jsb2NrJGQ7XG4gIH1cbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgpO1xuICBsZXQgaWZfYmxvY2syID0gIS8qdG9rZW5JbnB1dFZhbGlkKi9cbiAgY3R4WzNdICYmIGNyZWF0ZV9pZl9ibG9jayRzKCk7XG4gIHN1Ym1pdGJ1dHRvbiA9IG5ldyBTdWJtaXRCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qdGV4dCovXG4gICAgICAgIGN0eFs1XVtcImxvZ2luX3ZlcmlmeV9lbWFpbFwiXSB8fCBcIlZlcmlmeSBFbWFpbFwiXG4gICAgICApLFxuICAgICAgaXNMb2FkaW5nOiAoXG4gICAgICAgIC8qc2hvd0xvYWRlciovXG4gICAgICAgIGN0eFsyXVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIG1vZGFsZm9vdGVyID0gbmV3IE1vZGFsRm9vdGVyKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGRpdjIgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChmaWd1cmVlbGVtZW50LiQkLmZyYWdtZW50KTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBwID0gZWxlbWVudChcInBcIik7XG4gICAgICBwLnRleHRDb250ZW50ID0gYCR7Lyp0ZXh0Ki9cbiAgICAgIGN0eFs1XVtcImxvZ2luX3Bhc3N3b3JkbGVzc19pbnN0cnVjdGlvbnNcIl0gfHwgXCJFbnRlciB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB5b3VyIGVtYWlsIGFkZHJlc3NcIn1gO1xuICAgICAgdDUgPSBzcGFjZSgpO1xuICAgICAgZm9ybSA9IGVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBsYWJlbCA9IGVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgIGxhYmVsLnRleHRDb250ZW50ID0gYCR7Lyp0ZXh0Ki9cbiAgICAgIGN0eFs1XVtcImxvZ2luX3ZlcmlmaWNhdGlvbl9jb2RlXCJdIHx8IFwiVmVyaWZpY2F0aW9uIENvZGVcIn1gO1xuICAgICAgdDcgPSBzcGFjZSgpO1xuICAgICAgZmllbGRzZXQgPSBlbGVtZW50KFwiZmllbGRzZXRcIik7XG4gICAgICBmaWVsZHNldC5pbm5lckhUTUwgPSBgPGlucHV0IG5hbWU9XCJ0b2tlblwiIGNsYXNzPVwibXMtZm9ybV9faW5wdXQgbXMtZm9ybV9faW5wdXQtLXRva2VuXCIgcmVxdWlyZWQ9XCJcIiB0eXBlPVwidGVsXCIvPiBcbiAgICAgICAgICA8aW5wdXQgbmFtZT1cInRva2VuXCIgY2xhc3M9XCJtcy1mb3JtX19pbnB1dCBtcy1mb3JtX19pbnB1dC0tdG9rZW5cIiByZXF1aXJlZD1cIlwiIHR5cGU9XCJ0ZWxcIi8+IFxuICAgICAgICAgIDxpbnB1dCBuYW1lPVwidG9rZW5cIiBjbGFzcz1cIm1zLWZvcm1fX2lucHV0IG1zLWZvcm1fX2lucHV0LS10b2tlblwiIHJlcXVpcmVkPVwiXCIgdHlwZT1cInRlbFwiLz4gXG4gICAgICAgICAgPGlucHV0IG5hbWU9XCJ0b2tlblwiIGNsYXNzPVwibXMtZm9ybV9faW5wdXQgbXMtZm9ybV9faW5wdXQtLXRva2VuXCIgcmVxdWlyZWQ9XCJcIiB0eXBlPVwidGVsXCIvPiBcbiAgICAgICAgICA8aW5wdXQgbmFtZT1cInRva2VuXCIgY2xhc3M9XCJtcy1mb3JtX19pbnB1dCBtcy1mb3JtX19pbnB1dC0tdG9rZW5cIiByZXF1aXJlZD1cIlwiIHR5cGU9XCJ0ZWxcIi8+IFxuICAgICAgICAgIDxpbnB1dCBuYW1lPVwidG9rZW5cIiBjbGFzcz1cIm1zLWZvcm1fX2lucHV0IG1zLWZvcm1fX2lucHV0LS10b2tlblwiIHR5cGU9XCJ0ZWxcIi8+YDtcbiAgICAgIHQxMyA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgdDE0ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoc3VibWl0YnV0dG9uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxNSA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KG1vZGFsZm9vdGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19iYWNrXCIpO1xuICAgICAgYXR0cihwLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RleHRcIik7XG4gICAgICBhdHRyKGxhYmVsLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fbGFiZWxcIik7XG4gICAgICBhdHRyKGxhYmVsLCBcImZvclwiLCBcInRva2VuLWZpZWxkc2V0XCIpO1xuICAgICAgYXR0cihmaWVsZHNldCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2ZpZWxkc2V0XCIpO1xuICAgICAgYXR0cihmaWVsZHNldCwgXCJuYW1lXCIsIFwidG9rZW4tZmllbGRzZXRcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19ncm91cFwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJjbGFzc1wiLCBcIm1zLWZvcm1cIik7XG4gICAgICBhdHRyKGZvcm0sIFwiYWN0aW9uXCIsIFwiXCIpO1xuICAgICAgYXR0cihmb3JtLCBcIm1ldGhvZFwiLCBcInBvc3RcIik7XG4gICAgICBhdHRyKGZvcm0sIFwiYXV0b2NvbXBsZXRlXCIsIFwib2ZmXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2NvbnRlbnRcIik7XG4gICAgICBhdHRyKGRpdjMsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbFwiKTtcbiAgICAgIGF0dHIoZGl2MywgXCJpZFwiLCBcIlBhc3N3b3JkbGVzc1Rva2VuTW9kYWxcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYzLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjApO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShkaXYwLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0MCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoY2xvc2VidXR0b24sIGRpdjMsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQxKTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChmaWd1cmVlbGVtZW50LCBkaXYyLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Mik7XG4gICAgICBpZl9ibG9jazEubShkaXYyLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MiwgcCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDUpO1xuICAgICAgYXBwZW5kKGRpdjIsIGZvcm0pO1xuICAgICAgYXBwZW5kKGZvcm0sIGRpdjEpO1xuICAgICAgYXBwZW5kKGRpdjEsIGxhYmVsKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0Nyk7XG4gICAgICBhcHBlbmQoZGl2MSwgZmllbGRzZXQpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQxMyk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubShkaXYxLCBudWxsKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0MTQpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHN1Ym1pdGJ1dHRvbiwgZm9ybSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDE1KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtb2RhbGZvb3RlciwgZGl2MywgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKGZvcm0sIFwic3VibWl0XCIsIHN0b3BfcHJvcGFnYXRpb24ocHJldmVudF9kZWZhdWx0KFxuICAgICAgICAgIC8qc3VibWl0UGFzc3dvcmRsZXNzVG9rZW4qL1xuICAgICAgICAgIGN0eFs2XVxuICAgICAgICApKSk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBsZXQgcHJldmlvdXNfYmxvY2tfaW5kZXggPSBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gICAgICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgyKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPT09IHByZXZpb3VzX2Jsb2NrX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICBpZl9ibG9jazAubShkaXYwLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNsb3NlYnV0dG9uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qY2xvc2VNb2RhbCovXG4gICAgICAyKVxuICAgICAgICBjbG9zZWJ1dHRvbl9jaGFuZ2VzLmNsb3NlTW9kYWwgPSAvKmNsb3NlTW9kYWwqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgY2xvc2VidXR0b24uJHNldChjbG9zZWJ1dHRvbl9jaGFuZ2VzKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGUgPT09IChjdXJyZW50X2Jsb2NrX3R5cGUgPSBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIpKSAmJiBpZl9ibG9jazEpIHtcbiAgICAgICAgaWZfYmxvY2sxLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWZfYmxvY2sxLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrMSA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgyKTtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICAgICAgaWZfYmxvY2sxLm0oZGl2MiwgdDMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIS8qdG9rZW5JbnB1dFZhbGlkKi9cbiAgICAgIGN0eDJbM10pIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qdG9rZW5JbnB1dFZhbGlkKi9cbiAgICAgICAgICA4KSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGNyZWF0ZV9pZl9ibG9jayRzKCk7XG4gICAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgaWZfYmxvY2syLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazIsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazIgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdWJtaXRidXR0b25fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypzaG93TG9hZGVyKi9cbiAgICAgIDQpXG4gICAgICAgIHN1Ym1pdGJ1dHRvbl9jaGFuZ2VzLmlzTG9hZGluZyA9IC8qc2hvd0xvYWRlciovXG4gICAgICAgIGN0eDJbMl07XG4gICAgICBzdWJtaXRidXR0b24uJHNldChzdWJtaXRidXR0b25fY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9pbihjbG9zZWJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihmaWd1cmVlbGVtZW50LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMik7XG4gICAgICB0cmFuc2l0aW9uX2luKHN1Ym1pdGJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY2xvc2VidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGZpZ3VyZWVsZW1lbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMik7XG4gICAgICB0cmFuc2l0aW9uX291dChzdWJtaXRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KG1vZGFsZm9vdGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjMpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY2xvc2VidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZmlndXJlZWxlbWVudCk7XG4gICAgICBpZl9ibG9jazEuZCgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLmQoKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHN1Ym1pdGJ1dHRvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtb2RhbGZvb3Rlcik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkeCgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgJFBhc3N3b3JkbGVzc1N0b3JlO1xuICBsZXQgJHRleHRTdG9yZTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIFBhc3N3b3JkbGVzc1N0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDQsICRQYXNzd29yZGxlc3NTdG9yZSA9ICQkdmFsdWUpKTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIFRleHRTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSgxMSwgJHRleHRTdG9yZSA9ICQkdmFsdWUpKTtcbiAgbGV0IHRleHQyID0gJHRleHRTdG9yZS50ZXh0O1xuICBsZXQgeyBjbG9zZU1vZGFsIH0gPSAkJHByb3BzO1xuICBsZXQgeyBkaXNwbGF5IH0gPSAkJHByb3BzO1xuICBsZXQgeyBvblN1Y2Nlc3NQYXNzd29yZGxlc3NUb2tlbiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgb25TdWNjZXNzIH0gPSAkJHByb3BzO1xuICBsZXQgc2hvd0xvYWRlcjIgPSBmYWxzZTtcbiAgbGV0IHRva2VuSW5wdXRWYWxpZCA9IHRydWU7XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IHRva2VuRWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0Lm1zLWZvcm1fX2lucHV0LS10b2tlblwiKV07XG4gICAgdG9rZW5FbGVtZW50cy5mb3JFYWNoKChlbGUsIGluZGV4KSA9PiB7XG4gICAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOCAmJiBlLnRhcmdldC52YWx1ZSA9PT0gXCJcIilcbiAgICAgICAgICB0b2tlbkVsZW1lbnRzW01hdGgubWF4KDAsIGluZGV4IC0gMSldLmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICAgICAgY29uc3QgW2ZpcnN0LCAuLi5yZXN0XSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBlLnRhcmdldC52YWx1ZSA9IGZpcnN0ICE9IG51bGwgPyBmaXJzdCA6IFwiXCI7XG4gICAgICAgIGNvbnN0IGxhc3RJbnB1dEJveCA9IGluZGV4ID09PSB0b2tlbkVsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IGluc2VydGVkQ29udGVudCA9IGZpcnN0ICE9PSB2b2lkIDA7XG4gICAgICAgIGlmIChpbnNlcnRlZENvbnRlbnQgJiYgIWxhc3RJbnB1dEJveCkge1xuICAgICAgICAgIHRva2VuRWxlbWVudHNbaW5kZXggKyAxXS5mb2N1cygpO1xuICAgICAgICAgIHRva2VuRWxlbWVudHNbaW5kZXggKyAxXS52YWx1ZSA9IHJlc3Quam9pbihcIlwiKTtcbiAgICAgICAgICB0b2tlbkVsZW1lbnRzW2luZGV4ICsgMV0uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgdmFsaWRhdGVGaWVsZHMgPSAoZSkgPT4ge1xuICAgIGNvbnN0IHRva2VuRWxlbWVudHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0Lm1zLWZvcm1fX2lucHV0LS10b2tlblwiKV07XG4gICAgY29uc3QgaGFzRW1wdHkgPSB0b2tlbkVsZW1lbnRzLnNvbWUoKGVsKSA9PiB7XG4gICAgICBpZiAoIWVsLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIGlmIChoYXNFbXB0eSkge1xuICAgICAgJCRpbnZhbGlkYXRlKDMsIHRva2VuSW5wdXRWYWxpZCA9IGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCRpbnZhbGlkYXRlKDMsIHRva2VuSW5wdXRWYWxpZCA9IHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gIWhhc0VtcHR5O1xuICB9O1xuICBmdW5jdGlvbiBzdWJtaXRQYXNzd29yZGxlc3NUb2tlbihlKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGUudGFyZ2V0WzddO1xuICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlRmllbGRzKCk7XG4gICAgICBpZiAoIWlzVmFsaWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHRva2VuID0gWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwidG9rZW5cIildLmZpbHRlcigoeyBuYW1lIH0pID0+IG5hbWUpLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSkuam9pbihcIlwiKTtcbiAgICAgIHRyeSB7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBzaG93TG9hZGVyMiA9IHRydWUpO1xuICAgICAgICBpZiAoJFBhc3N3b3JkbGVzc1N0b3JlLnBhc3N3b3JkbGVzc01vZGFsVHlwZSA9PT0gXCJsb2dpblwiKSB7XG4gICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmxvZ2luTWVtYmVyUGFzc3dvcmRsZXNzKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBwYXNzd29yZGxlc3NUb2tlbjogdG9rZW4sXG4gICAgICAgICAgICAgIGVtYWlsOiAkUGFzc3dvcmRsZXNzU3RvcmUucGFzc3dvcmRsZXNzRW1haWxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IGluY2x1ZGVDb250ZW50R3JvdXBzOiB0cnVlIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIG9uU3VjY2Vzcyh7IHR5cGU6IFwiTE9HSU5cIiwgZGF0YSB9KTtcbiAgICAgICAgICAkJGludmFsaWRhdGUoMiwgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgcGxhbnMgPSAoJFBhc3N3b3JkbGVzc1N0b3JlLnBhc3N3b3JkbGVzc1BsYW5zIHx8IFtdKS5tYXAoKHBsYW4pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHBsYW5JZDogcGxhbiB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5zaWdudXBNZW1iZXJQYXNzd29yZGxlc3MoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHBhc3N3b3JkbGVzc1Rva2VuOiB0b2tlbixcbiAgICAgICAgICAgICAgZW1haWw6ICRQYXNzd29yZGxlc3NTdG9yZS5wYXNzd29yZGxlc3NFbWFpbCxcbiAgICAgICAgICAgICAgcGxhbnMsXG4gICAgICAgICAgICAgIGN1c3RvbUZpZWxkczogJFBhc3N3b3JkbGVzc1N0b3JlLnBhc3N3b3JkbGVzc0N1c3RvbUZpZWxkc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgaW5jbHVkZUNvbnRlbnRHcm91cHM6IHRydWUgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgb25TdWNjZXNzKHsgdHlwZTogXCJTSUdOVVBcIiwgZGF0YSB9KTtcbiAgICAgICAgICAkJGludmFsaWRhdGUoMiwgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAkJGludmFsaWRhdGUoMiwgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIGlmIChlcnIubWVzc2FnZSkge1xuICAgICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheSA9IFwibG9naW5cIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMSA9ICgpID0+ICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5ID0gXCJzaWdudXBcIik7XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImNsb3NlTW9kYWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBjbG9zZU1vZGFsID0gJCRwcm9wczIuY2xvc2VNb2RhbCk7XG4gICAgaWYgKFwiZGlzcGxheVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkgPSAkJHByb3BzMi5kaXNwbGF5KTtcbiAgICBpZiAoXCJvblN1Y2Nlc3NQYXNzd29yZGxlc3NUb2tlblwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDcsIG9uU3VjY2Vzc1Bhc3N3b3JkbGVzc1Rva2VuID0gJCRwcm9wczIub25TdWNjZXNzUGFzc3dvcmRsZXNzVG9rZW4pO1xuICAgIGlmIChcIm9uU3VjY2Vzc1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDgsIG9uU3VjY2VzcyA9ICQkcHJvcHMyLm9uU3VjY2Vzcyk7XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheSxcbiAgICBjbG9zZU1vZGFsLFxuICAgIHNob3dMb2FkZXIyLFxuICAgIHRva2VuSW5wdXRWYWxpZCxcbiAgICAkUGFzc3dvcmRsZXNzU3RvcmUsXG4gICAgdGV4dDIsXG4gICAgc3VibWl0UGFzc3dvcmRsZXNzVG9rZW4sXG4gICAgb25TdWNjZXNzUGFzc3dvcmRsZXNzVG9rZW4sXG4gICAgb25TdWNjZXNzLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xXG4gIF07XG59XG52YXIgUGFzc3dvcmRsZXNzVG9rZW5Nb2RhbCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSR4LCBjcmVhdGVfZnJhZ21lbnQkMTEsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBjbG9zZU1vZGFsOiAxLFxuICAgICAgZGlzcGxheTogMCxcbiAgICAgIG9uU3VjY2Vzc1Bhc3N3b3JkbGVzc1Rva2VuOiA3LFxuICAgICAgb25TdWNjZXNzOiA4XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMTAoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIm04IDhjMi4yMSAwIDQtMS43OSA0LTRzLTEuNzktNC00LTQtNCAxLjc5LTQgNCAxLjc5IDQgNCA0em0wIDJjLTIuNjcgMC04IDEuMzQtOCA0djJoMTZ2LTJjMC0yLjY2LTUuMzMtNC04LTR6XCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgMTYgMTZcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFByb2ZpbGVJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQxMCwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQkKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJtOSAwLTkgNHY2YzAgNS41NSAzLjg0IDEwLjc0IDkgMTIgNS4xNi0xLjI2IDktNi40NSA5LTEydi02bC05LTR6bTAgMTAuOTloN2MtMC41MyA0LjEyLTMuMjggNy43OS03IDguOTR2LTguOTNoLTd2LTUuN2w3LTMuMTF2OC44elwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDE4IDIyXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBTZWN1cml0eUljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JCQsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkXyhjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJNMTYgMTZIMlYySDlWMEgyQzAuODkgMCAwIDAuOSAwIDJWMTZDMCAxNy4xIDAuODkgMTggMiAxOEgxNkMxNy4xIDE4IDE4IDE3LjEgMTggMTZWOUgxNlYxNlpNMTEgMFYySDE0LjU5TDQuNzYgMTEuODNMNi4xNyAxMy4yNEwxNiAzLjQxVjdIMThWMEgxMVpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgMTggMThcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIExpbmtPdXRJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCRfLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JFooY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk0xNiA3SDMuODNMOS40MiAxLjQxTDggMEwwIDhMOCAxNkw5LjQxIDE0LjU5TDMuODMgOUgxNlY3WlwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihzdmcsIFwid2lkdGhcIiwgXCIxNlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjE2XCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgMCAxNiAxNlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBMb2dvdXRJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCRaLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JFkoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTEyIDJsLTUuNSA5aDExTDEyIDJ6bTAgMy44NEwxMy45MyA5aC0zLjg3TDEyIDUuODR6TTE3LjUgMTNjLTIuNDkgMC00LjUgMi4wMS00LjUgNC41czIuMDEgNC41IDQuNSA0LjUgNC41LTIuMDEgNC41LTQuNS0yLjAxLTQuNS00LjUtNC41em0wIDdjLTEuMzggMC0yLjUtMS4xMi0yLjUtMi41czEuMTItMi41IDIuNS0yLjUgMi41IDEuMTIgMi41IDIuNS0xLjEyIDIuNS0yLjUgMi41ek0zIDIxLjVoOHYtOEgzdjh6bTItNmg0djRINXYtNHpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMyAyIDE5IDIwXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFBsYW5zSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkWSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18yJGcoY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBwcm9maWxlaWNvbjtcbiAgbGV0IHQ7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIHByb2ZpbGVpY29uID0gbmV3IFByb2ZpbGVJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZWljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdCA9IHRleHQoXCIgUHJvZmlsZVwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJwcm9maWxlLWJ0blwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uXCIpO1xuICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICBidXR0b24sXG4gICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eFswXSA9PT0gXCJwcm9maWxlXCJcbiAgICAgICk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQocHJvZmlsZWljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgIGN0eFs4XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgMSkge1xuICAgICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgICBjdHgyWzBdID09PSBcInByb2ZpbGVcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4ocHJvZmlsZWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocHJvZmlsZWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHByb2ZpbGVpY29uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRsKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgcGxhbnNpY29uO1xuICBsZXQgdDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgcGxhbnNpY29uID0gbmV3IFBsYW5zSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHBsYW5zaWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0ID0gdGV4dChcIiBQbGFuc1wiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJwbGFucy1idG5cIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19wcm9maWxlLW9wdGlvblwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYnV0dG9uLFxuICAgICAgICBcIm1zLW1vZGFsX19wcm9maWxlLW9wdGlvbi0tYWN0aXZlXCIsXG4gICAgICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICBjdHhbMF0gPT09IFwicGxhbnNcIlxuICAgICAgKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwbGFuc2ljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfMiovXG4gICAgICAgICAgY3R4WzEwXVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgMSkge1xuICAgICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgICBjdHgyWzBdID09PSBcInBsYW5zXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHBsYW5zaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwbGFuc2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBsYW5zaWNvbik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJHIoY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBwbGFuc2ljb247XG4gIGxldCB0O1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBwbGFuc2ljb24gPSBuZXcgUGxhbnNJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocGxhbnNpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQgPSB0ZXh0KFwiIFRlYW1cIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJkYXRhLWN5XCIsIFwicGxhbnMtYnRuXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb25cIik7XG4gICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb24tLWFjdGl2ZVwiLFxuICAgICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgY3R4WzBdID09PSBcInRlYW1cIlxuICAgICAgKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwbGFuc2ljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfMyovXG4gICAgICAgICAgY3R4WzExXVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgMSkge1xuICAgICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgICBjdHgyWzBdID09PSBcInRlYW1cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4ocGxhbnNpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHBsYW5zaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGxhbnNpY29uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkWChjdHgpIHtcbiAgbGV0IHQwO1xuICBsZXQgYnV0dG9uMDtcbiAgbGV0IHNlY3VyaXR5aWNvbjtcbiAgbGV0IHQxO1xuICBsZXQgdDI7XG4gIGxldCBzaG93X2lmXzEgPSAoXG4gICAgLypzaG93UGxhbnNOYXZCdXR0b24qL1xuICAgIGN0eFszXSgpXG4gICk7XG4gIGxldCB0MztcbiAgbGV0IHNob3dfaWYgPSAoXG4gICAgLypzaG93VGVhbU5hdkJ1dHRvbiovXG4gICAgY3R4WzRdKClcbiAgKTtcbiAgbGV0IHQ0O1xuICBsZXQgYnV0dG9uMTtcbiAgbGV0IGxvZ291dGljb247XG4gIGxldCB0NTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbGV0IGlmX2Jsb2NrMCA9ICEvKmhpZGVQcm9maWxlU2VjdGlvbiovXG4gIGN0eFsxXSAmJiBjcmVhdGVfaWZfYmxvY2tfMiRnKGN0eCk7XG4gIHNlY3VyaXR5aWNvbiA9IG5ldyBTZWN1cml0eUljb24oe30pO1xuICBsZXQgaWZfYmxvY2sxID0gc2hvd19pZl8xICYmIGNyZWF0ZV9pZl9ibG9ja18xJGwoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMiA9IHNob3dfaWYgJiYgY3JlYXRlX2lmX2Jsb2NrJHIoY3R4KTtcbiAgbG9nb3V0aWNvbiA9IG5ldyBMb2dvdXRJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGJ1dHRvbjAgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzZWN1cml0eWljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSB0ZXh0KFwiIFNlY3VyaXR5XCIpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBidXR0b24xID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobG9nb3V0aWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0NSA9IHRleHQoXCIgTG9nb3V0XCIpO1xuICAgICAgYXR0cihidXR0b24wLCBcImRhdGEtY3lcIiwgXCJzZWN1cml0eS1idG5cIik7XG4gICAgICBhdHRyKGJ1dHRvbjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb25cIik7XG4gICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgIGJ1dHRvbjAsXG4gICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eFswXSA9PT0gXCJzZWN1cml0eVwiIHx8IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICBjdHhbMF0gPT09IFwiY2hhbmdlUGFzc3dvcmRcIlxuICAgICAgKTtcbiAgICAgIGF0dHIoYnV0dG9uMSwgXCJkYXRhLWN5XCIsIFwibG9nb3V0LWJ0blwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19wcm9maWxlLW9wdGlvblwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQwLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uMCwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChzZWN1cml0eWljb24sIGJ1dHRvbjAsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjAsIHQxKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQyLCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDMsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbjEsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQobG9nb3V0aWNvbiwgYnV0dG9uMSwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMSwgdDUpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IFtcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24wLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypjbGlja19oYW5kbGVyXzEqL1xuICAgICAgICAgICAgY3R4WzldXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24xLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypsb2dvdXQqL1xuICAgICAgICAgICAgY3R4WzJdXG4gICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCEvKmhpZGVQcm9maWxlU2VjdGlvbiovXG4gICAgICBjdHgyWzFdKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypoaWRlUHJvZmlsZVNlY3Rpb24qL1xuICAgICAgICAgIDIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzIkZyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazAubSh0MC5wYXJlbnROb2RlLCB0MCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazAsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIGJ1dHRvbjAsXG4gICAgICAgICAgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb24tLWFjdGl2ZVwiLFxuICAgICAgICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICAgIGN0eDJbMF0gPT09IFwic2VjdXJpdHlcIiB8fCAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgICBjdHgyWzBdID09PSBcImNoYW5nZVBhc3N3b3JkXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaG93X2lmXzEpXG4gICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgIGlmIChzaG93X2lmKVxuICAgICAgICBpZl9ibG9jazIucChjdHgyLCBkaXJ0eSk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9pbihzZWN1cml0eWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25faW4obG9nb3V0aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoc2VjdXJpdHlpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGxvZ291dGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQwKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24wKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHNlY3VyaXR5aWNvbik7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Myk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ0KTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24xKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGxvZ291dGljb24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSR3KCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCB7IG1lbWJlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgb25TdWNjZXNzTG9nb3V0IH0gPSAkJHByb3BzO1xuICBsZXQgeyBkaXNwbGF5UHJvZmlsZSB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcHJvZmlsZUxvYWRlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgaGlkZVByb2ZpbGVTZWN0aW9uOiBoaWRlUHJvZmlsZVNlY3Rpb24yIH0gPSAkJHByb3BzO1xuICBjb25zdCB1bnN1YnNjcmliZSA9IEFwcFN0b3JlLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgIGlmICghZGF0YS5pbml0aWFsVmFsdWUpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXNPdmVybGF5XCIpO1xuICAgICAgY29uc3QgY3NzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgY29uc3QgY29sb3IgPSBkYXRhLmJyYW5kaW5nLmNvbG9ycy5saWdodE1vZGUucHJpbWFyeUJ1dHRvbjtcbiAgICAgIGNvbnN0IGZ1bGxDU1MgPSBgLm1zLW1vZGFsX19wcm9maWxlLW9wdGlvbjpob3ZlciB7IGNvbG9yOiAke2NvbG9yfTt9IC5tcy1tb2RhbF9fcHJvZmlsZS1vcHRpb24tLWFjdGl2ZSB7IGNvbG9yOiAke2NvbG9yfTt9IC5tcy1tb2RhbF9fc2F2ZS1idXR0b24geyBiYWNrZ3JvdW5kOiAke2NvbG9yfTt9IC5tcy1tb2RhbF9fc2F2ZS1idXR0b246ZGlzYWJsZWQgeyBiYWNrZ3JvdW5kOiAke2NvbG9yfTt9YDtcbiAgICAgIGNzcy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShmdWxsQ1NTKSk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3NzKTtcbiAgICB9XG4gIH0pO1xuICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuICBmdW5jdGlvbiBsb2dvdXQoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGEsIF9pbnRlcm5hbFVzZU9ubHk6IHsgbWVzc2FnZSB9IH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmxvZ291dCgpO1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShtZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIG9uU3VjY2Vzc0xvZ291dCh7IHR5cGU6IFwiTE9HT1VUXCIsIGRhdGEgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNob3dQbGFuc05hdkJ1dHRvbigpIHtcbiAgICByZXR1cm4gbWVtYmVyLnN0cmlwZUN1c3RvbWVySWQgfHwgbWVtYmVyLnBsYW5Db25uZWN0aW9ucy5zb21lKChwbGFuKSA9PiBwbGFuLnR5cGUgPT09IFwiRlJFRVwiKSB8fCBtZW1iZXIudGVhbXMuam9pbmVkVGVhbXMubGVuZ3RoID4gMDtcbiAgfVxuICBmdW5jdGlvbiBzaG93VGVhbU5hdkJ1dHRvbigpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSBtZW1iZXIudGVhbXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5vd25lZFRlYW1zLmxlbmd0aCkgPiAwO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSBcInByb2ZpbGVcIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMSA9ICgpID0+ICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSA9IFwic2VjdXJpdHlcIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMiA9ICgpID0+ICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSA9IFwicGxhbnNcIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMyA9ICgpID0+ICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSA9IFwidGVhbVwiKTtcbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwibWVtYmVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoNSwgbWVtYmVyID0gJCRwcm9wczIubWVtYmVyKTtcbiAgICBpZiAoXCJvblN1Y2Nlc3NMb2dvdXRcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSg2LCBvblN1Y2Nlc3NMb2dvdXQgPSAkJHByb3BzMi5vblN1Y2Nlc3NMb2dvdXQpO1xuICAgIGlmIChcImRpc3BsYXlQcm9maWxlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSAkJHByb3BzMi5kaXNwbGF5UHJvZmlsZSk7XG4gICAgaWYgKFwicHJvZmlsZUxvYWRlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDcsIHByb2ZpbGVMb2FkZXIgPSAkJHByb3BzMi5wcm9maWxlTG9hZGVyKTtcbiAgICBpZiAoXCJoaWRlUHJvZmlsZVNlY3Rpb25cIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBoaWRlUHJvZmlsZVNlY3Rpb24yID0gJCRwcm9wczIuaGlkZVByb2ZpbGVTZWN0aW9uKTtcbiAgfTtcbiAgcmV0dXJuIFtcbiAgICBkaXNwbGF5UHJvZmlsZSxcbiAgICBoaWRlUHJvZmlsZVNlY3Rpb24yLFxuICAgIGxvZ291dCxcbiAgICBzaG93UGxhbnNOYXZCdXR0b24sXG4gICAgc2hvd1RlYW1OYXZCdXR0b24sXG4gICAgbWVtYmVyLFxuICAgIG9uU3VjY2Vzc0xvZ291dCxcbiAgICBwcm9maWxlTG9hZGVyLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMixcbiAgICBjbGlja19oYW5kbGVyXzNcbiAgXTtcbn1cbnZhciBQcm9maWxlTW9kYWxOYXYgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkdywgY3JlYXRlX2ZyYWdtZW50JFgsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBtZW1iZXI6IDUsXG4gICAgICBvblN1Y2Nlc3NMb2dvdXQ6IDYsXG4gICAgICBkaXNwbGF5UHJvZmlsZTogMCxcbiAgICAgIHByb2ZpbGVMb2FkZXI6IDcsXG4gICAgICBoaWRlUHJvZmlsZVNlY3Rpb246IDFcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRXKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJ3aGl0ZVwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTIxIDIxQzI0LjMxNSAyMSAyNyAxOC4zMTUgMjcgMTVDMjcgMTEuNjg1IDI0LjMxNSA5IDIxIDlDMTcuNjg1IDkgMTUgMTEuNjg1IDE1IDE1QzE1IDE4LjMxNSAxNy42ODUgMjEgMjEgMjFaTTIxIDI0QzE2Ljk5NSAyNCA5IDI2LjAxIDkgMzBWMzEuNUM5IDMyLjMyNSA5LjY3NSAzMyAxMC41IDMzSDMxLjVDMzIuMzI1IDMzIDMzIDMyLjMyNSAzMyAzMS41VjMwQzMzIDI2LjAxIDI1LjAwNSAyNCAyMSAyNFpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwid2lkdGhcIiwgXCI0MlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjQyXCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgMCA0MiA0MlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFByb2ZpbGVEZWZhdWx0SW1hZ2UgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JFcsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkVihjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IGc7XG4gIGxldCBwYXRoMDtcbiAgbGV0IGRlZnM7XG4gIGxldCBjbGlwUGF0aDtcbiAgbGV0IHBhdGgxO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIGcgPSBzdmdfZWxlbWVudChcImdcIik7XG4gICAgICBwYXRoMCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGRlZnMgPSBzdmdfZWxlbWVudChcImRlZnNcIik7XG4gICAgICBjbGlwUGF0aCA9IHN2Z19lbGVtZW50KFwiY2xpcFBhdGhcIik7XG4gICAgICBwYXRoMSA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aDAsIFwiZmlsbFwiLCBcIiM0OTQ5NDlcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImRcIiwgXCJNNi42NjcgMTAuNjY3aDIuNjY2Yy4zNjcgMCAuNjY3LS4zLjY2Ny0uNjY3VjYuNjY3aDEuMDZjLjU5MyAwIC44OTMtLjcyLjQ3My0xLjE0bC0zLjA2LTMuMDZhLjY2NC42NjQgMCAwIDAtLjk0IDBsLTMuMDYgMy4wNmMtLjQyLjQyLS4xMjYgMS4xNC40NjcgMS4xNEg2VjEwYzAgLjM2Ny4zLjY2Ny42NjcuNjY3ek00IDEyaDhjLjM2NyAwIC42NjcuMy42NjcuNjY3IDAgLjM2Ny0uMy42NjctLjY2Ny42NjdINGEuNjY5LjY2OSAwIDAgMS0uNjY3LS42NjdjMC0uMzY3LjMtLjY2Ny42NjctLjY2N3pcIik7XG4gICAgICBhdHRyKGcsIFwiY2xpcC1wYXRoXCIsIFwidXJsKCNhKVwiKTtcbiAgICAgIGF0dHIocGF0aDEsIFwiZmlsbFwiLCBcIiNmZmZcIik7XG4gICAgICBhdHRyKHBhdGgxLCBcImRcIiwgXCJNMCAwaDE2djE2SDB6XCIpO1xuICAgICAgYXR0cihjbGlwUGF0aCwgXCJpZFwiLCBcImFcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDE2IDE2XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgZyk7XG4gICAgICBhcHBlbmQoZywgcGF0aDApO1xuICAgICAgYXBwZW5kKHN2ZywgZGVmcyk7XG4gICAgICBhcHBlbmQoZGVmcywgY2xpcFBhdGgpO1xuICAgICAgYXBwZW5kKGNsaXBQYXRoLCBwYXRoMSk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFVwbG9hZEljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JFYsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0JGIoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbMTBdID0gbGlzdFtpXTtcbiAgY2hpbGRfY3R4WzExXSA9IGxpc3Q7XG4gIGNoaWxkX2N0eFsxMl0gPSBpO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2tfMSQ1KGN0eCkge1xuICBsZXQgcHJvZmlsZWRlZmF1bHRpbWFnZTtcbiAgbGV0IGN1cnJlbnQ7XG4gIHByb2ZpbGVkZWZhdWx0aW1hZ2UgPSBuZXcgUHJvZmlsZURlZmF1bHRJbWFnZSh7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZWRlZmF1bHRpbWFnZS4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQocHJvZmlsZWRlZmF1bHRpbWFnZSwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHByb2ZpbGVkZWZhdWx0aW1hZ2UuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocHJvZmlsZWRlZmF1bHRpbWFnZS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHByb2ZpbGVkZWZhdWx0aW1hZ2UsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkZihjdHgpIHtcbiAgbGV0IGltZztcbiAgbGV0IGltZ19zcmNfdmFsdWU7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGltZyA9IGVsZW1lbnQoXCJpbWdcIik7XG4gICAgICBpZiAoIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qbWVtYmVyKi9cbiAgICAgIGN0eFswXS5wcm9maWxlSW1hZ2UpKVxuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICBhdHRyKGltZywgXCJhbHRcIiwgXCJwcm9maWxlIGltYWdlXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgaW1nLCBhbmNob3IpO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgMSAmJiAhc3JjX3VybF9lcXVhbChpbWcuc3JjLCBpbWdfc3JjX3ZhbHVlID0gLyptZW1iZXIqL1xuICAgICAgY3R4MlswXS5wcm9maWxlSW1hZ2UpKSB7XG4gICAgICAgIGF0dHIoaW1nLCBcInNyY1wiLCBpbWdfc3JjX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGltZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2skYyhjdHgpIHtcbiAgbGV0IHQ7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHQgPSB0ZXh0KFwiUmVwbGFjZSBJbWFnZVwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQsIGFuY2hvcik7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJGsoY3R4KSB7XG4gIGxldCB0O1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICB0ID0gdGV4dChcIlVwbG9hZCBQcm9maWxlIEltYWdlXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdCwgYW5jaG9yKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJHEoY3R4KSB7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2MDtcbiAgbGV0IGxhYmVsO1xuICBsZXQgdDBfdmFsdWUgPSAoXG4gICAgLypjdXN0b21GaWVsZCovXG4gICAgY3R4WzEwXS5sYWJlbCArIFwiXCJcbiAgKTtcbiAgbGV0IHQwO1xuICBsZXQgbGFiZWxfZm9yX3ZhbHVlO1xuICBsZXQgdDE7XG4gIGxldCBpbnB1dDtcbiAgbGV0IGlucHV0X3BsYWNlaG9sZGVyX3ZhbHVlO1xuICBsZXQgaW5wdXRfbmFtZV92YWx1ZTtcbiAgbGV0IHQyO1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGZ1bmN0aW9uIGlucHV0X2lucHV0X2hhbmRsZXIoKSB7XG4gICAgY3R4WzZdLmNhbGwoXG4gICAgICBpbnB1dCxcbiAgICAgIC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzEwXVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGxhYmVsID0gZWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgdDAgPSB0ZXh0KHQwX3ZhbHVlKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGlucHV0ID0gZWxlbWVudChcImlucHV0XCIpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgYXR0cihsYWJlbCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xhYmVsXCIpO1xuICAgICAgYXR0cihsYWJlbCwgXCJmb3JcIiwgbGFiZWxfZm9yX3ZhbHVlID0gLypjdXN0b21GaWVsZCovXG4gICAgICBjdHhbMTBdLmtleSk7XG4gICAgICBhdHRyKGlucHV0LCBcImNsYXNzXCIsIFwibXMtZm9ybV9faW5wdXRcIik7XG4gICAgICBhdHRyKGlucHV0LCBcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgYXR0cihpbnB1dCwgXCJwbGFjZWhvbGRlclwiLCBpbnB1dF9wbGFjZWhvbGRlcl92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzEwXS5sYWJlbCk7XG4gICAgICBhdHRyKGlucHV0LCBcIm5hbWVcIiwgaW5wdXRfbmFtZV92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzEwXS5rZXkpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY3VzdG9tLWZpZWxkLWNvbnRhaW5lclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgbGFiZWwpO1xuICAgICAgYXBwZW5kKGxhYmVsLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjAsIGlucHV0KTtcbiAgICAgIHNldF9pbnB1dF92YWx1ZShcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIC8qbWVtYmVyKi9cbiAgICAgICAgY3R4WzBdLmN1c3RvbUZpZWxkc1tcbiAgICAgICAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICAgICAgICBjdHhbMTBdLmtleVxuICAgICAgICBdXG4gICAgICApO1xuICAgICAgYXBwZW5kKGRpdjEsIHQyKTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihpbnB1dCwgXCJpbnB1dFwiLCBpbnB1dF9pbnB1dF9oYW5kbGVyKSxcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIFwia2V5dXBcIixcbiAgICAgICAgICAgIC8qY2hlY2tGb3JDaGFuZ2UqL1xuICAgICAgICAgICAgY3R4WzRdXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIFwicGFzdGVcIixcbiAgICAgICAgICAgIC8qY2hlY2tGb3JDaGFuZ2UqL1xuICAgICAgICAgICAgY3R4WzRdXG4gICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAobmV3X2N0eCwgZGlydHkpIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgICBpZiAoZGlydHkgJiAvKmN1c3RvbUZpZWxkcyovXG4gICAgICAyICYmIHQwX3ZhbHVlICE9PSAodDBfdmFsdWUgPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eFsxMF0ubGFiZWwgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDAsIHQwX3ZhbHVlKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qY3VzdG9tRmllbGRzKi9cbiAgICAgIDIgJiYgbGFiZWxfZm9yX3ZhbHVlICE9PSAobGFiZWxfZm9yX3ZhbHVlID0gLypjdXN0b21GaWVsZCovXG4gICAgICBjdHhbMTBdLmtleSkpIHtcbiAgICAgICAgYXR0cihsYWJlbCwgXCJmb3JcIiwgbGFiZWxfZm9yX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qY3VzdG9tRmllbGRzKi9cbiAgICAgIDIgJiYgaW5wdXRfcGxhY2Vob2xkZXJfdmFsdWUgIT09IChpbnB1dF9wbGFjZWhvbGRlcl92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzEwXS5sYWJlbCkpIHtcbiAgICAgICAgYXR0cihpbnB1dCwgXCJwbGFjZWhvbGRlclwiLCBpbnB1dF9wbGFjZWhvbGRlcl92YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKmN1c3RvbUZpZWxkcyovXG4gICAgICAyICYmIGlucHV0X25hbWVfdmFsdWUgIT09IChpbnB1dF9uYW1lX3ZhbHVlID0gLypjdXN0b21GaWVsZCovXG4gICAgICBjdHhbMTBdLmtleSkpIHtcbiAgICAgICAgYXR0cihpbnB1dCwgXCJuYW1lXCIsIGlucHV0X25hbWVfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXIsIGN1c3RvbUZpZWxkcyovXG4gICAgICAzICYmIGlucHV0LnZhbHVlICE9PSAvKm1lbWJlciovXG4gICAgICBjdHhbMF0uY3VzdG9tRmllbGRzW1xuICAgICAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICAgICAgY3R4WzEwXS5rZXlcbiAgICAgIF0pIHtcbiAgICAgICAgc2V0X2lucHV0X3ZhbHVlKFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgIC8qbWVtYmVyKi9cbiAgICAgICAgICBjdHhbMF0uY3VzdG9tRmllbGRzW1xuICAgICAgICAgICAgLypjdXN0b21GaWVsZCovXG4gICAgICAgICAgICBjdHhbMTBdLmtleVxuICAgICAgICAgIF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2MSk7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBydW5fYWxsKGRpc3Bvc2UpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrJGIoY3R4KSB7XG4gIGxldCBpZl9ibG9ja19hbmNob3I7XG4gIGxldCBpZl9ibG9jayA9IChcbiAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICBjdHhbMTBdLmhpZGRlbiAhPT0gdHJ1ZSAmJiBjcmVhdGVfaWZfYmxvY2skcShjdHgpXG4gICk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgaWZfYmxvY2tfYW5jaG9yID0gZW1wdHkoKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2subSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBpZl9ibG9ja19hbmNob3IsIGFuY2hvcik7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8qY3VzdG9tRmllbGQqL1xuICAgICAgICBjdHgyWzEwXS5oaWRkZW4gIT09IHRydWVcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9jayRxKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGlmX2Jsb2NrX2FuY2hvci5wYXJlbnROb2RlLCBpZl9ibG9ja19hbmNob3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgIGlmX2Jsb2NrLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRVKGN0eCkge1xuICBsZXQgZGl2MTtcbiAgbGV0IGgyO1xuICBsZXQgdDE7XG4gIGxldCBkaXYwO1xuICBsZXQgYnV0dG9uMDtcbiAgbGV0IHQyO1xuICBsZXQgdDM7XG4gIGxldCBkaXY0O1xuICBsZXQgZGl2MjtcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrMDtcbiAgbGV0IHQ0O1xuICBsZXQgZGl2MztcbiAgbGV0IGJ1dHRvbjE7XG4gIGxldCB1cGxvYWRpY29uO1xuICBsZXQgdDU7XG4gIGxldCBmb3JtO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBjb25zdCBpZl9ibG9ja19jcmVhdG9ycyA9IFtjcmVhdGVfaWZfYmxvY2tfMiRmLCBjcmVhdGVfZWxzZV9ibG9ja18xJDVdO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKm1lbWJlciovXG4gICAgICBjdHgyWzBdLnByb2ZpbGVJbWFnZVxuICAgIClcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICB1cGxvYWRpY29uID0gbmV3IFVwbG9hZEljb24oe30pO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKCEvKm1lbWJlciovXG4gICAgY3R4MlswXS5wcm9maWxlSW1hZ2UpXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrXzEkaztcbiAgICByZXR1cm4gY3JlYXRlX2Vsc2VfYmxvY2skYztcbiAgfVxuICBsZXQgY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgpO1xuICBsZXQgaWZfYmxvY2sxID0gY3VycmVudF9ibG9ja190eXBlKGN0eCk7XG4gIGxldCBlYWNoX3ZhbHVlID0gKFxuICAgIC8qY3VzdG9tRmllbGRzKi9cbiAgICBjdHhbMV1cbiAgKTtcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2skYihnZXRfZWFjaF9jb250ZXh0JGIoY3R4LCBlYWNoX3ZhbHVlLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBoMiA9IGVsZW1lbnQoXCJoMlwiKTtcbiAgICAgIGgyLnRleHRDb250ZW50ID0gXCJQcm9maWxlIEluZm9ybWF0aW9uXCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbjAgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgdDIgPSB0ZXh0KFwiU2F2ZVwiKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGRpdjQgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24xID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQodXBsb2FkaWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgdDUgPSBzcGFjZSgpO1xuICAgICAgZm9ybSA9IGVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICBhdHRyKGgyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlIG1zLW1vZGFsX190aXRsZS0tcHJvZmlsZVwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zYXZlLWJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbjAuZGlzYWJsZWQgPSAvKnNhdmVEaXNhYmxlZCovXG4gICAgICBjdHhbMl07XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fYWN0aW9uLWNvbnRhaW5lclwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZS1jb250YWluZXJcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fcHJvZmlsZS1pbWFnZVwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMSwgXCJkYXRhLWN5XCIsIFwiY2hhbmdlLXByb2ZpbGUtaW1hZ2VcIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwidHlwZVwiLCBcInN1Ym1pdFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19vdXRsaW5lLWJ1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMSwgXCJkYXRhLWltYWdlLWJ0blwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZGl2MywgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19wcm9maWxlLWltYWdlLWJ1dHRvbi1jb250YWluZXJcIik7XG4gICAgICBhdHRyKGRpdjQsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fcHJvZmlsZS1pbWFnZS1jb250YWluZXJcIik7XG4gICAgICBhdHRyKGZvcm0sIFwiY2xhc3NcIiwgXCJtcy1mb3JtXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImFjdGlvblwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuICAgICAgYXR0cihmb3JtLCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgaDIpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQxKTtcbiAgICAgIGFwcGVuZChkaXYxLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYwLCBidXR0b24wKTtcbiAgICAgIGFwcGVuZChidXR0b24wLCB0Mik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MywgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjQsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2Mik7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKGRpdjIsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQ0KTtcbiAgICAgIGFwcGVuZChkaXY0LCBkaXYzKTtcbiAgICAgIGFwcGVuZChkaXYzLCBidXR0b24xKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudCh1cGxvYWRpY29uLCBidXR0b24xLCBudWxsKTtcbiAgICAgIGlmX2Jsb2NrMS5tKGJ1dHRvbjEsIG51bGwpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDUsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBmb3JtLCBhbmNob3IpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGZvcm0sIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjAsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKnNhdmVQcm9maWxlKi9cbiAgICAgICAgICAgIGN0eFszXVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKGZvcm0sIFwic3VibWl0XCIsIHN0b3BfcHJvcGFnYXRpb24ocHJldmVudF9kZWZhdWx0KFxuICAgICAgICAgICAgLypzYXZlUHJvZmlsZSovXG4gICAgICAgICAgICBjdHhbM11cbiAgICAgICAgICApKSlcbiAgICAgICAgXTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qc2F2ZURpc2FibGVkKi9cbiAgICAgIDQpIHtcbiAgICAgICAgYnV0dG9uMC5kaXNhYmxlZCA9IC8qc2F2ZURpc2FibGVkKi9cbiAgICAgICAgY3R4MlsyXTtcbiAgICAgIH1cbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ucChjdHgyLCBkaXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMC5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCwgMSk7XG4gICAgICAgIGlmX2Jsb2NrMC5tKGRpdjIsIG51bGwpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSAhPT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4MikpKSB7XG4gICAgICAgIGlmX2Jsb2NrMS5kKDEpO1xuICAgICAgICBpZl9ibG9jazEgPSBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5tKGJ1dHRvbjEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKmN1c3RvbUZpZWxkcywgbWVtYmVyLCBjaGVja0ZvckNoYW5nZSovXG4gICAgICAxOSkge1xuICAgICAgICBlYWNoX3ZhbHVlID0gLypjdXN0b21GaWVsZHMqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfZWFjaF9jb250ZXh0JGIoY3R4MiwgZWFjaF92YWx1ZSwgaSk7XG4gICAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJGIoY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZm9ybSwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5kKDEpO1xuICAgICAgICB9XG4gICAgICAgIGVhY2hfYmxvY2tzLmxlbmd0aCA9IGVhY2hfdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4odXBsb2FkaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQodXBsb2FkaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYxKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Myk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2NCk7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudCh1cGxvYWRpY29uKTtcbiAgICAgIGlmX2Jsb2NrMS5kKCk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDUpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZvcm0pO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSR2KCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCB7IGN1c3RvbUZpZWxkcyB9ID0gJCRwcm9wcztcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBsZXQgeyBwcm9maWxlTG9hZGVyIH0gPSAkJHByb3BzO1xuICBjb25zdCBjcmVhdGVGaWxlSW5wdXRFbGVtZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpbGVJbnB1dEZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGZpbGVJbnB1dEZpZWxkLnNldEF0dHJpYnV0ZShcInJlcXVpcmVkXCIsIFwiXCIpO1xuICAgIGZpbGVJbnB1dEZpZWxkLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJmaWxlXCIpO1xuICAgIGZpbGVJbnB1dEZpZWxkLnNldEF0dHJpYnV0ZShcImFjY2VwdFwiLCBcImltYWdlLypcIik7XG4gICAgZmlsZUlucHV0RmllbGQuc2V0QXR0cmlidXRlKFwicHJvZmlsZS1pbWFnZVwiLCBcInRydWVcIik7XG4gICAgZmlsZUlucHV0RmllbGQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInByb2ZpbGUtaW1hZ2VcIik7XG4gICAgZmlsZUlucHV0RmllbGQuc2V0QXR0cmlidXRlKFwiREFUQS1uYW1lXCIsIFwiRmlsZVwiKTtcbiAgICBmaWxlSW5wdXRGaWVsZC5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJcIik7XG4gICAgZmlsZUlucHV0RmllbGQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCItMVwiKTtcbiAgICByZXR1cm4gZmlsZUlucHV0RmllbGQ7XG4gIH07XG4gIGNvbnN0IGluaXRQcm9maWxlSW1hZ2VCdXR0b24gPSAodXBsb2FkQnV0dG9uKSA9PiB7XG4gICAgY29uc3QgZmlsZUlucHV0RmllbGQgPSBjcmVhdGVGaWxlSW5wdXRFbGVtZW50KCk7XG4gICAgdXBsb2FkQnV0dG9uLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZpbGVJbnB1dEZpZWxkLCB1cGxvYWRCdXR0b24ubmV4dFNpYmxpbmcpO1xuICAgIHVwbG9hZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBmaWxlSW5wdXRGaWVsZC5jbGljaygpO1xuICAgIH0pO1xuICAgIGZpbGVJbnB1dEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XG4gICAgICBjb25zdCB7IHNpemU6IGZpbGVTaXplLCB0eXBlOiBmaWxlVHlwZSB9ID0gZmlsZTtcbiAgICAgIGlmIChmaWxlVHlwZS5pbmNsdWRlcyhcImltYWdlXCIpID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKFwiRmlsZSBpcyBub3QgYW4gaW1hZ2UuXCIsIHRydWUpO1xuICAgICAgaWYgKGZpbGVTaXplID4gNGU2KVxuICAgICAgICByZXR1cm4gd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoXCJJbWFnZSBtdXN0IGJlIGxlc3MgdGhhbiAyTUIuXCIsIHRydWUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDUsIHByb2ZpbGVMb2FkZXIgPSB0cnVlKTtcbiAgICAgICAgY29uc3QgdXBkYXRlTWVtYmVyUHJvZmlsZUltYWdlRnVuY3Rpb24gPSB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnVwZGF0ZU1lbWJlclByb2ZpbGVJbWFnZTtcbiAgICAgICAgY29uc3QgeyBkYXRhLCBfaW50ZXJuYWxVc2VPbmx5OiB7IG1lc3NhZ2UgfSB9ID0geWllbGQgdXBkYXRlTWVtYmVyUHJvZmlsZUltYWdlRnVuY3Rpb24oeyBwcm9maWxlSW1hZ2U6IGZpbGUgfSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSgwLCBtZW1iZXIucHJvZmlsZUltYWdlID0gZGF0YS5wcm9maWxlSW1hZ2UsIG1lbWJlcik7XG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UobWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgaWYgKGVyci5tZXNzYWdlKSB7XG4gICAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkJGludmFsaWRhdGUoNSwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICB9KSk7XG4gIH07XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IHVwbG9hZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1pbWFnZS1idG5dXCIpO1xuICAgIGluaXRQcm9maWxlSW1hZ2VCdXR0b24odXBsb2FkKTtcbiAgfSk7XG4gIGxldCBpbml0aWFsQ3VzdG9tRmllbGRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShtZW1iZXIuY3VzdG9tRmllbGRzKSk7XG4gIGxldCBzYXZlRGlzYWJsZWQgPSB0cnVlO1xuICBmdW5jdGlvbiBzYXZlUHJvZmlsZShlKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICQkaW52YWxpZGF0ZSg1LCBwcm9maWxlTG9hZGVyID0gdHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IF9pbnRlcm5hbFVzZU9ubHk6IHsgbWVzc2FnZTogbXNnIH0gfSA9IHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20udXBkYXRlTWVtYmVyKHsgY3VzdG9tRmllbGRzOiBtZW1iZXIuY3VzdG9tRmllbGRzIH0pO1xuICAgICAgICAkJGludmFsaWRhdGUoNSwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDIsIHNhdmVEaXNhYmxlZCA9IHRydWUpO1xuICAgICAgICBpbml0aWFsQ3VzdG9tRmllbGRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShtZW1iZXIuY3VzdG9tRmllbGRzKSk7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKG1zZywgZmFsc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICQkaW52YWxpZGF0ZSg1LCBwcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tGb3JDaGFuZ2UoZSkge1xuICAgIGlmIChlLnRhcmdldC52YWx1ZSAhPT0gaW5pdGlhbEN1c3RvbUZpZWxkc1tlLnRhcmdldC5uYW1lXSkge1xuICAgICAgJCRpbnZhbGlkYXRlKDIsIHNhdmVEaXNhYmxlZCA9IGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgJCRpbnZhbGlkYXRlKDIsIHNhdmVEaXNhYmxlZCA9IHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIGlucHV0X2lucHV0X2hhbmRsZXIoY3VzdG9tRmllbGQpIHtcbiAgICBtZW1iZXIuY3VzdG9tRmllbGRzW2N1c3RvbUZpZWxkLmtleV0gPSB0aGlzLnZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBtZW1iZXIpO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImN1c3RvbUZpZWxkc1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIGN1c3RvbUZpZWxkcyA9ICQkcHJvcHMyLmN1c3RvbUZpZWxkcyk7XG4gICAgaWYgKFwibWVtYmVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgbWVtYmVyID0gJCRwcm9wczIubWVtYmVyKTtcbiAgICBpZiAoXCJwcm9maWxlTG9hZGVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoNSwgcHJvZmlsZUxvYWRlciA9ICQkcHJvcHMyLnByb2ZpbGVMb2FkZXIpO1xuICB9O1xuICByZXR1cm4gW1xuICAgIG1lbWJlcixcbiAgICBjdXN0b21GaWVsZHMsXG4gICAgc2F2ZURpc2FibGVkLFxuICAgIHNhdmVQcm9maWxlLFxuICAgIGNoZWNrRm9yQ2hhbmdlLFxuICAgIHByb2ZpbGVMb2FkZXIsXG4gICAgaW5wdXRfaW5wdXRfaGFuZGxlclxuICBdO1xufVxudmFyIFByb2ZpbGVJbmZvQ29udGVudCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSR2LCBjcmVhdGVfZnJhZ21lbnQkVSwgc2FmZV9ub3RfZXF1YWwsIHtcbiAgICAgIGN1c3RvbUZpZWxkczogMSxcbiAgICAgIG1lbWJlcjogMCxcbiAgICAgIHByb2ZpbGVMb2FkZXI6IDVcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRUKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIm0xNCA3aC0xdi0yYzAtMi43Ni0yLjI0LTUtNS01cy01IDIuMjQtNSA1djJoLTFjLTEuMSAwLTIgMC45LTIgMnYxMGMwIDEuMSAwLjkgMiAyIDJoMTJjMS4xIDAgMi0wLjkgMi0ydi0xMGMwLTEuMS0wLjktMi0yLTJ6bS05LTJjMC0xLjY2IDEuMzQtMyAzLTNzMyAxLjM0IDMgM3YyaC02di0yem05IDE0aC0xMnYtMTBoMTJ2MTB6bS02LTNjMS4xIDAgMi0wLjkgMi0ycy0wLjktMi0yLTItMiAwLjktMiAyIDAuOSAyIDIgMnpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgMTYgMjFcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFBhc3N3b3JkTG9ja0ljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JFQsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0JGEoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbMTZdID0gbGlzdFtpXTtcbiAgcmV0dXJuIGNoaWxkX2N0eDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrXzEkNChjdHgpIHtcbiAgbGV0IHQ7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHQgPSB0ZXh0KFwiQ2hhbmdlIFBhc3N3b3JkXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdCwgYW5jaG9yKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkZShjdHgpIHtcbiAgbGV0IHQ7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHQgPSB0ZXh0KFwiU2V0IFBhc3N3b3JkXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdCwgYW5jaG9yKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJHAoY3R4KSB7XG4gIGxldCBwO1xuICBsZXQgdDE7XG4gIGxldCBkaXY7XG4gIGxldCBlYWNoX2Jsb2NrcyA9IFtdO1xuICBsZXQgZWFjaF8xX2xvb2t1cCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCBlYWNoX3ZhbHVlID0gKFxuICAgIC8qJGFwcCovXG4gICAgY3R4WzRdLmF1dGhQcm92aWRlcnNcbiAgKTtcbiAgY29uc3QgZ2V0X2tleSA9IChjdHgyKSA9PiAoXG4gICAgLypwcm92aWRlciovXG4gICAgY3R4MlsxNl0ucHJvdmlkZXJcbiAgKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHQkYShjdHgsIGVhY2hfdmFsdWUsIGkpO1xuICAgIGxldCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgZWFjaF8xX2xvb2t1cC5zZXQoa2V5LCBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJGEoa2V5LCBjaGlsZF9jdHgpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBwID0gZWxlbWVudChcInBcIik7XG4gICAgICBwLnRleHRDb250ZW50ID0gXCJDb25uZWN0IEFkZGl0aW9uYWwgQWNjb3VudHNcIjtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIGF0dHIocCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xhYmVsXCIpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgcCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQxLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qZGlzY29ubmVjdFByb3ZpZGVyLCAkYXBwLCBtZW1iZXIsIGNvbm5lY3RBZGRpdGlvbmFsUHJvdmlkZXIqL1xuICAgICAgMjEwKSB7XG4gICAgICAgIGVhY2hfdmFsdWUgPSAvKiRhcHAqL1xuICAgICAgICBjdHgyWzRdLmF1dGhQcm92aWRlcnM7XG4gICAgICAgIGVhY2hfYmxvY2tzID0gdXBkYXRlX2tleWVkX2VhY2goZWFjaF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCAxLCBjdHgyLCBlYWNoX3ZhbHVlLCBlYWNoXzFfbG9va3VwLCBkaXYsIGRlc3Ryb3lfYmxvY2ssIGNyZWF0ZV9lYWNoX2Jsb2NrJGEsIG51bGwsIGdldF9lYWNoX2NvbnRleHQkYSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHApO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQxKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2skYihjdHgpIHtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IGltZztcbiAgbGV0IGltZ19zcmNfdmFsdWU7XG4gIGxldCBpbWdfYWx0X3ZhbHVlO1xuICBsZXQgdDA7XG4gIGxldCBzcGFuO1xuICBsZXQgdDE7XG4gIGxldCB0Ml92YWx1ZSA9IChcbiAgICAvKnByb3ZpZGVyKi9cbiAgICBjdHhbMTZdLm5hbWUgKyBcIlwiXG4gICk7XG4gIGxldCB0MjtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBmdW5jdGlvbiBjbGlja19oYW5kbGVyXzIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qY2xpY2tfaGFuZGxlcl8yKi9cbiAgICAgIGN0eFsxNF0oXG4gICAgICAgIC8qcHJvdmlkZXIqL1xuICAgICAgICBjdHhbMTZdXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgaW1nID0gZWxlbWVudChcImltZ1wiKTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHQxID0gdGV4dChcIkNvbm5lY3Qgd2l0aCBcIik7XG4gICAgICB0MiA9IHRleHQodDJfdmFsdWUpO1xuICAgICAgaWYgKCFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0uaWNvbikpXG4gICAgICAgIGF0dHIoaW1nLCBcInNyY1wiLCBpbWdfc3JjX3ZhbHVlKTtcbiAgICAgIGF0dHIoaW1nLCBcImFsdFwiLCBpbWdfYWx0X3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLm5hbWUpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvblwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBpbWcpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3Bhbik7XG4gICAgICBhcHBlbmQoc3BhbiwgdDEpO1xuICAgICAgYXBwZW5kKHNwYW4sIHQyKTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKGJ1dHRvbiwgXCJjbGlja1wiLCBjbGlja19oYW5kbGVyXzIpO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAobmV3X2N0eCwgZGlydHkpIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTYgJiYgIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzE2XS5pY29uKSkge1xuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTYgJiYgaW1nX2FsdF92YWx1ZSAhPT0gKGltZ19hbHRfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0ubmFtZSkpIHtcbiAgICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDE2ICYmIHQyX3ZhbHVlICE9PSAodDJfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0ubmFtZSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MiwgdDJfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJGooY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBpbWc7XG4gIGxldCBpbWdfc3JjX3ZhbHVlO1xuICBsZXQgaW1nX2FsdF92YWx1ZTtcbiAgbGV0IHQwO1xuICBsZXQgc3BhbjtcbiAgbGV0IHQxO1xuICBsZXQgdDJfdmFsdWUgPSAoXG4gICAgLypwcm92aWRlciovXG4gICAgY3R4WzE2XS5uYW1lICsgXCJcIlxuICApO1xuICBsZXQgdDI7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgZnVuY3Rpb24gY2xpY2tfaGFuZGxlcl8xKCkge1xuICAgIHJldHVybiAoXG4gICAgICAvKmNsaWNrX2hhbmRsZXJfMSovXG4gICAgICBjdHhbMTNdKFxuICAgICAgICAvKnByb3ZpZGVyKi9cbiAgICAgICAgY3R4WzE2XVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGltZyA9IGVsZW1lbnQoXCJpbWdcIik7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICB0MSA9IHRleHQoXCJEaXNjb25uZWN0IFwiKTtcbiAgICAgIHQyID0gdGV4dCh0Ml92YWx1ZSk7XG4gICAgICBpZiAoIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzE2XS5pY29uKSlcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0ubmFtZSk7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uXCIpO1xuICAgICAgc2V0X3N0eWxlKGJ1dHRvbiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0Y2RjZGNlwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcInR5cGVcIiwgXCJidXR0b25cIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBpbWcpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3Bhbik7XG4gICAgICBhcHBlbmQoc3BhbiwgdDEpO1xuICAgICAgYXBwZW5kKHNwYW4sIHQyKTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKGJ1dHRvbiwgXCJjbGlja1wiLCBjbGlja19oYW5kbGVyXzEpO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAobmV3X2N0eCwgZGlydHkpIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTYgJiYgIXNyY191cmxfZXF1YWwoaW1nLnNyYywgaW1nX3NyY192YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzE2XS5pY29uKSkge1xuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTYgJiYgaW1nX2FsdF92YWx1ZSAhPT0gKGltZ19hbHRfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0ubmFtZSkpIHtcbiAgICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDE2ICYmIHQyX3ZhbHVlICE9PSAodDJfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0ubmFtZSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MiwgdDJfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrJGEoa2V5XzEsIGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgc2hvd19pZjtcbiAgbGV0IHQ7XG4gIGZ1bmN0aW9uIGZ1bmMyKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLypmdW5jKi9cbiAgICAgIGN0eFs5XShcbiAgICAgICAgLypwcm92aWRlciovXG4gICAgICAgIGN0eFsxNl0sXG4gICAgICAgIC4uLmFyZ3NcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzEoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoZGlydHkgJiAvKm1lbWJlciwgJGFwcCovXG4gICAgMTgpXG4gICAgICBzaG93X2lmID0gbnVsbDtcbiAgICBpZiAoc2hvd19pZiA9PSBudWxsKVxuICAgICAgc2hvd19pZiA9ICEhLyptZW1iZXIqL1xuICAgICAgY3R4MlsxXS5hdXRoLnByb3ZpZGVycy5zb21lKGZ1bmMyKTtcbiAgICBpZiAoc2hvd19pZilcbiAgICAgIHJldHVybiBjcmVhdGVfaWZfYmxvY2tfMSRqO1xuICAgIHJldHVybiBjcmVhdGVfZWxzZV9ibG9jayRiO1xuICB9XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGUgPSBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eCwgLTEpO1xuICBsZXQgaWZfYmxvY2sgPSBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4KTtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleV8xLFxuICAgIGZpcnN0OiBudWxsLFxuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgdCA9IHNwYWNlKCk7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19zb2NpYWwtYnV0dG9uc1wiKTtcbiAgICAgIHRoaXMuZmlyc3QgPSBkaXY7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0KTtcbiAgICB9LFxuICAgIHAobmV3X2N0eCwgZGlydHkpIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlID09PSAoY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgsIGRpcnR5KSkgJiYgaWZfYmxvY2spIHtcbiAgICAgICAgaWZfYmxvY2sucChjdHgsIGRpcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmX2Jsb2NrLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrID0gY3VycmVudF9ibG9ja190eXBlKGN0eCk7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGRpdiwgdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGlmX2Jsb2NrLmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkUyhjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBoMjtcbiAgbGV0IHQxO1xuICBsZXQgZGl2MDtcbiAgbGV0IGJ1dHRvbjA7XG4gIGxldCB0MjtcbiAgbGV0IGJ1dHRvbjBfZGlzYWJsZWRfdmFsdWU7XG4gIGxldCB0MztcbiAgbGV0IGZvcm07XG4gIGxldCBlbWFpbGlucHV0O1xuICBsZXQgdXBkYXRpbmdfZW1haWxJbnB1dFZhbGlkO1xuICBsZXQgdXBkYXRpbmdfZW1haWxWYWx1ZTtcbiAgbGV0IHQ0O1xuICBsZXQgZGl2MjtcbiAgbGV0IGxhYmVsO1xuICBsZXQgdDY7XG4gIGxldCBidXR0b24xO1xuICBsZXQgcGFzc3dvcmRsb2NraWNvbjtcbiAgbGV0IHQ3O1xuICBsZXQgdDg7XG4gIGxldCBpZl9ibG9jazFfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBmdW5jdGlvbiBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzEwXSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gZW1haWxpbnB1dF9lbWFpbFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTFdKHZhbHVlKTtcbiAgfVxuICBsZXQgZW1haWxpbnB1dF9wcm9wcyA9IHt9O1xuICBpZiAoXG4gICAgLyplbWFpbElucHV0VmFsaWQqL1xuICAgIGN0eFszXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIGVtYWlsaW5wdXRfcHJvcHMuZW1haWxJbnB1dFZhbGlkID0gLyplbWFpbElucHV0VmFsaWQqL1xuICAgIGN0eFszXTtcbiAgfVxuICBpZiAoXG4gICAgLyplbWFpbFZhbHVlKi9cbiAgICBjdHhbMl0gIT09IHZvaWQgMFxuICApIHtcbiAgICBlbWFpbGlucHV0X3Byb3BzLmVtYWlsVmFsdWUgPSAvKmVtYWlsVmFsdWUqL1xuICAgIGN0eFsyXTtcbiAgfVxuICBlbWFpbGlucHV0ID0gbmV3IEVtYWlsSW5wdXQoeyBwcm9wczogZW1haWxpbnB1dF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKGVtYWlsaW5wdXQsIFwiZW1haWxJbnB1dFZhbGlkXCIsIGVtYWlsaW5wdXRfZW1haWxJbnB1dFZhbGlkX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKGVtYWlsaW5wdXQsIFwiZW1haWxWYWx1ZVwiLCBlbWFpbGlucHV0X2VtYWlsVmFsdWVfYmluZGluZykpO1xuICBwYXNzd29yZGxvY2tpY29uID0gbmV3IFBhc3N3b3JkTG9ja0ljb24oe30pO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmICghLyptZW1iZXIqL1xuICAgIGN0eDJbMV0uYXV0aC5oYXNQYXNzd29yZClcbiAgICAgIHJldHVybiBjcmVhdGVfaWZfYmxvY2tfMiRlO1xuICAgIHJldHVybiBjcmVhdGVfZWxzZV9ibG9ja18xJDQ7XG4gIH1cbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGxldCBpZl9ibG9jazAgPSBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKiRhcHAqL1xuICAgIGN0eFs0XS5hdXRoUHJvdmlkZXJzLmxlbmd0aCA+IDAgJiYgY3JlYXRlX2lmX2Jsb2NrJHAoY3R4KVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGgyID0gZWxlbWVudChcImgyXCIpO1xuICAgICAgaDIudGV4dENvbnRlbnQgPSBcIlNlY3VyaXR5XCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbjAgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgdDIgPSB0ZXh0KFwiU2F2ZVwiKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGZvcm0gPSBlbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoZW1haWxpbnB1dC4kJC5mcmFnbWVudCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGxhYmVsID0gZWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBcIlBhc3N3b3JkXCI7XG4gICAgICB0NiA9IHNwYWNlKCk7XG4gICAgICBidXR0b24xID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocGFzc3dvcmRsb2NraWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0NyA9IHNwYWNlKCk7XG4gICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDggPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIGlmX2Jsb2NrMV9hbmNob3IgPSBlbXB0eSgpO1xuICAgICAgYXR0cihoMiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZSBtcy1tb2RhbF9fdGl0bGUtLXByb2ZpbGVcIik7XG4gICAgICBhdHRyKGJ1dHRvbjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc2F2ZS1idXR0b25cIik7XG4gICAgICBidXR0b24wLmRpc2FibGVkID0gYnV0dG9uMF9kaXNhYmxlZF92YWx1ZSA9ICEvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICBjdHhbM107XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fYWN0aW9uLWNvbnRhaW5lclwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZS1jb250YWluZXJcIik7XG4gICAgICBhdHRyKGZvcm0sIFwiY2xhc3NcIiwgXCJtcy1mb3JtXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImFjdGlvblwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuICAgICAgYXR0cihmb3JtLCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICAgIGF0dHIobGFiZWwsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19sYWJlbFwiKTtcbiAgICAgIGF0dHIobGFiZWwsIFwiZm9yXCIsIFwic2V0UGFzc3dvcmRcIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwiZGF0YS1jeVwiLCBcImNoYW5nZS1wYXNzd29yZC1idG5cIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fb3V0bGluZS1idXR0b25cIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwibmFtZVwiLCBcInNldFBhc3N3b3JkXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYxLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjEsIGgyKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgYnV0dG9uMCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMCwgdDIpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDMsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBmb3JtLCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGVtYWlsaW5wdXQsIGZvcm0sIG51bGwpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYyLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjIsIGxhYmVsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Nik7XG4gICAgICBhcHBlbmQoZGl2MiwgYnV0dG9uMSk7XG4gICAgICBtb3VudF9jb21wb25lbnQocGFzc3dvcmRsb2NraWNvbiwgYnV0dG9uMSwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMSwgdDcpO1xuICAgICAgaWZfYmxvY2swLm0oYnV0dG9uMSwgbnVsbCk7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0OCwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrMV9hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjAsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKnN1Ym1pdEVtYWlsQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs1XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKGZvcm0sIFwic3VibWl0XCIsIHN0b3BfcHJvcGFnYXRpb24ocHJldmVudF9kZWZhdWx0KFxuICAgICAgICAgICAgLypzdWJtaXRFbWFpbENoYW5nZSovXG4gICAgICAgICAgICBjdHhbNV1cbiAgICAgICAgICApKSksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlciovXG4gICAgICAgICAgICBjdHhbMTJdXG4gICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyplbWFpbElucHV0VmFsaWQqL1xuICAgICAgOCAmJiBidXR0b24wX2Rpc2FibGVkX3ZhbHVlICE9PSAoYnV0dG9uMF9kaXNhYmxlZF92YWx1ZSA9ICEvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICBjdHgyWzNdKSkge1xuICAgICAgICBidXR0b24wLmRpc2FibGVkID0gYnV0dG9uMF9kaXNhYmxlZF92YWx1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtYWlsaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgJiYgZGlydHkgJiAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICA4KSB7XG4gICAgICAgIHVwZGF0aW5nX2VtYWlsSW5wdXRWYWxpZCA9IHRydWU7XG4gICAgICAgIGVtYWlsaW5wdXRfY2hhbmdlcy5lbWFpbElucHV0VmFsaWQgPSAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICAgIGN0eDJbM107XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX2VtYWlsVmFsdWUgJiYgZGlydHkgJiAvKmVtYWlsVmFsdWUqL1xuICAgICAgNCkge1xuICAgICAgICB1cGRhdGluZ19lbWFpbFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgZW1haWxpbnB1dF9jaGFuZ2VzLmVtYWlsVmFsdWUgPSAvKmVtYWlsVmFsdWUqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZW1haWxWYWx1ZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGVtYWlsaW5wdXQuJHNldChlbWFpbGlucHV0X2NoYW5nZXMpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSAhPT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpKSkge1xuICAgICAgICBpZl9ibG9jazAuZCgxKTtcbiAgICAgICAgaWZfYmxvY2swID0gY3VycmVudF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazAubShidXR0b24xLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKiRhcHAqL1xuICAgICAgICBjdHgyWzRdLmF1dGhQcm92aWRlcnMubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrJHAoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazEubShpZl9ibG9jazFfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrMV9hbmNob3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICBpZl9ibG9jazEuZCgxKTtcbiAgICAgICAgaWZfYmxvY2sxID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGVtYWlsaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRsb2NraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChlbWFpbGlucHV0LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChwYXNzd29yZGxvY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjEpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQzKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChmb3JtKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGVtYWlsaW5wdXQpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ0KTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYyKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBhc3N3b3JkbG9ja2ljb24pO1xuICAgICAgaWZfYmxvY2swLmQoKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0OCk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGlmX2Jsb2NrMV9hbmNob3IpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSR1KCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkYXBwO1xuICBjb21wb25lbnRfc3Vic2NyaWJlKCQkc2VsZiwgQXBwU3RvcmUsICgkJHZhbHVlKSA9PiAkJGludmFsaWRhdGUoNCwgJGFwcCA9ICQkdmFsdWUpKTtcbiAgbGV0IHsgZGlzcGxheVByb2ZpbGUgfSA9ICQkcHJvcHM7XG4gIGxldCB7IG1lbWJlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgZW1haWxWYWx1ZSB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcHJvZmlsZUxvYWRlciB9ID0gJCRwcm9wcztcbiAgJGFwcC5hdXRoUHJvdmlkZXJzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBpZiAoaXNDb25uZWN0ZWQoYSkgPT09IGlzQ29ubmVjdGVkKGIpKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfVxuICAgIHJldHVybiBpc0Nvbm5lY3RlZChhKSA/IC0xIDogMTtcbiAgfSk7XG4gIGxldCBlbWFpbElucHV0VmFsaWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc3VibWl0RW1haWxDaGFuZ2UoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBpZiAoIWVtYWlsSW5wdXRWYWxpZCB8fCAhZW1haWxWYWx1ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgJCRpbnZhbGlkYXRlKDgsIHByb2ZpbGVMb2FkZXIgPSB0cnVlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgX2ludGVybmFsVXNlT25seTogeyBtZXNzYWdlIH0gfSA9IHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20udXBkYXRlTWVtYmVyQXV0aCh7IGVtYWlsOiBlbWFpbFZhbHVlIH0pO1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShtZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDgsIHByb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzY29ubmVjdFByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gdHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGEsIF9pbnRlcm5hbFVzZU9ubHk6IHsgbWVzc2FnZSB9IH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmRpc2Nvbm5lY3RQcm92aWRlcih7IHByb3ZpZGVyIH0pO1xuICAgICAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWVtYmVyKSwge1xuICAgICAgICAgIGF1dGg6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1lbWJlci5hdXRoKSwge1xuICAgICAgICAgICAgcHJvdmlkZXJzOiBkYXRhLnByb3ZpZGVyc1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UobWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNvbm5lY3RBZGRpdGlvbmFsUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0XCIsIHByb3ZpZGVyKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5jb25uZWN0UHJvdmlkZXIoeyBwcm92aWRlciB9KTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDEsIG1lbWJlciA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1lbWJlciksIHtcbiAgICAgICAgICBhdXRoOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZW1iZXIuYXV0aCksIHtcbiAgICAgICAgICAgIHByb3ZpZGVyczogZGF0YS5wcm92aWRlcnNcbiAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGRhdGEubWVzc2FnZSwgZmFsc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBpc0Nvbm5lY3RlZChwcm92aWRlcikge1xuICAgIHJldHVybiBtZW1iZXIuYXV0aC5wcm92aWRlcnMuc29tZSgocHJ2KSA9PiBwcnYucHJvdmlkZXIgPT09IHByb3ZpZGVyLnByb3ZpZGVyKTtcbiAgfVxuICBjb25zdCBmdW5jMiA9IChwcm92aWRlciwgcHJ2KSA9PiBwcnYucHJvdmlkZXIgPT09IHByb3ZpZGVyLnByb3ZpZGVyO1xuICBmdW5jdGlvbiBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZW1haWxJbnB1dFZhbGlkID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDMsIGVtYWlsSW5wdXRWYWxpZCk7XG4gIH1cbiAgZnVuY3Rpb24gZW1haWxpbnB1dF9lbWFpbFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBlbWFpbFZhbHVlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDIsIGVtYWlsVmFsdWUpO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSBcImNoYW5nZVBhc3N3b3JkXCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAocHJvdmlkZXIpID0+IGRpc2Nvbm5lY3RQcm92aWRlcihwcm92aWRlci5wcm92aWRlcik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMiA9IChwcm92aWRlcikgPT4gY29ubmVjdEFkZGl0aW9uYWxQcm92aWRlcihwcm92aWRlci5wcm92aWRlcik7XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImRpc3BsYXlQcm9maWxlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSAkJHByb3BzMi5kaXNwbGF5UHJvZmlsZSk7XG4gICAgaWYgKFwibWVtYmVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyID0gJCRwcm9wczIubWVtYmVyKTtcbiAgICBpZiAoXCJlbWFpbFZhbHVlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMiwgZW1haWxWYWx1ZSA9ICQkcHJvcHMyLmVtYWlsVmFsdWUpO1xuICAgIGlmIChcInByb2ZpbGVMb2FkZXJcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gJCRwcm9wczIucHJvZmlsZUxvYWRlcik7XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheVByb2ZpbGUsXG4gICAgbWVtYmVyLFxuICAgIGVtYWlsVmFsdWUsXG4gICAgZW1haWxJbnB1dFZhbGlkLFxuICAgICRhcHAsXG4gICAgc3VibWl0RW1haWxDaGFuZ2UsXG4gICAgZGlzY29ubmVjdFByb3ZpZGVyLFxuICAgIGNvbm5lY3RBZGRpdGlvbmFsUHJvdmlkZXIsXG4gICAgcHJvZmlsZUxvYWRlcixcbiAgICBmdW5jMixcbiAgICBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nLFxuICAgIGVtYWlsaW5wdXRfZW1haWxWYWx1ZV9iaW5kaW5nLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMlxuICBdO1xufVxudmFyIFNlY3VyaXR5SW5mb0NvbnRlbnQgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkdSwgY3JlYXRlX2ZyYWdtZW50JFMsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBkaXNwbGF5UHJvZmlsZTogMCxcbiAgICAgIG1lbWJlcjogMSxcbiAgICAgIGVtYWlsVmFsdWU6IDIsXG4gICAgICBwcm9maWxlTG9hZGVyOiA4XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayRhKGN0eCkge1xuICBsZXQgdDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgdCA9IHRleHQoXCJDaGFuZ2UgUGFzc3dvcmRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0LCBhbmNob3IpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0KTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRpKGN0eCkge1xuICBsZXQgdDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgdCA9IHRleHQoXCJTZXQgUGFzc3dvcmRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0LCBhbmNob3IpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0KTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skbyhjdHgpIHtcbiAgbGV0IHBhc3N3b3JkaW5wdXQ7XG4gIGxldCB1cGRhdGluZ19wYXNzd29yZFZhbHVlO1xuICBsZXQgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dF9wYXNzd29yZFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTFdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0X3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzEyXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IHBhc3N3b3JkaW5wdXRfcHJvcHMgPSB7XG4gICAgcGFzc3dvcmRMYWJlbDogXCJDdXJyZW50IFBhc3N3b3JkXCIsXG4gICAgcGFzc3dvcmRQbGFjZWhvbGRlcjogXCJFbnRlciBjdXJyZW50IHBhc3N3b3JkXCJcbiAgfTtcbiAgaWYgKFxuICAgIC8qY3VycmVudFBhc3N3b3JkVmFsdWUqL1xuICAgIGN0eFsyXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXRfcHJvcHMucGFzc3dvcmRWYWx1ZSA9IC8qY3VycmVudFBhc3N3b3JkVmFsdWUqL1xuICAgIGN0eFsyXTtcbiAgfVxuICBpZiAoXG4gICAgLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgY3R4WzVdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dF9wcm9wcy5wYXNzd29yZElucHV0VmFsaWQgPSAvKmN1cnJlbnRQYXNzd29yZFZhbGlkKi9cbiAgICBjdHhbNV07XG4gIH1cbiAgcGFzc3dvcmRpbnB1dCA9IG5ldyBQYXNzd29yZElucHV0KHsgcHJvcHM6IHBhc3N3b3JkaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGlucHV0LCBcInBhc3N3b3JkVmFsdWVcIiwgcGFzc3dvcmRpbnB1dF9wYXNzd29yZFZhbHVlX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5wdXQsIFwicGFzc3dvcmRJbnB1dFZhbGlkXCIsIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZGlucHV0LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZFZhbHVlICYmIGRpcnR5ICYgLypjdXJyZW50UGFzc3dvcmRWYWx1ZSovXG4gICAgICA0KSB7XG4gICAgICAgIHVwZGF0aW5nX3Bhc3N3b3JkVmFsdWUgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0X2NoYW5nZXMucGFzc3dvcmRWYWx1ZSA9IC8qY3VycmVudFBhc3N3b3JkVmFsdWUqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkICYmIGRpcnR5ICYgLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgICAzMikge1xuICAgICAgICB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0X2NoYW5nZXMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgICAgIGN0eDJbNV07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZGlucHV0LiRzZXQocGFzc3dvcmRpbnB1dF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHBhc3N3b3JkaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGFzc3dvcmRpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JFIoY3R4KSB7XG4gIGxldCBkaXYzO1xuICBsZXQgZGl2MTtcbiAgbGV0IGRpdjA7XG4gIGxldCBidXR0b24wO1xuICBsZXQgYmFja2ljb247XG4gIGxldCB0MDtcbiAgbGV0IGgyO1xuICBsZXQgdDE7XG4gIGxldCBkaXYyO1xuICBsZXQgYnV0dG9uMTtcbiAgbGV0IHQyO1xuICBsZXQgYnV0dG9uMV9kaXNhYmxlZF92YWx1ZTtcbiAgbGV0IHQzO1xuICBsZXQgZm9ybTtcbiAgbGV0IHQ0O1xuICBsZXQgcGFzc3dvcmRpbnB1dDA7XG4gIGxldCB1cGRhdGluZ19wYXNzd29yZFZhbHVlO1xuICBsZXQgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkO1xuICBsZXQgdDU7XG4gIGxldCBwYXNzd29yZGlucHV0MTtcbiAgbGV0IHVwZGF0aW5nX3Bhc3N3b3JkVmFsdWVfMTtcbiAgbGV0IHVwZGF0aW5nX3Bhc3N3b3JkSW5wdXRWYWxpZF8xO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBiYWNraWNvbiA9IG5ldyBCYWNrSWNvbih7fSk7XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKCEvKm1lbWJlciovXG4gICAgY3R4MlsxXS5hdXRoLmhhc1Bhc3N3b3JkKVxuICAgICAgcmV0dXJuIGNyZWF0ZV9pZl9ibG9ja18xJGk7XG4gICAgcmV0dXJuIGNyZWF0ZV9lbHNlX2Jsb2NrJGE7XG4gIH1cbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGxldCBpZl9ibG9jazAgPSBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdLmF1dGguaGFzUGFzc3dvcmQgJiYgY3JlYXRlX2lmX2Jsb2NrJG8oY3R4KVxuICApO1xuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0MF9wYXNzd29yZFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTNdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0MF9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxNF0odmFsdWUpO1xuICB9XG4gIGxldCBwYXNzd29yZGlucHV0MF9wcm9wcyA9IHtcbiAgICBwYXNzd29yZExhYmVsOiBcIk5ldyBQYXNzd29yZFwiLFxuICAgIHBhc3N3b3JkUGxhY2Vob2xkZXI6IFwiRW50ZXIgYSBzdHJvbmcgcGFzc3dvcmRcIlxuICB9O1xuICBpZiAoXG4gICAgLypuZXdQYXNzd29yZFZhbHVlKi9cbiAgICBjdHhbM10gIT09IHZvaWQgMFxuICApIHtcbiAgICBwYXNzd29yZGlucHV0MF9wcm9wcy5wYXNzd29yZFZhbHVlID0gLypuZXdQYXNzd29yZFZhbHVlKi9cbiAgICBjdHhbM107XG4gIH1cbiAgaWYgKFxuICAgIC8qbmV3UGFzc3dvcmRWYWxpZCovXG4gICAgY3R4WzZdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dDBfcHJvcHMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypuZXdQYXNzd29yZFZhbGlkKi9cbiAgICBjdHhbNl07XG4gIH1cbiAgcGFzc3dvcmRpbnB1dDAgPSBuZXcgUGFzc3dvcmRJbnB1dCh7IHByb3BzOiBwYXNzd29yZGlucHV0MF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5wdXQwLCBcInBhc3N3b3JkVmFsdWVcIiwgcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRWYWx1ZV9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGlucHV0MCwgXCJwYXNzd29yZElucHV0VmFsaWRcIiwgcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcpKTtcbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dDFfcGFzc3dvcmRWYWx1ZV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE1XSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dDFfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTZdKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRpbnB1dDFfcHJvcHMgPSB7XG4gICAgcGFzc3dvcmRMYWJlbDogXCJDb25maXJtIE5ldyBQYXNzd29yZFwiLFxuICAgIHBhc3N3b3JkUGxhY2Vob2xkZXI6IFwiRW50ZXIgYSBzdHJvbmcgcGFzc3dvcmRcIlxuICB9O1xuICBpZiAoXG4gICAgLypjb25maXJtUGFzc3dvcmRWYWx1ZSovXG4gICAgY3R4WzRdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dDFfcHJvcHMucGFzc3dvcmRWYWx1ZSA9IC8qY29uZmlybVBhc3N3b3JkVmFsdWUqL1xuICAgIGN0eFs0XTtcbiAgfVxuICBpZiAoXG4gICAgLypjb25maXJtUGFzc3dvcmRWYWxpZCovXG4gICAgY3R4WzddICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dDFfcHJvcHMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypjb25maXJtUGFzc3dvcmRWYWxpZCovXG4gICAgY3R4WzddO1xuICB9XG4gIHBhc3N3b3JkaW5wdXQxID0gbmV3IFBhc3N3b3JkSW5wdXQoeyBwcm9wczogcGFzc3dvcmRpbnB1dDFfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGlucHV0MSwgXCJwYXNzd29yZFZhbHVlXCIsIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkVmFsdWVfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocGFzc3dvcmRpbnB1dDEsIFwicGFzc3dvcmRJbnB1dFZhbGlkXCIsIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjMgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbjAgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChiYWNraWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBoMiA9IGVsZW1lbnQoXCJoMlwiKTtcbiAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbjEgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgdDIgPSB0ZXh0KFwiU2F2ZVwiKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGZvcm0gPSBlbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQwLiQkLmZyYWdtZW50KTtcbiAgICAgIHQ1ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocGFzc3dvcmRpbnB1dDEuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3Byb2ZpbGUtYmFja1wiKTtcbiAgICAgIGF0dHIoaDIsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGl0bGUgbXMtbW9kYWxfX3RpdGxlLS1wcm9maWxlXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlLWdyb3VwXCIpO1xuICAgICAgYXR0cihidXR0b24xLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NhdmUtYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uMS5kaXNhYmxlZCA9IGJ1dHRvbjFfZGlzYWJsZWRfdmFsdWUgPSAvKm1lbWJlciovXG4gICAgICBjdHhbMV0uYXV0aC5oYXNQYXNzd29yZCAmJiAhLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgICBjdHhbNV0gfHwgIS8qbmV3UGFzc3dvcmRWYWxpZCovXG4gICAgICBjdHhbNl0gfHwgIS8qY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgICAgY3R4WzddO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2FjdGlvbi1jb250YWluZXJcIik7XG4gICAgICBhdHRyKGRpdjMsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGl0bGUtY29udGFpbmVyXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImNsYXNzXCIsIFwibXMtZm9ybVwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJhY3Rpb25cIiwgXCJcIik7XG4gICAgICBhdHRyKGZvcm0sIFwibWV0aG9kXCIsIFwicG9zdFwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJhdXRvY29tcGxldGVcIiwgXCJvZmZcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYzLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjEpO1xuICAgICAgYXBwZW5kKGRpdjEsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbjApO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJhY2tpY29uLCBidXR0b24wLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MSwgaDIpO1xuICAgICAgaWZfYmxvY2swLm0oaDIsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQxKTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIGFwcGVuZChkaXYyLCBidXR0b24xKTtcbiAgICAgIGFwcGVuZChidXR0b24xLCB0Mik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MywgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGZvcm0sIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEubShmb3JtLCBudWxsKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0NCk7XG4gICAgICBtb3VudF9jb21wb25lbnQocGFzc3dvcmRpbnB1dDAsIGZvcm0sIG51bGwpO1xuICAgICAgYXBwZW5kKGZvcm0sIHQ1KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZGlucHV0MSwgZm9ybSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjAsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgICAgY3R4WzEwXVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qc3VibWl0UGFzc3dvcmRDaGFuZ2UqL1xuICAgICAgICAgICAgY3R4WzhdXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsaXN0ZW4oZm9ybSwgXCJzdWJtaXRcIiwgc3RvcF9wcm9wYWdhdGlvbihwcmV2ZW50X2RlZmF1bHQoXG4gICAgICAgICAgICAvKnN1Ym1pdFBhc3N3b3JkQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs4XVxuICAgICAgICAgICkpKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSAhPT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpKSkge1xuICAgICAgICBpZl9ibG9jazAuZCgxKTtcbiAgICAgICAgaWZfYmxvY2swID0gY3VycmVudF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazAubShoMiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qbWVtYmVyLCBjdXJyZW50UGFzc3dvcmRWYWxpZCwgbmV3UGFzc3dvcmRWYWxpZCwgY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgICAgMjI2ICYmIGJ1dHRvbjFfZGlzYWJsZWRfdmFsdWUgIT09IChidXR0b24xX2Rpc2FibGVkX3ZhbHVlID0gLyptZW1iZXIqL1xuICAgICAgY3R4MlsxXS5hdXRoLmhhc1Bhc3N3b3JkICYmICEvKmN1cnJlbnRQYXNzd29yZFZhbGlkKi9cbiAgICAgIGN0eDJbNV0gfHwgIS8qbmV3UGFzc3dvcmRWYWxpZCovXG4gICAgICBjdHgyWzZdIHx8ICEvKmNvbmZpcm1QYXNzd29yZFZhbGlkKi9cbiAgICAgIGN0eDJbN10pKSB7XG4gICAgICAgIGJ1dHRvbjEuZGlzYWJsZWQgPSBidXR0b24xX2Rpc2FibGVkX3ZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKm1lbWJlciovXG4gICAgICAgIGN0eDJbMV0uYXV0aC5oYXNQYXNzd29yZFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgICAgIDIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrJG8oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSwgMSk7XG4gICAgICAgICAgaWZfYmxvY2sxLm0oZm9ybSwgdDQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFzc3dvcmRpbnB1dDBfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZFZhbHVlICYmIGRpcnR5ICYgLypuZXdQYXNzd29yZFZhbHVlKi9cbiAgICAgIDgpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5wdXQwX2NoYW5nZXMucGFzc3dvcmRWYWx1ZSA9IC8qbmV3UGFzc3dvcmRWYWx1ZSovXG4gICAgICAgIGN0eDJbM107XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wYXNzd29yZFZhbHVlID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgJiYgZGlydHkgJiAvKm5ld1Bhc3N3b3JkVmFsaWQqL1xuICAgICAgNjQpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcGFzc3dvcmRpbnB1dDBfY2hhbmdlcy5wYXNzd29yZElucHV0VmFsaWQgPSAvKm5ld1Bhc3N3b3JkVmFsaWQqL1xuICAgICAgICBjdHgyWzZdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgcGFzc3dvcmRpbnB1dDAuJHNldChwYXNzd29yZGlucHV0MF9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5wdXQxX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmICghdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZV8xICYmIGRpcnR5ICYgLypjb25maXJtUGFzc3dvcmRWYWx1ZSovXG4gICAgICAxNikge1xuICAgICAgICB1cGRhdGluZ19wYXNzd29yZFZhbHVlXzEgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0MV9jaGFuZ2VzLnBhc3N3b3JkVmFsdWUgPSAvKmNvbmZpcm1QYXNzd29yZFZhbHVlKi9cbiAgICAgICAgY3R4Mls0XTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX3Bhc3N3b3JkVmFsdWVfMSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkXzEgJiYgZGlydHkgJiAvKmNvbmZpcm1QYXNzd29yZFZhbGlkKi9cbiAgICAgIDEyOCkge1xuICAgICAgICB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWRfMSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5wdXQxX2NoYW5nZXMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypjb25maXJtUGFzc3dvcmRWYWxpZCovXG4gICAgICAgIGN0eDJbN107XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWRfMSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHBhc3N3b3JkaW5wdXQxLiRzZXQocGFzc3dvcmRpbnB1dDFfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihiYWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihwYXNzd29yZGlucHV0MC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihwYXNzd29yZGlucHV0MS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChiYWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHBhc3N3b3JkaW5wdXQwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChwYXNzd29yZGlucHV0MS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYzKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGJhY2tpY29uKTtcbiAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDMpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZvcm0pO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmQoKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQwKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQxKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHJ1bl9hbGwoZGlzcG9zZSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkdCgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyBkaXNwbGF5UHJvZmlsZSB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcHJvZmlsZUxvYWRlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBsZXQgY3VycmVudFBhc3N3b3JkVmFsdWUgPSBcIlwiO1xuICBsZXQgbmV3UGFzc3dvcmRWYWx1ZSA9IFwiXCI7XG4gIGxldCBjb25maXJtUGFzc3dvcmRWYWx1ZSA9IFwiXCI7XG4gIGxldCBjdXJyZW50UGFzc3dvcmRWYWxpZCA9IGZhbHNlO1xuICBsZXQgbmV3UGFzc3dvcmRWYWxpZCA9IGZhbHNlO1xuICBsZXQgY29uZmlybVBhc3N3b3JkVmFsaWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc3VibWl0UGFzc3dvcmRDaGFuZ2UoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBpZiAobWVtYmVyLmF1dGguaGFzUGFzc3dvcmQgJiYgIWN1cnJlbnRQYXNzd29yZFZhbGlkICYmICFuZXdQYXNzd29yZFZhbGlkICYmICFjb25maXJtUGFzc3dvcmRWYWxpZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKCFtZW1iZXIuYXV0aC5oYXNQYXNzd29yZCAmJiAhbmV3UGFzc3dvcmRWYWxpZCAmJiAhY29uZmlybVBhc3N3b3JkVmFsaWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgICQkaW52YWxpZGF0ZSg5LCBwcm9maWxlTG9hZGVyID0gdHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgaWYgKG1lbWJlci5hdXRoLmhhc1Bhc3N3b3JkKSB7XG4gICAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxVc2VPbmx5OiB7IG1lc3NhZ2U6IG1zZyB9IH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnVwZGF0ZU1lbWJlckF1dGgoe1xuICAgICAgICAgICAgb2xkUGFzc3dvcmQ6IGN1cnJlbnRQYXNzd29yZFZhbHVlLFxuICAgICAgICAgICAgbmV3UGFzc3dvcmQ6IG5ld1Bhc3N3b3JkVmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtZXNzYWdlID0gbXNnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHsgX2ludGVybmFsVXNlT25seTogeyBtZXNzYWdlOiBtc2cgfSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5zZXRQYXNzd29yZCh7IHBhc3N3b3JkOiBuZXdQYXNzd29yZFZhbHVlIH0pO1xuICAgICAgICAgICQkaW52YWxpZGF0ZSgxLCBtZW1iZXIuYXV0aC5oYXNQYXNzd29yZCA9IHRydWUsIG1lbWJlcik7XG4gICAgICAgICAgbWVzc2FnZSA9IG1zZztcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShtZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBjdXJyZW50UGFzc3dvcmRWYWx1ZSA9IFwiXCIpO1xuICAgICAgICAkJGludmFsaWRhdGUoMywgbmV3UGFzc3dvcmRWYWx1ZSA9IFwiXCIpO1xuICAgICAgICAkJGludmFsaWRhdGUoNCwgY29uZmlybVBhc3N3b3JkVmFsdWUgPSBcIlwiKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDksIHByb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICAkJGludmFsaWRhdGUoOSwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXlQcm9maWxlID0gXCJzZWN1cml0eVwiKTtcbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dF9wYXNzd29yZFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdXJyZW50UGFzc3dvcmRWYWx1ZSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgyLCBjdXJyZW50UGFzc3dvcmRWYWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dF9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIGN1cnJlbnRQYXNzd29yZFZhbGlkID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDUsIGN1cnJlbnRQYXNzd29yZFZhbGlkKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0MF9wYXNzd29yZFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBuZXdQYXNzd29yZFZhbHVlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDMsIG5ld1Bhc3N3b3JkVmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXQwX3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgbmV3UGFzc3dvcmRWYWxpZCA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg2LCBuZXdQYXNzd29yZFZhbGlkKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0MV9wYXNzd29yZFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjb25maXJtUGFzc3dvcmRWYWx1ZSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg0LCBjb25maXJtUGFzc3dvcmRWYWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dDFfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjb25maXJtUGFzc3dvcmRWYWxpZCA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg3LCBjb25maXJtUGFzc3dvcmRWYWxpZCk7XG4gIH1cbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwiZGlzcGxheVByb2ZpbGVcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSA9ICQkcHJvcHMyLmRpc3BsYXlQcm9maWxlKTtcbiAgICBpZiAoXCJwcm9maWxlTG9hZGVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoOSwgcHJvZmlsZUxvYWRlciA9ICQkcHJvcHMyLnByb2ZpbGVMb2FkZXIpO1xuICAgIGlmIChcIm1lbWJlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIG1lbWJlciA9ICQkcHJvcHMyLm1lbWJlcik7XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheVByb2ZpbGUsXG4gICAgbWVtYmVyLFxuICAgIGN1cnJlbnRQYXNzd29yZFZhbHVlLFxuICAgIG5ld1Bhc3N3b3JkVmFsdWUsXG4gICAgY29uZmlybVBhc3N3b3JkVmFsdWUsXG4gICAgY3VycmVudFBhc3N3b3JkVmFsaWQsXG4gICAgbmV3UGFzc3dvcmRWYWxpZCxcbiAgICBjb25maXJtUGFzc3dvcmRWYWxpZCxcbiAgICBzdWJtaXRQYXNzd29yZENoYW5nZSxcbiAgICBwcm9maWxlTG9hZGVyLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgcGFzc3dvcmRpbnB1dF9wYXNzd29yZFZhbHVlX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbnB1dF9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZyxcbiAgICBwYXNzd29yZGlucHV0MF9wYXNzd29yZFZhbHVlX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbnB1dDFfcGFzc3dvcmRWYWx1ZV9iaW5kaW5nLFxuICAgIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nXG4gIF07XG59XG52YXIgUGFzc3dvcmRJbmZvQ29udGVudCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSR0LCBjcmVhdGVfZnJhZ21lbnQkUiwgc2FmZV9ub3RfZXF1YWwsIHtcbiAgICAgIGRpc3BsYXlQcm9maWxlOiAwLFxuICAgICAgcHJvZmlsZUxvYWRlcjogOSxcbiAgICAgIG1lbWJlcjogMVxuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICBjb25zdCBmID0gdCAtIDE7XG4gIHJldHVybiBmICogZiAqIGYgKyAxO1xufVxuZnVuY3Rpb24gZmFkZShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGlkZW50aXR5IH0gPSB7fSkge1xuICBjb25zdCBvID0gK2dldENvbXB1dGVkU3R5bGUobm9kZSkub3BhY2l0eTtcbiAgcmV0dXJuIHtcbiAgICBkZWxheSxcbiAgICBkdXJhdGlvbixcbiAgICBlYXNpbmcsXG4gICAgY3NzOiAodCkgPT4gYG9wYWNpdHk6ICR7dCAqIG99YFxuICB9O1xufVxuZnVuY3Rpb24gc2xpZGUobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBjdWJpY091dCwgYXhpcyA9IFwieVwiIH0gPSB7fSkge1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gIGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgY29uc3QgcHJpbWFyeV9wcm9wZXJ0eSA9IGF4aXMgPT09IFwieVwiID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIjtcbiAgY29uc3QgcHJpbWFyeV9wcm9wZXJ0eV92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbcHJpbWFyeV9wcm9wZXJ0eV0pO1xuICBjb25zdCBzZWNvbmRhcnlfcHJvcGVydGllcyA9IGF4aXMgPT09IFwieVwiID8gW1widG9wXCIsIFwiYm90dG9tXCJdIDogW1wibGVmdFwiLCBcInJpZ2h0XCJdO1xuICBjb25zdCBjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllcyA9IHNlY29uZGFyeV9wcm9wZXJ0aWVzLm1hcCgoZSkgPT4gYCR7ZVswXS50b1VwcGVyQ2FzZSgpfSR7ZS5zbGljZSgxKX1gKTtcbiAgY29uc3QgcGFkZGluZ19zdGFydF92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbYHBhZGRpbmcke2NhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzWzBdfWBdKTtcbiAgY29uc3QgcGFkZGluZ19lbmRfdmFsdWUgPSBwYXJzZUZsb2F0KHN0eWxlW2BwYWRkaW5nJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1sxXX1gXSk7XG4gIGNvbnN0IG1hcmdpbl9zdGFydF92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbYG1hcmdpbiR7Y2FwaXRhbGl6ZWRfc2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19YF0pO1xuICBjb25zdCBtYXJnaW5fZW5kX3ZhbHVlID0gcGFyc2VGbG9hdChzdHlsZVtgbWFyZ2luJHtjYXBpdGFsaXplZF9zZWNvbmRhcnlfcHJvcGVydGllc1sxXX1gXSk7XG4gIGNvbnN0IGJvcmRlcl93aWR0aF9zdGFydF92YWx1ZSA9IHBhcnNlRmxvYXQoc3R5bGVbYGJvcmRlciR7Y2FwaXRhbGl6ZWRfc2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19V2lkdGhgXSk7XG4gIGNvbnN0IGJvcmRlcl93aWR0aF9lbmRfdmFsdWUgPSBwYXJzZUZsb2F0KHN0eWxlW2Bib3JkZXIke2NhcGl0YWxpemVkX3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfVdpZHRoYF0pO1xuICByZXR1cm4ge1xuICAgIGRlbGF5LFxuICAgIGR1cmF0aW9uLFxuICAgIGVhc2luZyxcbiAgICBjc3M6ICh0KSA9PiBgb3ZlcmZsb3c6IGhpZGRlbjtvcGFjaXR5OiAke01hdGgubWluKHQgKiAyMCwgMSkgKiBvcGFjaXR5fTske3ByaW1hcnlfcHJvcGVydHl9OiAke3QgKiBwcmltYXJ5X3Byb3BlcnR5X3ZhbHVlfXB4O3BhZGRpbmctJHtzZWNvbmRhcnlfcHJvcGVydGllc1swXX06ICR7dCAqIHBhZGRpbmdfc3RhcnRfdmFsdWV9cHg7cGFkZGluZy0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfTogJHt0ICogcGFkZGluZ19lbmRfdmFsdWV9cHg7bWFyZ2luLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMF19OiAke3QgKiBtYXJnaW5fc3RhcnRfdmFsdWV9cHg7bWFyZ2luLSR7c2Vjb25kYXJ5X3Byb3BlcnRpZXNbMV19OiAke3QgKiBtYXJnaW5fZW5kX3ZhbHVlfXB4O2JvcmRlci0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzBdfS13aWR0aDogJHt0ICogYm9yZGVyX3dpZHRoX3N0YXJ0X3ZhbHVlfXB4O2JvcmRlci0ke3NlY29uZGFyeV9wcm9wZXJ0aWVzWzFdfS13aWR0aDogJHt0ICogYm9yZGVyX3dpZHRoX2VuZF92YWx1ZX1weDtgXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkUShjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGxvYWRpbmdpY29uO1xuICBsZXQgZGl2X3RyYW5zaXRpb247XG4gIGxldCBjdXJyZW50O1xuICBsb2FkaW5naWNvbiA9IG5ldyBMb2FkaW5nSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGxvYWRpbmdpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXNfX3Byb2ZpbGVfX2xvYWRlclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChsb2FkaW5naWNvbiwgZGl2LCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihsb2FkaW5naWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghY3VycmVudClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghZGl2X3RyYW5zaXRpb24pXG4gICAgICAgICAgZGl2X3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKGRpdiwgZmFkZSwge30sIHRydWUpO1xuICAgICAgICBkaXZfdHJhbnNpdGlvbi5ydW4oMSk7XG4gICAgICB9KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobG9hZGluZ2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGlmICghZGl2X3RyYW5zaXRpb24pXG4gICAgICAgIGRpdl90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYsIGZhZGUsIHt9LCBmYWxzZSk7XG4gICAgICBkaXZfdHJhbnNpdGlvbi5ydW4oMCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChsb2FkaW5naWNvbik7XG4gICAgICBpZiAoZGV0YWNoaW5nICYmIGRpdl90cmFuc2l0aW9uKVxuICAgICAgICBkaXZfdHJhbnNpdGlvbi5lbmQoKTtcbiAgICB9XG4gIH07XG59XG52YXIgUHJvZmlsZUxvYWRlciA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkUSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRQKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgc3dpdGNoX2luc3RhbmNlMDtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCB0MjtcbiAgbGV0IHN3aXRjaF9pbnN0YW5jZTE7XG4gIGxldCBidXR0b25fY2xhc3NfdmFsdWU7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIHZhciBzd2l0Y2hfdmFsdWUgPSAoXG4gICAgLypidXR0b25MZWZ0SWNvbiovXG4gICAgY3R4WzJdXG4gICk7XG4gIGZ1bmN0aW9uIHN3aXRjaF9wcm9wcyhjdHgyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGlmIChzd2l0Y2hfdmFsdWUpIHtcbiAgICBzd2l0Y2hfaW5zdGFuY2UwID0gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoc3dpdGNoX3ZhbHVlLCBzd2l0Y2hfcHJvcHMoKSk7XG4gIH1cbiAgdmFyIHN3aXRjaF92YWx1ZV8xID0gKFxuICAgIC8qYnV0dG9uUmlnaHRJY29uKi9cbiAgICBjdHhbMV1cbiAgKTtcbiAgZnVuY3Rpb24gc3dpdGNoX3Byb3BzXzEoY3R4Mikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoc3dpdGNoX3ZhbHVlXzEpIHtcbiAgICBzd2l0Y2hfaW5zdGFuY2UxID0gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoc3dpdGNoX3ZhbHVlXzEsIHN3aXRjaF9wcm9wc18xKCkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlMClcbiAgICAgICAgY3JlYXRlX2NvbXBvbmVudChzd2l0Y2hfaW5zdGFuY2UwLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIHQxID0gdGV4dChcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4WzBdXG4gICAgICApO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZTEpXG4gICAgICAgIGNyZWF0ZV9jb21wb25lbnQoc3dpdGNoX2luc3RhbmNlMS4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBidXR0b25fY2xhc3NfdmFsdWUgPSBcIm1zLW1vZGFsX19yZWd1bGFyLWJ1dHRvbiBcIiArIC8qJCRyZXN0UHJvcHMqL1xuICAgICAgKGN0eFs1XS5jbGFzcyB8fCBcIlwiKSk7XG4gICAgICBzZXRfc3R5bGUoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJiYWNrZ3JvdW5kXCIsXG4gICAgICAgIC8qYnV0dG9uQ29sb3IqL1xuICAgICAgICBjdHhbNF1cbiAgICAgICk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlMClcbiAgICAgICAgbW91bnRfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZTAsIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MSk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0Mik7XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlMSlcbiAgICAgICAgbW91bnRfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZTEsIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKGJ1dHRvbiwgXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oXG4gICAgICAgICAgICAvKm9uQ2xpY2sqL1xuICAgICAgICAgICAgY3R4WzNdXG4gICAgICAgICAgKSlcbiAgICAgICAgICAgIGN0eFszXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIFtkaXJ0eV0pIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgICBpZiAoZGlydHkgJiAvKmJ1dHRvbkxlZnRJY29uKi9cbiAgICAgIDQgJiYgc3dpdGNoX3ZhbHVlICE9PSAoc3dpdGNoX3ZhbHVlID0gLypidXR0b25MZWZ0SWNvbiovXG4gICAgICBjdHhbMl0pKSB7XG4gICAgICAgIGlmIChzd2l0Y2hfaW5zdGFuY2UwKSB7XG4gICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgY29uc3Qgb2xkX2NvbXBvbmVudCA9IHN3aXRjaF9pbnN0YW5jZTA7XG4gICAgICAgICAgdHJhbnNpdGlvbl9vdXQob2xkX2NvbXBvbmVudC4kJC5mcmFnbWVudCwgMSwgMCwgKCkgPT4ge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQob2xkX2NvbXBvbmVudCwgMSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXRjaF92YWx1ZSkge1xuICAgICAgICAgIHN3aXRjaF9pbnN0YW5jZTAgPSBjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudChzd2l0Y2hfdmFsdWUsIHN3aXRjaF9wcm9wcygpKTtcbiAgICAgICAgICBjcmVhdGVfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZTAuJCQuZnJhZ21lbnQpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oc3dpdGNoX2luc3RhbmNlMC4kJC5mcmFnbWVudCwgMSk7XG4gICAgICAgICAgbW91bnRfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZTAsIGJ1dHRvbiwgdDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXRjaF9pbnN0YW5jZTAgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmJ1dHRvblRleHQqL1xuICAgICAgMSlcbiAgICAgICAgc2V0X2RhdGEoXG4gICAgICAgICAgdDEsXG4gICAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgICBjdHhbMF1cbiAgICAgICAgKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qYnV0dG9uUmlnaHRJY29uKi9cbiAgICAgIDIgJiYgc3dpdGNoX3ZhbHVlXzEgIT09IChzd2l0Y2hfdmFsdWVfMSA9IC8qYnV0dG9uUmlnaHRJY29uKi9cbiAgICAgIGN0eFsxXSkpIHtcbiAgICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZTEpIHtcbiAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICBjb25zdCBvbGRfY29tcG9uZW50ID0gc3dpdGNoX2luc3RhbmNlMTtcbiAgICAgICAgICB0cmFuc2l0aW9uX291dChvbGRfY29tcG9uZW50LiQkLmZyYWdtZW50LCAxLCAwLCAoKSA9PiB7XG4gICAgICAgICAgICBkZXN0cm95X2NvbXBvbmVudChvbGRfY29tcG9uZW50LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpdGNoX3ZhbHVlXzEpIHtcbiAgICAgICAgICBzd2l0Y2hfaW5zdGFuY2UxID0gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoc3dpdGNoX3ZhbHVlXzEsIHN3aXRjaF9wcm9wc18xKCkpO1xuICAgICAgICAgIGNyZWF0ZV9jb21wb25lbnQoc3dpdGNoX2luc3RhbmNlMS4kJC5mcmFnbWVudCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihzd2l0Y2hfaW5zdGFuY2UxLiQkLmZyYWdtZW50LCAxKTtcbiAgICAgICAgICBtb3VudF9jb21wb25lbnQoc3dpdGNoX2luc3RhbmNlMSwgYnV0dG9uLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2l0Y2hfaW5zdGFuY2UxID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyokJHJlc3RQcm9wcyovXG4gICAgICAzMiAmJiBidXR0b25fY2xhc3NfdmFsdWUgIT09IChidXR0b25fY2xhc3NfdmFsdWUgPSBcIm1zLW1vZGFsX19yZWd1bGFyLWJ1dHRvbiBcIiArIC8qJCRyZXN0UHJvcHMqL1xuICAgICAgKGN0eFs1XS5jbGFzcyB8fCBcIlwiKSkpIHtcbiAgICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgYnV0dG9uX2NsYXNzX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qYnV0dG9uQ29sb3IqL1xuICAgICAgMTYpIHtcbiAgICAgICAgc2V0X3N0eWxlKFxuICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICBcImJhY2tncm91bmRcIixcbiAgICAgICAgICAvKmJ1dHRvbkNvbG9yKi9cbiAgICAgICAgICBjdHhbNF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlMClcbiAgICAgICAgdHJhbnNpdGlvbl9pbihzd2l0Y2hfaW5zdGFuY2UwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlMSlcbiAgICAgICAgdHJhbnNpdGlvbl9pbihzd2l0Y2hfaW5zdGFuY2UxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIGlmIChzd2l0Y2hfaW5zdGFuY2UwKVxuICAgICAgICB0cmFuc2l0aW9uX291dChzd2l0Y2hfaW5zdGFuY2UwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlMSlcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoc3dpdGNoX2luc3RhbmNlMS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZTApXG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZTApO1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZTEpXG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZTEpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJHMoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgY29uc3Qgb21pdF9wcm9wc19uYW1lcyA9IFtcImJ1dHRvblRleHRcIiwgXCJidXR0b25SaWdodEljb25cIiwgXCJidXR0b25MZWZ0SWNvblwiLCBcIm9uQ2xpY2tcIl07XG4gIGxldCAkJHJlc3RQcm9wcyA9IGNvbXB1dGVfcmVzdF9wcm9wcygkJHByb3BzLCBvbWl0X3Byb3BzX25hbWVzKTtcbiAgbGV0ICRhcHA7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBBcHBTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSg2LCAkYXBwID0gJCR2YWx1ZSkpO1xuICBsZXQgeyBidXR0b25UZXh0ID0gXCJTdWJtaXRcIiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgYnV0dG9uUmlnaHRJY29uID0gbnVsbCB9ID0gJCRwcm9wcztcbiAgbGV0IHsgYnV0dG9uTGVmdEljb24gPSBudWxsIH0gPSAkJHByb3BzO1xuICBsZXQgeyBvbkNsaWNrID0gKCkgPT4ge1xuICB9IH0gPSAkJHByb3BzO1xuICBsZXQgYnV0dG9uQ29sb3IgPSBcInJnYig0MSwgOTgsIDI1NSlcIjtcbiAgaWYgKCRhcHAuYnJhbmRpbmcuY29sb3JzLmxpZ2h0TW9kZS5wcmltYXJ5QnV0dG9uKSB7XG4gICAgYnV0dG9uQ29sb3IgPSAkYXBwLmJyYW5kaW5nLmNvbG9ycy5saWdodE1vZGUucHJpbWFyeUJ1dHRvbjtcbiAgfVxuICAkJHNlbGYuJCRzZXQgPSAoJCRuZXdfcHJvcHMpID0+IHtcbiAgICAkJHByb3BzID0gYXNzaWduKGFzc2lnbih7fSwgJCRwcm9wcyksIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMoJCRuZXdfcHJvcHMpKTtcbiAgICAkJGludmFsaWRhdGUoNSwgJCRyZXN0UHJvcHMgPSBjb21wdXRlX3Jlc3RfcHJvcHMoJCRwcm9wcywgb21pdF9wcm9wc19uYW1lcykpO1xuICAgIGlmIChcImJ1dHRvblRleHRcIiBpbiAkJG5ld19wcm9wcylcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBidXR0b25UZXh0ID0gJCRuZXdfcHJvcHMuYnV0dG9uVGV4dCk7XG4gICAgaWYgKFwiYnV0dG9uUmlnaHRJY29uXCIgaW4gJCRuZXdfcHJvcHMpXG4gICAgICAkJGludmFsaWRhdGUoMSwgYnV0dG9uUmlnaHRJY29uID0gJCRuZXdfcHJvcHMuYnV0dG9uUmlnaHRJY29uKTtcbiAgICBpZiAoXCJidXR0b25MZWZ0SWNvblwiIGluICQkbmV3X3Byb3BzKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIGJ1dHRvbkxlZnRJY29uID0gJCRuZXdfcHJvcHMuYnV0dG9uTGVmdEljb24pO1xuICAgIGlmIChcIm9uQ2xpY2tcIiBpbiAkJG5ld19wcm9wcylcbiAgICAgICQkaW52YWxpZGF0ZSgzLCBvbkNsaWNrID0gJCRuZXdfcHJvcHMub25DbGljayk7XG4gIH07XG4gIHJldHVybiBbYnV0dG9uVGV4dCwgYnV0dG9uUmlnaHRJY29uLCBidXR0b25MZWZ0SWNvbiwgb25DbGljaywgYnV0dG9uQ29sb3IsICQkcmVzdFByb3BzXTtcbn1cbnZhciBSZWd1bGFyQnV0dG9uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJHMsIGNyZWF0ZV9mcmFnbWVudCRQLCBzYWZlX25vdF9lcXVhbCwge1xuICAgICAgYnV0dG9uVGV4dDogMCxcbiAgICAgIGJ1dHRvblJpZ2h0SWNvbjogMSxcbiAgICAgIGJ1dHRvbkxlZnRJY29uOiAyLFxuICAgICAgb25DbGljazogM1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JE8oY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCB0O1xuICBsZXQgYnV0dG9uX2NsYXNzX3ZhbHVlO1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICB0ID0gdGV4dChcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4WzBdXG4gICAgICApO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgYnV0dG9uX2NsYXNzX3ZhbHVlID0gXCJtcy1tb2RhbF9fdGV4dC1idXR0b24gXCIgKyAvKiQkcmVzdFByb3BzKi9cbiAgICAgIGN0eFszXS5jbGFzcyk7XG4gICAgICBzZXRfc3R5bGUoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJjb2xvclwiLFxuICAgICAgICAvKmJ1dHRvbkNvbG9yKi9cbiAgICAgICAgY3R4WzJdXG4gICAgICApO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdCk7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihidXR0b24sIFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKFxuICAgICAgICAgICAgLypvbkNsaWNrKi9cbiAgICAgICAgICAgIGN0eFsxXVxuICAgICAgICAgICkpXG4gICAgICAgICAgICBjdHhbMV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChuZXdfY3R4LCBbZGlydHldKSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKGRpcnR5ICYgLypidXR0b25UZXh0Ki9cbiAgICAgIDEpXG4gICAgICAgIHNldF9kYXRhKFxuICAgICAgICAgIHQsXG4gICAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgICBjdHhbMF1cbiAgICAgICAgKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJCRyZXN0UHJvcHMqL1xuICAgICAgOCAmJiBidXR0b25fY2xhc3NfdmFsdWUgIT09IChidXR0b25fY2xhc3NfdmFsdWUgPSBcIm1zLW1vZGFsX190ZXh0LWJ1dHRvbiBcIiArIC8qJCRyZXN0UHJvcHMqL1xuICAgICAgY3R4WzNdLmNsYXNzKSkge1xuICAgICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBidXR0b25fY2xhc3NfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLypidXR0b25Db2xvciovXG4gICAgICA0KSB7XG4gICAgICAgIHNldF9zdHlsZShcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjb2xvclwiLFxuICAgICAgICAgIC8qYnV0dG9uQ29sb3IqL1xuICAgICAgICAgIGN0eFsyXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRyKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGNvbnN0IG9taXRfcHJvcHNfbmFtZXMgPSBbXCJidXR0b25UZXh0XCIsIFwib25DbGlja1wiXTtcbiAgbGV0ICQkcmVzdFByb3BzID0gY29tcHV0ZV9yZXN0X3Byb3BzKCQkcHJvcHMsIG9taXRfcHJvcHNfbmFtZXMpO1xuICBsZXQgJGFwcDtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEFwcFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDQsICRhcHAgPSAkJHZhbHVlKSk7XG4gIGxldCB7IGJ1dHRvblRleHQgPSBcIlN1Ym1pdFwiIH0gPSAkJHByb3BzO1xuICBsZXQgeyBvbkNsaWNrID0gKCkgPT4ge1xuICB9IH0gPSAkJHByb3BzO1xuICBsZXQgYnV0dG9uQ29sb3IgPSBcInJnYig0MSwgOTgsIDI1NSlcIjtcbiAgaWYgKCRhcHAuYnJhbmRpbmcuY29sb3JzLmxpZ2h0TW9kZS5wcmltYXJ5QnV0dG9uKSB7XG4gICAgYnV0dG9uQ29sb3IgPSAkYXBwLmJyYW5kaW5nLmNvbG9ycy5saWdodE1vZGUucHJpbWFyeUJ1dHRvbjtcbiAgfVxuICAkJHNlbGYuJCRzZXQgPSAoJCRuZXdfcHJvcHMpID0+IHtcbiAgICAkJHByb3BzID0gYXNzaWduKGFzc2lnbih7fSwgJCRwcm9wcyksIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMoJCRuZXdfcHJvcHMpKTtcbiAgICAkJGludmFsaWRhdGUoMywgJCRyZXN0UHJvcHMgPSBjb21wdXRlX3Jlc3RfcHJvcHMoJCRwcm9wcywgb21pdF9wcm9wc19uYW1lcykpO1xuICAgIGlmIChcImJ1dHRvblRleHRcIiBpbiAkJG5ld19wcm9wcylcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBidXR0b25UZXh0ID0gJCRuZXdfcHJvcHMuYnV0dG9uVGV4dCk7XG4gICAgaWYgKFwib25DbGlja1wiIGluICQkbmV3X3Byb3BzKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIG9uQ2xpY2sgPSAkJG5ld19wcm9wcy5vbkNsaWNrKTtcbiAgfTtcbiAgcmV0dXJuIFtidXR0b25UZXh0LCBvbkNsaWNrLCBidXR0b25Db2xvciwgJCRyZXN0UHJvcHNdO1xufVxudmFyIFRleHRCdXR0b24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkciwgY3JlYXRlX2ZyYWdtZW50JE8sIHNhZmVfbm90X2VxdWFsLCB7IGJ1dHRvblRleHQ6IDAsIG9uQ2xpY2s6IDEgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0JDkoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbMTFdID0gbGlzdFtpXTtcbiAgY2hpbGRfY3R4WzEzXSA9IGk7XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0XzEkNChjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFsxNF0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkOShjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHJlZ3VsYXJidXR0b247XG4gIGxldCBjdXJyZW50O1xuICByZWd1bGFyYnV0dG9uID0gbmV3IFJlZ3VsYXJCdXR0b24oe1xuICAgIHByb3BzOiB7XG4gICAgICBvbkNsaWNrOiAoXG4gICAgICAgIC8qbGF1bmNoUG9ydGFsKi9cbiAgICAgICAgY3R4WzRdXG4gICAgICApLFxuICAgICAgY2xhc3M6IFwibXMtbW9kYWxfX3JlZ3VsYXItYnV0dG9uLS1tYXJnaW4tcmlnaHQgbXMtbW9kYWxfX3JlZ3VsYXItYnV0dG9uLS1sZWZ0LWljb25cIixcbiAgICAgIGJ1dHRvblRleHQ6IFwiTWFuYWdlIFN1YnNjcmlwdGlvbnNcIixcbiAgICAgIGJ1dHRvbkxlZnRJY29uOiBMaW5rT3V0SWNvblxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHJlZ3VsYXJidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgICAgc2V0X3N0eWxlKGRpdiwgXCJkaXNwbGF5XCIsIFwiZmxleFwiKTtcbiAgICAgIHNldF9zdHlsZShkaXYsIFwiZmxleC13cmFwXCIsIFwid3JhcFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChyZWd1bGFyYnV0dG9uLCBkaXYsIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHJlZ3VsYXJidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocmVndWxhcmJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocmVndWxhcmJ1dHRvbik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkZChjdHgpIHtcbiAgbGV0IGgzO1xuICBsZXQgdDE7XG4gIGxldCBlYWNoXzFfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGVhY2hfdmFsdWVfMSA9IChcbiAgICAvKmpvaW5lZFRlYW1zKi9cbiAgICBjdHhbMV1cbiAgKTtcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9ja18xJDQoZ2V0X2VhY2hfY29udGV4dF8xJDQoY3R4LCBlYWNoX3ZhbHVlXzEsIGkpKTtcbiAgfVxuICBjb25zdCBvdXQgPSAoaSkgPT4gdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sIDEsIDEsICgpID0+IHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IG51bGw7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBoMyA9IGVsZW1lbnQoXCJoM1wiKTtcbiAgICAgIGgzLnRleHRDb250ZW50ID0gXCJUZWFtIFBsYW5zXCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIGVhY2hfMV9hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgaDMsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MSwgYW5jaG9yKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluc2VydCh0YXJnZXQsIGVhY2hfMV9hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qcmVtb3ZlTWVtYmVyRnJvbVRlYW0sIGpvaW5lZFRlYW1zLCBtZW1iZXIqL1xuICAgICAgNjcpIHtcbiAgICAgICAgZWFjaF92YWx1ZV8xID0gLypqb2luZWRUZWFtcyovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dF8xJDQoY3R4MiwgZWFjaF92YWx1ZV8xLCBpKTtcbiAgICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9ja18xJDQoY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShlYWNoXzFfYW5jaG9yLnBhcmVudE5vZGUsIGVhY2hfMV9hbmNob3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgZm9yIChpID0gZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICBlYWNoX2Jsb2NrcyA9IGVhY2hfYmxvY2tzLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChoMyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDEpO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGVhY2hfMV9hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzEkNChjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBkaXYwO1xuICBsZXQgYjtcbiAgbGV0IHQwX3ZhbHVlID0gKFxuICAgIC8qdGVhbSovXG4gICAgY3R4WzE0XS5wbGFuTmFtZSArIFwiXCJcbiAgKTtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCB0ZXh0YnV0dG9uO1xuICBsZXQgdDI7XG4gIGxldCBjdXJyZW50O1xuICBmdW5jdGlvbiBmdW5jMigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLypmdW5jKi9cbiAgICAgIGN0eFs4XShcbiAgICAgICAgLyp0ZWFtKi9cbiAgICAgICAgY3R4WzE0XVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgdGV4dGJ1dHRvbiA9IG5ldyBUZXh0QnV0dG9uKHtcbiAgICBwcm9wczogeyBidXR0b25UZXh0OiBcIkxlYXZlIFRlYW1cIiwgb25DbGljazogZnVuYzIgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGIgPSBlbGVtZW50KFwiYlwiKTtcbiAgICAgIHQwID0gdGV4dCh0MF92YWx1ZSk7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHRleHRidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2NhcmRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYxLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjEsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGIpO1xuICAgICAgYXBwZW5kKGIsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MSk7XG4gICAgICBtb3VudF9jb21wb25lbnQodGV4dGJ1dHRvbiwgZGl2MSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDIpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qam9pbmVkVGVhbXMqL1xuICAgICAgMikgJiYgdDBfdmFsdWUgIT09ICh0MF92YWx1ZSA9IC8qdGVhbSovXG4gICAgICBjdHhbMTRdLnBsYW5OYW1lICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQwLCB0MF92YWx1ZSk7XG4gICAgICBjb25zdCB0ZXh0YnV0dG9uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qam9pbmVkVGVhbXMsIG1lbWJlciovXG4gICAgICAzKVxuICAgICAgICB0ZXh0YnV0dG9uX2NoYW5nZXMub25DbGljayA9IGZ1bmMyO1xuICAgICAgdGV4dGJ1dHRvbi4kc2V0KHRleHRidXR0b25fY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbih0ZXh0YnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHRleHRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2MSk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudCh0ZXh0YnV0dG9uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRoKGN0eCkge1xuICBsZXQgaDM7XG4gIGxldCB0MTtcbiAgbGV0IGVhY2hfMV9hbmNob3I7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgZWFjaF92YWx1ZSA9IChcbiAgICAvKmZyZWVQbGFuQ29ubmVjdGlvbnMqL1xuICAgIGN0eFsyXVxuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQ5KGdldF9lYWNoX2NvbnRleHQkOShjdHgsIGVhY2hfdmFsdWUsIGkpKTtcbiAgfVxuICBjb25zdCBvdXQgPSAoaSkgPT4gdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sIDEsIDEsICgpID0+IHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IG51bGw7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBoMyA9IGVsZW1lbnQoXCJoM1wiKTtcbiAgICAgIGgzLnRleHRDb250ZW50ID0gXCJGcmVlIFBsYW5zXCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIGVhY2hfMV9hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgaDMsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MSwgYW5jaG9yKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluc2VydCh0YXJnZXQsIGVhY2hfMV9hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qcmVtb3ZlRnJlZVBsYW4sIGZyZWVQbGFuQ29ubmVjdGlvbnMsICRhcHAqL1xuICAgICAgNDQpIHtcbiAgICAgICAgZWFjaF92YWx1ZSA9IC8qZnJlZVBsYW5Db25uZWN0aW9ucyovXG4gICAgICAgIGN0eDJbMl07XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHQkOShjdHgyLCBlYWNoX3ZhbHVlLCBpKTtcbiAgICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQ5KGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZWFjaF8xX2FuY2hvci5wYXJlbnROb2RlLCBlYWNoXzFfYW5jaG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIGZvciAoaSA9IGVhY2hfdmFsdWUubGVuZ3RoOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBvdXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICBlYWNoX2Jsb2NrcyA9IGVhY2hfYmxvY2tzLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChoMyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDEpO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGVhY2hfMV9hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrJDkoY3R4KSB7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2MDtcbiAgbGV0IGI7XG4gIGxldCB0MF92YWx1ZSA9IChcbiAgICAvKiRhcHAqL1xuICAgIGN0eFszXS5wbGFucy5maW5kKGZ1bmNfMTIpLm5hbWUgKyBcIlwiXG4gICk7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgdGV4dGJ1dHRvbjtcbiAgbGV0IHQyO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gZnVuY18xMiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qZnVuY18xKi9cbiAgICAgIGN0eFs5XShcbiAgICAgICAgLyptZW1iZXJQbGFuKi9cbiAgICAgICAgY3R4WzExXSxcbiAgICAgICAgLi4uYXJnc1xuICAgICAgKVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gZnVuY18yMigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLypmdW5jXzIqL1xuICAgICAgY3R4WzEwXShcbiAgICAgICAgLyptZW1iZXJQbGFuKi9cbiAgICAgICAgY3R4WzExXVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgdGV4dGJ1dHRvbiA9IG5ldyBUZXh0QnV0dG9uKHtcbiAgICBwcm9wczogeyBidXR0b25UZXh0OiBcIlJlbW92ZVwiLCBvbkNsaWNrOiBmdW5jXzIyIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBiID0gZWxlbWVudChcImJcIik7XG4gICAgICB0MCA9IHRleHQodDBfdmFsdWUpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudCh0ZXh0YnV0dG9uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19jYXJkXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2MSwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYxLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYwLCBiKTtcbiAgICAgIGFwcGVuZChiLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHRleHRidXR0b24sIGRpdjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQyKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChuZXdfY3R4LCBkaXJ0eSkge1xuICAgICAgY3R4ID0gbmV3X2N0eDtcbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKiRhcHAsIGZyZWVQbGFuQ29ubmVjdGlvbnMqL1xuICAgICAgMTIpICYmIHQwX3ZhbHVlICE9PSAodDBfdmFsdWUgPSAvKiRhcHAqL1xuICAgICAgY3R4WzNdLnBsYW5zLmZpbmQoZnVuY18xMikubmFtZSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MCwgdDBfdmFsdWUpO1xuICAgICAgY29uc3QgdGV4dGJ1dHRvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKmZyZWVQbGFuQ29ubmVjdGlvbnMqL1xuICAgICAgNClcbiAgICAgICAgdGV4dGJ1dHRvbl9jaGFuZ2VzLm9uQ2xpY2sgPSBmdW5jXzIyO1xuICAgICAgdGV4dGJ1dHRvbi4kc2V0KHRleHRidXR0b25fY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbih0ZXh0YnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHRleHRidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2MSk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudCh0ZXh0YnV0dG9uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skbihjdHgpIHtcbiAgbGV0IGRpdjtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdi50ZXh0Q29udGVudCA9IFwiWW91IGN1cnJlbnRseSBoYXZlIGZyZWUgbm8gcGxhbnMuXCI7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JE4oY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCB0MTtcbiAgbGV0IHQyO1xuICBsZXQgdDM7XG4gIGxldCB0NDtcbiAgbGV0IGlmX2Jsb2NrM19hbmNob3I7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgaWZfYmxvY2swID0gKFxuICAgIC8qbWVtYmVyKi9cbiAgICBjdHhbMF0uc3RyaXBlQ3VzdG9tZXJJZCAmJiBjcmVhdGVfaWZfYmxvY2tfMyQ5KGN0eClcbiAgKTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKmpvaW5lZFRlYW1zKi9cbiAgICBjdHhbMV0ubGVuZ3RoID4gMCAmJiBjcmVhdGVfaWZfYmxvY2tfMiRkKGN0eClcbiAgKTtcbiAgbGV0IGlmX2Jsb2NrMiA9IChcbiAgICAvKmZyZWVQbGFuQ29ubmVjdGlvbnMqL1xuICAgIGN0eFsyXS5sZW5ndGggPiAwICYmIGNyZWF0ZV9pZl9ibG9ja18xJGgoY3R4KVxuICApO1xuICBsZXQgaWZfYmxvY2szID0gIS8qbWVtYmVyKi9cbiAgY3R4WzBdLnN0cmlwZUN1c3RvbWVySWQgJiYgLypmcmVlUGxhbkNvbm5lY3Rpb25zKi9cbiAgY3R4WzJdLmxlbmd0aCA9PT0gMCAmJiBjcmVhdGVfaWZfYmxvY2skbigpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2LmlubmVySFRNTCA9IGA8aDIgY2xhc3M9XCJtcy1tb2RhbF9fdGl0bGUgbXMtbW9kYWxfX3RpdGxlLS1wcm9maWxlXCI+UGxhbnM8L2gyPmA7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2szKVxuICAgICAgICBpZl9ibG9jazMuYygpO1xuICAgICAgaWZfYmxvY2szX2FuY2hvciA9IGVtcHR5KCk7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZS1jb250YWluZXJcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MSwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQyLCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDMsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NCwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazMpXG4gICAgICAgIGlmX2Jsb2NrMy5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrM19hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKFxuICAgICAgICAvKm1lbWJlciovXG4gICAgICAgIGN0eDJbMF0uc3RyaXBlQ3VzdG9tZXJJZFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzMkOShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazAubSh0Mi5wYXJlbnROb2RlLCB0Mik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazAsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qam9pbmVkVGVhbXMqL1xuICAgICAgICBjdHgyWzFdLmxlbmd0aCA+IDBcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgICAgaWZfYmxvY2sxLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qam9pbmVkVGVhbXMqL1xuICAgICAgICAgIDIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrXzIkZChjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubSh0My5wYXJlbnROb2RlLCB0Myk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qZnJlZVBsYW5Db25uZWN0aW9ucyovXG4gICAgICAgIGN0eDJbMl0ubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazIpIHtcbiAgICAgICAgICBpZl9ibG9jazIucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypmcmVlUGxhbkNvbm5lY3Rpb25zKi9cbiAgICAgICAgICA0KSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGNyZWF0ZV9pZl9ibG9ja18xJGgoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgaWZfYmxvY2syLm0odDQucGFyZW50Tm9kZSwgdDQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2syID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCEvKm1lbWJlciovXG4gICAgICBjdHgyWzBdLnN0cmlwZUN1c3RvbWVySWQgJiYgLypmcmVlUGxhbkNvbm5lY3Rpb25zKi9cbiAgICAgIGN0eDJbMl0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazMpXG4gICAgICAgICAgO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazMgPSBjcmVhdGVfaWZfYmxvY2skbigpO1xuICAgICAgICAgIGlmX2Jsb2NrMy5jKCk7XG4gICAgICAgICAgaWZfYmxvY2szLm0oaWZfYmxvY2szX2FuY2hvci5wYXJlbnROb2RlLCBpZl9ibG9jazNfYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazMpIHtcbiAgICAgICAgaWZfYmxvY2szLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrMyA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMik7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDEpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Mik7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQzKTtcbiAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgIGlmX2Jsb2NrMi5kKGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDQpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9jazNfYW5jaG9yKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRxKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCBmcmVlUGxhbkNvbm5lY3Rpb25zO1xuICBsZXQgam9pbmVkVGVhbXM7XG4gIGxldCAkYXBwO1xuICBjb21wb25lbnRfc3Vic2NyaWJlKCQkc2VsZiwgQXBwU3RvcmUsICgkJHZhbHVlKSA9PiAkJGludmFsaWRhdGUoMywgJGFwcCA9ICQkdmFsdWUpKTtcbiAgbGV0IHsgcHJvZmlsZUxvYWRlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBmdW5jdGlvbiBsYXVuY2hQb3J0YWwoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAkJGludmFsaWRhdGUoNywgcHJvZmlsZUxvYWRlciA9IHRydWUpO1xuICAgICAgeWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5sYXVuY2hTdHJpcGVDdXN0b21lclBvcnRhbCh7IHByaWNlSWRzOiBbXSwgYXV0b1JlZGlyZWN0OiB0cnVlIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUZyZWVQbGFuKHBsYW5JZCkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAkJGludmFsaWRhdGUoNywgcHJvZmlsZUxvYWRlciA9IHRydWUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgeWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5yZW1vdmVQbGFuKHsgcGxhbklkIH0pO1xuICAgICAgICAkJGludmFsaWRhdGUoMCwgbWVtYmVyLnBsYW5Db25uZWN0aW9ucyA9IG1lbWJlci5wbGFuQ29ubmVjdGlvbnMuZmlsdGVyKChwbGFuKSA9PiBwbGFuLnBsYW5JZCAhPT0gcGxhbklkKSwgbWVtYmVyKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAkJGludmFsaWRhdGUoNywgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVNZW1iZXJGcm9tVGVhbSh0ZWFtSWQsIG1lbWJlcklkKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20ucmVtb3ZlTWVtYmVyRnJvbVRlYW0oeyB0ZWFtSWQsIG1lbWJlcklkIH0pO1xuICAgICAgICAkJGludmFsaWRhdGUoMCwgbWVtYmVyLnRlYW1zLmpvaW5lZFRlYW1zID0gbWVtYmVyLnRlYW1zLmpvaW5lZFRlYW1zLmZpbHRlcigodCkgPT4gdC50ZWFtSWQgIT09IHRlYW1JZCksIG1lbWJlcik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGZ1bmMyID0gKHRlYW0pID0+IHJlbW92ZU1lbWJlckZyb21UZWFtKHRlYW0udGVhbUlkLCBtZW1iZXIuaWQpO1xuICBjb25zdCBmdW5jXzEyID0gKG1lbWJlclBsYW4sIHBsYW4pID0+IHBsYW4uaWQgPT09IG1lbWJlclBsYW4ucGxhbklkO1xuICBjb25zdCBmdW5jXzIyID0gKG1lbWJlclBsYW4pID0+IHJlbW92ZUZyZWVQbGFuKG1lbWJlclBsYW4ucGxhbklkKTtcbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwicHJvZmlsZUxvYWRlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDcsIHByb2ZpbGVMb2FkZXIgPSAkJHByb3BzMi5wcm9maWxlTG9hZGVyKTtcbiAgICBpZiAoXCJtZW1iZXJcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBtZW1iZXIgPSAkJHByb3BzMi5tZW1iZXIpO1xuICB9O1xuICAkJHNlbGYuJCQudXBkYXRlID0gKCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyptZW1iZXIqL1xuICAgIDEpIHtcbiAgICAgICQkaW52YWxpZGF0ZSgyLCBmcmVlUGxhbkNvbm5lY3Rpb25zID0gbWVtYmVyLnBsYW5Db25uZWN0aW9ucy5maWx0ZXIoKHBsYW4pID0+IHBsYW4udHlwZSA9PT0gXCJGUkVFXCIpKTtcbiAgICB9XG4gICAgaWYgKCQkc2VsZi4kJC5kaXJ0eSAmIC8qbWVtYmVyKi9cbiAgICAxKSB7XG4gICAgICAkJGludmFsaWRhdGUoMSwgam9pbmVkVGVhbXMgPSAoX2EgPSBtZW1iZXIudGVhbXMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5qb2luZWRUZWFtcyk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gW1xuICAgIG1lbWJlcixcbiAgICBqb2luZWRUZWFtcyxcbiAgICBmcmVlUGxhbkNvbm5lY3Rpb25zLFxuICAgICRhcHAsXG4gICAgbGF1bmNoUG9ydGFsLFxuICAgIHJlbW92ZUZyZWVQbGFuLFxuICAgIHJlbW92ZU1lbWJlckZyb21UZWFtLFxuICAgIHByb2ZpbGVMb2FkZXIsXG4gICAgZnVuYzIsXG4gICAgZnVuY18xMixcbiAgICBmdW5jXzIyXG4gIF07XG59XG52YXIgUGxhbnNJbmZvQ29udGVudCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRxLCBjcmVhdGVfZnJhZ21lbnQkTiwgc2FmZV9ub3RfZXF1YWwsIHsgcHJvZmlsZUxvYWRlcjogNywgbWVtYmVyOiAwIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyRrKHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtYzZpaGd2XCIsIFwic3ZnLnN2ZWx0ZS1jNmloZ3Z7ZmlsbDpjdXJyZW50Q29sb3J9XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JE0oY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk0yMjYuNzgzLTEzMy43ODJxLTM4LjM2MyAwLTY1LjY4Mi0yNy4zMTktMjcuMzE5LTI3LjMxOS0yNy4zMTktNjUuNjgydi01MDYuNDM0cTAtMzguMzYzIDI3LjMxOS02NS42ODIgMjcuMzE5LTI3LjMxOSA2NS42ODItMjcuMzE5aDE1MS41MjFxMTAuMzkxLTMyLjY5NiAzNy42ODgtNTMuMjYxIDI3LjI5Ni0yMC41NjYgNjQuMDA4LTIwLjU2NiAzNC4zMjYgMCA2Mi4yODMgMjAuNTY2IDI3Ljk1NyAyMC41NjUgMzguOTEzIDUzLjI2MWgxNTIuMDIxcTM4LjM2MyAwIDY1LjY4MiAyNy4zMTkgMjcuMzE5IDI3LjMxOSAyNy4zMTkgNjUuNjgydjUwNi40MzRxMCAzOC4zNjMtMjcuMzE5IDY1LjY4Mi0yNy4zMTkgMjcuMzE5LTY1LjY4MiAyNy4zMTlIMjI2Ljc4M1ptMC05My4wMDFoNTA2LjQzNHYtNTA2LjQzNGgtNjMuMDQzdjc1LjA0M3EwIDE4Ljg4Ny0xMy44MDcgMzIuNjk0LTEzLjgwNyAxMy44MDctMzIuNjk0IDEzLjgwN0gzMzYuMzI3cS0xOC44ODcgMC0zMi42OTQtMTMuODA3LTEzLjgwNy0xMy44MDctMTMuODA3LTMyLjY5NHYtNzUuMDQzaC02My4wNDN2NTA2LjQzNFptMjUzLjAwNi01MTguOTEzcTEzLjcxMSAwIDIzLjcxMS05Ljc4OSAxMC05Ljc5IDEwLTIzLjUgMC0xMy43MTEtOS43ODktMjMuNzExLTkuNzktMTAtMjMuNS0xMC0xMy43MTEgMC0yMy43MTEgOS43OS0xMCA5Ljc4OS0xMCAyMy41IDAgMTMuNzEgOS43ODkgMjMuNzEgOS43OSAxMCAyMy41IDEwWlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJoZWlnaHRcIiwgXCIyMFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIC05NjAgOTYwIDk2MFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcIndpZHRoXCIsIFwiMjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJjbGFzc1wiLCBcInN2ZWx0ZS1jNmloZ3ZcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgQ29weUljb24kMSA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkTSwgc2FmZV9ub3RfZXF1YWwsIHt9LCBhZGRfY3NzJGspO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEwoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTEwOS0xMjBxLTExIDAtMjAtNS41VDc1LTE0MHEtNS05LTUuNS0xOS41VDc1LTE4MGwzNzAtNjQwcTYtMTAgMTUuNS0xNXQxOS41LTVxMTAgMCAxOS41IDV0MTUuNSAxNWwzNzAgNjQwcTYgMTAgNS41IDIwLjVUODg1LTE0MHEtNSA5LTE0IDE0LjV0LTIwIDUuNUgxMDlabTM3MS0xMjBxMTcgMCAyOC41LTExLjVUNTIwLTI4MHEwLTE3LTExLjUtMjguNVQ0ODAtMzIwcS0xNyAwLTI4LjUgMTEuNVQ0NDAtMjgwcTAgMTcgMTEuNSAyOC41VDQ4MC0yNDBabTAtMTIwcTE3IDAgMjguNS0xMS41VDUyMC00MDB2LTEyMHEwLTE3LTExLjUtMjguNVQ0ODAtNTYwcS0xNyAwLTI4LjUgMTEuNVQ0NDAtNTIwdjEyMHEwIDE3IDExLjUgMjguNVQ0ODAtMzYwWlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJoZWlnaHRcIiwgXCIyNFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIC05NjAgOTYwIDk2MFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcIndpZHRoXCIsIFwiMjRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgV2FybmluZ0ljb24kMSA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkTCwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3Mkaih0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLTFoYXFiN2JcIiwgXCIubXMtbW9kYWxfX3RpdGxlLWNvbnRhaW5lci0tdGVhbXMuc3ZlbHRlLTFoYXFiN2J7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWl0ZW1zOmJhc2VsaW5lO21hcmdpbi1ib3R0b206MjRweDtnYXA6MTJweH0ubXMtbW9kYWxfX3RpdGxlLS10ZWFtcy5zdmVsdGUtMWhhcWI3YnttYXJnaW4tYm90dG9tOjBweH0ubXMtbW9kYWxfX3RpdGxlLS1zZWF0cy5zdmVsdGUtMWhhcWI3Yntmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxO2ZvbnQtd2VpZ2h0OjUwMDtjb2xvcjojNWM1YzVjfS5tcy1tb2RhbF9faW52aXRlLWdyb3VwLnN2ZWx0ZS0xaGFxYjdie21hcmdpbi1ib3R0b206MjRweH0ubXMtbW9kYWxfX2ludml0ZS1pbnB1dC1ncm91cC5zdmVsdGUtMWhhcWI3YntkaXNwbGF5OmZsZXg7Z2FwOjEycHg7Ym9yZGVyOjFweCBzb2xpZCAjZGRkO2JvcmRlci1yYWRpdXM6NnB4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjZweH0ubXMtbW9kYWxfX2ludml0ZS1pbnB1dC5zdmVsdGUtMWhhcWI3Yntib3JkZXI6bm9uZTtiYWNrZ3JvdW5kOm5vbmU7b3V0bGluZTpub25lO3dpZHRoOjEwMCU7Zm9udC1zaXplOjEycHg7cGFkZGluZzo4cHggMDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5tcy1tb2RhbF9faW52aXRlLWNvcHktYnRuLnN2ZWx0ZS0xaGFxYjdie2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjcwMDtsaW5lLWhlaWdodDoxO2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjk2MmZmO2JvcmRlci1yYWRpdXM6NHB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzo4cHggMTJweDtnYXA6NnB4fS5tcy1tb2RhbF9faW52aXRlLWNvcHktYnRuIHN2Z3ttYXJnaW4tcmlnaHQ6NHB4O3dpZHRoOjE2cHh9Lm1zLW1vZGFsX19pbnZpdGUtcmVnZW5lcmF0ZS1idG4uc3ZlbHRlLTFoYXFiN2J7Zm9udC1zaXplOjEycHg7Zm9udC13ZWlnaHQ6NjAwO2xpbmUtaGVpZ2h0OjE7Y29sb3I6IzI5NjJmZjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtwYWRkaW5nOjRweCAwfS5tcy1tb2RhbF9fdXBncmFkZS13YXJuaW5nLnN2ZWx0ZS0xaGFxYjdie2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjEycHg7cGFkZGluZzoxMnB4O2JvcmRlci1yYWRpdXM6OHB4O2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoxO2NvbG9yOiNlMjhjMGE7YmFja2dyb3VuZC1jb2xvcjojZmFmM2UxO3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpsZWZ0fS5tcy1tb2RhbF9fdXBncmFkZS13YXJuaW5nLXRleHQuc3ZlbHRlLTFoYXFiN2J7d2lkdGg6MTAwJX0ubXMtbW9kYWxfX3RlYW0tbWVtYmVyLnN2ZWx0ZS0xaGFxYjdie2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzoxMnB4IDA7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2ViZWJlYn0ubXMtbW9kYWxfX3RlYW0tbWVtYmVyLnN2ZWx0ZS0xaGFxYjdiOmxhc3QtY2hpbGR7Ym9yZGVyLWJvdHRvbTpub25lfS5tcy1tb2RhbF9fdGVhbS1tZW1iZXItaW5mby5zdmVsdGUtMWhhcWI3YntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyfS5tcy1tb2RhbF9fdGVhbS1tZW1iZXItaW1hZ2Uuc3ZlbHRlLTFoYXFiN2J7d2lkdGg6MzJweDtoZWlnaHQ6MzJweDtib3JkZXItcmFkaXVzOjUwJTttYXJnaW4tcmlnaHQ6MTBweH0ubXMtbW9kYWxfX3RlYW0tbWVtYmVyLWltYWdlLS1pbml0aWFsLnN2ZWx0ZS0xaGFxYjdie3dpZHRoOjMycHg7aGVpZ2h0OjMycHg7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyOjEuMzNweCBzb2xpZCAjMjk2MmZmO21hcmdpbi1yaWdodDoxMnB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNlN2YxZmY7Y29sb3I6IzI5NjJmZjtmb250LXNpemU6MThweDtmb250LXdlaWdodDo1MDA7bGluZS1oZWlnaHQ6MX0ubXMtbW9kYWxfX3RlYW0tbWVtYmVyLWVtYWlsLnN2ZWx0ZS0xaGFxYjdie2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoxO2NvbG9yOiM1YzVjNWN9Lm1zLW1vZGFsX190ZWFtLW1lbWJlci1hY3Rpb25zLnN2ZWx0ZS0xaGFxYjdie2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLW1vZGFsX190ZWFtLW1lbWJlci1yb2xlLnN2ZWx0ZS0xaGFxYjdie2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoxO2NvbG9yOiM1YzVjNWN9Lm1zLW1vZGFsX190ZWFtLW1lbWJlci1yZW1vdmUtYnRuLnN2ZWx0ZS0xaGFxYjdie2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0OjYwMDtsaW5lLWhlaWdodDoxO2NvbG9yOiNjODAyMGQ7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXI6bm9uZTtvdXRsaW5lOm5vbmU7cGFkZGluZzo0cHggMDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbi1sZWZ0OjhweH0ubXMtbW9kYWxfX3RlYW0tbWVtYmVyLXJlbW92ZS10ZXh0LnN2ZWx0ZS0xaGFxYjdie21hcmdpbi1yaWdodDo4cHh9Lm1zLW1vZGFsX190ZWFtLW1lbWJlci1yZW1vdmUtYnRuIHN2Z3t3aWR0aDoxMHB4ICFpbXBvcnRhbnR9XCIpO1xufVxuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dCQ4KGN0eCwgbGlzdCwgaSkge1xuICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgY2hpbGRfY3R4WzE1XSA9IGxpc3RbaV07XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNSQ1KGN0eCkge1xuICB2YXIgX2EsIF9iO1xuICBsZXQgZGl2O1xuICBsZXQgdDBfdmFsdWUgPSAoXG4gICAgLyp0ZWFtRGF0YSovXG4gICAgKChfYSA9IGN0eFswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1lbWJlcnMubGVuZ3RoKSArIFwiXCJcbiAgKTtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCB0Ml92YWx1ZSA9IChcbiAgICAvKnRlYW1EYXRhKi9cbiAgICAoKF9iID0gY3R4WzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2IubWF4VGVhbU1lbWJlcnMpICsgXCJcIlxuICApO1xuICBsZXQgdDI7XG4gIGxldCB0MztcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIHQwID0gdGV4dCh0MF92YWx1ZSk7XG4gICAgICB0MSA9IHRleHQoXCIvXCIpO1xuICAgICAgdDIgPSB0ZXh0KHQyX3ZhbHVlKTtcbiAgICAgIHQzID0gdGV4dChcIiBTZWF0c1wiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RpdGxlLS1zZWF0cyBzdmVsdGUtMWhhcWI3YlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYsIHQxKTtcbiAgICAgIGFwcGVuZChkaXYsIHQyKTtcbiAgICAgIGFwcGVuZChkaXYsIHQzKTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIHZhciBfYTIsIF9iMjtcbiAgICAgIGlmIChkaXJ0eSAmIC8qdGVhbURhdGEqL1xuICAgICAgMSAmJiB0MF92YWx1ZSAhPT0gKHQwX3ZhbHVlID0gLyp0ZWFtRGF0YSovXG4gICAgICAoKF9hMiA9IGN0eDJbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYTIubWVtYmVycy5sZW5ndGgpICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQwLCB0MF92YWx1ZSk7XG4gICAgICBpZiAoZGlydHkgJiAvKnRlYW1EYXRhKi9cbiAgICAgIDEgJiYgdDJfdmFsdWUgIT09ICh0Ml92YWx1ZSA9IC8qdGVhbURhdGEqL1xuICAgICAgKChfYjIgPSBjdHgyWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLm1heFRlYW1NZW1iZXJzKSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MiwgdDJfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9jYXRjaF9ibG9jayhjdHgpIHtcbiAgcmV0dXJuIHtcbiAgICBjOiBub29wLFxuICAgIG06IG5vb3AsXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZDogbm9vcFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX3RoZW5fYmxvY2soY3R4KSB7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jazA7XG4gIGxldCB0O1xuICBsZXQgaWZfYmxvY2sxX2FuY2hvcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja180JDYsIGNyZWF0ZV9lbHNlX2Jsb2NrXzIkMV07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKFxuICAgICAgLyp0ZWFtRGF0YSovXG4gICAgICAoKF9hID0gY3R4MlswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1lbWJlcnMubGVuZ3RoKSA8IC8qdGVhbURhdGEqL1xuICAgICAgKChfYiA9IGN0eDJbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYi5tYXhUZWFtTWVtYmVycylcbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpO1xuICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKnRlYW1EYXRhKi9cbiAgICBjdHhbMF0gJiYgLyp0ZWFtRGF0YSovXG4gICAgY3R4WzBdLm1lbWJlcnMubGVuZ3RoID4gMCAmJiBjcmVhdGVfaWZfYmxvY2skbShjdHgpXG4gICk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0ID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICBpZl9ibG9jazFfYW5jaG9yID0gZW1wdHkoKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdCwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrMV9hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ucChjdHgyLCBkaXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMC5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCwgMSk7XG4gICAgICAgIGlmX2Jsb2NrMC5tKHQucGFyZW50Tm9kZSwgdCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qdGVhbURhdGEqL1xuICAgICAgICBjdHgyWzBdICYmIC8qdGVhbURhdGEqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlcnMubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyp0ZWFtRGF0YSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBjcmVhdGVfaWZfYmxvY2skbShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubShpZl9ibG9jazFfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrMV9hbmNob3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9jazFfYW5jaG9yKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9ja18yJDEoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCB3YXJuaW5naWNvbjtcbiAgbGV0IHQwO1xuICBsZXQgc3BhbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIHdhcm5pbmdpY29uID0gbmV3IFdhcm5pbmdJY29uJDEoe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudCh3YXJuaW5naWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuLnRleHRDb250ZW50ID0gXCJZb3VyIHRlYW0gaXMgZ3Jvd2luZyEgVXBncmFkZSB5b3VyIHBsYW4gZm9yIG1vcmUgc2VhdHMuXCI7XG4gICAgICBhdHRyKHNwYW4sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdXBncmFkZS13YXJuaW5nLXRleHQgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX191cGdyYWRlLXdhcm5pbmcgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQod2FybmluZ2ljb24sIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MCk7XG4gICAgICBhcHBlbmQoZGl2LCBzcGFuKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbih3YXJuaW5naWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dCh3YXJuaW5naWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQod2FybmluZ2ljb24pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja180JDYoY3R4KSB7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2MDtcbiAgbGV0IGlucHV0O1xuICBsZXQgdDA7XG4gIGxldCBidXR0b24wO1xuICBsZXQgY29weWljb247XG4gIGxldCB0MTtcbiAgbGV0IHQyO1xuICBsZXQgdDM7XG4gIGxldCBidXR0b24xO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBjb3B5aWNvbiA9IG5ldyBDb3B5SWNvbiQxKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlucHV0ID0gZWxlbWVudChcImlucHV0XCIpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgYnV0dG9uMCA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIHQyID0gdGV4dChcbiAgICAgICAgLypjb3B5SW52aXRlVGV4dCovXG4gICAgICAgIGN0eFsyXVxuICAgICAgKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGJ1dHRvbjEgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uMS50ZXh0Q29udGVudCA9IFwiUmVnZW5lcmF0ZSBJbnZpdGUgTGlua1wiO1xuICAgICAgYXR0cihpbnB1dCwgXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgIGF0dHIoaW5wdXQsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9faW52aXRlLWlucHV0IHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgICAgaW5wdXQudmFsdWUgPSAvKmludml0ZUxpbmsqL1xuICAgICAgY3R4WzNdO1xuICAgICAgaW5wdXQucmVhZE9ubHkgPSB0cnVlO1xuICAgICAgYXR0cihidXR0b24wLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2ludml0ZS1jb3B5LWJ0biBzdmVsdGUtMWhhcWI3YlwiKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19pbnZpdGUtaW5wdXQtZ3JvdXAgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9faW52aXRlLXJlZ2VuZXJhdGUtYnRuIHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2ludml0ZS1ncm91cCBzdmVsdGUtMWhhcWI3YlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgaW5wdXQpO1xuICAgICAgYXBwZW5kKGRpdjAsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYwLCBidXR0b24wKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5aWNvbiwgYnV0dG9uMCwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMCwgdDEpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjAsIHQyKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MSwgYnV0dG9uMSk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjAsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgICAgY3R4WzEwXVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8xKi9cbiAgICAgICAgICAgIGN0eFsxMV1cbiAgICAgICAgICApXG4gICAgICAgIF07XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyppbnZpdGVMaW5rKi9cbiAgICAgIDggJiYgaW5wdXQudmFsdWUgIT09IC8qaW52aXRlTGluayovXG4gICAgICBjdHgyWzNdKSB7XG4gICAgICAgIGlucHV0LnZhbHVlID0gLyppbnZpdGVMaW5rKi9cbiAgICAgICAgY3R4MlszXTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qY29weUludml0ZVRleHQqL1xuICAgICAgNClcbiAgICAgICAgc2V0X2RhdGEoXG4gICAgICAgICAgdDIsXG4gICAgICAgICAgLypjb3B5SW52aXRlVGV4dCovXG4gICAgICAgICAgY3R4MlsyXVxuICAgICAgICApO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2MSk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5aWNvbik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBydW5fYWxsKGRpc3Bvc2UpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRtKGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgbGV0IGVhY2hfMV9sb29rdXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGVhY2hfdmFsdWUgPSAoXG4gICAgLyp0ZWFtRGF0YSovXG4gICAgY3R4WzBdLm1lbWJlcnNcbiAgKTtcbiAgY29uc3QgZ2V0X2tleSA9IChjdHgyKSA9PiAoXG4gICAgLyptKi9cbiAgICBjdHgyWzE1XS5tZW1iZXIuaWRcbiAgKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHQkOChjdHgsIGVhY2hfdmFsdWUsIGkpO1xuICAgIGxldCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgZWFjaF8xX2xvb2t1cC5zZXQoa2V5LCBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJDgoa2V5LCBjaGlsZF9jdHgpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190ZWFtLW1lbWJlcnNcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoZGlydHkgJiAvKnNob3dSZW1vdmVCdXR0b24sIHRlYW1EYXRhLCByZW1vdmVNZW1iZXJGcm9tVGVhbSovXG4gICAgICA4MSkge1xuICAgICAgICBlYWNoX3ZhbHVlID0gLyp0ZWFtRGF0YSovXG4gICAgICAgIGN0eDJbMF0ubWVtYmVycztcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIGVhY2hfYmxvY2tzID0gdXBkYXRlX2tleWVkX2VhY2goZWFjaF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCAxLCBjdHgyLCBlYWNoX3ZhbHVlLCBlYWNoXzFfbG9va3VwLCBkaXYsIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBjcmVhdGVfZWFjaF9ibG9jayQ4LCBudWxsLCBnZXRfZWFjaF9jb250ZXh0JDgpO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5kKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2tfMSQzKGN0eCkge1xuICBsZXQgaW1nO1xuICBsZXQgaW1nX3NyY192YWx1ZTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgaW1nID0gZWxlbWVudChcImltZ1wiKTtcbiAgICAgIGF0dHIoaW1nLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RlYW0tbWVtYmVyLWltYWdlIHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgICAgaWYgKCFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKm0qL1xuICAgICAgY3R4WzE1XS5tZW1iZXIucHJvZmlsZUltYWdlKSlcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIFwiTWVtYmVyIFByb2ZpbGUgQXZhdGFyXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgaW1nLCBhbmNob3IpO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKGRpcnR5ICYgLyp0ZWFtRGF0YSovXG4gICAgICAxICYmICFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKm0qL1xuICAgICAgY3R4MlsxNV0ubWVtYmVyLnByb2ZpbGVJbWFnZSkpIHtcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpbWcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18zJDgoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCB0X3ZhbHVlID0gKFxuICAgIC8qbSovXG4gICAgY3R4WzE1XS5tZW1iZXIuYXV0aC5lbWFpbFswXS50b1VwcGVyQ2FzZSgpICsgXCJcIlxuICApO1xuICBsZXQgdDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIHQgPSB0ZXh0KHRfdmFsdWUpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGVhbS1tZW1iZXItaW1hZ2UtLWluaXRpYWwgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCB0KTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qdGVhbURhdGEqL1xuICAgICAgMSAmJiB0X3ZhbHVlICE9PSAodF92YWx1ZSA9IC8qbSovXG4gICAgICBjdHgyWzE1XS5tZW1iZXIuYXV0aC5lbWFpbFswXS50b1VwcGVyQ2FzZSgpICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQsIHRfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJGcoY3R4KSB7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jaztcbiAgbGV0IGlmX2Jsb2NrX2FuY2hvcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja18yJGMsIGNyZWF0ZV9lbHNlX2Jsb2NrJDldO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGVfMihjdHgyLCBkaXJ0eSkge1xuICAgIGlmICghLyptKi9cbiAgICBjdHgyWzE1XS5zaG93UmVtb3ZlQnV0dG9uKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGVfMihjdHgpO1xuICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBpZl9ibG9ja19hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBpZl9ibG9ja19hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlXzIoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ID09PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgaWZfYmxvY2subShpZl9ibG9ja19hbmNob3IucGFyZW50Tm9kZSwgaWZfYmxvY2tfYW5jaG9yKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrJDkoY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBzcGFuO1xuICBsZXQgdDE7XG4gIGxldCBjbG9zZWljb247XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGNsb3NlaWNvbiA9IG5ldyBDbG9zZUljb24oe30pO1xuICBmdW5jdGlvbiBjbGlja19oYW5kbGVyXzMoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qY2xpY2tfaGFuZGxlcl8zKi9cbiAgICAgIGN0eFsxM10oXG4gICAgICAgIC8qbSovXG4gICAgICAgIGN0eFsxNV1cbiAgICAgIClcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuLnRleHRDb250ZW50ID0gXCJBcmUgeW91IHN1cmU/XCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNsb3NlaWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKHNwYW4sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGVhbS1tZW1iZXItcmVtb3ZlLXRleHQgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190ZWFtLW1lbWJlci1yZW1vdmUtYnRuIHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3Bhbik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoY2xvc2VpY29uLCBidXR0b24sIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihidXR0b24sIFwiY2xpY2tcIiwgY2xpY2tfaGFuZGxlcl8zKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY2xvc2VpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNsb3NlaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY2xvc2VpY29uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiRjKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgY2xvc2VpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBjbG9zZWljb24gPSBuZXcgQ2xvc2VJY29uKHt9KTtcbiAgZnVuY3Rpb24gY2xpY2tfaGFuZGxlcl8yKCkge1xuICAgIHJldHVybiAoXG4gICAgICAvKmNsaWNrX2hhbmRsZXJfMiovXG4gICAgICBjdHhbMTJdKFxuICAgICAgICAvKm0qL1xuICAgICAgICBjdHhbMTVdXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjbG9zZWljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGVhbS1tZW1iZXItcmVtb3ZlLWJ0biBzdmVsdGUtMWhhcWI3YlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjbG9zZWljb24sIGJ1dHRvbiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKGJ1dHRvbiwgXCJjbGlja1wiLCBjbGlja19oYW5kbGVyXzIpO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAobmV3X2N0eCwgZGlydHkpIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjbG9zZWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY2xvc2VpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGJ1dHRvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjbG9zZWljb24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrJDgoa2V5XzEsIGN0eCkge1xuICBsZXQgZGl2NDtcbiAgbGV0IGRpdjE7XG4gIGxldCB0MDtcbiAgbGV0IGRpdjA7XG4gIGxldCB0MV92YWx1ZSA9IChcbiAgICAvKm0qL1xuICAgIGN0eFsxNV0ubWVtYmVyLmF1dGguZW1haWwgKyBcIlwiXG4gICk7XG4gIGxldCB0MTtcbiAgbGV0IHQyO1xuICBsZXQgZGl2MztcbiAgbGV0IGRpdjI7XG4gIGxldCB0M192YWx1ZSA9IChcbiAgICAvKm0qL1xuICAgIGN0eFsxNV0ucm9sZSArIFwiXCJcbiAgKTtcbiAgbGV0IHQzO1xuICBsZXQgdDQ7XG4gIGxldCB0NTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzEoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKm0qL1xuICAgICAgY3R4MlsxNV0ubWVtYmVyLnByb2ZpbGVJbWFnZSA9PT0gbnVsbFxuICAgIClcbiAgICAgIHJldHVybiBjcmVhdGVfaWZfYmxvY2tfMyQ4O1xuICAgIHJldHVybiBjcmVhdGVfZWxzZV9ibG9ja18xJDM7XG4gIH1cbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMCA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgpO1xuICBsZXQgaWZfYmxvY2sxID0gKFxuICAgIC8qbSovXG4gICAgY3R4WzE1XS5yb2xlICE9PSBcIk9XTkVSXCIgJiYgY3JlYXRlX2lmX2Jsb2NrXzEkZyhjdHgpXG4gICk7XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXlfMSxcbiAgICBmaXJzdDogbnVsbCxcbiAgICBjKCkge1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIHQxID0gdGV4dCh0MV92YWx1ZSk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBkaXYzID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjIgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdDMgPSB0ZXh0KHQzX3ZhbHVlKTtcbiAgICAgIHQ0ID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0NSA9IHNwYWNlKCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGVhbS1tZW1iZXItZW1haWwgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGVhbS1tZW1iZXItaW5mbyBzdmVsdGUtMWhhcWI3YlwiKTtcbiAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190ZWFtLW1lbWJlci1yb2xlIHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3RlYW0tbWVtYmVyLWFjdGlvbnMgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgICBhdHRyKGRpdjQsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGVhbS1tZW1iZXIgc3ZlbHRlLTFoYXFiN2JcIik7XG4gICAgICB0aGlzLmZpcnN0ID0gZGl2NDtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjQsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2MSk7XG4gICAgICBpZl9ibG9jazAubShkaXYxLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQyKTtcbiAgICAgIGFwcGVuZChkaXY0LCBkaXYzKTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MywgdDQpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0oZGl2MywgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2NCwgdDUpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSA9PT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4KSkgJiYgaWZfYmxvY2swKSB7XG4gICAgICAgIGlmX2Jsb2NrMC5wKGN0eCwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWZfYmxvY2swLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrMCA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgpO1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazAubShkaXYxLCB0MCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKnRlYW1EYXRhKi9cbiAgICAgIDEpICYmIHQxX3ZhbHVlICE9PSAodDFfdmFsdWUgPSAvKm0qL1xuICAgICAgY3R4WzE1XS5tZW1iZXIuYXV0aC5lbWFpbCArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MSwgdDFfdmFsdWUpO1xuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qdGVhbURhdGEqL1xuICAgICAgMSkgJiYgdDNfdmFsdWUgIT09ICh0M192YWx1ZSA9IC8qbSovXG4gICAgICBjdHhbMTVdLnJvbGUgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDMsIHQzX3ZhbHVlKTtcbiAgICAgIGlmIChcbiAgICAgICAgLyptKi9cbiAgICAgICAgY3R4WzE1XS5yb2xlICE9PSBcIk9XTkVSXCJcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgICAgaWZfYmxvY2sxLnAoY3R4LCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyp0ZWFtRGF0YSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBjcmVhdGVfaWZfYmxvY2tfMSRnKGN0eCk7XG4gICAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSwgMSk7XG4gICAgICAgICAgaWZfYmxvY2sxLm0oZGl2MywgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXY0KTtcbiAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZCgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9wZW5kaW5nX2Jsb2NrKGN0eCkge1xuICBsZXQgcDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgcCA9IGVsZW1lbnQoXCJwXCIpO1xuICAgICAgcC50ZXh0Q29udGVudCA9IFwiTG9hZGluZy4uLlwiO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgcCwgYW5jaG9yKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2gocCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEsoY3R4KSB7XG4gIHZhciBfYTtcbiAgbGV0IGRpdjtcbiAgbGV0IGgyO1xuICBsZXQgdDE7XG4gIGxldCB0MjtcbiAgbGV0IGF3YWl0X2Jsb2NrX2FuY2hvcjtcbiAgbGV0IHByb21pc2UyO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGlmX2Jsb2NrID0gKFxuICAgIC8qdGVhbURhdGEqL1xuICAgICgoX2EgPSBjdHhbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5tZW1iZXJzLmxlbmd0aCkgPiAwICYmIGNyZWF0ZV9pZl9ibG9ja181JDUoY3R4KVxuICApO1xuICBsZXQgaW5mbyA9IHtcbiAgICBjdHgsXG4gICAgY3VycmVudDogbnVsbCxcbiAgICB0b2tlbjogbnVsbCxcbiAgICBoYXNDYXRjaDogZmFsc2UsXG4gICAgcGVuZGluZzogY3JlYXRlX3BlbmRpbmdfYmxvY2ssXG4gICAgdGhlbjogY3JlYXRlX3RoZW5fYmxvY2ssXG4gICAgY2F0Y2g6IGNyZWF0ZV9jYXRjaF9ibG9jayxcbiAgICBibG9ja3M6IFssICwgLF1cbiAgfTtcbiAgaGFuZGxlX3Byb21pc2UocHJvbWlzZTIgPSAvKnRlYW1Qcm9taXNlKi9cbiAgY3R4WzFdLCBpbmZvKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGgyID0gZWxlbWVudChcImgyXCIpO1xuICAgICAgaDIudGV4dENvbnRlbnQgPSBcIlRlYW1cIjtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgYXdhaXRfYmxvY2tfYW5jaG9yID0gZW1wdHkoKTtcbiAgICAgIGluZm8uYmxvY2suYygpO1xuICAgICAgYXR0cihoMiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX190aXRsZSBtcy1tb2RhbF9fdGl0bGUtLXRlYW1zIHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGl0bGUtY29udGFpbmVyIG1zLW1vZGFsX190aXRsZS1jb250YWluZXItLXRlYW1zIHN2ZWx0ZS0xaGFxYjdiXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdiwgaDIpO1xuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MiwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGF3YWl0X2Jsb2NrX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGluZm8uYmxvY2subSh0YXJnZXQsIGluZm8uYW5jaG9yID0gYW5jaG9yKTtcbiAgICAgIGluZm8ubW91bnQgPSAoKSA9PiBhd2FpdF9ibG9ja19hbmNob3IucGFyZW50Tm9kZTtcbiAgICAgIGluZm8uYW5jaG9yID0gYXdhaXRfYmxvY2tfYW5jaG9yO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIFtkaXJ0eV0pIHtcbiAgICAgIHZhciBfYTI7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKFxuICAgICAgICAvKnRlYW1EYXRhKi9cbiAgICAgICAgKChfYTIgPSBjdHhbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfYTIubWVtYmVycy5sZW5ndGgpID4gMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4LCBkaXJ0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBjcmVhdGVfaWZfYmxvY2tfNSQ1KGN0eCk7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oZGl2LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jaykge1xuICAgICAgICBpZl9ibG9jay5kKDEpO1xuICAgICAgICBpZl9ibG9jayA9IG51bGw7XG4gICAgICB9XG4gICAgICBpbmZvLmN0eCA9IGN0eDtcbiAgICAgIGlmIChkaXJ0eSAmIC8qdGVhbVByb21pc2UqL1xuICAgICAgMiAmJiBwcm9taXNlMiAhPT0gKHByb21pc2UyID0gLyp0ZWFtUHJvbWlzZSovXG4gICAgICBjdHhbMV0pICYmIGhhbmRsZV9wcm9taXNlKHByb21pc2UyLCBpbmZvKSlcbiAgICAgICAgO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpbmZvLmJsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBpbmZvLmJsb2Nrc1tpXTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoYmxvY2spO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5kKCk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDIpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGF3YWl0X2Jsb2NrX2FuY2hvcik7XG4gICAgICBpbmZvLmJsb2NrLmQoZGV0YWNoaW5nKTtcbiAgICAgIGluZm8udG9rZW4gPSBudWxsO1xuICAgICAgaW5mbyA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkcCgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICB2YXIgX2EsIF9iLCBfYztcbiAgbGV0IGludml0ZUxpbms7XG4gIGxldCB7IHByb2ZpbGVMb2FkZXIgfSA9ICQkcHJvcHM7XG4gIGxldCB7IG1lbWJlciB9ID0gJCRwcm9wcztcbiAgbGV0IHRlYW1Qcm9taXNlO1xuICBsZXQgdGVhbURhdGE7XG4gIGxldCBjb3B5SW52aXRlVGV4dCA9IFwiQ29weVwiO1xuICBmdW5jdGlvbiBzaG93UmVtb3ZlQnV0dG9uKG0pIHtcbiAgICBtLnNob3dSZW1vdmVCdXR0b24gPSB0cnVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCB0ZWFtRGF0YS5tZW1iZXJzID0gWy4uLnRlYW1EYXRhLm1lbWJlcnMuZmlsdGVyKChtZW1iZXIyKSA9PiBtZW1iZXIyLm1lbWJlci5pZCAhPT0gbS5tZW1iZXIuaWQpLCBtXSwgdGVhbURhdGEpO1xuICAgIHNldFRpbWVvdXQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIG0uc2hvd1JlbW92ZUJ1dHRvbiA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIDNlM1xuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gY29weUludml0ZUxpbmsoKSB7XG4gICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoaW52aXRlTGluayk7XG4gICAgJCRpbnZhbGlkYXRlKDIsIGNvcHlJbnZpdGVUZXh0ID0gXCJDb3BpZWQhXCIpO1xuICAgIHNldFRpbWVvdXQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBjb3B5SW52aXRlVGV4dCA9IFwiQ29weVwiKTtcbiAgICAgIH0sXG4gICAgICAyZTNcbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIGdldFRlYW0odGVhbUlkKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5nZXRUZWFtKHsgdGVhbUlkIH0pO1xuICAgICAgJCRpbnZhbGlkYXRlKDAsIHRlYW1EYXRhID0gZGF0YSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVNZW1iZXJGcm9tVGVhbShtZW1iZXJJZCkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9IHRydWUpO1xuICAgICAgICB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnJlbW92ZU1lbWJlckZyb21UZWFtKHsgdGVhbUlkOiB0ZWFtRGF0YS5pZCwgbWVtYmVySWQgfSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSgwLCB0ZWFtRGF0YS5tZW1iZXJzID0gdGVhbURhdGEubWVtYmVycy5maWx0ZXIoKG0pID0+IG0ubWVtYmVyLmlkICE9PSBtZW1iZXJJZCksIHRlYW1EYXRhKTtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoXCJNZW1iZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRlYW0uXCIsIGZhbHNlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZW5lcmF0ZUludml0ZVRva2VuKCkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9IHRydWUpO1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uZ2VuZXJhdGVJbnZpdGVUb2tlbih7IHRlYW1JZDogdGVhbURhdGEuaWQgfSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSgwLCB0ZWFtRGF0YS5pbnZpdGVUb2tlbiA9IGRhdGEuaW52aXRlVG9rZW4sIHRlYW1EYXRhKTtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoXCJJbnZpdGUgTGluayBSZWdlbmVyYXRlZFwiLCBmYWxzZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDgsIHByb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKCgoX2IgPSAoX2EgPSBtZW1iZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbWJlci50ZWFtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm93bmVkVGVhbXMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5sZW5ndGgpID4gMCkge1xuICAgIGNvbnN0IHRlYW1JZCA9IChfYyA9IG1lbWJlci50ZWFtcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLm93bmVkVGVhbXNbMF0udGVhbUlkO1xuICAgIHRlYW1Qcm9taXNlID0gZ2V0VGVhbSh0ZWFtSWQpO1xuICB9IGVsc2Uge1xuICAgIHRlYW1Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiBjb3B5SW52aXRlTGluaygpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAoKSA9PiBnZW5lcmF0ZUludml0ZVRva2VuKCk7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMiA9IChtKSA9PiBzaG93UmVtb3ZlQnV0dG9uKG0pO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzMgPSAobSkgPT4gcmVtb3ZlTWVtYmVyRnJvbVRlYW0obS5tZW1iZXIuaWQpO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJwcm9maWxlTG9hZGVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9ICQkcHJvcHMyLnByb2ZpbGVMb2FkZXIpO1xuICAgIGlmIChcIm1lbWJlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDksIG1lbWJlciA9ICQkcHJvcHMyLm1lbWJlcik7XG4gIH07XG4gICQkc2VsZi4kJC51cGRhdGUgPSAoKSA9PiB7XG4gICAgdmFyIF9hMjtcbiAgICBpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyp0ZWFtRGF0YSovXG4gICAgMSkge1xuICAgICAgJCRpbnZhbGlkYXRlKDMsIGludml0ZUxpbmsgPSBgJHt3aW5kb3cubG9jYXRpb24ub3JpZ2lufSR7KF9hMiA9IHRlYW1EYXRhID09IG51bGwgPyB2b2lkIDAgOiB0ZWFtRGF0YS5wbGFuKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnRlYW1BY2NvdW50SW52aXRlU2lnbnVwTGlua30/aW52aXRlVG9rZW49JHt0ZWFtRGF0YSA9PSBudWxsID8gdm9pZCAwIDogdGVhbURhdGEuaW52aXRlVG9rZW59YCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gW1xuICAgIHRlYW1EYXRhLFxuICAgIHRlYW1Qcm9taXNlLFxuICAgIGNvcHlJbnZpdGVUZXh0LFxuICAgIGludml0ZUxpbmssXG4gICAgc2hvd1JlbW92ZUJ1dHRvbixcbiAgICBjb3B5SW52aXRlTGluayxcbiAgICByZW1vdmVNZW1iZXJGcm9tVGVhbSxcbiAgICBnZW5lcmF0ZUludml0ZVRva2VuLFxuICAgIHByb2ZpbGVMb2FkZXIsXG4gICAgbWVtYmVyLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMixcbiAgICBjbGlja19oYW5kbGVyXzNcbiAgXTtcbn1cbnZhciBQcm9maWxlVGVhbUNvbnRlbnQgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkcCwgY3JlYXRlX2ZyYWdtZW50JEssIHNhZmVfbm90X2VxdWFsLCB7IHByb2ZpbGVMb2FkZXI6IDgsIG1lbWJlcjogOSB9LCBhZGRfY3NzJGopO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzUkNChjdHgpIHtcbiAgbGV0IHByb2ZpbGVsb2FkZXI7XG4gIGxldCBjdXJyZW50O1xuICBwcm9maWxlbG9hZGVyID0gbmV3IFByb2ZpbGVMb2FkZXIoe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHByb2ZpbGVsb2FkZXIuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHByb2ZpbGVsb2FkZXIsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4ocHJvZmlsZWxvYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwcm9maWxlbG9hZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocHJvZmlsZWxvYWRlciwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNCQ1KGN0eCkge1xuICBsZXQgcHJvZmlsZXRlYW1jb250ZW50O1xuICBsZXQgdXBkYXRpbmdfbWVtYmVyO1xuICBsZXQgdXBkYXRpbmdfcHJvZmlsZUxvYWRlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHByb2ZpbGV0ZWFtY29udGVudF9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxOV0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHByb2ZpbGV0ZWFtY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMjBdKHZhbHVlKTtcbiAgfVxuICBsZXQgcHJvZmlsZXRlYW1jb250ZW50X3Byb3BzID0ge307XG4gIGlmIChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcHJvZmlsZXRlYW1jb250ZW50X3Byb3BzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgaWYgKFxuICAgIC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzRdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcHJvZmlsZXRlYW1jb250ZW50X3Byb3BzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs0XTtcbiAgfVxuICBwcm9maWxldGVhbWNvbnRlbnQgPSBuZXcgUHJvZmlsZVRlYW1Db250ZW50KHsgcHJvcHM6IHByb2ZpbGV0ZWFtY29udGVudF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHByb2ZpbGV0ZWFtY29udGVudCwgXCJtZW1iZXJcIiwgcHJvZmlsZXRlYW1jb250ZW50X21lbWJlcl9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwcm9maWxldGVhbWNvbnRlbnQsIFwicHJvZmlsZUxvYWRlclwiLCBwcm9maWxldGVhbWNvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZXRlYW1jb250ZW50LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwcm9maWxldGVhbWNvbnRlbnQsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgcHJvZmlsZXRlYW1jb250ZW50X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmICghdXBkYXRpbmdfbWVtYmVyICYmIGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgMikge1xuICAgICAgICB1cGRhdGluZ19tZW1iZXIgPSB0cnVlO1xuICAgICAgICBwcm9maWxldGVhbWNvbnRlbnRfY2hhbmdlcy5tZW1iZXIgPSAvKm1lbWJlciovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19tZW1iZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgJiYgZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgMTYpIHtcbiAgICAgICAgdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IHRydWU7XG4gICAgICAgIHByb2ZpbGV0ZWFtY29udGVudF9jaGFuZ2VzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgICBjdHgyWzRdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHByb2ZpbGV0ZWFtY29udGVudC4kc2V0KHByb2ZpbGV0ZWFtY29udGVudF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHByb2ZpbGV0ZWFtY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwcm9maWxldGVhbWNvbnRlbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwcm9maWxldGVhbWNvbnRlbnQsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkNyhjdHgpIHtcbiAgbGV0IHBsYW5zaW5mb2NvbnRlbnQ7XG4gIGxldCB1cGRhdGluZ19tZW1iZXI7XG4gIGxldCB1cGRhdGluZ19wcm9maWxlTG9hZGVyO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gcGxhbnNpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxN10odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHBsYW5zaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE4XSh2YWx1ZSk7XG4gIH1cbiAgbGV0IHBsYW5zaW5mb2NvbnRlbnRfcHJvcHMgPSB7fTtcbiAgaWYgKFxuICAgIC8qbWVtYmVyKi9cbiAgICBjdHhbMV0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwbGFuc2luZm9jb250ZW50X3Byb3BzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgaWYgKFxuICAgIC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzRdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGxhbnNpbmZvY29udGVudF9wcm9wcy5wcm9maWxlTG9hZGVyID0gLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNF07XG4gIH1cbiAgcGxhbnNpbmZvY29udGVudCA9IG5ldyBQbGFuc0luZm9Db250ZW50KHsgcHJvcHM6IHBsYW5zaW5mb2NvbnRlbnRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwbGFuc2luZm9jb250ZW50LCBcIm1lbWJlclwiLCBwbGFuc2luZm9jb250ZW50X21lbWJlcl9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwbGFuc2luZm9jb250ZW50LCBcInByb2ZpbGVMb2FkZXJcIiwgcGxhbnNpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwbGFuc2luZm9jb250ZW50LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwbGFuc2luZm9jb250ZW50LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHBsYW5zaW5mb2NvbnRlbnRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19tZW1iZXIgJiYgZGlydHkgJiAvKm1lbWJlciovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX21lbWJlciA9IHRydWU7XG4gICAgICAgIHBsYW5zaW5mb2NvbnRlbnRfY2hhbmdlcy5tZW1iZXIgPSAvKm1lbWJlciovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19tZW1iZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgJiYgZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgMTYpIHtcbiAgICAgICAgdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IHRydWU7XG4gICAgICAgIHBsYW5zaW5mb2NvbnRlbnRfY2hhbmdlcy5wcm9maWxlTG9hZGVyID0gLypwcm9maWxlTG9hZGVyKi9cbiAgICAgICAgY3R4Mls0XTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwbGFuc2luZm9jb250ZW50LiRzZXQocGxhbnNpbmZvY29udGVudF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHBsYW5zaW5mb2NvbnRlbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGxhbnNpbmZvY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBsYW5zaW5mb2NvbnRlbnQsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkYihjdHgpIHtcbiAgbGV0IHBhc3N3b3JkaW5mb2NvbnRlbnQ7XG4gIGxldCB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZTtcbiAgbGV0IHVwZGF0aW5nX3Byb2ZpbGVMb2FkZXI7XG4gIGxldCB1cGRhdGluZ19tZW1iZXI7XG4gIGxldCBjdXJyZW50O1xuICBmdW5jdGlvbiBwYXNzd29yZGluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTRdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxNV0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTZdKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRpbmZvY29udGVudF9wcm9wcyA9IHt9O1xuICBpZiAoXG4gICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgY3R4WzBdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbmZvY29udGVudF9wcm9wcy5kaXNwbGF5UHJvZmlsZSA9IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXTtcbiAgfVxuICBpZiAoXG4gICAgLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwYXNzd29yZGluZm9jb250ZW50X3Byb3BzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs0XTtcbiAgfVxuICBpZiAoXG4gICAgLyptZW1iZXIqL1xuICAgIGN0eFsxXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5mb2NvbnRlbnRfcHJvcHMubWVtYmVyID0gLyptZW1iZXIqL1xuICAgIGN0eFsxXTtcbiAgfVxuICBwYXNzd29yZGluZm9jb250ZW50ID0gbmV3IFBhc3N3b3JkSW5mb0NvbnRlbnQoeyBwcm9wczogcGFzc3dvcmRpbmZvY29udGVudF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5mb2NvbnRlbnQsIFwiZGlzcGxheVByb2ZpbGVcIiwgcGFzc3dvcmRpbmZvY29udGVudF9kaXNwbGF5UHJvZmlsZV9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGluZm9jb250ZW50LCBcInByb2ZpbGVMb2FkZXJcIiwgcGFzc3dvcmRpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5mb2NvbnRlbnQsIFwibWVtYmVyXCIsIHBhc3N3b3JkaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGluZm9jb250ZW50LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZGluZm9jb250ZW50LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5mb2NvbnRlbnRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSAmJiBkaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgMSkge1xuICAgICAgICB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5mb2NvbnRlbnRfY2hhbmdlcy5kaXNwbGF5UHJvZmlsZSA9IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICBjdHgyWzBdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgJiYgZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgMTYpIHtcbiAgICAgICAgdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5mb2NvbnRlbnRfY2hhbmdlcy5wcm9maWxlTG9hZGVyID0gLypwcm9maWxlTG9hZGVyKi9cbiAgICAgICAgY3R4Mls0XTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX21lbWJlciAmJiBkaXJ0eSAmIC8qbWVtYmVyKi9cbiAgICAgIDIpIHtcbiAgICAgICAgdXBkYXRpbmdfbWVtYmVyID0gdHJ1ZTtcbiAgICAgICAgcGFzc3dvcmRpbmZvY29udGVudF9jaGFuZ2VzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX21lbWJlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHBhc3N3b3JkaW5mb2NvbnRlbnQuJHNldChwYXNzd29yZGluZm9jb250ZW50X2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRpbmZvY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwYXNzd29yZGluZm9jb250ZW50LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGFzc3dvcmRpbmZvY29udGVudCwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRmKGN0eCkge1xuICBsZXQgc2VjdXJpdHlpbmZvY29udGVudDtcbiAgbGV0IHVwZGF0aW5nX2Rpc3BsYXlQcm9maWxlO1xuICBsZXQgdXBkYXRpbmdfcHJvZmlsZUxvYWRlcjtcbiAgbGV0IHVwZGF0aW5nX21lbWJlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHNlY3VyaXR5aW5mb2NvbnRlbnRfZGlzcGxheVByb2ZpbGVfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxMV0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHNlY3VyaXR5aW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzEyXSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gc2VjdXJpdHlpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxM10odmFsdWUpO1xuICB9XG4gIGxldCBzZWN1cml0eWluZm9jb250ZW50X3Byb3BzID0ge307XG4gIGlmIChcbiAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICBjdHhbMF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBzZWN1cml0eWluZm9jb250ZW50X3Byb3BzLmRpc3BsYXlQcm9maWxlID0gLypkaXNwbGF5UHJvZmlsZSovXG4gICAgY3R4WzBdO1xuICB9XG4gIGlmIChcbiAgICAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs0XSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHNlY3VyaXR5aW5mb2NvbnRlbnRfcHJvcHMucHJvZmlsZUxvYWRlciA9IC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzRdO1xuICB9XG4gIGlmIChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgc2VjdXJpdHlpbmZvY29udGVudF9wcm9wcy5tZW1iZXIgPSAvKm1lbWJlciovXG4gICAgY3R4WzFdO1xuICB9XG4gIHNlY3VyaXR5aW5mb2NvbnRlbnQgPSBuZXcgU2VjdXJpdHlJbmZvQ29udGVudCh7IHByb3BzOiBzZWN1cml0eWluZm9jb250ZW50X3Byb3BzIH0pO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQoc2VjdXJpdHlpbmZvY29udGVudCwgXCJkaXNwbGF5UHJvZmlsZVwiLCBzZWN1cml0eWluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHNlY3VyaXR5aW5mb2NvbnRlbnQsIFwicHJvZmlsZUxvYWRlclwiLCBzZWN1cml0eWluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQoc2VjdXJpdHlpbmZvY29udGVudCwgXCJtZW1iZXJcIiwgc2VjdXJpdHlpbmZvY29udGVudF9tZW1iZXJfYmluZGluZykpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHNlY3VyaXR5aW5mb2NvbnRlbnQuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHNlY3VyaXR5aW5mb2NvbnRlbnQsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3Qgc2VjdXJpdHlpbmZvY29udGVudF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoIXVwZGF0aW5nX2Rpc3BsYXlQcm9maWxlICYmIGRpcnR5ICYgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAxKSB7XG4gICAgICAgIHVwZGF0aW5nX2Rpc3BsYXlQcm9maWxlID0gdHJ1ZTtcbiAgICAgICAgc2VjdXJpdHlpbmZvY29udGVudF9jaGFuZ2VzLmRpc3BsYXlQcm9maWxlID0gLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eDJbMF07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcHJvZmlsZUxvYWRlciAmJiBkaXJ0eSAmIC8qcHJvZmlsZUxvYWRlciovXG4gICAgICAxNikge1xuICAgICAgICB1cGRhdGluZ19wcm9maWxlTG9hZGVyID0gdHJ1ZTtcbiAgICAgICAgc2VjdXJpdHlpbmZvY29udGVudF9jaGFuZ2VzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgICBjdHgyWzRdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfbWVtYmVyICYmIGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgMikge1xuICAgICAgICB1cGRhdGluZ19tZW1iZXIgPSB0cnVlO1xuICAgICAgICBzZWN1cml0eWluZm9jb250ZW50X2NoYW5nZXMubWVtYmVyID0gLyptZW1iZXIqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfbWVtYmVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgc2VjdXJpdHlpbmZvY29udGVudC4kc2V0KHNlY3VyaXR5aW5mb2NvbnRlbnRfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihzZWN1cml0eWluZm9jb250ZW50LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNlY3VyaXR5aW5mb2NvbnRlbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN1cml0eWluZm9jb250ZW50LCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRsKGN0eCkge1xuICBsZXQgcHJvZmlsZWluZm9jb250ZW50O1xuICBsZXQgdXBkYXRpbmdfbWVtYmVyO1xuICBsZXQgdXBkYXRpbmdfcHJvZmlsZUxvYWRlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHByb2ZpbGVpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFs5XSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcHJvZmlsZWluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxMF0odmFsdWUpO1xuICB9XG4gIGxldCBwcm9maWxlaW5mb2NvbnRlbnRfcHJvcHMgPSB7XG4gICAgY3VzdG9tRmllbGRzOiAoXG4gICAgICAvKiRhcHAqL1xuICAgICAgY3R4WzVdLmN1c3RvbUZpZWxkc1xuICAgIClcbiAgfTtcbiAgaWYgKFxuICAgIC8qbWVtYmVyKi9cbiAgICBjdHhbMV0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwcm9maWxlaW5mb2NvbnRlbnRfcHJvcHMubWVtYmVyID0gLyptZW1iZXIqL1xuICAgIGN0eFsxXTtcbiAgfVxuICBpZiAoXG4gICAgLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwcm9maWxlaW5mb2NvbnRlbnRfcHJvcHMucHJvZmlsZUxvYWRlciA9IC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzRdO1xuICB9XG4gIHByb2ZpbGVpbmZvY29udGVudCA9IG5ldyBQcm9maWxlSW5mb0NvbnRlbnQoeyBwcm9wczogcHJvZmlsZWluZm9jb250ZW50X3Byb3BzIH0pO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocHJvZmlsZWluZm9jb250ZW50LCBcIm1lbWJlclwiLCBwcm9maWxlaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHByb2ZpbGVpbmZvY29udGVudCwgXCJwcm9maWxlTG9hZGVyXCIsIHByb2ZpbGVpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwcm9maWxlaW5mb2NvbnRlbnQuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHByb2ZpbGVpbmZvY29udGVudCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBwcm9maWxlaW5mb2NvbnRlbnRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDMyKVxuICAgICAgICBwcm9maWxlaW5mb2NvbnRlbnRfY2hhbmdlcy5jdXN0b21GaWVsZHMgPSAvKiRhcHAqL1xuICAgICAgICBjdHgyWzVdLmN1c3RvbUZpZWxkcztcbiAgICAgIGlmICghdXBkYXRpbmdfbWVtYmVyICYmIGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgMikge1xuICAgICAgICB1cGRhdGluZ19tZW1iZXIgPSB0cnVlO1xuICAgICAgICBwcm9maWxlaW5mb2NvbnRlbnRfY2hhbmdlcy5tZW1iZXIgPSAvKm1lbWJlciovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19tZW1iZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgJiYgZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgMTYpIHtcbiAgICAgICAgdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IHRydWU7XG4gICAgICAgIHByb2ZpbGVpbmZvY29udGVudF9jaGFuZ2VzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgICBjdHgyWzRdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHByb2ZpbGVpbmZvY29udGVudC4kc2V0KHByb2ZpbGVpbmZvY29udGVudF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHByb2ZpbGVpbmZvY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwcm9maWxlaW5mb2NvbnRlbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwcm9maWxlaW5mb2NvbnRlbnQsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEooY3R4KSB7XG4gIGxldCBkaXY1O1xuICBsZXQgZGl2MTtcbiAgbGV0IGRpdjA7XG4gIGxldCB0MF92YWx1ZSA9IChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdLmF1dGguZW1haWwgKyBcIlwiXG4gICk7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgY2xvc2VidXR0b247XG4gIGxldCB0MjtcbiAgbGV0IGRpdjQ7XG4gIGxldCBkaXYyO1xuICBsZXQgcHJvZmlsZW1vZGFsbmF2O1xuICBsZXQgdXBkYXRpbmdfbWVtYmVyO1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheVByb2ZpbGU7XG4gIGxldCB1cGRhdGluZ19wcm9maWxlTG9hZGVyO1xuICBsZXQgdDM7XG4gIGxldCBkaXYzO1xuICBsZXQgdDQ7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jazE7XG4gIGxldCB0NTtcbiAgbGV0IG1vZGFsZm9vdGVyO1xuICBsZXQgY3VycmVudDtcbiAgY2xvc2VidXR0b24gPSBuZXcgQ2xvc2VCdXR0b24oe1xuICAgIHByb3BzOiB7IGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbM11cbiAgICApIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIHByb2ZpbGVtb2RhbG5hdl9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFs2XSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcHJvZmlsZW1vZGFsbmF2X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbN10odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHByb2ZpbGVtb2RhbG5hdl9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbOF0odmFsdWUpO1xuICB9XG4gIGxldCBwcm9maWxlbW9kYWxuYXZfcHJvcHMgPSB7XG4gICAgb25TdWNjZXNzTG9nb3V0OiAoXG4gICAgICAvKm9uU3VjY2Vzc0xvZ291dCovXG4gICAgICBjdHhbMl1cbiAgICApLFxuICAgIGhpZGVQcm9maWxlU2VjdGlvblxuICB9O1xuICBpZiAoXG4gICAgLyptZW1iZXIqL1xuICAgIGN0eFsxXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHByb2ZpbGVtb2RhbG5hdl9wcm9wcy5tZW1iZXIgPSAvKm1lbWJlciovXG4gICAgY3R4WzFdO1xuICB9XG4gIGlmIChcbiAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICBjdHhbMF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwcm9maWxlbW9kYWxuYXZfcHJvcHMuZGlzcGxheVByb2ZpbGUgPSAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICBjdHhbMF07XG4gIH1cbiAgaWYgKFxuICAgIC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzRdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcHJvZmlsZW1vZGFsbmF2X3Byb3BzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs0XTtcbiAgfVxuICBwcm9maWxlbW9kYWxuYXYgPSBuZXcgUHJvZmlsZU1vZGFsTmF2KHsgcHJvcHM6IHByb2ZpbGVtb2RhbG5hdl9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHByb2ZpbGVtb2RhbG5hdiwgXCJtZW1iZXJcIiwgcHJvZmlsZW1vZGFsbmF2X21lbWJlcl9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwcm9maWxlbW9kYWxuYXYsIFwiZGlzcGxheVByb2ZpbGVcIiwgcHJvZmlsZW1vZGFsbmF2X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHByb2ZpbGVtb2RhbG5hdiwgXCJwcm9maWxlTG9hZGVyXCIsIHByb2ZpbGVtb2RhbG5hdl9wcm9maWxlTG9hZGVyX2JpbmRpbmcpKTtcbiAgbGV0IGlmX2Jsb2NrMCA9IChcbiAgICAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs0XSAmJiBjcmVhdGVfaWZfYmxvY2tfNSQ0KClcbiAgKTtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbXG4gICAgY3JlYXRlX2lmX2Jsb2NrJGwsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzEkZixcbiAgICBjcmVhdGVfaWZfYmxvY2tfMiRiLFxuICAgIGNyZWF0ZV9pZl9ibG9ja18zJDcsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzQkNVxuICBdO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIGN0eDJbMF0gPT09IFwicHJvZmlsZVwiXG4gICAgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKFxuICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICBjdHgyWzBdID09PSBcInNlY3VyaXR5XCJcbiAgICApXG4gICAgICByZXR1cm4gMTtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIGN0eDJbMF0gPT09IFwiY2hhbmdlUGFzc3dvcmRcIlxuICAgIClcbiAgICAgIHJldHVybiAyO1xuICAgIGlmIChcbiAgICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgY3R4MlswXSA9PT0gXCJwbGFuc1wiXG4gICAgKVxuICAgICAgcmV0dXJuIDM7XG4gICAgaWYgKFxuICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICBjdHgyWzBdID09PSBcInRlYW1cIlxuICAgIClcbiAgICAgIHJldHVybiA0O1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAofihjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpKSkge1xuICAgIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICB9XG4gIG1vZGFsZm9vdGVyID0gbmV3IE1vZGFsRm9vdGVyKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2NSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdDAgPSB0ZXh0KHQwX3ZhbHVlKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY2xvc2VidXR0b24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZW1vZGFsbmF2LiQkLmZyYWdtZW50KTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGRpdjMgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQ0ID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0NSA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KG1vZGFsZm9vdGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19oZWFkZXJcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY29udGVudC1sZWZ0XCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2NvbnRlbnQtcmlnaHRcIik7XG4gICAgICBhdHRyKGRpdjQsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY29udGVudCBtcy1tb2RhbF9fY29udGVudC0tcHJvZmlsZVwiKTtcbiAgICAgIGF0dHIoZGl2NSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsIG1zLW1vZGFsLS1wcm9maWxlXCIpO1xuICAgICAgYXR0cihkaXY1LCBcImlkXCIsIFwiUHJvZmlsZU1vZGFsXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2NSwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXY1LCBkaXYxKTtcbiAgICAgIGFwcGVuZChkaXYxLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNsb3NlYnV0dG9uLCBkaXYxLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXY1LCB0Mik7XG4gICAgICBhcHBlbmQoZGl2NSwgZGl2NCk7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2Mik7XG4gICAgICBtb3VudF9jb21wb25lbnQocHJvZmlsZW1vZGFsbmF2LCBkaXYyLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0Myk7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2Myk7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAubShkaXYzLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0NCk7XG4gICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKGRpdjMsIG51bGwpO1xuICAgICAgfVxuICAgICAgYXBwZW5kKGRpdjUsIHQ1KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtb2RhbGZvb3RlciwgZGl2NSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qbWVtYmVyKi9cbiAgICAgIDIpICYmIHQwX3ZhbHVlICE9PSAodDBfdmFsdWUgPSAvKm1lbWJlciovXG4gICAgICBjdHgyWzFdLmF1dGguZW1haWwgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDAsIHQwX3ZhbHVlKTtcbiAgICAgIGNvbnN0IGNsb3NlYnV0dG9uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qY2xvc2VNb2RhbCovXG4gICAgICA4KVxuICAgICAgICBjbG9zZWJ1dHRvbl9jaGFuZ2VzLmNsb3NlTW9kYWwgPSAvKmNsb3NlTW9kYWwqL1xuICAgICAgICBjdHgyWzNdO1xuICAgICAgY2xvc2VidXR0b24uJHNldChjbG9zZWJ1dHRvbl9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IHByb2ZpbGVtb2RhbG5hdl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm9uU3VjY2Vzc0xvZ291dCovXG4gICAgICA0KVxuICAgICAgICBwcm9maWxlbW9kYWxuYXZfY2hhbmdlcy5vblN1Y2Nlc3NMb2dvdXQgPSAvKm9uU3VjY2Vzc0xvZ291dCovXG4gICAgICAgIGN0eDJbMl07XG4gICAgICBpZiAoIXVwZGF0aW5nX21lbWJlciAmJiBkaXJ0eSAmIC8qbWVtYmVyKi9cbiAgICAgIDIpIHtcbiAgICAgICAgdXBkYXRpbmdfbWVtYmVyID0gdHJ1ZTtcbiAgICAgICAgcHJvZmlsZW1vZGFsbmF2X2NoYW5nZXMubWVtYmVyID0gLyptZW1iZXIqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfbWVtYmVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSAmJiBkaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgMSkge1xuICAgICAgICB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSA9IHRydWU7XG4gICAgICAgIHByb2ZpbGVtb2RhbG5hdl9jaGFuZ2VzLmRpc3BsYXlQcm9maWxlID0gLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eDJbMF07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcHJvZmlsZUxvYWRlciAmJiBkaXJ0eSAmIC8qcHJvZmlsZUxvYWRlciovXG4gICAgICAxNikge1xuICAgICAgICB1cGRhdGluZ19wcm9maWxlTG9hZGVyID0gdHJ1ZTtcbiAgICAgICAgcHJvZmlsZW1vZGFsbmF2X2NoYW5nZXMucHJvZmlsZUxvYWRlciA9IC8qcHJvZmlsZUxvYWRlciovXG4gICAgICAgIGN0eDJbNF07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgcHJvZmlsZW1vZGFsbmF2LiRzZXQocHJvZmlsZW1vZGFsbmF2X2NoYW5nZXMpO1xuICAgICAgaWYgKFxuICAgICAgICAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgICBjdHgyWzRdXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qcHJvZmlsZUxvYWRlciovXG4gICAgICAgICAgMTYpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzUkNCgpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKGRpdjMsIHQ0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMCwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpIHtcbiAgICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4KSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF07XG4gICAgICAgICAgaWYgKCFpZl9ibG9jazEpIHtcbiAgICAgICAgICAgIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5tKGRpdjMsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNsb3NlYnV0dG9uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKHByb2ZpbGVtb2RhbG5hdi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjbG9zZWJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQocHJvZmlsZW1vZGFsbmF2LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KG1vZGFsZm9vdGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjUpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY2xvc2VidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocHJvZmlsZW1vZGFsbmF2KTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgICB9XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtb2RhbGZvb3Rlcik7XG4gICAgfVxuICB9O1xufVxudmFyIGhpZGVQcm9maWxlU2VjdGlvbiA9IGZhbHNlO1xuZnVuY3Rpb24gaW5zdGFuY2UkbygkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgJGFwcDtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEFwcFN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDUsICRhcHAgPSAkJHZhbHVlKSk7XG4gIGxldCB7IG9uU3VjY2Vzc0xvZ291dCB9ID0gJCRwcm9wcztcbiAgbGV0IHsgY2xvc2VNb2RhbCB9ID0gJCRwcm9wcztcbiAgbGV0IHsgZGlzcGxheVByb2ZpbGUgPSBcInByb2ZpbGVcIiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBsZXQgcHJvZmlsZUxvYWRlciA9IGZhbHNlO1xuICBmdW5jdGlvbiBwcm9maWxlbW9kYWxuYXZfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBwcm9maWxlbW9kYWxuYXZfZGlzcGxheVByb2ZpbGVfYmluZGluZyh2YWx1ZSkge1xuICAgIGRpc3BsYXlQcm9maWxlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXlQcm9maWxlKTtcbiAgfVxuICBmdW5jdGlvbiBwcm9maWxlbW9kYWxuYXZfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgcHJvZmlsZUxvYWRlciA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg0LCBwcm9maWxlTG9hZGVyKTtcbiAgfVxuICBmdW5jdGlvbiBwcm9maWxlaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBwcm9maWxlaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgcHJvZmlsZUxvYWRlciA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg0LCBwcm9maWxlTG9hZGVyKTtcbiAgfVxuICBmdW5jdGlvbiBzZWN1cml0eWluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5UHJvZmlsZSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSk7XG4gIH1cbiAgZnVuY3Rpb24gc2VjdXJpdHlpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwcm9maWxlTG9hZGVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDQsIHByb2ZpbGVMb2FkZXIpO1xuICB9XG4gIGZ1bmN0aW9uIHNlY3VyaXR5aW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5UHJvZmlsZSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwcm9maWxlTG9hZGVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDQsIHByb2ZpbGVMb2FkZXIpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBwbGFuc2luZm9jb250ZW50X21lbWJlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgbWVtYmVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDEsIG1lbWJlcik7XG4gIH1cbiAgZnVuY3Rpb24gcGxhbnNpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwcm9maWxlTG9hZGVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDQsIHByb2ZpbGVMb2FkZXIpO1xuICB9XG4gIGZ1bmN0aW9uIHByb2ZpbGV0ZWFtY29udGVudF9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIG1lbWJlciA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgxLCBtZW1iZXIpO1xuICB9XG4gIGZ1bmN0aW9uIHByb2ZpbGV0ZWFtY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwcm9maWxlTG9hZGVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDQsIHByb2ZpbGVMb2FkZXIpO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcIm9uU3VjY2Vzc0xvZ291dFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIG9uU3VjY2Vzc0xvZ291dCA9ICQkcHJvcHMyLm9uU3VjY2Vzc0xvZ291dCk7XG4gICAgaWYgKFwiY2xvc2VNb2RhbFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDMsIGNsb3NlTW9kYWwgPSAkJHByb3BzMi5jbG9zZU1vZGFsKTtcbiAgICBpZiAoXCJkaXNwbGF5UHJvZmlsZVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXlQcm9maWxlID0gJCRwcm9wczIuZGlzcGxheVByb2ZpbGUpO1xuICAgIGlmIChcIm1lbWJlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIG1lbWJlciA9ICQkcHJvcHMyLm1lbWJlcik7XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheVByb2ZpbGUsXG4gICAgbWVtYmVyLFxuICAgIG9uU3VjY2Vzc0xvZ291dCxcbiAgICBjbG9zZU1vZGFsLFxuICAgIHByb2ZpbGVMb2FkZXIsXG4gICAgJGFwcCxcbiAgICBwcm9maWxlbW9kYWxuYXZfbWVtYmVyX2JpbmRpbmcsXG4gICAgcHJvZmlsZW1vZGFsbmF2X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcsXG4gICAgcHJvZmlsZW1vZGFsbmF2X3Byb2ZpbGVMb2FkZXJfYmluZGluZyxcbiAgICBwcm9maWxlaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcsXG4gICAgcHJvZmlsZWluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZyxcbiAgICBzZWN1cml0eWluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcsXG4gICAgc2VjdXJpdHlpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcsXG4gICAgc2VjdXJpdHlpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyxcbiAgICBwYXNzd29yZGluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyxcbiAgICBwbGFuc2luZm9jb250ZW50X21lbWJlcl9iaW5kaW5nLFxuICAgIHBsYW5zaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nLFxuICAgIHByb2ZpbGV0ZWFtY29udGVudF9tZW1iZXJfYmluZGluZyxcbiAgICBwcm9maWxldGVhbWNvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nXG4gIF07XG59XG52YXIgUHJvZmlsZU1vZGFsID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJG8sIGNyZWF0ZV9mcmFnbWVudCRKLCBzYWZlX25vdF9lcXVhbCwge1xuICAgICAgb25TdWNjZXNzTG9nb3V0OiAyLFxuICAgICAgY2xvc2VNb2RhbDogMyxcbiAgICAgIGRpc3BsYXlQcm9maWxlOiAwLFxuICAgICAgbWVtYmVyOiAxXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkSShjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJNNy40MSAxLjQxTDYgMEwwIDZMNiAxMkw3LjQxIDEwLjU5TDIuODMgNkw3LjQxIDEuNDFaXCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoMTgwKVwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIDAgOCAxMlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgRm9yd2FyZEljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JEksIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRlKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgZGl2O1xuICBsZXQgcHJvZmlsZWljb247XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgZm9yd2FyZGljb247XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIHByb2ZpbGVpY29uID0gbmV3IFByb2ZpbGVJY29uKHt9KTtcbiAgZm9yd2FyZGljb24gPSBuZXcgRm9yd2FyZEljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZWljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSB0ZXh0KFwiIFByb2ZpbGVcIik7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGZvcndhcmRpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uXCIpO1xuICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICBidXR0b24sXG4gICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eFswXSA9PT0gXCJwcm9maWxlXCJcbiAgICAgICk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBkaXYpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHByb2ZpbGVpY29uLCBkaXYsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdiwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGZvcndhcmRpY29uLCBidXR0b24sIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlciovXG4gICAgICAgICAgY3R4WzddXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAxKSB7XG4gICAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb24tLWFjdGl2ZVwiLFxuICAgICAgICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICAgIGN0eDJbMF0gPT09IFwicHJvZmlsZVwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwcm9maWxlaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihmb3J3YXJkaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwcm9maWxlaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZm9yd2FyZGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHByb2ZpbGVpY29uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGZvcndhcmRpY29uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skayhjdHgpIHtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IGRpdjtcbiAgbGV0IGxpbmtvdXRpY29uO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IGZvcndhcmRpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBsaW5rb3V0aWNvbiA9IG5ldyBMaW5rT3V0SWNvbih7fSk7XG4gIGZvcndhcmRpY29uID0gbmV3IEZvcndhcmRJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGxpbmtvdXRpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gdGV4dChcIiBCaWxsaW5nIFBvcnRhbFwiKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoZm9yd2FyZGljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb25cIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBkaXYpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGxpbmtvdXRpY29uLCBkaXYsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdiwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGZvcndhcmRpY29uLCBidXR0b24sIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qbGF1bmNoUG9ydGFsKi9cbiAgICAgICAgICBjdHhbNF1cbiAgICAgICAgKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGxpbmtvdXRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGZvcndhcmRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGxpbmtvdXRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChmb3J3YXJkaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobGlua291dGljb24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZm9yd2FyZGljb24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRIKGN0eCkge1xuICBsZXQgZGl2MjtcbiAgbGV0IHQwO1xuICBsZXQgYnV0dG9uMDtcbiAgbGV0IGRpdjA7XG4gIGxldCBzZWN1cml0eWljb247XG4gIGxldCB0MTtcbiAgbGV0IHQyO1xuICBsZXQgZm9yd2FyZGljb24wO1xuICBsZXQgdDM7XG4gIGxldCB0NDtcbiAgbGV0IGJ1dHRvbjE7XG4gIGxldCBkaXYxO1xuICBsZXQgbG9nb3V0aWNvbjtcbiAgbGV0IHQ1O1xuICBsZXQgdDY7XG4gIGxldCBmb3J3YXJkaWNvbjE7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGxldCBpZl9ibG9jazAgPSAhLypoaWRlUHJvZmlsZVNlY3Rpb24qL1xuICBjdHhbMl0gJiYgY3JlYXRlX2lmX2Jsb2NrXzEkZShjdHgpO1xuICBzZWN1cml0eWljb24gPSBuZXcgU2VjdXJpdHlJY29uKHt9KTtcbiAgZm9yd2FyZGljb24wID0gbmV3IEZvcndhcmRJY29uKHt9KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdLnN0cmlwZUN1c3RvbWVySWQgJiYgY3JlYXRlX2lmX2Jsb2NrJGsoY3R4KVxuICApO1xuICBsb2dvdXRpY29uID0gbmV3IExvZ291dEljb24oe30pO1xuICBmb3J3YXJkaWNvbjEgPSBuZXcgRm9yd2FyZEljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBidXR0b24wID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzZWN1cml0eWljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSB0ZXh0KFwiIFNlY3VyaXR5XCIpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChmb3J3YXJkaWNvbjAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIHQ0ID0gc3BhY2UoKTtcbiAgICAgIGJ1dHRvbjEgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGxvZ291dGljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDUgPSB0ZXh0KFwiIExvZ291dFwiKTtcbiAgICAgIHQ2ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoZm9yd2FyZGljb24xLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoYnV0dG9uMCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19wcm9maWxlLW9wdGlvblwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYnV0dG9uMCxcbiAgICAgICAgXCJtcy1tb2RhbF9fcHJvZmlsZS1vcHRpb24tLWFjdGl2ZVwiLFxuICAgICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgY3R4WzBdID09PSBcInNlY3VyaXR5XCIgfHwgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eFswXSA9PT0gXCJjaGFuZ2VQYXNzd29yZFwiXG4gICAgICApO1xuICAgICAgYXR0cihidXR0b24xLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX21vYmlsZS1wcm9maWxlLW5hdlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjIsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAubShkaXYyLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MiwgYnV0dG9uMCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMCwgZGl2MCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoc2VjdXJpdHlpY29uLCBkaXYwLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0MSk7XG4gICAgICBhcHBlbmQoYnV0dG9uMCwgdDIpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGZvcndhcmRpY29uMCwgYnV0dG9uMCwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDMpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0oZGl2MiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDQpO1xuICAgICAgYXBwZW5kKGRpdjIsIGJ1dHRvbjEpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjEsIGRpdjEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGxvZ291dGljb24sIGRpdjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQ1KTtcbiAgICAgIGFwcGVuZChidXR0b24xLCB0Nik7XG4gICAgICBtb3VudF9jb21wb25lbnQoZm9yd2FyZGljb24xLCBidXR0b24xLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBbXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMCxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8xKi9cbiAgICAgICAgICAgIGN0eFs4XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qbG9nb3V0Ki9cbiAgICAgICAgICAgIGN0eFszXVxuICAgICAgICAgIClcbiAgICAgICAgXTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmICghLypoaWRlUHJvZmlsZVNlY3Rpb24qL1xuICAgICAgY3R4MlsyXSkge1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgaWZfYmxvY2swLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qaGlkZVByb2ZpbGVTZWN0aW9uKi9cbiAgICAgICAgICA0KSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMCA9IGNyZWF0ZV9pZl9ibG9ja18xJGUoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCwgMSk7XG4gICAgICAgICAgaWZfYmxvY2swLm0oZGl2MiwgdDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2swID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAxKSB7XG4gICAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgICBidXR0b24wLFxuICAgICAgICAgIFwibXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uLS1hY3RpdmVcIixcbiAgICAgICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgICBjdHgyWzBdID09PSBcInNlY3VyaXR5XCIgfHwgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgICAgY3R4MlswXSA9PT0gXCJjaGFuZ2VQYXNzd29yZFwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qbWVtYmVyKi9cbiAgICAgICAgY3R4MlsxXS5zdHJpcGVDdXN0b21lcklkXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKm1lbWJlciovXG4gICAgICAgICAgMikge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBjcmVhdGVfaWZfYmxvY2skayhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubShkaXYyLCB0NCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9pbihzZWN1cml0eWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oZm9yd2FyZGljb24wLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSk7XG4gICAgICB0cmFuc2l0aW9uX2luKGxvZ291dGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oZm9yd2FyZGljb24xLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX291dChzZWN1cml0eWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGZvcndhcmRpY29uMC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGxvZ291dGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGZvcndhcmRpY29uMS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYyKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN1cml0eWljb24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZm9yd2FyZGljb24wKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChsb2dvdXRpY29uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGZvcndhcmRpY29uMSk7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBydW5fYWxsKGRpc3Bvc2UpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJG4oJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBsZXQgeyBvblN1Y2Nlc3NMb2dvdXQgfSA9ICQkcHJvcHM7XG4gIGxldCB7IGRpc3BsYXlQcm9maWxlIH0gPSAkJHByb3BzO1xuICBsZXQgeyBwcm9maWxlTG9hZGVyIH0gPSAkJHByb3BzO1xuICBsZXQgeyBoaWRlUHJvZmlsZVNlY3Rpb246IGhpZGVQcm9maWxlU2VjdGlvbjIgfSA9ICQkcHJvcHM7XG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gQXBwU3RvcmUuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgaWYgKCFkYXRhLmluaXRpYWxWYWx1ZSkge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtc092ZXJsYXlcIik7XG4gICAgICBjb25zdCBjc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICBjb25zdCBjb2xvciA9IGRhdGEuYnJhbmRpbmcuY29sb3JzLmxpZ2h0TW9kZS5wcmltYXJ5QnV0dG9uO1xuICAgICAgY29uc3QgZnVsbENTUyA9IGAubXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uOmhvdmVyIHsgY29sb3I6ICR7Y29sb3J9O30gLm1zLW1vZGFsX19wcm9maWxlLW9wdGlvbi0tYWN0aXZlIHsgY29sb3I6ICR7Y29sb3J9O30gLm1zLW1vZGFsX19zYXZlLWJ1dHRvbiB7IGJhY2tncm91bmQ6ICR7Y29sb3J9O30gLm1zLW1vZGFsX19zYXZlLWJ1dHRvbjpkaXNhYmxlZCB7IGJhY2tncm91bmQ6ICR7Y29sb3J9O31gO1xuICAgICAgY3NzLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGZ1bGxDU1MpKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjc3MpO1xuICAgIH1cbiAgfSk7XG4gIG9uRGVzdHJveSgoKSA9PiB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGxvZ291dChlKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgX2ludGVybmFsVXNlT25seTogeyBtZXNzYWdlIH0gfSA9IHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20ubG9nb3V0KCk7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKG1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgb25TdWNjZXNzTG9nb3V0KHsgdHlwZTogXCJMT0dPVVRcIiwgZGF0YSB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gbGF1bmNoUG9ydGFsKGUpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgJCRpbnZhbGlkYXRlKDUsIHByb2ZpbGVMb2FkZXIgPSB0cnVlKTtcbiAgICAgIHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20ubGF1bmNoU3RyaXBlQ3VzdG9tZXJQb3J0YWwoeyBwcmljZUlkczogW10sIGF1dG9SZWRpcmVjdDogdHJ1ZSB9KTtcbiAgICB9KTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXlQcm9maWxlID0gXCJwcm9maWxlXCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSBcInNlY3VyaXR5XCIpO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJtZW1iZXJcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBtZW1iZXIgPSAkJHByb3BzMi5tZW1iZXIpO1xuICAgIGlmIChcIm9uU3VjY2Vzc0xvZ291dFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDYsIG9uU3VjY2Vzc0xvZ291dCA9ICQkcHJvcHMyLm9uU3VjY2Vzc0xvZ291dCk7XG4gICAgaWYgKFwiZGlzcGxheVByb2ZpbGVcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSA9ICQkcHJvcHMyLmRpc3BsYXlQcm9maWxlKTtcbiAgICBpZiAoXCJwcm9maWxlTG9hZGVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoNSwgcHJvZmlsZUxvYWRlciA9ICQkcHJvcHMyLnByb2ZpbGVMb2FkZXIpO1xuICAgIGlmIChcImhpZGVQcm9maWxlU2VjdGlvblwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIGhpZGVQcm9maWxlU2VjdGlvbjIgPSAkJHByb3BzMi5oaWRlUHJvZmlsZVNlY3Rpb24pO1xuICB9O1xuICByZXR1cm4gW1xuICAgIGRpc3BsYXlQcm9maWxlLFxuICAgIG1lbWJlcixcbiAgICBoaWRlUHJvZmlsZVNlY3Rpb24yLFxuICAgIGxvZ291dCxcbiAgICBsYXVuY2hQb3J0YWwsXG4gICAgcHJvZmlsZUxvYWRlcixcbiAgICBvblN1Y2Nlc3NMb2dvdXQsXG4gICAgY2xpY2tfaGFuZGxlcixcbiAgICBjbGlja19oYW5kbGVyXzFcbiAgXTtcbn1cbnZhciBNb2JpbGVQcm9maWxlTW9kYWxOYXYgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkbiwgY3JlYXRlX2ZyYWdtZW50JEgsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBtZW1iZXI6IDEsXG4gICAgICBvblN1Y2Nlc3NMb2dvdXQ6IDYsXG4gICAgICBkaXNwbGF5UHJvZmlsZTogMCxcbiAgICAgIHByb2ZpbGVMb2FkZXI6IDUsXG4gICAgICBoaWRlUHJvZmlsZVNlY3Rpb246IDJcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQkNyhjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFs1XSA9IGxpc3RbaV07XG4gIGNoaWxkX2N0eFs2XSA9IGxpc3Q7XG4gIGNoaWxkX2N0eFs3XSA9IGk7XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skaihjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBkaXYwO1xuICBsZXQgbGFiZWw7XG4gIGxldCB0MF92YWx1ZSA9IChcbiAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICBjdHhbNV0ubGFiZWwgKyBcIlwiXG4gICk7XG4gIGxldCB0MDtcbiAgbGV0IGxhYmVsX2Zvcl92YWx1ZTtcbiAgbGV0IHQxO1xuICBsZXQgaW5wdXQ7XG4gIGxldCBpbnB1dF9wbGFjZWhvbGRlcl92YWx1ZTtcbiAgbGV0IGlucHV0X25hbWVfdmFsdWU7XG4gIGxldCB0MjtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBmdW5jdGlvbiBpbnB1dF9pbnB1dF9oYW5kbGVyKCkge1xuICAgIGN0eFs0XS5jYWxsKFxuICAgICAgaW5wdXQsXG4gICAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eFs1XVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGxhYmVsID0gZWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgdDAgPSB0ZXh0KHQwX3ZhbHVlKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGlucHV0ID0gZWxlbWVudChcImlucHV0XCIpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgYXR0cihsYWJlbCwgXCJjbGFzc1wiLCBcIm1zLWZvcm1fX2xhYmVsXCIpO1xuICAgICAgYXR0cihsYWJlbCwgXCJmb3JcIiwgbGFiZWxfZm9yX3ZhbHVlID0gLypjdXN0b21GaWVsZCovXG4gICAgICBjdHhbNV0ua2V5KTtcbiAgICAgIGF0dHIoaW5wdXQsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19pbnB1dFwiKTtcbiAgICAgIGF0dHIoaW5wdXQsIFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICBhdHRyKGlucHV0LCBcInBsYWNlaG9sZGVyXCIsIGlucHV0X3BsYWNlaG9sZGVyX3ZhbHVlID0gLypjdXN0b21GaWVsZCovXG4gICAgICBjdHhbNV0ubGFiZWwpO1xuICAgICAgYXR0cihpbnB1dCwgXCJuYW1lXCIsIGlucHV0X25hbWVfdmFsdWUgPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eFs1XS5rZXkpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY3VzdG9tLWZpZWxkLWNvbnRhaW5lclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgbGFiZWwpO1xuICAgICAgYXBwZW5kKGxhYmVsLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjAsIGlucHV0KTtcbiAgICAgIHNldF9pbnB1dF92YWx1ZShcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIC8qbWVtYmVyKi9cbiAgICAgICAgY3R4WzBdLmN1c3RvbUZpZWxkc1tcbiAgICAgICAgICAvKmN1c3RvbUZpZWxkKi9cbiAgICAgICAgICBjdHhbNV0ua2V5XG4gICAgICAgIF1cbiAgICAgICk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDIpO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oaW5wdXQsIFwiaW5wdXRcIiwgaW5wdXRfaW5wdXRfaGFuZGxlcik7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChuZXdfY3R4LCBkaXJ0eSkge1xuICAgICAgY3R4ID0gbmV3X2N0eDtcbiAgICAgIGlmIChkaXJ0eSAmIC8qY3VzdG9tRmllbGRzKi9cbiAgICAgIDIgJiYgdDBfdmFsdWUgIT09ICh0MF92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzVdLmxhYmVsICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQwLCB0MF92YWx1ZSk7XG4gICAgICBpZiAoZGlydHkgJiAvKmN1c3RvbUZpZWxkcyovXG4gICAgICAyICYmIGxhYmVsX2Zvcl92YWx1ZSAhPT0gKGxhYmVsX2Zvcl92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzVdLmtleSkpIHtcbiAgICAgICAgYXR0cihsYWJlbCwgXCJmb3JcIiwgbGFiZWxfZm9yX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qY3VzdG9tRmllbGRzKi9cbiAgICAgIDIgJiYgaW5wdXRfcGxhY2Vob2xkZXJfdmFsdWUgIT09IChpbnB1dF9wbGFjZWhvbGRlcl92YWx1ZSA9IC8qY3VzdG9tRmllbGQqL1xuICAgICAgY3R4WzVdLmxhYmVsKSkge1xuICAgICAgICBhdHRyKGlucHV0LCBcInBsYWNlaG9sZGVyXCIsIGlucHV0X3BsYWNlaG9sZGVyX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qY3VzdG9tRmllbGRzKi9cbiAgICAgIDIgJiYgaW5wdXRfbmFtZV92YWx1ZSAhPT0gKGlucHV0X25hbWVfdmFsdWUgPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgIGN0eFs1XS5rZXkpKSB7XG4gICAgICAgIGF0dHIoaW5wdXQsIFwibmFtZVwiLCBpbnB1dF9uYW1lX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyLCBjdXN0b21GaWVsZHMqL1xuICAgICAgMyAmJiBpbnB1dC52YWx1ZSAhPT0gLyptZW1iZXIqL1xuICAgICAgY3R4WzBdLmN1c3RvbUZpZWxkc1tcbiAgICAgICAgLypjdXN0b21GaWVsZCovXG4gICAgICAgIGN0eFs1XS5rZXlcbiAgICAgIF0pIHtcbiAgICAgICAgc2V0X2lucHV0X3ZhbHVlKFxuICAgICAgICAgIGlucHV0LFxuICAgICAgICAgIC8qbWVtYmVyKi9cbiAgICAgICAgICBjdHhbMF0uY3VzdG9tRmllbGRzW1xuICAgICAgICAgICAgLypjdXN0b21GaWVsZCovXG4gICAgICAgICAgICBjdHhbNV0ua2V5XG4gICAgICAgICAgXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYxKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9jayQ3KGN0eCkge1xuICBsZXQgaWZfYmxvY2tfYW5jaG9yO1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLypjdXN0b21GaWVsZCovXG4gICAgY3R4WzVdLmhpZGRlbiAhPT0gdHJ1ZSAmJiBjcmVhdGVfaWZfYmxvY2skaihjdHgpXG4gICk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgaWZfYmxvY2tfYW5jaG9yID0gZW1wdHkoKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2subSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBpZl9ibG9ja19hbmNob3IsIGFuY2hvcik7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8qY3VzdG9tRmllbGQqL1xuICAgICAgICBjdHgyWzVdLmhpZGRlbiAhPT0gdHJ1ZVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrJGooY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oaWZfYmxvY2tfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrX2FuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgaWZfYmxvY2suZCgxKTtcbiAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGlmX2Jsb2NrX2FuY2hvcik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEcoY3R4KSB7XG4gIGxldCBmb3JtO1xuICBsZXQgdDA7XG4gIGxldCBkaXY7XG4gIGxldCBidXR0b247XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbGV0IGVhY2hfdmFsdWUgPSAoXG4gICAgLypjdXN0b21GaWVsZHMqL1xuICAgIGN0eFsxXVxuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQ3KGdldF9lYWNoX2NvbnRleHQkNyhjdHgsIGVhY2hfdmFsdWUsIGkpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBmb3JtID0gZWxlbWVudChcImZvcm1cIik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XG4gICAgICBhdHRyKGZvcm0sIFwiY2xhc3NcIiwgXCJtcy1mb3JtXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImFjdGlvblwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuICAgICAgYXR0cihmb3JtLCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NhdmUtYnV0dG9uIG1zLW1vZGFsX19zYXZlLWJ1dHRvbi0tbGFyZ2VcIik7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19hY3Rpb24tY29udGFpbmVyXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZm9ybSwgYW5jaG9yKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShmb3JtLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zZXJ0KHRhcmdldCwgdDAsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBidXR0b24pO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBbXG4gICAgICAgICAgbGlzdGVuKGZvcm0sIFwic3VibWl0XCIsIHN0b3BfcHJvcGFnYXRpb24ocHJldmVudF9kZWZhdWx0KFxuICAgICAgICAgICAgLypzYXZlUHJvZmlsZSovXG4gICAgICAgICAgICBjdHhbMl1cbiAgICAgICAgICApKSksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypzYXZlUHJvZmlsZSovXG4gICAgICAgICAgICBjdHhbMl1cbiAgICAgICAgICApXG4gICAgICAgIF07XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoZGlydHkgJiAvKmN1c3RvbUZpZWxkcywgbWVtYmVyKi9cbiAgICAgIDMpIHtcbiAgICAgICAgZWFjaF92YWx1ZSA9IC8qY3VzdG9tRmllbGRzKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dCQ3KGN0eDIsIGVhY2hfdmFsdWUsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQ3KGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGZvcm0sIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0uZCgxKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoX2Jsb2Nrcy5sZW5ndGggPSBlYWNoX3ZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZvcm0pO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQwKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRtKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCB7IGN1c3RvbUZpZWxkcyB9ID0gJCRwcm9wcztcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBsZXQgeyBwcm9maWxlTG9hZGVyIH0gPSAkJHByb3BzO1xuICBmdW5jdGlvbiBzYXZlUHJvZmlsZShlKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICQkaW52YWxpZGF0ZSgzLCBwcm9maWxlTG9hZGVyID0gdHJ1ZSk7XG4gICAgICB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnVwZGF0ZU1lbWJlcih7IGN1c3RvbUZpZWxkczogbWVtYmVyLmN1c3RvbUZpZWxkcyB9KTtcbiAgICAgICQkaW52YWxpZGF0ZSgzLCBwcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGlucHV0X2lucHV0X2hhbmRsZXIoY3VzdG9tRmllbGQpIHtcbiAgICBtZW1iZXIuY3VzdG9tRmllbGRzW2N1c3RvbUZpZWxkLmtleV0gPSB0aGlzLnZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBtZW1iZXIpO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImN1c3RvbUZpZWxkc1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIGN1c3RvbUZpZWxkcyA9ICQkcHJvcHMyLmN1c3RvbUZpZWxkcyk7XG4gICAgaWYgKFwibWVtYmVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgbWVtYmVyID0gJCRwcm9wczIubWVtYmVyKTtcbiAgICBpZiAoXCJwcm9maWxlTG9hZGVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMywgcHJvZmlsZUxvYWRlciA9ICQkcHJvcHMyLnByb2ZpbGVMb2FkZXIpO1xuICB9O1xuICByZXR1cm4gW21lbWJlciwgY3VzdG9tRmllbGRzLCBzYXZlUHJvZmlsZSwgcHJvZmlsZUxvYWRlciwgaW5wdXRfaW5wdXRfaGFuZGxlcl07XG59XG52YXIgTW9iaWxlUHJvZmlsZUluZm9Db250ZW50ID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJG0sIGNyZWF0ZV9mcmFnbWVudCRHLCBzYWZlX25vdF9lcXVhbCwge1xuICAgICAgY3VzdG9tRmllbGRzOiAxLFxuICAgICAgbWVtYmVyOiAwLFxuICAgICAgcHJvZmlsZUxvYWRlcjogM1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dCQ2KGN0eCwgbGlzdCwgaSkge1xuICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgY2hpbGRfY3R4WzE2XSA9IGxpc3RbaV07XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9ja18xJDIoY3R4KSB7XG4gIGxldCB0O1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICB0ID0gdGV4dChcIkNoYW5nZSBQYXNzd29yZFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQsIGFuY2hvcik7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18yJGEoY3R4KSB7XG4gIGxldCB0O1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICB0ID0gdGV4dChcIlNldCBQYXNzd29yZFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQsIGFuY2hvcik7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRpKGN0eCkge1xuICBsZXQgcDtcbiAgbGV0IHQxO1xuICBsZXQgZGl2O1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgbGV0IGVhY2hfMV9sb29rdXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBsZXQgZWFjaF92YWx1ZSA9IChcbiAgICAvKiRhcHAqL1xuICAgIGN0eFs0XS5hdXRoUHJvdmlkZXJzXG4gICk7XG4gIGNvbnN0IGdldF9rZXkgPSAoY3R4MikgPT4gKFxuICAgIC8qcHJvdmlkZXIqL1xuICAgIGN0eDJbMTZdLnByb3ZpZGVyXG4gICk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGxldCBjaGlsZF9jdHggPSBnZXRfZWFjaF9jb250ZXh0JDYoY3R4LCBlYWNoX3ZhbHVlLCBpKTtcbiAgICBsZXQga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgIGVhY2hfMV9sb29rdXAuc2V0KGtleSwgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQ2KGtleSwgY2hpbGRfY3R4KSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgcCA9IGVsZW1lbnQoXCJwXCIpO1xuICAgICAgcC50ZXh0Q29udGVudCA9IFwiQ29ubmVjdCBBZGRpdGlvbmFsIEFjY291bnRzXCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICBhdHRyKHAsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19sYWJlbFwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NvY2lhbFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHAsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MSwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXYsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoZGlydHkgJiAvKmRpc2Nvbm5lY3RQcm92aWRlciwgJGFwcCwgbWVtYmVyLCBjb25uZWN0QWRkaXRpb25hbFByb3ZpZGVyKi9cbiAgICAgIDIxMCkge1xuICAgICAgICBlYWNoX3ZhbHVlID0gLyokYXBwKi9cbiAgICAgICAgY3R4Mls0XS5hdXRoUHJvdmlkZXJzO1xuICAgICAgICBlYWNoX2Jsb2NrcyA9IHVwZGF0ZV9rZXllZF9lYWNoKGVhY2hfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgMSwgY3R4MiwgZWFjaF92YWx1ZSwgZWFjaF8xX2xvb2t1cCwgZGl2LCBkZXN0cm95X2Jsb2NrLCBjcmVhdGVfZWFjaF9ibG9jayQ2LCBudWxsLCBnZXRfZWFjaF9jb250ZXh0JDYpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChwKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MSk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrJDgoY3R4KSB7XG4gIGxldCBidXR0b247XG4gIGxldCBpbWc7XG4gIGxldCBpbWdfc3JjX3ZhbHVlO1xuICBsZXQgaW1nX2FsdF92YWx1ZTtcbiAgbGV0IHQwO1xuICBsZXQgc3BhbjtcbiAgbGV0IHQxO1xuICBsZXQgdDJfdmFsdWUgPSAoXG4gICAgLypwcm92aWRlciovXG4gICAgY3R4WzE2XS5uYW1lICsgXCJcIlxuICApO1xuICBsZXQgdDI7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgZnVuY3Rpb24gY2xpY2tfaGFuZGxlcl8yKCkge1xuICAgIHJldHVybiAoXG4gICAgICAvKmNsaWNrX2hhbmRsZXJfMiovXG4gICAgICBjdHhbMTRdKFxuICAgICAgICAvKnByb3ZpZGVyKi9cbiAgICAgICAgY3R4WzE2XVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGltZyA9IGVsZW1lbnQoXCJpbWdcIik7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICB0MSA9IHRleHQoXCJDb25uZWN0IHdpdGggXCIpO1xuICAgICAgdDIgPSB0ZXh0KHQyX3ZhbHVlKTtcbiAgICAgIGlmICghc3JjX3VybF9lcXVhbChpbWcuc3JjLCBpbWdfc3JjX3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLmljb24pKVxuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICBhdHRyKGltZywgXCJhbHRcIiwgaW1nX2FsdF92YWx1ZSA9IC8qcHJvdmlkZXIqL1xuICAgICAgY3R4WzE2XS5uYW1lKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NvY2lhbC1idXR0b25cIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgaW1nKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQwKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4pO1xuICAgICAgYXBwZW5kKHNwYW4sIHQxKTtcbiAgICAgIGFwcGVuZChzcGFuLCB0Mik7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihidXR0b24sIFwiY2xpY2tcIiwgY2xpY2tfaGFuZGxlcl8yKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDE2ICYmICFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0uaWNvbikpIHtcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDE2ICYmIGltZ19hbHRfdmFsdWUgIT09IChpbWdfYWx0X3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLm5hbWUpKSB7XG4gICAgICAgIGF0dHIoaW1nLCBcImFsdFwiLCBpbWdfYWx0X3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxNiAmJiB0Ml92YWx1ZSAhPT0gKHQyX3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLm5hbWUgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDIsIHQyX3ZhbHVlKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRkKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgaW1nO1xuICBsZXQgaW1nX3NyY192YWx1ZTtcbiAgbGV0IGltZ19hbHRfdmFsdWU7XG4gIGxldCB0MDtcbiAgbGV0IHNwYW47XG4gIGxldCB0MTtcbiAgbGV0IHQyX3ZhbHVlID0gKFxuICAgIC8qcHJvdmlkZXIqL1xuICAgIGN0eFsxNl0ubmFtZSArIFwiXCJcbiAgKTtcbiAgbGV0IHQyO1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGZ1bmN0aW9uIGNsaWNrX2hhbmRsZXJfMSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLypjbGlja19oYW5kbGVyXzEqL1xuICAgICAgY3R4WzEzXShcbiAgICAgICAgLypwcm92aWRlciovXG4gICAgICAgIGN0eFsxNl1cbiAgICAgIClcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBpbWcgPSBlbGVtZW50KFwiaW1nXCIpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgdDEgPSB0ZXh0KFwiRGlzY29ubmVjdCBcIik7XG4gICAgICB0MiA9IHRleHQodDJfdmFsdWUpO1xuICAgICAgaWYgKCFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0uaWNvbikpXG4gICAgICAgIGF0dHIoaW1nLCBcInNyY1wiLCBpbWdfc3JjX3ZhbHVlKTtcbiAgICAgIGF0dHIoaW1nLCBcImFsdFwiLCBpbWdfYWx0X3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLm5hbWUpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvblwiKTtcbiAgICAgIHNldF9zdHlsZShidXR0b24sIFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNGNkY2RjZcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgaW1nKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQwKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4pO1xuICAgICAgYXBwZW5kKHNwYW4sIHQxKTtcbiAgICAgIGFwcGVuZChzcGFuLCB0Mik7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihidXR0b24sIFwiY2xpY2tcIiwgY2xpY2tfaGFuZGxlcl8xKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDE2ICYmICFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKnByb3ZpZGVyKi9cbiAgICAgIGN0eFsxNl0uaWNvbikpIHtcbiAgICAgICAgYXR0cihpbWcsIFwic3JjXCIsIGltZ19zcmNfdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyokYXBwKi9cbiAgICAgIDE2ICYmIGltZ19hbHRfdmFsdWUgIT09IChpbWdfYWx0X3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLm5hbWUpKSB7XG4gICAgICAgIGF0dHIoaW1nLCBcImFsdFwiLCBpbWdfYWx0X3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxNiAmJiB0Ml92YWx1ZSAhPT0gKHQyX3ZhbHVlID0gLypwcm92aWRlciovXG4gICAgICBjdHhbMTZdLm5hbWUgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDIsIHQyX3ZhbHVlKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9jayQ2KGtleV8xLCBjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHNob3dfaWY7XG4gIGxldCB0O1xuICBmdW5jdGlvbiBmdW5jMiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qZnVuYyovXG4gICAgICBjdHhbOV0oXG4gICAgICAgIC8qcHJvdmlkZXIqL1xuICAgICAgICBjdHhbMTZdLFxuICAgICAgICAuLi5hcmdzXG4gICAgICApXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKGRpcnR5ICYgLyptZW1iZXIsICRhcHAqL1xuICAgIDE4KVxuICAgICAgc2hvd19pZiA9IG51bGw7XG4gICAgaWYgKHNob3dfaWYgPT0gbnVsbClcbiAgICAgIHNob3dfaWYgPSAhIS8qbWVtYmVyKi9cbiAgICAgIGN0eDJbMV0uYXV0aC5wcm92aWRlcnMuc29tZShmdW5jMik7XG4gICAgaWYgKHNob3dfaWYpXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrXzEkZDtcbiAgICByZXR1cm4gY3JlYXRlX2Vsc2VfYmxvY2skODtcbiAgfVxuICBsZXQgY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgsIC0xKTtcbiAgbGV0IGlmX2Jsb2NrID0gY3VycmVudF9ibG9ja190eXBlKGN0eCk7XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXlfMSxcbiAgICBmaXJzdDogbnVsbCxcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIHQgPSBzcGFjZSgpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc29jaWFsLWJ1dHRvbnNcIik7XG4gICAgICB0aGlzLmZpcnN0ID0gZGl2O1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgaWZfYmxvY2subShkaXYsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdiwgdCk7XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSA9PT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4LCBkaXJ0eSkpICYmIGlmX2Jsb2NrKSB7XG4gICAgICAgIGlmX2Jsb2NrLnAoY3R4LCBkaXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZl9ibG9jay5kKDEpO1xuICAgICAgICBpZl9ibG9jayA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgpO1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgaWZfYmxvY2subShkaXYsIHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZl9ibG9jay5kKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEYoY3R4KSB7XG4gIGxldCBmb3JtO1xuICBsZXQgZW1haWxpbnB1dDtcbiAgbGV0IHVwZGF0aW5nX2VtYWlsSW5wdXRWYWxpZDtcbiAgbGV0IHVwZGF0aW5nX2VtYWlsVmFsdWU7XG4gIGxldCB0MDtcbiAgbGV0IGRpdjA7XG4gIGxldCBsYWJlbDtcbiAgbGV0IHQyO1xuICBsZXQgYnV0dG9uMDtcbiAgbGV0IHBhc3N3b3JkbG9ja2ljb247XG4gIGxldCB0MztcbiAgbGV0IHQ0O1xuICBsZXQgdDU7XG4gIGxldCBkaXYxO1xuICBsZXQgYnV0dG9uMTtcbiAgbGV0IHQ2O1xuICBsZXQgYnV0dG9uMV9kaXNhYmxlZF92YWx1ZTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgZnVuY3Rpb24gZW1haWxpbnB1dF9lbWFpbElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxMF0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIGVtYWlsaW5wdXRfZW1haWxWYWx1ZV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzExXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IGVtYWlsaW5wdXRfcHJvcHMgPSB7fTtcbiAgaWYgKFxuICAgIC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbM10gIT09IHZvaWQgMFxuICApIHtcbiAgICBlbWFpbGlucHV0X3Byb3BzLmVtYWlsSW5wdXRWYWxpZCA9IC8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICBjdHhbM107XG4gIH1cbiAgaWYgKFxuICAgIC8qZW1haWxWYWx1ZSovXG4gICAgY3R4WzJdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgZW1haWxpbnB1dF9wcm9wcy5lbWFpbFZhbHVlID0gLyplbWFpbFZhbHVlKi9cbiAgICBjdHhbMl07XG4gIH1cbiAgZW1haWxpbnB1dCA9IG5ldyBFbWFpbElucHV0KHsgcHJvcHM6IGVtYWlsaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChlbWFpbGlucHV0LCBcImVtYWlsSW5wdXRWYWxpZFwiLCBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChlbWFpbGlucHV0LCBcImVtYWlsVmFsdWVcIiwgZW1haWxpbnB1dF9lbWFpbFZhbHVlX2JpbmRpbmcpKTtcbiAgcGFzc3dvcmRsb2NraWNvbiA9IG5ldyBQYXNzd29yZExvY2tJY29uKHt9KTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoIS8qbWVtYmVyKi9cbiAgICBjdHgyWzFdLmF1dGguaGFzUGFzc3dvcmQpXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrXzIkYTtcbiAgICByZXR1cm4gY3JlYXRlX2Vsc2VfYmxvY2tfMSQyO1xuICB9XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGUgPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpO1xuICBsZXQgaWZfYmxvY2swID0gY3VycmVudF9ibG9ja190eXBlKGN0eCk7XG4gIGxldCBpZl9ibG9jazEgPSAoXG4gICAgLyokYXBwKi9cbiAgICBjdHhbNF0uYXV0aFByb3ZpZGVycy5sZW5ndGggPiAwICYmIGNyZWF0ZV9pZl9ibG9jayRpKGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZm9ybSA9IGVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChlbWFpbGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgbGFiZWwgPSBlbGVtZW50KFwibGFiZWxcIik7XG4gICAgICBsYWJlbC50ZXh0Q29udGVudCA9IFwiUGFzc3dvcmRcIjtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGJ1dHRvbjAgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGxvY2tpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgdDUgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24xID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHQ2ID0gdGV4dChcIlNhdmVcIik7XG4gICAgICBhdHRyKGZvcm0sIFwiY2xhc3NcIiwgXCJtcy1mb3JtXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImFjdGlvblwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuICAgICAgYXR0cihmb3JtLCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICAgIGF0dHIobGFiZWwsIFwiY2xhc3NcIiwgXCJtcy1mb3JtX19sYWJlbFwiKTtcbiAgICAgIGF0dHIobGFiZWwsIFwiZm9yXCIsIFwic2V0UGFzc3dvcmRcIik7XG4gICAgICBhdHRyKGJ1dHRvbjAsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fb3V0bGluZS1idXR0b24gbXMtbW9kYWxfX291dGxpbmUtYnV0dG9uLS1tb2JpbGVcIik7XG4gICAgICBhdHRyKGJ1dHRvbjAsIFwibmFtZVwiLCBcInNldFBhc3N3b3JkXCIpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtZm9ybV9fZ3JvdXBcIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fc2F2ZS1idXR0b24gbXMtbW9kYWxfX3NhdmUtYnV0dG9uLS1sYXJnZVwiKTtcbiAgICAgIGJ1dHRvbjEuZGlzYWJsZWQgPSBidXR0b24xX2Rpc2FibGVkX3ZhbHVlID0gIS8qZW1haWxJbnB1dFZhbGlkKi9cbiAgICAgIGN0eFszXTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19hY3Rpb24tY29udGFpbmVyXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZm9ybSwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChlbWFpbGlucHV0LCBmb3JtLCBudWxsKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQwLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2MCwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYwLCBsYWJlbCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDIpO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbjApO1xuICAgICAgbW91bnRfY29tcG9uZW50KHBhc3N3b3JkbG9ja2ljb24sIGJ1dHRvbjAsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjAsIHQzKTtcbiAgICAgIGlmX2Jsb2NrMC5tKGJ1dHRvbjAsIG51bGwpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDQsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NSwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgYnV0dG9uMSk7XG4gICAgICBhcHBlbmQoYnV0dG9uMSwgdDYpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IFtcbiAgICAgICAgICBsaXN0ZW4oZm9ybSwgXCJzdWJtaXRcIiwgc3RvcF9wcm9wYWdhdGlvbihwcmV2ZW50X2RlZmF1bHQoXG4gICAgICAgICAgICAvKnN1Ym1pdEVtYWlsQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs1XVxuICAgICAgICAgICkpKSxcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24wLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICAgIGN0eFsxMl1cbiAgICAgICAgICApLFxuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjEsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKnN1Ym1pdEVtYWlsQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs1XVxuICAgICAgICAgIClcbiAgICAgICAgXTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGNvbnN0IGVtYWlsaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgJiYgZGlydHkgJiAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICA4KSB7XG4gICAgICAgIHVwZGF0aW5nX2VtYWlsSW5wdXRWYWxpZCA9IHRydWU7XG4gICAgICAgIGVtYWlsaW5wdXRfY2hhbmdlcy5lbWFpbElucHV0VmFsaWQgPSAvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICAgIGN0eDJbM107XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19lbWFpbElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX2VtYWlsVmFsdWUgJiYgZGlydHkgJiAvKmVtYWlsVmFsdWUqL1xuICAgICAgNCkge1xuICAgICAgICB1cGRhdGluZ19lbWFpbFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgZW1haWxpbnB1dF9jaGFuZ2VzLmVtYWlsVmFsdWUgPSAvKmVtYWlsVmFsdWUqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZW1haWxWYWx1ZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGVtYWlsaW5wdXQuJHNldChlbWFpbGlucHV0X2NoYW5nZXMpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSAhPT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpKSkge1xuICAgICAgICBpZl9ibG9jazAuZCgxKTtcbiAgICAgICAgaWZfYmxvY2swID0gY3VycmVudF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazAubShidXR0b24wLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKiRhcHAqL1xuICAgICAgICBjdHgyWzRdLmF1dGhQcm92aWRlcnMubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrJGkoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazEubSh0NS5wYXJlbnROb2RlLCB0NSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgIGlmX2Jsb2NrMS5kKDEpO1xuICAgICAgICBpZl9ibG9jazEgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyplbWFpbElucHV0VmFsaWQqL1xuICAgICAgOCAmJiBidXR0b24xX2Rpc2FibGVkX3ZhbHVlICE9PSAoYnV0dG9uMV9kaXNhYmxlZF92YWx1ZSA9ICEvKmVtYWlsSW5wdXRWYWxpZCovXG4gICAgICBjdHgyWzNdKSkge1xuICAgICAgICBidXR0b24xLmRpc2FibGVkID0gYnV0dG9uMV9kaXNhYmxlZF92YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGVtYWlsaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRsb2NraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChlbWFpbGlucHV0LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChwYXNzd29yZGxvY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZvcm0pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoZW1haWxpbnB1dCk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDApO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjApO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGFzc3dvcmRsb2NraWNvbik7XG4gICAgICBpZl9ibG9jazAuZCgpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ0KTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5kKGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDUpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjEpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRsKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkYXBwO1xuICBjb21wb25lbnRfc3Vic2NyaWJlKCQkc2VsZiwgQXBwU3RvcmUsICgkJHZhbHVlKSA9PiAkJGludmFsaWRhdGUoNCwgJGFwcCA9ICQkdmFsdWUpKTtcbiAgbGV0IHsgZGlzcGxheVByb2ZpbGUgfSA9ICQkcHJvcHM7XG4gIGxldCB7IG1lbWJlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgZW1haWxWYWx1ZSB9ID0gJCRwcm9wcztcbiAgbGV0IHsgcHJvZmlsZUxvYWRlciB9ID0gJCRwcm9wcztcbiAgJGFwcC5hdXRoUHJvdmlkZXJzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBpZiAoaXNDb25uZWN0ZWQoYSkgPT09IGlzQ29ubmVjdGVkKGIpKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfVxuICAgIHJldHVybiBpc0Nvbm5lY3RlZChhKSA/IC0xIDogMTtcbiAgfSk7XG4gIGxldCBlbWFpbElucHV0VmFsaWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc3VibWl0RW1haWxDaGFuZ2UoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBpZiAoIWVtYWlsSW5wdXRWYWxpZCB8fCAhZW1haWxWYWx1ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgJCRpbnZhbGlkYXRlKDgsIHByb2ZpbGVMb2FkZXIgPSB0cnVlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgX2ludGVybmFsVXNlT25seTogeyBtZXNzYWdlIH0gfSA9IHlpZWxkIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20udXBkYXRlTWVtYmVyQXV0aCh7IGVtYWlsOiBlbWFpbFZhbHVlIH0pO1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShtZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDgsIHByb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzY29ubmVjdFByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gdHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGEsIF9pbnRlcm5hbFVzZU9ubHk6IHsgbWVzc2FnZSB9IH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmRpc2Nvbm5lY3RQcm92aWRlcih7IHByb3ZpZGVyIH0pO1xuICAgICAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWVtYmVyKSwge1xuICAgICAgICAgIGF1dGg6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1lbWJlci5hdXRoKSwge1xuICAgICAgICAgICAgcHJvdmlkZXJzOiBkYXRhLnByb3ZpZGVyc1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UobWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShlcnIubWVzc2FnZSwgdHJ1ZSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNvbm5lY3RBZGRpdGlvbmFsUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0XCIsIHByb3ZpZGVyKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5jb25uZWN0UHJvdmlkZXIoeyBwcm92aWRlciB9KTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDEsIG1lbWJlciA9IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1lbWJlciksIHtcbiAgICAgICAgICBhdXRoOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZW1iZXIuYXV0aCksIHtcbiAgICAgICAgICAgIHByb3ZpZGVyczogZGF0YS5wcm92aWRlcnNcbiAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGRhdGEubWVzc2FnZSwgZmFsc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uX3Nob3dNZXNzYWdlKGVyci5tZXNzYWdlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBpc0Nvbm5lY3RlZChwcm92aWRlcikge1xuICAgIHJldHVybiBtZW1iZXIuYXV0aC5wcm92aWRlcnMuc29tZSgocHJ2KSA9PiBwcnYucHJvdmlkZXIgPT09IHByb3ZpZGVyLnByb3ZpZGVyKTtcbiAgfVxuICBjb25zdCBmdW5jMiA9IChwcm92aWRlciwgcHJ2KSA9PiBwcnYucHJvdmlkZXIgPT09IHByb3ZpZGVyLnByb3ZpZGVyO1xuICBmdW5jdGlvbiBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZW1haWxJbnB1dFZhbGlkID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDMsIGVtYWlsSW5wdXRWYWxpZCk7XG4gIH1cbiAgZnVuY3Rpb24gZW1haWxpbnB1dF9lbWFpbFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBlbWFpbFZhbHVlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDIsIGVtYWlsVmFsdWUpO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSBcImNoYW5nZVBhc3N3b3JkXCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAocHJvdmlkZXIpID0+IGRpc2Nvbm5lY3RQcm92aWRlcihwcm92aWRlci5wcm92aWRlcik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMiA9IChwcm92aWRlcikgPT4gY29ubmVjdEFkZGl0aW9uYWxQcm92aWRlcihwcm92aWRlci5wcm92aWRlcik7XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImRpc3BsYXlQcm9maWxlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSAkJHByb3BzMi5kaXNwbGF5UHJvZmlsZSk7XG4gICAgaWYgKFwibWVtYmVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyID0gJCRwcm9wczIubWVtYmVyKTtcbiAgICBpZiAoXCJlbWFpbFZhbHVlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMiwgZW1haWxWYWx1ZSA9ICQkcHJvcHMyLmVtYWlsVmFsdWUpO1xuICAgIGlmIChcInByb2ZpbGVMb2FkZXJcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gJCRwcm9wczIucHJvZmlsZUxvYWRlcik7XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheVByb2ZpbGUsXG4gICAgbWVtYmVyLFxuICAgIGVtYWlsVmFsdWUsXG4gICAgZW1haWxJbnB1dFZhbGlkLFxuICAgICRhcHAsXG4gICAgc3VibWl0RW1haWxDaGFuZ2UsXG4gICAgZGlzY29ubmVjdFByb3ZpZGVyLFxuICAgIGNvbm5lY3RBZGRpdGlvbmFsUHJvdmlkZXIsXG4gICAgcHJvZmlsZUxvYWRlcixcbiAgICBmdW5jMixcbiAgICBlbWFpbGlucHV0X2VtYWlsSW5wdXRWYWxpZF9iaW5kaW5nLFxuICAgIGVtYWlsaW5wdXRfZW1haWxWYWx1ZV9iaW5kaW5nLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMlxuICBdO1xufVxudmFyIE1vYmlsZVNlY3VyaXR5SW5mb0NvbnRlbnQgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkbCwgY3JlYXRlX2ZyYWdtZW50JEYsIHNhZmVfbm90X2VxdWFsLCB7XG4gICAgICBkaXNwbGF5UHJvZmlsZTogMCxcbiAgICAgIG1lbWJlcjogMSxcbiAgICAgIGVtYWlsVmFsdWU6IDIsXG4gICAgICBwcm9maWxlTG9hZGVyOiA4XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skaChjdHgpIHtcbiAgbGV0IHBhc3N3b3JkaW5wdXQ7XG4gIGxldCB1cGRhdGluZ19wYXNzd29yZFZhbHVlO1xuICBsZXQgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dF9wYXNzd29yZFZhbHVlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbOV0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTBdKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRpbnB1dF9wcm9wcyA9IHtcbiAgICBwYXNzd29yZExhYmVsOiBcIkN1cnJlbnQgUGFzc3dvcmRcIixcbiAgICBwYXNzd29yZFBsYWNlaG9sZGVyOiBcIkVudGVyIGEgc3Ryb25nIHBhc3N3b3JkXCJcbiAgfTtcbiAgaWYgKFxuICAgIC8qY3VycmVudFBhc3N3b3JkVmFsdWUqL1xuICAgIGN0eFsxXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXRfcHJvcHMucGFzc3dvcmRWYWx1ZSA9IC8qY3VycmVudFBhc3N3b3JkVmFsdWUqL1xuICAgIGN0eFsxXTtcbiAgfVxuICBpZiAoXG4gICAgLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgY3R4WzRdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dF9wcm9wcy5wYXNzd29yZElucHV0VmFsaWQgPSAvKmN1cnJlbnRQYXNzd29yZFZhbGlkKi9cbiAgICBjdHhbNF07XG4gIH1cbiAgcGFzc3dvcmRpbnB1dCA9IG5ldyBQYXNzd29yZElucHV0KHsgcHJvcHM6IHBhc3N3b3JkaW5wdXRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGlucHV0LCBcInBhc3N3b3JkVmFsdWVcIiwgcGFzc3dvcmRpbnB1dF9wYXNzd29yZFZhbHVlX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5wdXQsIFwicGFzc3dvcmRJbnB1dFZhbGlkXCIsIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGlucHV0LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZGlucHV0LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5wdXRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZFZhbHVlICYmIGRpcnR5ICYgLypjdXJyZW50UGFzc3dvcmRWYWx1ZSovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX3Bhc3N3b3JkVmFsdWUgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0X2NoYW5nZXMucGFzc3dvcmRWYWx1ZSA9IC8qY3VycmVudFBhc3N3b3JkVmFsdWUqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkICYmIGRpcnR5ICYgLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgICAxNikge1xuICAgICAgICB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0X2NoYW5nZXMucGFzc3dvcmRJbnB1dFZhbGlkID0gLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgICAgIGN0eDJbNF07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZGlucHV0LiRzZXQocGFzc3dvcmRpbnB1dF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHBhc3N3b3JkaW5wdXQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGFzc3dvcmRpbnB1dC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEUoY3R4KSB7XG4gIGxldCBmb3JtO1xuICBsZXQgdDA7XG4gIGxldCBwYXNzd29yZGlucHV0MDtcbiAgbGV0IHVwZGF0aW5nX3Bhc3N3b3JkVmFsdWU7XG4gIGxldCB1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQ7XG4gIGxldCB0MTtcbiAgbGV0IHBhc3N3b3JkaW5wdXQxO1xuICBsZXQgdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZV8xO1xuICBsZXQgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkXzE7XG4gIGxldCB0MjtcbiAgbGV0IGRpdjtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IHQzO1xuICBsZXQgYnV0dG9uX2Rpc2FibGVkX3ZhbHVlO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLyptZW1iZXIqL1xuICAgIGN0eFswXS5hdXRoLmhhc1Bhc3N3b3JkICYmIGNyZWF0ZV9pZl9ibG9jayRoKGN0eClcbiAgKTtcbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRWYWx1ZV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzExXSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTJdKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRpbnB1dDBfcHJvcHMgPSB7XG4gICAgcGFzc3dvcmRMYWJlbDogXCJOZXcgUGFzc3dvcmRcIixcbiAgICBwYXNzd29yZFBsYWNlaG9sZGVyOiBcIkVudGVyIGEgc3Ryb25nIHBhc3N3b3JkXCJcbiAgfTtcbiAgaWYgKFxuICAgIC8qbmV3UGFzc3dvcmRWYWx1ZSovXG4gICAgY3R4WzJdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRpbnB1dDBfcHJvcHMucGFzc3dvcmRWYWx1ZSA9IC8qbmV3UGFzc3dvcmRWYWx1ZSovXG4gICAgY3R4WzJdO1xuICB9XG4gIGlmIChcbiAgICAvKm5ld1Bhc3N3b3JkVmFsaWQqL1xuICAgIGN0eFs1XSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXQwX3Byb3BzLnBhc3N3b3JkSW5wdXRWYWxpZCA9IC8qbmV3UGFzc3dvcmRWYWxpZCovXG4gICAgY3R4WzVdO1xuICB9XG4gIHBhc3N3b3JkaW5wdXQwID0gbmV3IFBhc3N3b3JkSW5wdXQoeyBwcm9wczogcGFzc3dvcmRpbnB1dDBfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZGlucHV0MCwgXCJwYXNzd29yZFZhbHVlXCIsIHBhc3N3b3JkaW5wdXQwX3Bhc3N3b3JkVmFsdWVfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocGFzc3dvcmRpbnB1dDAsIFwicGFzc3dvcmRJbnB1dFZhbGlkXCIsIHBhc3N3b3JkaW5wdXQwX3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKSk7XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkVmFsdWVfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxM10odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE0XSh2YWx1ZSk7XG4gIH1cbiAgbGV0IHBhc3N3b3JkaW5wdXQxX3Byb3BzID0ge1xuICAgIHBhc3N3b3JkTGFiZWw6IFwiQ29uZmlybSBOZXcgUGFzc3dvcmRcIixcbiAgICBwYXNzd29yZFBsYWNlaG9sZGVyOiBcIkVudGVyIGEgc3Ryb25nIHBhc3N3b3JkXCJcbiAgfTtcbiAgaWYgKFxuICAgIC8qY29uZmlybVBhc3N3b3JkVmFsdWUqL1xuICAgIGN0eFszXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXQxX3Byb3BzLnBhc3N3b3JkVmFsdWUgPSAvKmNvbmZpcm1QYXNzd29yZFZhbHVlKi9cbiAgICBjdHhbM107XG4gIH1cbiAgaWYgKFxuICAgIC8qY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgIGN0eFs2XSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkaW5wdXQxX3Byb3BzLnBhc3N3b3JkSW5wdXRWYWxpZCA9IC8qY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgIGN0eFs2XTtcbiAgfVxuICBwYXNzd29yZGlucHV0MSA9IG5ldyBQYXNzd29yZElucHV0KHsgcHJvcHM6IHBhc3N3b3JkaW5wdXQxX3Byb3BzIH0pO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocGFzc3dvcmRpbnB1dDEsIFwicGFzc3dvcmRWYWx1ZVwiLCBwYXNzd29yZGlucHV0MV9wYXNzd29yZFZhbHVlX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkaW5wdXQxLCBcInBhc3N3b3JkSW5wdXRWYWxpZFwiLCBwYXNzd29yZGlucHV0MV9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZykpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBmb3JtID0gZWxlbWVudChcImZvcm1cIik7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocGFzc3dvcmRpbnB1dDAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZGlucHV0MS4kJC5mcmFnbWVudCk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHQzID0gdGV4dChcIlNhdmVcIik7XG4gICAgICBhdHRyKGZvcm0sIFwiY2xhc3NcIiwgXCJtcy1mb3JtXCIpO1xuICAgICAgYXR0cihmb3JtLCBcImFjdGlvblwiLCBcIlwiKTtcbiAgICAgIGF0dHIoZm9ybSwgXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuICAgICAgYXR0cihmb3JtLCBcImF1dG9jb21wbGV0ZVwiLCBcIm9mZlwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX3NhdmUtYnV0dG9uIG1zLW1vZGFsX19zYXZlLWJ1dHRvbi0tbGFyZ2VcIik7XG4gICAgICBidXR0b24uZGlzYWJsZWQgPSBidXR0b25fZGlzYWJsZWRfdmFsdWUgPSAvKm1lbWJlciovXG4gICAgICBjdHhbMF0uYXV0aC5oYXNQYXNzd29yZCAmJiAhLypjdXJyZW50UGFzc3dvcmRWYWxpZCovXG4gICAgICBjdHhbNF0gfHwgIS8qbmV3UGFzc3dvcmRWYWxpZCovXG4gICAgICBjdHhbNV0gfHwgIS8qY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgICAgY3R4WzZdO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fYWN0aW9uLWNvbnRhaW5lclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGZvcm0sIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLm0oZm9ybSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZm9ybSwgdDApO1xuICAgICAgbW91bnRfY29tcG9uZW50KHBhc3N3b3JkaW5wdXQwLCBmb3JtLCBudWxsKTtcbiAgICAgIGFwcGVuZChmb3JtLCB0MSk7XG4gICAgICBtb3VudF9jb21wb25lbnQocGFzc3dvcmRpbnB1dDEsIGZvcm0sIG51bGwpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDIsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBidXR0b24pO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDMpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IFtcbiAgICAgICAgICBsaXN0ZW4oZm9ybSwgXCJzdWJtaXRcIiwgc3RvcF9wcm9wYWdhdGlvbihwcmV2ZW50X2RlZmF1bHQoXG4gICAgICAgICAgICAvKnN1Ym1pdFBhc3N3b3JkQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs3XVxuICAgICAgICAgICkpKSxcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKnN1Ym1pdFBhc3N3b3JkQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs3XVxuICAgICAgICAgIClcbiAgICAgICAgXTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmIChcbiAgICAgICAgLyptZW1iZXIqL1xuICAgICAgICBjdHgyWzBdLmF1dGguaGFzUGFzc3dvcmRcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKm1lbWJlciovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrJGgoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oZm9ybSwgdDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFzc3dvcmRpbnB1dDBfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZFZhbHVlICYmIGRpcnR5ICYgLypuZXdQYXNzd29yZFZhbHVlKi9cbiAgICAgIDQpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5wdXQwX2NoYW5nZXMucGFzc3dvcmRWYWx1ZSA9IC8qbmV3UGFzc3dvcmRWYWx1ZSovXG4gICAgICAgIGN0eDJbMl07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wYXNzd29yZFZhbHVlID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWQgJiYgZGlydHkgJiAvKm5ld1Bhc3N3b3JkVmFsaWQqL1xuICAgICAgMzIpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcGFzc3dvcmRpbnB1dDBfY2hhbmdlcy5wYXNzd29yZElucHV0VmFsaWQgPSAvKm5ld1Bhc3N3b3JkVmFsaWQqL1xuICAgICAgICBjdHgyWzVdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgcGFzc3dvcmRpbnB1dDAuJHNldChwYXNzd29yZGlucHV0MF9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IHBhc3N3b3JkaW5wdXQxX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmICghdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZV8xICYmIGRpcnR5ICYgLypjb25maXJtUGFzc3dvcmRWYWx1ZSovXG4gICAgICA4KSB7XG4gICAgICAgIHVwZGF0aW5nX3Bhc3N3b3JkVmFsdWVfMSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkaW5wdXQxX2NoYW5nZXMucGFzc3dvcmRWYWx1ZSA9IC8qY29uZmlybVBhc3N3b3JkVmFsdWUqL1xuICAgICAgICBjdHgyWzNdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRWYWx1ZV8xID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19wYXNzd29yZElucHV0VmFsaWRfMSAmJiBkaXJ0eSAmIC8qY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgICAgNjQpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkXzEgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZGlucHV0MV9jaGFuZ2VzLnBhc3N3b3JkSW5wdXRWYWxpZCA9IC8qY29uZmlybVBhc3N3b3JkVmFsaWQqL1xuICAgICAgICBjdHgyWzZdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFzc3dvcmRJbnB1dFZhbGlkXzEgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZGlucHV0MS4kc2V0KHBhc3N3b3JkaW5wdXQxX2NoYW5nZXMpO1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyptZW1iZXIsIGN1cnJlbnRQYXNzd29yZFZhbGlkLCBuZXdQYXNzd29yZFZhbGlkLCBjb25maXJtUGFzc3dvcmRWYWxpZCovXG4gICAgICAxMTMgJiYgYnV0dG9uX2Rpc2FibGVkX3ZhbHVlICE9PSAoYnV0dG9uX2Rpc2FibGVkX3ZhbHVlID0gLyptZW1iZXIqL1xuICAgICAgY3R4MlswXS5hdXRoLmhhc1Bhc3N3b3JkICYmICEvKmN1cnJlbnRQYXNzd29yZFZhbGlkKi9cbiAgICAgIGN0eDJbNF0gfHwgIS8qbmV3UGFzc3dvcmRWYWxpZCovXG4gICAgICBjdHgyWzVdIHx8ICEvKmNvbmZpcm1QYXNzd29yZFZhbGlkKi9cbiAgICAgIGN0eDJbNl0pKSB7XG4gICAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IGJ1dHRvbl9kaXNhYmxlZF92YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRpbnB1dDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRpbnB1dDEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGFzc3dvcmRpbnB1dDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHBhc3N3b3JkaW5wdXQxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZvcm0pO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwYXNzd29yZGlucHV0MCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwYXNzd29yZGlucHV0MSk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDIpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBydW5fYWxsKGRpc3Bvc2UpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGsoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgcHJvZmlsZUxvYWRlciB9ID0gJCRwcm9wcztcbiAgbGV0IHsgbWVtYmVyIH0gPSAkJHByb3BzO1xuICBsZXQgY3VycmVudFBhc3N3b3JkVmFsdWUgPSBcIlwiO1xuICBsZXQgbmV3UGFzc3dvcmRWYWx1ZSA9IFwiXCI7XG4gIGxldCBjb25maXJtUGFzc3dvcmRWYWx1ZSA9IFwiXCI7XG4gIGxldCBjdXJyZW50UGFzc3dvcmRWYWxpZCA9IGZhbHNlO1xuICBsZXQgbmV3UGFzc3dvcmRWYWxpZCA9IGZhbHNlO1xuICBsZXQgY29uZmlybVBhc3N3b3JkVmFsaWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc3VibWl0UGFzc3dvcmRDaGFuZ2UoZSkge1xuICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBpZiAobWVtYmVyLmF1dGguaGFzUGFzc3dvcmQgJiYgIWN1cnJlbnRQYXNzd29yZFZhbGlkICYmICFuZXdQYXNzd29yZFZhbGlkICYmICFjb25maXJtUGFzc3dvcmRWYWxpZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKCFtZW1iZXIuYXV0aC5oYXNQYXNzd29yZCAmJiAhbmV3UGFzc3dvcmRWYWxpZCAmJiAhY29uZmlybVBhc3N3b3JkVmFsaWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgICQkaW52YWxpZGF0ZSg4LCBwcm9maWxlTG9hZGVyID0gdHJ1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgaWYgKG1lbWJlci5hdXRoLmhhc1Bhc3N3b3JkKSB7XG4gICAgICAgICAgY29uc3QgeyBfaW50ZXJuYWxVc2VPbmx5OiB7IG1lc3NhZ2U6IG1zZyB9IH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLnVwZGF0ZU1lbWJlckF1dGgoe1xuICAgICAgICAgICAgb2xkUGFzc3dvcmQ6IGN1cnJlbnRQYXNzd29yZFZhbHVlLFxuICAgICAgICAgICAgbmV3UGFzc3dvcmQ6IG5ld1Bhc3N3b3JkVmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBtZXNzYWdlID0gbXNnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHsgX2ludGVybmFsVXNlT25seTogeyBtZXNzYWdlOiBtc2cgfSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5zZXRQYXNzd29yZCh7IHBhc3N3b3JkOiBuZXdQYXNzd29yZFZhbHVlIH0pO1xuICAgICAgICAgICQkaW52YWxpZGF0ZSgwLCBtZW1iZXIuYXV0aC5oYXNQYXNzd29yZCA9IHRydWUsIG1lbWJlcik7XG4gICAgICAgICAgbWVzc2FnZSA9IG1zZztcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLl9zaG93TWVzc2FnZShtZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgICQkaW52YWxpZGF0ZSgxLCBjdXJyZW50UGFzc3dvcmRWYWx1ZSA9IFwiXCIpO1xuICAgICAgICAkJGludmFsaWRhdGUoMiwgbmV3UGFzc3dvcmRWYWx1ZSA9IFwiXCIpO1xuICAgICAgICAkJGludmFsaWRhdGUoMywgY29uZmlybVBhc3N3b3JkVmFsdWUgPSBcIlwiKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDgsIHByb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgd2luZG93LiRtZW1iZXJzdGFja0RvbS5fc2hvd01lc3NhZ2UoZXJyLm1lc3NhZ2UsIHRydWUpO1xuICAgICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0X3Bhc3N3b3JkVmFsdWVfYmluZGluZyh2YWx1ZSkge1xuICAgIGN1cnJlbnRQYXNzd29yZFZhbHVlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDEsIGN1cnJlbnRQYXNzd29yZFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0X3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3VycmVudFBhc3N3b3JkVmFsaWQgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoNCwgY3VycmVudFBhc3N3b3JkVmFsaWQpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXQwX3Bhc3N3b3JkVmFsdWVfYmluZGluZyh2YWx1ZSkge1xuICAgIG5ld1Bhc3N3b3JkVmFsdWUgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMiwgbmV3UGFzc3dvcmRWYWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcodmFsdWUpIHtcbiAgICBuZXdQYXNzd29yZFZhbGlkID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDUsIG5ld1Bhc3N3b3JkVmFsaWQpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkVmFsdWVfYmluZGluZyh2YWx1ZSkge1xuICAgIGNvbmZpcm1QYXNzd29yZFZhbHVlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDMsIGNvbmZpcm1QYXNzd29yZFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBwYXNzd29yZGlucHV0MV9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZyh2YWx1ZSkge1xuICAgIGNvbmZpcm1QYXNzd29yZFZhbGlkID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDYsIGNvbmZpcm1QYXNzd29yZFZhbGlkKTtcbiAgfVxuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJwcm9maWxlTG9hZGVyXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoOCwgcHJvZmlsZUxvYWRlciA9ICQkcHJvcHMyLnByb2ZpbGVMb2FkZXIpO1xuICAgIGlmIChcIm1lbWJlclwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIG1lbWJlciA9ICQkcHJvcHMyLm1lbWJlcik7XG4gIH07XG4gIHJldHVybiBbXG4gICAgbWVtYmVyLFxuICAgIGN1cnJlbnRQYXNzd29yZFZhbHVlLFxuICAgIG5ld1Bhc3N3b3JkVmFsdWUsXG4gICAgY29uZmlybVBhc3N3b3JkVmFsdWUsXG4gICAgY3VycmVudFBhc3N3b3JkVmFsaWQsXG4gICAgbmV3UGFzc3dvcmRWYWxpZCxcbiAgICBjb25maXJtUGFzc3dvcmRWYWxpZCxcbiAgICBzdWJtaXRQYXNzd29yZENoYW5nZSxcbiAgICBwcm9maWxlTG9hZGVyLFxuICAgIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRWYWx1ZV9iaW5kaW5nLFxuICAgIHBhc3N3b3JkaW5wdXRfcGFzc3dvcmRJbnB1dFZhbGlkX2JpbmRpbmcsXG4gICAgcGFzc3dvcmRpbnB1dDBfcGFzc3dvcmRWYWx1ZV9iaW5kaW5nLFxuICAgIHBhc3N3b3JkaW5wdXQwX3Bhc3N3b3JkSW5wdXRWYWxpZF9iaW5kaW5nLFxuICAgIHBhc3N3b3JkaW5wdXQxX3Bhc3N3b3JkVmFsdWVfYmluZGluZyxcbiAgICBwYXNzd29yZGlucHV0MV9wYXNzd29yZElucHV0VmFsaWRfYmluZGluZ1xuICBdO1xufVxudmFyIE1vYmlsZVBhc3N3b3JkSW5mb0NvbnRlbnQgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkaywgY3JlYXRlX2ZyYWdtZW50JEUsIHNhZmVfbm90X2VxdWFsLCB7IHByb2ZpbGVMb2FkZXI6IDgsIG1lbWJlcjogMCB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja182JDMoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBidXR0b247XG4gIGxldCBiYWNraWNvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgYmFja2ljb24gPSBuZXcgQmFja0ljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYmFja2ljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fcHJvZmlsZS1iYWNrLS1tb2JpbGVcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBidXR0b24pO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJhY2tpY29uLCBidXR0b24sIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY2xpY2tfaGFuZGxlciovXG4gICAgICAgICAgY3R4WzhdXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihiYWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChiYWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYmFja2ljb24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrJDcoY3R4KSB7XG4gIGxldCBtZW1iZXJzdGFja2ljb247XG4gIGxldCBjdXJyZW50O1xuICBtZW1iZXJzdGFja2ljb24gPSBuZXcgTWVtYmVyc3RhY2tJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtZW1iZXJzdGFja2ljb24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KG1lbWJlcnN0YWNraWNvbiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1lbWJlcnN0YWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChtZW1iZXJzdGFja2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtZW1iZXJzdGFja2ljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzUkMyhjdHgpIHtcbiAgbGV0IGltZztcbiAgbGV0IGltZ19zcmNfdmFsdWU7XG4gIGxldCBpbWdfYWx0X3ZhbHVlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBpbWcgPSBlbGVtZW50KFwiaW1nXCIpO1xuICAgICAgaWYgKCFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKiRhcHAqL1xuICAgICAgY3R4WzddLmJyYW5kaW5nLmxvZ28pKVxuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICBhdHRyKGltZywgXCJhbHRcIiwgaW1nX2FsdF92YWx1ZSA9IC8qJGFwcCovXG4gICAgICBjdHhbN10ubmFtZSk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBpbWcsIGFuY2hvcik7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTI4ICYmICFzcmNfdXJsX2VxdWFsKGltZy5zcmMsIGltZ19zcmNfdmFsdWUgPSAvKiRhcHAqL1xuICAgICAgY3R4Mls3XS5icmFuZGluZy5sb2dvKSkge1xuICAgICAgICBhdHRyKGltZywgXCJzcmNcIiwgaW1nX3NyY192YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRhcHAqL1xuICAgICAgMTI4ICYmIGltZ19hbHRfdmFsdWUgIT09IChpbWdfYWx0X3ZhbHVlID0gLyokYXBwKi9cbiAgICAgIGN0eDJbN10ubmFtZSkpIHtcbiAgICAgICAgYXR0cihpbWcsIFwiYWx0XCIsIGltZ19hbHRfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goaW1nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNCQ0KGN0eCkge1xuICBsZXQgcHJvZmlsZWxvYWRlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIHByb2ZpbGVsb2FkZXIgPSBuZXcgUHJvZmlsZUxvYWRlcih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZWxvYWRlci4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQocHJvZmlsZWxvYWRlciwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwcm9maWxlbG9hZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHByb2ZpbGVsb2FkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwcm9maWxlbG9hZGVyLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18zJDYoY3R4KSB7XG4gIGxldCBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50O1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheVByb2ZpbGU7XG4gIGxldCB1cGRhdGluZ19wcm9maWxlTG9hZGVyO1xuICBsZXQgdXBkYXRpbmdfbWVtYmVyO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gbW9iaWxlcGFzc3dvcmRpbmZvY29udGVudF9kaXNwbGF5UHJvZmlsZV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE3XSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gbW9iaWxlcGFzc3dvcmRpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMThdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X21lbWJlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE5XSh2YWx1ZSk7XG4gIH1cbiAgbGV0IG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfcHJvcHMgPSB7fTtcbiAgaWYgKFxuICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfcHJvcHMuZGlzcGxheVByb2ZpbGUgPSAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICBjdHhbMF07XG4gIH1cbiAgaWYgKFxuICAgIC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzZdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbW9iaWxlcGFzc3dvcmRpbmZvY29udGVudF9wcm9wcy5wcm9maWxlTG9hZGVyID0gLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNl07XG4gIH1cbiAgaWYgKFxuICAgIC8qbWVtYmVyKi9cbiAgICBjdHhbMV0gIT09IHZvaWQgMFxuICApIHtcbiAgICBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X3Byb3BzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgbW9iaWxlcGFzc3dvcmRpbmZvY29udGVudCA9IG5ldyBNb2JpbGVQYXNzd29yZEluZm9Db250ZW50KHsgcHJvcHM6IG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChtb2JpbGVwYXNzd29yZGluZm9jb250ZW50LCBcImRpc3BsYXlQcm9maWxlXCIsIG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfZGlzcGxheVByb2ZpbGVfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQobW9iaWxlcGFzc3dvcmRpbmZvY29udGVudCwgXCJwcm9maWxlTG9hZGVyXCIsIG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChtb2JpbGVwYXNzd29yZGluZm9jb250ZW50LCBcIm1lbWJlclwiLCBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X21lbWJlcl9iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobW9iaWxlcGFzc3dvcmRpbmZvY29udGVudC4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQobW9iaWxlcGFzc3dvcmRpbmZvY29udGVudCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmICghdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgJiYgZGlydHkgJiAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgPSB0cnVlO1xuICAgICAgICBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X2NoYW5nZXMuZGlzcGxheVByb2ZpbGUgPSAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXlQcm9maWxlID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19wcm9maWxlTG9hZGVyICYmIGRpcnR5ICYgLypwcm9maWxlTG9hZGVyKi9cbiAgICAgIDY0KSB7XG4gICAgICAgIHVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgPSB0cnVlO1xuICAgICAgICBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X2NoYW5nZXMucHJvZmlsZUxvYWRlciA9IC8qcHJvZmlsZUxvYWRlciovXG4gICAgICAgIGN0eDJbNl07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19tZW1iZXIgJiYgZGlydHkgJiAvKm1lbWJlciovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX21lbWJlciA9IHRydWU7XG4gICAgICAgIG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfY2hhbmdlcy5tZW1iZXIgPSAvKm1lbWJlciovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19tZW1iZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50LiRzZXQobW9iaWxlcGFzc3dvcmRpbmZvY29udGVudF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobW9iaWxlcGFzc3dvcmRpbmZvY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnQsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkOShjdHgpIHtcbiAgbGV0IG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnQ7XG4gIGxldCB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZTtcbiAgbGV0IHVwZGF0aW5nX3Byb2ZpbGVMb2FkZXI7XG4gIGxldCB1cGRhdGluZ19tZW1iZXI7XG4gIGxldCBjdXJyZW50O1xuICBmdW5jdGlvbiBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTRdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxNV0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTZdKHZhbHVlKTtcbiAgfVxuICBsZXQgbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9wcm9wcyA9IHt9O1xuICBpZiAoXG4gICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgY3R4WzBdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9wcm9wcy5kaXNwbGF5UHJvZmlsZSA9IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXTtcbiAgfVxuICBpZiAoXG4gICAgLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNl0gIT09IHZvaWQgMFxuICApIHtcbiAgICBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X3Byb3BzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs2XTtcbiAgfVxuICBpZiAoXG4gICAgLyptZW1iZXIqL1xuICAgIGN0eFsxXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfcHJvcHMubWVtYmVyID0gLyptZW1iZXIqL1xuICAgIGN0eFsxXTtcbiAgfVxuICBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50ID0gbmV3IE1vYmlsZVNlY3VyaXR5SW5mb0NvbnRlbnQoeyBwcm9wczogbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnQsIFwiZGlzcGxheVByb2ZpbGVcIiwgbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9kaXNwbGF5UHJvZmlsZV9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChtb2JpbGVzZWN1cml0eWluZm9jb250ZW50LCBcInByb2ZpbGVMb2FkZXJcIiwgbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnQsIFwibWVtYmVyXCIsIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtb2JpbGVzZWN1cml0eWluZm9jb250ZW50LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtb2JpbGVzZWN1cml0eWluZm9jb250ZW50LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSAmJiBkaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgMSkge1xuICAgICAgICB1cGRhdGluZ19kaXNwbGF5UHJvZmlsZSA9IHRydWU7XG4gICAgICAgIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfY2hhbmdlcy5kaXNwbGF5UHJvZmlsZSA9IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICBjdHgyWzBdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgJiYgZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgNjQpIHtcbiAgICAgICAgdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IHRydWU7XG4gICAgICAgIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfY2hhbmdlcy5wcm9maWxlTG9hZGVyID0gLypwcm9maWxlTG9hZGVyKi9cbiAgICAgICAgY3R4Mls2XTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX21lbWJlciAmJiBkaXJ0eSAmIC8qbWVtYmVyKi9cbiAgICAgIDIpIHtcbiAgICAgICAgdXBkYXRpbmdfbWVtYmVyID0gdHJ1ZTtcbiAgICAgICAgbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9jaGFuZ2VzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX21lbWJlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnQuJHNldChtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obW9iaWxlc2VjdXJpdHlpbmZvY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChtb2JpbGVzZWN1cml0eWluZm9jb250ZW50LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobW9iaWxlc2VjdXJpdHlpbmZvY29udGVudCwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSRjKGN0eCkge1xuICBsZXQgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50O1xuICBsZXQgdXBkYXRpbmdfbWVtYmVyO1xuICBsZXQgdXBkYXRpbmdfcHJvZmlsZUxvYWRlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIG1vYmlsZXByb2ZpbGVpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxMl0odmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIG1vYmlsZXByb2ZpbGVpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTNdKHZhbHVlKTtcbiAgfVxuICBsZXQgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50X3Byb3BzID0ge1xuICAgIGN1c3RvbUZpZWxkczogKFxuICAgICAgLyokYXBwKi9cbiAgICAgIGN0eFs3XS5jdXN0b21GaWVsZHNcbiAgICApXG4gIH07XG4gIGlmIChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50X3Byb3BzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgaWYgKFxuICAgIC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzZdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50X3Byb3BzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgIGN0eFs2XTtcbiAgfVxuICBtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnQgPSBuZXcgTW9iaWxlUHJvZmlsZUluZm9Db250ZW50KHsgcHJvcHM6IG1vYmlsZXByb2ZpbGVpbmZvY29udGVudF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKG1vYmlsZXByb2ZpbGVpbmZvY29udGVudCwgXCJtZW1iZXJcIiwgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50X21lbWJlcl9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnQsIFwicHJvZmlsZUxvYWRlclwiLCBtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobW9iaWxlcHJvZmlsZWluZm9jb250ZW50LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnQsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJGFwcCovXG4gICAgICAxMjgpXG4gICAgICAgIG1vYmlsZXByb2ZpbGVpbmZvY29udGVudF9jaGFuZ2VzLmN1c3RvbUZpZWxkcyA9IC8qJGFwcCovXG4gICAgICAgIGN0eDJbN10uY3VzdG9tRmllbGRzO1xuICAgICAgaWYgKCF1cGRhdGluZ19tZW1iZXIgJiYgZGlydHkgJiAvKm1lbWJlciovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX21lbWJlciA9IHRydWU7XG4gICAgICAgIG1vYmlsZXByb2ZpbGVpbmZvY29udGVudF9jaGFuZ2VzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX21lbWJlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcHJvZmlsZUxvYWRlciAmJiBkaXJ0eSAmIC8qcHJvZmlsZUxvYWRlciovXG4gICAgICA2NCkge1xuICAgICAgICB1cGRhdGluZ19wcm9maWxlTG9hZGVyID0gdHJ1ZTtcbiAgICAgICAgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50X2NoYW5nZXMucHJvZmlsZUxvYWRlciA9IC8qcHJvZmlsZUxvYWRlciovXG4gICAgICAgIGN0eDJbNl07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19wcm9maWxlTG9hZGVyID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgbW9iaWxlcHJvZmlsZWluZm9jb250ZW50LiRzZXQobW9iaWxlcHJvZmlsZWluZm9jb250ZW50X2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obW9iaWxlcHJvZmlsZWluZm9jb250ZW50LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KG1vYmlsZXByb2ZpbGVpbmZvY29udGVudC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1vYmlsZXByb2ZpbGVpbmZvY29udGVudCwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skZyhjdHgpIHtcbiAgbGV0IG1vYmlsZXByb2ZpbGVtb2RhbG5hdjtcbiAgbGV0IHVwZGF0aW5nX21lbWJlcjtcbiAgbGV0IHVwZGF0aW5nX2Rpc3BsYXlQcm9maWxlO1xuICBsZXQgdXBkYXRpbmdfcHJvZmlsZUxvYWRlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9tZW1iZXJfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFs5XSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gbW9iaWxlcHJvZmlsZW1vZGFsbmF2X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTBdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlbW9kYWxuYXZfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzExXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9wcm9wcyA9IHtcbiAgICBvblN1Y2Nlc3NMb2dvdXQ6IChcbiAgICAgIC8qb25TdWNjZXNzTG9nb3V0Ki9cbiAgICAgIGN0eFszXVxuICAgICksXG4gICAgaGlkZVByb2ZpbGVTZWN0aW9uOiAoXG4gICAgICAvKmhpZGVQcm9maWxlU2VjdGlvbiovXG4gICAgICBjdHhbNV1cbiAgICApXG4gIH07XG4gIGlmIChcbiAgICAvKm1lbWJlciovXG4gICAgY3R4WzFdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbW9iaWxlcHJvZmlsZW1vZGFsbmF2X3Byb3BzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgaWYgKFxuICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9wcm9wcy5kaXNwbGF5UHJvZmlsZSA9IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXTtcbiAgfVxuICBpZiAoXG4gICAgLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNl0gIT09IHZvaWQgMFxuICApIHtcbiAgICBtb2JpbGVwcm9maWxlbW9kYWxuYXZfcHJvcHMucHJvZmlsZUxvYWRlciA9IC8qcHJvZmlsZUxvYWRlciovXG4gICAgY3R4WzZdO1xuICB9XG4gIG1vYmlsZXByb2ZpbGVtb2RhbG5hdiA9IG5ldyBNb2JpbGVQcm9maWxlTW9kYWxOYXYoeyBwcm9wczogbW9iaWxlcHJvZmlsZW1vZGFsbmF2X3Byb3BzIH0pO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQobW9iaWxlcHJvZmlsZW1vZGFsbmF2LCBcIm1lbWJlclwiLCBtb2JpbGVwcm9maWxlbW9kYWxuYXZfbWVtYmVyX2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKG1vYmlsZXByb2ZpbGVtb2RhbG5hdiwgXCJkaXNwbGF5UHJvZmlsZVwiLCBtb2JpbGVwcm9maWxlbW9kYWxuYXZfZGlzcGxheVByb2ZpbGVfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQobW9iaWxlcHJvZmlsZW1vZGFsbmF2LCBcInByb2ZpbGVMb2FkZXJcIiwgbW9iaWxlcHJvZmlsZW1vZGFsbmF2X3Byb2ZpbGVMb2FkZXJfYmluZGluZykpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KG1vYmlsZXByb2ZpbGVtb2RhbG5hdi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQobW9iaWxlcHJvZmlsZW1vZGFsbmF2LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm9uU3VjY2Vzc0xvZ291dCovXG4gICAgICA4KVxuICAgICAgICBtb2JpbGVwcm9maWxlbW9kYWxuYXZfY2hhbmdlcy5vblN1Y2Nlc3NMb2dvdXQgPSAvKm9uU3VjY2Vzc0xvZ291dCovXG4gICAgICAgIGN0eDJbM107XG4gICAgICBpZiAoZGlydHkgJiAvKmhpZGVQcm9maWxlU2VjdGlvbiovXG4gICAgICAzMilcbiAgICAgICAgbW9iaWxlcHJvZmlsZW1vZGFsbmF2X2NoYW5nZXMuaGlkZVByb2ZpbGVTZWN0aW9uID0gLypoaWRlUHJvZmlsZVNlY3Rpb24qL1xuICAgICAgICBjdHgyWzVdO1xuICAgICAgaWYgKCF1cGRhdGluZ19tZW1iZXIgJiYgZGlydHkgJiAvKm1lbWJlciovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX21lbWJlciA9IHRydWU7XG4gICAgICAgIG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9jaGFuZ2VzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX21lbWJlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgJiYgZGlydHkgJiAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgPSB0cnVlO1xuICAgICAgICBtb2JpbGVwcm9maWxlbW9kYWxuYXZfY2hhbmdlcy5kaXNwbGF5UHJvZmlsZSA9IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICBjdHgyWzBdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZGlzcGxheVByb2ZpbGUgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3Byb2ZpbGVMb2FkZXIgJiYgZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgNjQpIHtcbiAgICAgICAgdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IHRydWU7XG4gICAgICAgIG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9jaGFuZ2VzLnByb2ZpbGVMb2FkZXIgPSAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgICBjdHgyWzZdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcHJvZmlsZUxvYWRlciA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIG1vYmlsZXByb2ZpbGVtb2RhbG5hdi4kc2V0KG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1vYmlsZXByb2ZpbGVtb2RhbG5hdi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChtb2JpbGVwcm9maWxlbW9kYWxuYXYuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtb2JpbGVwcm9maWxlbW9kYWxuYXYsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEQoY3R4KSB7XG4gIGxldCBkaXY1O1xuICBsZXQgZGl2MjtcbiAgbGV0IHQwO1xuICBsZXQgZGl2MTtcbiAgbGV0IGZpZ3VyZTtcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrMTtcbiAgbGV0IHQxO1xuICBsZXQgZGl2MDtcbiAgbGV0IGI7XG4gIGxldCB0MjtcbiAgbGV0IHQzO1xuICBsZXQgY2xvc2VidXR0b247XG4gIGxldCB0NDtcbiAgbGV0IGRpdjQ7XG4gIGxldCBkaXYzO1xuICBsZXQgdDU7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMTtcbiAgbGV0IGlmX2Jsb2NrMztcbiAgbGV0IHQ2O1xuICBsZXQgbW9kYWxmb290ZXI7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgaWZfYmxvY2swID0gKFxuICAgIC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIChjdHhbMF0gPT09IFwicHJvZmlsZVwiIHx8IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXSA9PT0gXCJjaGFuZ2VQYXNzd29yZFwiIHx8IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgIGN0eFswXSA9PT0gXCJzZWN1cml0eVwiKSAmJiBjcmVhdGVfaWZfYmxvY2tfNiQzKGN0eClcbiAgKTtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbY3JlYXRlX2lmX2Jsb2NrXzUkMywgY3JlYXRlX2Vsc2VfYmxvY2skN107XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmIChcbiAgICAgIC8qJGFwcCovXG4gICAgICBjdHgyWzddLmJyYW5kaW5nLmxvZ29cbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpO1xuICBpZl9ibG9jazEgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgY2xvc2VidXR0b24gPSBuZXcgQ2xvc2VCdXR0b24oe1xuICAgIHByb3BzOiB7IGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbNF1cbiAgICApIH1cbiAgfSk7XG4gIGxldCBpZl9ibG9jazIgPSAoXG4gICAgLypwcm9maWxlTG9hZGVyKi9cbiAgICBjdHhbNl0gJiYgY3JlYXRlX2lmX2Jsb2NrXzQkNCgpXG4gICk7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzXzEgPSBbY3JlYXRlX2lmX2Jsb2NrJGcsIGNyZWF0ZV9pZl9ibG9ja18xJGMsIGNyZWF0ZV9pZl9ibG9ja18yJDksIGNyZWF0ZV9pZl9ibG9ja18zJDZdO1xuICBjb25zdCBpZl9ibG9ja3NfMSA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKFxuICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICBjdHgyWzBdID09PSBcInByb2ZpbGUtbmF2XCJcbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIGN0eDJbMF0gPT09IFwicHJvZmlsZVwiXG4gICAgKVxuICAgICAgcmV0dXJuIDE7XG4gICAgaWYgKFxuICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICBjdHgyWzBdID09PSBcInNlY3VyaXR5XCJcbiAgICApXG4gICAgICByZXR1cm4gMjtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXlQcm9maWxlKi9cbiAgICAgIGN0eDJbMF0gPT09IFwiY2hhbmdlUGFzc3dvcmRcIlxuICAgIClcbiAgICAgIHJldHVybiAzO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAofihjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMSA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4KSkpIHtcbiAgICBpZl9ibG9jazMgPSBpZl9ibG9ja3NfMVtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMV0gPSBpZl9ibG9ja19jcmVhdG9yc18xW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF8xXShjdHgpO1xuICB9XG4gIG1vZGFsZm9vdGVyID0gbmV3IE1vZGFsRm9vdGVyKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2NSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGZpZ3VyZSA9IGVsZW1lbnQoXCJmaWd1cmVcIik7XG4gICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBiID0gZWxlbWVudChcImJcIik7XG4gICAgICB0MiA9IHRleHQoXG4gICAgICAgIC8qcHJvZmlsZVRpdGxlKi9cbiAgICAgICAgY3R4WzJdXG4gICAgICApO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjbG9zZWJ1dHRvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBkaXY0ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjMgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgIHQ1ID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazMpXG4gICAgICAgIGlmX2Jsb2NrMy5jKCk7XG4gICAgICB0NiA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KG1vZGFsZm9vdGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoZmlndXJlLCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2ZpZ3VyZSBtcy1tb2RhbF9fZmlndXJlLS1tb2JpbGVcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9faGVhZGVyLS1jZW50ZXJcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9faGVhZGVyLS1tb2JpbGVcIik7XG4gICAgICBhdHRyKGRpdjMsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fY29udGVudC0tbW9iaWxlXCIpO1xuICAgICAgYXR0cihkaXY0LCBcImNsYXNzXCIsIFwibXMtbW9kYWxfX2NvbnRlbnQgbXMtbW9kYWxfX2NvbnRlbnQtLXByb2ZpbGVcIik7XG4gICAgICBhdHRyKGRpdjUsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbCBtcy1tb2RhbC0tcHJvZmlsZVwiKTtcbiAgICAgIGF0dHIoZGl2NSwgXCJpZFwiLCBcIk1vYmlsZVByb2ZpbGVNb2RhbFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjUsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2NSwgZGl2Mik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAubShkaXYyLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0MCk7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBhcHBlbmQoZGl2MSwgZmlndXJlKTtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLm0oZmlndXJlLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgYik7XG4gICAgICBhcHBlbmQoYiwgdDIpO1xuICAgICAgYXBwZW5kKGRpdjIsIHQzKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjbG9zZWJ1dHRvbiwgZGl2MiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2NSwgdDQpO1xuICAgICAgYXBwZW5kKGRpdjUsIGRpdjQpO1xuICAgICAgYXBwZW5kKGRpdjQsIGRpdjMpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLm0oZGl2MywgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDUpO1xuICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMSkge1xuICAgICAgICBpZl9ibG9ja3NfMVtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMV0ubShkaXYzLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGFwcGVuZChkaXY1LCB0Nik7XG4gICAgICBtb3VudF9jb21wb25lbnQobW9kYWxmb290ZXIsIGRpdjUsIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmIChcbiAgICAgICAgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eDJbMF0gPT09IFwicHJvZmlsZVwiIHx8IC8qZGlzcGxheVByb2ZpbGUqL1xuICAgICAgICBjdHgyWzBdID09PSBcImNoYW5nZVBhc3N3b3JkXCIgfHwgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgIGN0eDJbMF0gPT09IFwic2VjdXJpdHlcIlxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypkaXNwbGF5UHJvZmlsZSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBjcmVhdGVfaWZfYmxvY2tfNiQzKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKGRpdjIsIHQwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMCwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ucChjdHgyLCBkaXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSwgMSk7XG4gICAgICAgIGlmX2Jsb2NrMS5tKGZpZ3VyZSwgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKnByb2ZpbGVUaXRsZSovXG4gICAgICA0KVxuICAgICAgICBzZXRfZGF0YShcbiAgICAgICAgICB0MixcbiAgICAgICAgICAvKnByb2ZpbGVUaXRsZSovXG4gICAgICAgICAgY3R4MlsyXVxuICAgICAgICApO1xuICAgICAgY29uc3QgY2xvc2VidXR0b25fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypjbG9zZU1vZGFsKi9cbiAgICAgIDE2KVxuICAgICAgICBjbG9zZWJ1dHRvbl9jaGFuZ2VzLmNsb3NlTW9kYWwgPSAvKmNsb3NlTW9kYWwqL1xuICAgICAgICBjdHgyWzRdO1xuICAgICAgY2xvc2VidXR0b24uJHNldChjbG9zZWJ1dHRvbl9jaGFuZ2VzKTtcbiAgICAgIGlmIChcbiAgICAgICAgLypwcm9maWxlTG9hZGVyKi9cbiAgICAgICAgY3R4Mls2XVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazIpIHtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKnByb2ZpbGVMb2FkZXIqL1xuICAgICAgICAgIDY0KSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGNyZWF0ZV9pZl9ibG9ja180JDQoKTtcbiAgICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazIubShkaXYzLCB0NSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazIsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazIgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBsZXQgcHJldmlvdXNfYmxvY2tfaW5kZXhfMSA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF8xO1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4XzEgPSBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF8xID09PSBwcmV2aW91c19ibG9ja19pbmRleF8xKSB7XG4gICAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4XzEpIHtcbiAgICAgICAgICBpZl9ibG9ja3NfMVtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMV0ucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpZl9ibG9jazMpIHtcbiAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NfMVtwcmV2aW91c19ibG9ja19pbmRleF8xXSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgaWZfYmxvY2tzXzFbcHJldmlvdXNfYmxvY2tfaW5kZXhfMV0gPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4XzEpIHtcbiAgICAgICAgICBpZl9ibG9jazMgPSBpZl9ibG9ja3NfMVtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMV07XG4gICAgICAgICAgaWYgKCFpZl9ibG9jazMpIHtcbiAgICAgICAgICAgIGlmX2Jsb2NrMyA9IGlmX2Jsb2Nrc18xW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF8xXSA9IGlmX2Jsb2NrX2NyZWF0b3JzXzFbY3VycmVudF9ibG9ja190eXBlX2luZGV4XzFdKGN0eDIpO1xuICAgICAgICAgICAgaWZfYmxvY2szLmMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWZfYmxvY2szLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMywgMSk7XG4gICAgICAgICAgaWZfYmxvY2szLm0oZGl2MywgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2szID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY2xvc2VidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szKTtcbiAgICAgIHRyYW5zaXRpb25faW4obW9kYWxmb290ZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSk7XG4gICAgICB0cmFuc2l0aW9uX291dChjbG9zZWJ1dHRvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMyk7XG4gICAgICB0cmFuc2l0aW9uX291dChtb2RhbGZvb3Rlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXY1KTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjbG9zZWJ1dHRvbik7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuZCgpO1xuICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMSkge1xuICAgICAgICBpZl9ibG9ja3NfMVtjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhfMV0uZCgpO1xuICAgICAgfVxuICAgICAgZGVzdHJveV9jb21wb25lbnQobW9kYWxmb290ZXIpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGooJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0ICRhcHA7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBBcHBTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSg3LCAkYXBwID0gJCR2YWx1ZSkpO1xuICBsZXQgeyBvblN1Y2Nlc3NMb2dvdXQgfSA9ICQkcHJvcHM7XG4gIGxldCB7IGNsb3NlTW9kYWwgfSA9ICQkcHJvcHM7XG4gIGxldCB7IGRpc3BsYXlQcm9maWxlID0gXCJwcm9maWxlLW5hdlwiIH0gPSAkJHByb3BzO1xuICBsZXQgeyBtZW1iZXIgfSA9ICQkcHJvcHM7XG4gIGxldCB7IHByb2ZpbGVUaXRsZSA9IG1lbWJlci5hdXRoLmVtYWlsIH0gPSAkJHByb3BzO1xuICBsZXQgaGlkZVByb2ZpbGVTZWN0aW9uMiA9IGZhbHNlO1xuICBsZXQgcHJvZmlsZUxvYWRlciA9IGZhbHNlO1xuICBpZiAoISRhcHAuY3VzdG9tRmllbGRzLmZpbHRlcigoZmllbGQpID0+ICFmaWVsZC5oaWRkZW4pLmxlbmd0aCkge1xuICAgIGRpc3BsYXlQcm9maWxlID0gXCJzZWN1cml0eVwiO1xuICAgIGhpZGVQcm9maWxlU2VjdGlvbjIgPSB0cnVlO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiAkJGludmFsaWRhdGUoMCwgZGlzcGxheVByb2ZpbGUgPSBcInByb2ZpbGUtbmF2XCIpO1xuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlbW9kYWxuYXZfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlbW9kYWxuYXZfZGlzcGxheVByb2ZpbGVfYmluZGluZyh2YWx1ZSkge1xuICAgIGRpc3BsYXlQcm9maWxlID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXlQcm9maWxlKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlbW9kYWxuYXZfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgcHJvZmlsZUxvYWRlciA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg2LCBwcm9maWxlTG9hZGVyKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nKHZhbHVlKSB7XG4gICAgcHJvZmlsZUxvYWRlciA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSg2LCBwcm9maWxlTG9hZGVyKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5UHJvZmlsZSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSk7XG4gIH1cbiAgZnVuY3Rpb24gbW9iaWxlc2VjdXJpdHlpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwcm9maWxlTG9hZGVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDYsIHByb2ZpbGVMb2FkZXIpO1xuICB9XG4gIGZ1bmN0aW9uIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X2Rpc3BsYXlQcm9maWxlX2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5UHJvZmlsZSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSk7XG4gIH1cbiAgZnVuY3Rpb24gbW9iaWxlcGFzc3dvcmRpbmZvY29udGVudF9wcm9maWxlTG9hZGVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwcm9maWxlTG9hZGVyID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDYsIHByb2ZpbGVMb2FkZXIpO1xuICB9XG4gIGZ1bmN0aW9uIG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfbWVtYmVyX2JpbmRpbmcodmFsdWUpIHtcbiAgICBtZW1iZXIgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgbWVtYmVyKTtcbiAgfVxuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJvblN1Y2Nlc3NMb2dvdXRcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgzLCBvblN1Y2Nlc3NMb2dvdXQgPSAkJHByb3BzMi5vblN1Y2Nlc3NMb2dvdXQpO1xuICAgIGlmIChcImNsb3NlTW9kYWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSg0LCBjbG9zZU1vZGFsID0gJCRwcm9wczIuY2xvc2VNb2RhbCk7XG4gICAgaWYgKFwiZGlzcGxheVByb2ZpbGVcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5UHJvZmlsZSA9ICQkcHJvcHMyLmRpc3BsYXlQcm9maWxlKTtcbiAgICBpZiAoXCJtZW1iZXJcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBtZW1iZXIgPSAkJHByb3BzMi5tZW1iZXIpO1xuICAgIGlmIChcInByb2ZpbGVUaXRsZVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIHByb2ZpbGVUaXRsZSA9ICQkcHJvcHMyLnByb2ZpbGVUaXRsZSk7XG4gIH07XG4gICQkc2VsZi4kJC51cGRhdGUgPSAoKSA9PiB7XG4gICAgaWYgKCQkc2VsZi4kJC5kaXJ0eSAmIC8qZGlzcGxheVByb2ZpbGUsIG1lbWJlciovXG4gICAgMykge1xuICAgICAgaWYgKGRpc3BsYXlQcm9maWxlID09PSBcInByb2ZpbGUtbmF2XCIpIHtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDIsIHByb2ZpbGVUaXRsZSA9IG1lbWJlci5hdXRoLmVtYWlsKTtcbiAgICAgIH0gZWxzZSBpZiAoZGlzcGxheVByb2ZpbGUgPT09IFwicHJvZmlsZVwiKSB7XG4gICAgICAgICQkaW52YWxpZGF0ZSgyLCBwcm9maWxlVGl0bGUgPSBcIk15IFByb2ZpbGVcIik7XG4gICAgICB9IGVsc2UgaWYgKGRpc3BsYXlQcm9maWxlID09PSBcInNlY3VyaXR5XCIpIHtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDIsIHByb2ZpbGVUaXRsZSA9IFwiU2VjdXJpdHlcIik7XG4gICAgICB9IGVsc2UgaWYgKGRpc3BsYXlQcm9maWxlID09PSBcImNoYW5nZVBhc3N3b3JkXCIpIHtcbiAgICAgICAgaWYgKCFtZW1iZXIuYXV0aC5oYXNQYXNzd29yZCkge1xuICAgICAgICAgICQkaW52YWxpZGF0ZSgyLCBwcm9maWxlVGl0bGUgPSBcIlNldCBQYXNzd29yZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkJGludmFsaWRhdGUoMiwgcHJvZmlsZVRpdGxlID0gXCJDaGFuZ2UgUGFzc3dvcmRcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheVByb2ZpbGUsXG4gICAgbWVtYmVyLFxuICAgIHByb2ZpbGVUaXRsZSxcbiAgICBvblN1Y2Nlc3NMb2dvdXQsXG4gICAgY2xvc2VNb2RhbCxcbiAgICBoaWRlUHJvZmlsZVNlY3Rpb24yLFxuICAgIHByb2ZpbGVMb2FkZXIsXG4gICAgJGFwcCxcbiAgICBjbGlja19oYW5kbGVyLFxuICAgIG1vYmlsZXByb2ZpbGVtb2RhbG5hdl9tZW1iZXJfYmluZGluZyxcbiAgICBtb2JpbGVwcm9maWxlbW9kYWxuYXZfZGlzcGxheVByb2ZpbGVfYmluZGluZyxcbiAgICBtb2JpbGVwcm9maWxlbW9kYWxuYXZfcHJvZmlsZUxvYWRlcl9iaW5kaW5nLFxuICAgIG1vYmlsZXByb2ZpbGVpbmZvY29udGVudF9tZW1iZXJfYmluZGluZyxcbiAgICBtb2JpbGVwcm9maWxlaW5mb2NvbnRlbnRfcHJvZmlsZUxvYWRlcl9iaW5kaW5nLFxuICAgIG1vYmlsZXNlY3VyaXR5aW5mb2NvbnRlbnRfZGlzcGxheVByb2ZpbGVfYmluZGluZyxcbiAgICBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZyxcbiAgICBtb2JpbGVzZWN1cml0eWluZm9jb250ZW50X21lbWJlcl9iaW5kaW5nLFxuICAgIG1vYmlsZXBhc3N3b3JkaW5mb2NvbnRlbnRfZGlzcGxheVByb2ZpbGVfYmluZGluZyxcbiAgICBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X3Byb2ZpbGVMb2FkZXJfYmluZGluZyxcbiAgICBtb2JpbGVwYXNzd29yZGluZm9jb250ZW50X21lbWJlcl9iaW5kaW5nXG4gIF07XG59XG52YXIgTW9iaWxlUHJvZmlsZU1vZGFsID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJGosIGNyZWF0ZV9mcmFnbWVudCRELCBzYWZlX25vdF9lcXVhbCwge1xuICAgICAgb25TdWNjZXNzTG9nb3V0OiAzLFxuICAgICAgY2xvc2VNb2RhbDogNCxcbiAgICAgIGRpc3BsYXlQcm9maWxlOiAwLFxuICAgICAgbWVtYmVyOiAxLFxuICAgICAgcHJvZmlsZVRpdGxlOiAyXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRfY3NzJGkodGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS01MGtudzJcIiwgXCJzdmcuc3ZlbHRlLTUwa253MntmaWxsOmN1cnJlbnRDb2xvcjt3aWR0aDo5cHg7aGVpZ2h0OmF1dG99XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEMoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTQ1OS0zODEgMzE0LTUyNnEtMy0zLTQuNS02LjVUMzA4LTU0MHEwLTggNS41LTE0dDE0LjUtNmgzMDRxOSAwIDE0LjUgNnQ1LjUgMTRxMCAyLTYgMTRMNTAxLTM4MXEtNSA1LTEwIDd0LTExIDJxLTYgMC0xMS0ydC0xMC03WlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMzA4IC01NjAgMzQ0IDE4OFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImNsYXNzXCIsIFwic3ZlbHRlLTUwa253MlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBBcnJvd0ljb24kMSA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkQywgc2FmZV9ub3RfZXF1YWwsIHt9LCBhZGRfY3NzJGkpO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyRoKHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtdzRrbWcwXCIsIFwiI1Rlc3RDYXJkTW9kYWwgLmNvcGllZHtiYWNrZ3JvdW5kLWNvbG9yOiMzZWI4NjIgIWltcG9ydGFudDtjb2xvcjojZmZmICFpbXBvcnRhbnR9I1Rlc3RDYXJkTW9kYWwgLmNvcGllZCBzdmd7b3BhY2l0eToxICFpbXBvcnRhbnR9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtbW9kYWxfX3RpdGxlLnN2ZWx0ZS13NGttZzB7dGV4dC1hbGlnbjpsZWZ0O21hcmdpbi1ib3R0b206NXB4O2ZvbnQtc2l6ZToyMHB4O2xpbmUtaGVpZ2h0OjI0cHh9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtdmlkZW8uc3ZlbHRlLXc0a21nMHt3aWR0aDoxMDAlO21hcmdpbi10b3A6MjBweDttYXJnaW4tYm90dG9tOjIwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O292ZXJmbG93OmhpZGRlbn0jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIHAuc3ZlbHRlLXc0a21nMHtjb2xvcjojNDQzO2ZvbnQtc2l6ZToxMXB4O2xpbmUtaGVpZ2h0OjE2LjVweDttYXJnaW4tYm90dG9tOjEwcHh9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCBwLm5vLW1hcmdpbi5zdmVsdGUtdzRrbWcwe21hcmdpbjowfSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgcCBhLnN2ZWx0ZS13NGttZzB7Y29sb3I6IzQ0Mztmb250LXdlaWdodDpib2xkO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtc3BsaXQtYnV0dG9uLnN2ZWx0ZS13NGttZzB7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1ib3R0b206MTBweDt3aWR0aDoxMDAlO2NvbG9yOiMyOTI5Mjk7Zm9udC1zaXplOjEzcHg7bGluZS1oZWlnaHQ6MX0jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIC5tcy1zcGxpdC1idXR0b25fX21haW4uc3ZlbHRlLXc0a21nMHtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjU7Ym9yZGVyOjAuNXB4IHNvbGlkICNkZGRmZWU7Ym9yZGVyLXJhZGl1czo2cHggMCAwIDZweDtwYWRkaW5nOjEwcHggMTVweDt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO2dhcDo2cHg7YWxpZ24taXRlbXM6Y2VudGVyO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAwLjJzfSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgLm1zLXNwbGl0LWJ1dHRvbl9fbWFpbiBzcGFuLnN2ZWx0ZS13NGttZzB7Zm9udC13ZWlnaHQ6Ym9sZH0jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIC5tcy1zcGxpdC1idXR0b25fX21haW4uc3ZlbHRlLXc0a21nMDpob3ZlcntiYWNrZ3JvdW5kOiNkZGRmZWV9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtc3BsaXQtYnV0dG9uX19zZWNvbmRhcnkuc3ZlbHRlLXc0a21nMHtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjU7Ym9yZGVyOjAuNXB4IHNvbGlkICNkZGRmZWU7Ym9yZGVyLXJhZGl1czowIDZweCA2cHggMDtwYWRkaW5nOjEwcHggMTVweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIDAuMnN9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtc3BsaXQtYnV0dG9uX19zZWNvbmRhcnkuc3ZlbHRlLXc0a21nMDpob3ZlcntiYWNrZ3JvdW5kOiNkZGRmZWV9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtc3BsaXQtYnV0dG9uX19zZWNvbmRhcnkuYWN0aXZlLnN2ZWx0ZS13NGttZzB7YmFja2dyb3VuZDojZGRkZmVlfSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgLm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd24uc3ZlbHRlLXc0a21nMHtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjU7Ym9yZGVyOjAuNXB4IHNvbGlkICNkZGRmZWU7Ym9yZGVyLXJhZGl1czo2cHg7Y29sb3I6IzQ0MztkaXNwbGF5Om5vbmU7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDoxMDAlO3otaW5kZXg6MjE0NzQ4MzY0OSAhaW1wb3J0YW50O3dpZHRoOmF1dG99I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtc3BsaXQtYnV0dG9uX19kcm9wZG93bi5zaG93LnN2ZWx0ZS13NGttZzB7ZGlzcGxheTpibG9ja30jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIC5tcy1zcGxpdC1idXR0b25fX2Ryb3Bkb3duIHNlY3Rpb24uc3ZlbHRlLXc0a21nMHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgLm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd24tdGl0bGUuc3ZlbHRlLXc0a21nMHtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjU7Y29sb3I6IzAwMDtmb250LXNpemU6MTFweDtmb250LXdlaWdodDpib2xkO2xpbmUtaGVpZ2h0OjE7cGFkZGluZzoxMHB4O2JvcmRlci1ib3R0b206MC41cHggc29saWQgI2RkZGZlZTt0ZXh0LWFsaWduOnJpZ2h0fSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgLm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd24gYnV0dG9uLnN2ZWx0ZS13NGttZzB7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbG9yOiM0NDM7Zm9udC1zaXplOjExcHg7bGluZS1oZWlnaHQ6MTtwYWRkaW5nOjEwcHg7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOnJpZ2h0O3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAwLjJzO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXJ9I1Rlc3RDYXJkTW9kYWwuc3ZlbHRlLXc0a21nMCAubXMtc3BsaXQtYnV0dG9uX19kcm9wZG93biBidXR0b24gLm1zLXNwbGl0LWJ1dHRvbl9fY29weS1pY29uLnN2ZWx0ZS13NGttZzB7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MjBweDtoZWlnaHQ6NXB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIC5tcy1zcGxpdC1idXR0b25fX2Ryb3Bkb3duIGJ1dHRvbi5zdmVsdGUtdzRrbWcwOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2RkZGZlZX1cXG4gICAgICAjVGVzdENhcmRNb2RhbFxcbiAgICAgICAgLm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd25cXG4gICAgICAgIGJ1dHRvblxcbiAgICAgICAgLm1zLXNwbGl0LWJ1dHRvbl9fY29weS1pY29uXFxuICAgICAgICBzdmdcXG4gICAge3Bvc2l0aW9uOmFic29sdXRlfVxcbiAgICAgICNUZXN0Q2FyZE1vZGFsXFxuICAgICAgICAubXMtc3BsaXQtYnV0dG9uX19kcm9wZG93blxcbiAgICAgICAgYnV0dG9uOmhvdmVyXFxuICAgICAgICAubXMtc3BsaXQtYnV0dG9uX19jb3B5LWljb25cXG4gICAgICAgIHN2Z1xcbiAgICB7b3BhY2l0eToxfVxcbiAgICAgICNUZXN0Q2FyZE1vZGFsXFxuICAgICAgICAubXMtc3BsaXQtYnV0dG9uX19kcm9wZG93blxcbiAgICAgICAgYnV0dG9uXFxuICAgICAgICAubXMtc3BsaXQtYnV0dG9uX19jb3B5LWljb25cXG4gICAgICAgIHN2Z1xcbiAgICB7b3BhY2l0eTowfSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgLm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd24gYnV0dG9uIHNwYW4uc3ZlbHRlLXc0a21nMHtmb250LXdlaWdodDpib2xkfSNUZXN0Q2FyZE1vZGFsLnN2ZWx0ZS13NGttZzAgLm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd24tZm9vdGVyLnN2ZWx0ZS13NGttZzB7YmFja2dyb3VuZC1jb2xvcjojZjVmNWY1O2NvbG9yOiMwMDA7Zm9udC1zaXplOjExcHg7bGluZS1oZWlnaHQ6MTtmb250LXdlaWdodDpib2xkO3BhZGRpbmc6MTBweDt0ZXh0LWFsaWduOmNlbnRlcn0jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIC5tcy1zcGxpdC1idXR0b25fX2Ryb3Bkb3duLWZvb3RlciBhLnN2ZWx0ZS13NGttZzB7Y29sb3I6IzI5NjJmZjt0ZXh0LWRlY29yYXRpb246bm9uZX0jVGVzdENhcmRNb2RhbC5zdmVsdGUtdzRrbWcwIC5tcy1zdWJtaXQtYnV0dG9uLnN2ZWx0ZS13NGttZzB7YmFja2dyb3VuZC1jb2xvcjojNDM0ZGU3O2JvcmRlci1yYWRpdXM6NnB4O2NvbG9yOiNmZmY7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxO3BhZGRpbmc6MTZweDt3aWR0aDoxMDAlfVwiKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRmKGN0eCkge1xuICBsZXQgY2xvc2VidXR0b247XG4gIGxldCBjdXJyZW50O1xuICBjbG9zZWJ1dHRvbiA9IG5ldyBDbG9zZUJ1dHRvbih7XG4gICAgcHJvcHM6IHsgY2xvc2VNb2RhbDogKFxuICAgICAgLypjbG9zZU1vZGFsKi9cbiAgICAgIGN0eFswXVxuICAgICkgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjbG9zZWJ1dHRvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoY2xvc2VidXR0b24sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY2xvc2VidXR0b25fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypjbG9zZU1vZGFsKi9cbiAgICAgIDEpXG4gICAgICAgIGNsb3NlYnV0dG9uX2NoYW5nZXMuY2xvc2VNb2RhbCA9IC8qY2xvc2VNb2RhbCovXG4gICAgICAgIGN0eDJbMF07XG4gICAgICBjbG9zZWJ1dHRvbi4kc2V0KGNsb3NlYnV0dG9uX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY2xvc2VidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY2xvc2VidXR0b24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjbG9zZWJ1dHRvbiwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkQihjdHgpIHtcbiAgbGV0IGRpdjU7XG4gIGxldCB0MDtcbiAgbGV0IGRpdjQ7XG4gIGxldCBoMjtcbiAgbGV0IHQyO1xuICBsZXQgcDA7XG4gIGxldCB0NDtcbiAgbGV0IHZpZGVvO1xuICBsZXQgc291cmNlMDtcbiAgbGV0IHNvdXJjZTBfc3JjX3ZhbHVlO1xuICBsZXQgc291cmNlMTtcbiAgbGV0IHNvdXJjZTFfc3JjX3ZhbHVlO1xuICBsZXQgdDU7XG4gIGxldCBkaXYzO1xuICBsZXQgYnV0dG9uMDtcbiAgbGV0IGNvcHlpY29uMDtcbiAgbGV0IHQ2O1xuICBsZXQgdDc7XG4gIGxldCBzcGFuMDtcbiAgbGV0IHQ5O1xuICBsZXQgYnV0dG9uMTtcbiAgbGV0IGFycm93aWNvbjtcbiAgbGV0IHQxMDtcbiAgbGV0IG5hdjtcbiAgbGV0IHNlY3Rpb24wO1xuICBsZXQgZGl2MDtcbiAgbGV0IHQxMjtcbiAgbGV0IGJ1dHRvbjI7XG4gIGxldCBzcGFuMTtcbiAgbGV0IGNvcHlpY29uMTtcbiAgbGV0IHNwYW4yO1xuICBsZXQgdDE1O1xuICBsZXQgYnV0dG9uMztcbiAgbGV0IHNwYW4zO1xuICBsZXQgY29weWljb24yO1xuICBsZXQgc3BhbjQ7XG4gIGxldCB0MTg7XG4gIGxldCBidXR0b240O1xuICBsZXQgc3BhbjU7XG4gIGxldCBjb3B5aWNvbjM7XG4gIGxldCBzcGFuNjtcbiAgbGV0IHQyMTtcbiAgbGV0IHNlY3Rpb24xO1xuICBsZXQgZGl2MTtcbiAgbGV0IHQyMztcbiAgbGV0IGJ1dHRvbjU7XG4gIGxldCBzcGFuNztcbiAgbGV0IGNvcHlpY29uNDtcbiAgbGV0IHNwYW44O1xuICBsZXQgdDI2O1xuICBsZXQgYnV0dG9uNjtcbiAgbGV0IHNwYW45O1xuICBsZXQgY29weWljb241O1xuICBsZXQgc3BhbjEwO1xuICBsZXQgdDI5O1xuICBsZXQgZGl2MjtcbiAgbGV0IHQzMztcbiAgbGV0IHAxO1xuICBsZXQgdDM1O1xuICBsZXQgYnV0dG9uNztcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbGV0IGlmX2Jsb2NrID0gKCEvKnBhcmFtcyovXG4gIGN0eFsyXSB8fCAhLypwYXJhbXMqL1xuICBjdHhbMl0uaGlkZUNsb3NlQnV0dG9uKSAmJiBjcmVhdGVfaWZfYmxvY2skZihjdHgpO1xuICBjb3B5aWNvbjAgPSBuZXcgQ29weUljb24kMSh7fSk7XG4gIGFycm93aWNvbiA9IG5ldyBBcnJvd0ljb24kMSh7fSk7XG4gIGNvcHlpY29uMSA9IG5ldyBDb3B5SWNvbiQxKHt9KTtcbiAgY29weWljb24yID0gbmV3IENvcHlJY29uJDEoe30pO1xuICBjb3B5aWNvbjMgPSBuZXcgQ29weUljb24kMSh7fSk7XG4gIGNvcHlpY29uNCA9IG5ldyBDb3B5SWNvbiQxKHt9KTtcbiAgY29weWljb241ID0gbmV3IENvcHlJY29uJDEoe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXY1ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBoMiA9IGVsZW1lbnQoXCJoMlwiKTtcbiAgICAgIGgyLnRleHRDb250ZW50ID0gXCJDb3B5IFN0cmlwZSBUZXN0IENhcmRcIjtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIHAwID0gZWxlbWVudChcInBcIik7XG4gICAgICBwMC50ZXh0Q29udGVudCA9IFwiVGVzdCBtb2RlIG9ubHkuIExpdmUgbWVtYmVycyB3aWxsIG5ldmVyIHNlZSB0aGlzIG1vZGFsLlwiO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgdmlkZW8gPSBlbGVtZW50KFwidmlkZW9cIik7XG4gICAgICBzb3VyY2UwID0gZWxlbWVudChcInNvdXJjZVwiKTtcbiAgICAgIHNvdXJjZTEgPSBlbGVtZW50KFwic291cmNlXCIpO1xuICAgICAgdDUgPSBzcGFjZSgpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24wID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWljb24wLiQkLmZyYWdtZW50KTtcbiAgICAgIHQ2ID0gc3BhY2UoKTtcbiAgICAgIHQ3ID0gdGV4dChcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4WzNdXG4gICAgICApO1xuICAgICAgc3BhbjAgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4wLnRleHRDb250ZW50ID0gXCIuLi40MjQyXCI7XG4gICAgICB0OSA9IHNwYWNlKCk7XG4gICAgICBidXR0b24xID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYXJyb3dpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxMCA9IHNwYWNlKCk7XG4gICAgICBuYXYgPSBlbGVtZW50KFwibmF2XCIpO1xuICAgICAgc2VjdGlvbjAgPSBlbGVtZW50KFwic2VjdGlvblwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MC50ZXh0Q29udGVudCA9IFwiVGVzdCBTdWNjZXNzZnVsIFBheW1lbnRzXCI7XG4gICAgICB0MTIgPSBzcGFjZSgpO1xuICAgICAgYnV0dG9uMiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuMSA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5aWNvbjEuJCQuZnJhZ21lbnQpO1xuICAgICAgc3BhbjIgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4yLmlubmVySFRNTCA9IGBWaXNhIERlYml0IDxiPi4uLjU1NTY8L2I+YDtcbiAgICAgIHQxNSA9IHNwYWNlKCk7XG4gICAgICBidXR0b24zID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHNwYW4zID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlpY29uMi4kJC5mcmFnbWVudCk7XG4gICAgICBzcGFuNCA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3BhbjQuaW5uZXJIVE1MID0gYE1hc3RlcmNhcmQgPGI+Li4uNDQ0NDwvYj5gO1xuICAgICAgdDE4ID0gc3BhY2UoKTtcbiAgICAgIGJ1dHRvbjQgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgc3BhbjUgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWljb24zLiQkLmZyYWdtZW50KTtcbiAgICAgIHNwYW42ID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuNi5pbm5lckhUTUwgPSBgQW1lcmljYW4gRXhwcmVzcyA8Yj4uLi4xMDAwNTwvYj5gO1xuICAgICAgdDIxID0gc3BhY2UoKTtcbiAgICAgIHNlY3Rpb24xID0gZWxlbWVudChcInNlY3Rpb25cIik7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjEudGV4dENvbnRlbnQgPSBcIlRlc3QgRGVjbGluZWQgUGF5bWVudHNcIjtcbiAgICAgIHQyMyA9IHNwYWNlKCk7XG4gICAgICBidXR0b241ID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHNwYW43ID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlpY29uNC4kJC5mcmFnbWVudCk7XG4gICAgICBzcGFuOCA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3BhbjguaW5uZXJIVE1MID0gYEdlbmVyaWMgZGVjbGluZSA8Yj4uLi4wMDAyPC9iPmA7XG4gICAgICB0MjYgPSBzcGFjZSgpO1xuICAgICAgYnV0dG9uNiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuOSA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5aWNvbjUuJCQuZnJhZ21lbnQpO1xuICAgICAgc3BhbjEwID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuMTAuaW5uZXJIVE1MID0gYEluc3VmZmljaWVudCBmdW5kcyA8Yj4uLi45OTk1PC9iPmA7XG4gICAgICB0MjkgPSBzcGFjZSgpO1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYyLmlubmVySFRNTCA9IGBDb21wbGV0ZSBsaXN0IG9mIDxhIGhyZWY9XCJodHRwczovL3N0cmlwZS5jb20vZG9jcy90ZXN0aW5nXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJzdmVsdGUtdzRrbWcwXCI+YWx0ZXJuYXRpdmUgdGVzdCBjYXJkczwvYT4uYDtcbiAgICAgIHQzMyA9IHNwYWNlKCk7XG4gICAgICBwMSA9IGVsZW1lbnQoXCJwXCIpO1xuICAgICAgcDEudGV4dENvbnRlbnQgPSBcIlBhc3RlIHRoZSBjYXJkIG51bWJlciBvbiB0aGUgbmV4dCBzY3JlZW4sIHdpdGggYW55IENWQyxcXG4gICAgICBleHBpcmF0aW9uIGRhdGUsIGFuZCBaSVAgY29kZS5cIjtcbiAgICAgIHQzNSA9IHNwYWNlKCk7XG4gICAgICBidXR0b243ID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbjcudGV4dENvbnRlbnQgPSBcIkNvbnRpbnVlIHRvIFRlc3QgQ2hlY2tvdXRcIjtcbiAgICAgIGF0dHIoaDIsIFwiY2xhc3NcIiwgXCJtcy1tb2RhbF9fdGl0bGUgc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoaDIsIFwiZGF0YS1jb3B5LWJ0blwiLCBcIlwiKTtcbiAgICAgIGF0dHIocDAsIFwiY2xhc3NcIiwgXCJuby1tYXJnaW4gc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGlmICghc3JjX3VybF9lcXVhbChzb3VyY2UwLnNyYywgc291cmNlMF9zcmNfdmFsdWUgPSB2aWRlb01QNFBhdGgpKVxuICAgICAgICBhdHRyKHNvdXJjZTAsIFwic3JjXCIsIHNvdXJjZTBfc3JjX3ZhbHVlKTtcbiAgICAgIGF0dHIoc291cmNlMCwgXCJ0eXBlXCIsIFwidmlkZW8vbXA0XCIpO1xuICAgICAgaWYgKCFzcmNfdXJsX2VxdWFsKHNvdXJjZTEuc3JjLCBzb3VyY2UxX3NyY192YWx1ZSA9IHZpZGVvV2ViTVBhdGgpKVxuICAgICAgICBhdHRyKHNvdXJjZTEsIFwic3JjXCIsIHNvdXJjZTFfc3JjX3ZhbHVlKTtcbiAgICAgIGF0dHIoc291cmNlMSwgXCJ0eXBlXCIsIFwidmlkZW8vd2VibVwiKTtcbiAgICAgIHZpZGVvLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgIHZpZGVvLmxvb3AgPSB0cnVlO1xuICAgICAgdmlkZW8ubXV0ZWQgPSB0cnVlO1xuICAgICAgdmlkZW8ucGxheXNJbmxpbmUgPSB0cnVlO1xuICAgICAgYXR0cih2aWRlbywgXCJjbGFzc1wiLCBcIm1zLXZpZGVvIHN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKHZpZGVvLCBcInBvc3RlclwiLCB2aWRlb0ltYWdlUGF0aCk7XG4gICAgICBhdHRyKHNwYW4wLCBcImNsYXNzXCIsIFwic3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMCwgXCJjbGFzc1wiLCBcIm1zLXNwbGl0LWJ1dHRvbl9fbWFpbiBzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihidXR0b24xLCBcImNsYXNzXCIsIFwibXMtc3BsaXQtYnV0dG9uX19zZWNvbmRhcnkgc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgXCJhY3RpdmVcIixcbiAgICAgICAgLypzaG93RHJvcGRvd24qL1xuICAgICAgICBjdHhbNF1cbiAgICAgICk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1zcGxpdC1idXR0b25fX2Ryb3Bkb3duLXRpdGxlIHN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKHNwYW4xLCBcImNsYXNzXCIsIFwibXMtc3BsaXQtYnV0dG9uX19jb3B5LWljb24gc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoc3BhbjIsIFwiY2xhc3NcIiwgXCJzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihidXR0b24yLCBcImNsYXNzXCIsIFwic3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoc3BhbjMsIFwiY2xhc3NcIiwgXCJtcy1zcGxpdC1idXR0b25fX2NvcHktaWNvbiBzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihzcGFuNCwgXCJjbGFzc1wiLCBcInN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKGJ1dHRvbjMsIFwiY2xhc3NcIiwgXCJzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihzcGFuNSwgXCJjbGFzc1wiLCBcIm1zLXNwbGl0LWJ1dHRvbl9fY29weS1pY29uIHN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKHNwYW42LCBcImNsYXNzXCIsIFwic3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uNCwgXCJjbGFzc1wiLCBcInN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKHNlY3Rpb24wLCBcImNsYXNzXCIsIFwic3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLXNwbGl0LWJ1dHRvbl9fZHJvcGRvd24tdGl0bGUgc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoc3BhbjcsIFwiY2xhc3NcIiwgXCJtcy1zcGxpdC1idXR0b25fX2NvcHktaWNvbiBzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihzcGFuOCwgXCJjbGFzc1wiLCBcInN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKGJ1dHRvbjUsIFwiY2xhc3NcIiwgXCJzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihzcGFuOSwgXCJjbGFzc1wiLCBcIm1zLXNwbGl0LWJ1dHRvbl9fY29weS1pY29uIHN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKHNwYW4xMCwgXCJjbGFzc1wiLCBcInN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKGJ1dHRvbjYsIFwiY2xhc3NcIiwgXCJzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihzZWN0aW9uMSwgXCJjbGFzc1wiLCBcInN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1zcGxpdC1idXR0b25fX2Ryb3Bkb3duLWZvb3RlciBzdmVsdGUtdzRrbWcwXCIpO1xuICAgICAgYXR0cihuYXYsIFwiY2xhc3NcIiwgXCJtcy1zcGxpdC1idXR0b25fX2Ryb3Bkb3duIHN2ZWx0ZS13NGttZzBcIik7XG4gICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgIG5hdixcbiAgICAgICAgXCJzaG93XCIsXG4gICAgICAgIC8qc2hvd0Ryb3Bkb3duKi9cbiAgICAgICAgY3R4WzRdXG4gICAgICApO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtc3BsaXQtYnV0dG9uIHN2ZWx0ZS13NGttZzBcIik7XG4gICAgICBhdHRyKHAxLCBcImNsYXNzXCIsIFwic3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uNywgXCJjbGFzc1wiLCBcIm1zLXN1Ym1pdC1idXR0b24gc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoZGl2NCwgXCJjbGFzc1wiLCBcIm1zLW1vZGFsX19jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXY1LCBcImNsYXNzXCIsIFwibXMtbW9kYWwgc3ZlbHRlLXc0a21nMFwiKTtcbiAgICAgIGF0dHIoZGl2NSwgXCJpZFwiLCBcIlRlc3RDYXJkTW9kYWxcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXY1LCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKGRpdjUsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjUsIHQwKTtcbiAgICAgIGFwcGVuZChkaXY1LCBkaXY0KTtcbiAgICAgIGFwcGVuZChkaXY0LCBoMik7XG4gICAgICBhcHBlbmQoZGl2NCwgdDIpO1xuICAgICAgYXBwZW5kKGRpdjQsIHAwKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0NCk7XG4gICAgICBhcHBlbmQoZGl2NCwgdmlkZW8pO1xuICAgICAgYXBwZW5kKHZpZGVvLCBzb3VyY2UwKTtcbiAgICAgIGFwcGVuZCh2aWRlbywgc291cmNlMSk7XG4gICAgICBhcHBlbmQoZGl2NCwgdDUpO1xuICAgICAgYXBwZW5kKGRpdjQsIGRpdjMpO1xuICAgICAgYXBwZW5kKGRpdjMsIGJ1dHRvbjApO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlpY29uMCwgYnV0dG9uMCwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMCwgdDYpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjAsIHQ3KTtcbiAgICAgIGFwcGVuZChidXR0b24wLCBzcGFuMCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDkpO1xuICAgICAgYXBwZW5kKGRpdjMsIGJ1dHRvbjEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGFycm93aWNvbiwgYnV0dG9uMSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDEwKTtcbiAgICAgIGFwcGVuZChkaXYzLCBuYXYpO1xuICAgICAgYXBwZW5kKG5hdiwgc2VjdGlvbjApO1xuICAgICAgYXBwZW5kKHNlY3Rpb24wLCBkaXYwKTtcbiAgICAgIGFwcGVuZChzZWN0aW9uMCwgdDEyKTtcbiAgICAgIGFwcGVuZChzZWN0aW9uMCwgYnV0dG9uMik7XG4gICAgICBhcHBlbmQoYnV0dG9uMiwgc3BhbjEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlpY29uMSwgc3BhbjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjIsIHNwYW4yKTtcbiAgICAgIGFwcGVuZChzZWN0aW9uMCwgdDE1KTtcbiAgICAgIGFwcGVuZChzZWN0aW9uMCwgYnV0dG9uMyk7XG4gICAgICBhcHBlbmQoYnV0dG9uMywgc3BhbjMpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlpY29uMiwgc3BhbjMsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjMsIHNwYW40KTtcbiAgICAgIGFwcGVuZChzZWN0aW9uMCwgdDE4KTtcbiAgICAgIGFwcGVuZChzZWN0aW9uMCwgYnV0dG9uNCk7XG4gICAgICBhcHBlbmQoYnV0dG9uNCwgc3BhbjUpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlpY29uMywgc3BhbjUsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjQsIHNwYW42KTtcbiAgICAgIGFwcGVuZChuYXYsIHQyMSk7XG4gICAgICBhcHBlbmQobmF2LCBzZWN0aW9uMSk7XG4gICAgICBhcHBlbmQoc2VjdGlvbjEsIGRpdjEpO1xuICAgICAgYXBwZW5kKHNlY3Rpb24xLCB0MjMpO1xuICAgICAgYXBwZW5kKHNlY3Rpb24xLCBidXR0b241KTtcbiAgICAgIGFwcGVuZChidXR0b241LCBzcGFuNyk7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWljb240LCBzcGFuNywgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uNSwgc3BhbjgpO1xuICAgICAgYXBwZW5kKHNlY3Rpb24xLCB0MjYpO1xuICAgICAgYXBwZW5kKHNlY3Rpb24xLCBidXR0b242KTtcbiAgICAgIGFwcGVuZChidXR0b242LCBzcGFuOSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWljb241LCBzcGFuOSwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uNiwgc3BhbjEwKTtcbiAgICAgIGFwcGVuZChuYXYsIHQyOSk7XG4gICAgICBhcHBlbmQobmF2LCBkaXYyKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0MzMpO1xuICAgICAgYXBwZW5kKGRpdjQsIHAxKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0MzUpO1xuICAgICAgYXBwZW5kKGRpdjQsIGJ1dHRvbjcpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IFtcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24wLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICAgIGN0eFs3XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8xKi9cbiAgICAgICAgICAgIGN0eFs4XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMixcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8yKi9cbiAgICAgICAgICAgIGN0eFs5XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMyxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8zKi9cbiAgICAgICAgICAgIGN0eFsxMF1cbiAgICAgICAgICApLFxuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjQsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfNCovXG4gICAgICAgICAgICBjdHhbMTFdXG4gICAgICAgICAgKSxcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b241LFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypjbGlja19oYW5kbGVyXzUqL1xuICAgICAgICAgICAgY3R4WzEyXVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uNixcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl82Ki9cbiAgICAgICAgICAgIGN0eFsxM11cbiAgICAgICAgICApLFxuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGJ1dHRvbjcsXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfNyovXG4gICAgICAgICAgICBjdHhbMTRdXG4gICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCEvKnBhcmFtcyovXG4gICAgICBjdHgyWzJdIHx8ICEvKnBhcmFtcyovXG4gICAgICBjdHgyWzJdLmhpZGVDbG9zZUJ1dHRvbikge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKnBhcmFtcyovXG4gICAgICAgICAgNCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrJGYoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oZGl2NSwgdDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypidXR0b25UZXh0Ki9cbiAgICAgIDgpXG4gICAgICAgIHNldF9kYXRhKFxuICAgICAgICAgIHQ3LFxuICAgICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgICAgY3R4MlszXVxuICAgICAgICApO1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypzaG93RHJvcGRvd24qL1xuICAgICAgMTYpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIGJ1dHRvbjEsXG4gICAgICAgICAgXCJhY3RpdmVcIixcbiAgICAgICAgICAvKnNob3dEcm9wZG93biovXG4gICAgICAgICAgY3R4Mls0XVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypzaG93RHJvcGRvd24qL1xuICAgICAgMTYpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIG5hdixcbiAgICAgICAgICBcInNob3dcIixcbiAgICAgICAgICAvKnNob3dEcm9wZG93biovXG4gICAgICAgICAgY3R4Mls0XVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5aWNvbjAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYXJyb3dpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlpY29uMS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5aWNvbjIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWljb24zLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlpY29uNC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5aWNvbjUuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWljb24wLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChhcnJvd2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlpY29uMS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWljb24yLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5aWNvbjMuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlpY29uNC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWljb241LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjUpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5kKCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5aWNvbjApO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYXJyb3dpY29uKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlpY29uMSk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5aWNvbjIpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWljb24zKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlpY29uNCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5aWNvbjUpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgcnVuX2FsbChkaXNwb3NlKTtcbiAgICB9XG4gIH07XG59XG52YXIgdmlkZW9JbWFnZVBhdGggPSBcImh0dHBzOi8vYXNzZXRzLWdsb2JhbC53ZWJzaXRlLWZpbGVzLmNvbS82NWE2ZDg3ZjdhZTMwODQ0Y2RlMDkxMWIvNjVlZmEwZDlkYzMwMTliNjlmZTZhOWNiXzQyNDIlMjBmdWxsLXBvc3Rlci0wMDAwMS5qcGdcIjtcbnZhciB2aWRlb01QNFBhdGggPSBcImh0dHBzOi8vYXNzZXRzLWdsb2JhbC53ZWJzaXRlLWZpbGVzLmNvbS82NWE2ZDg3ZjdhZTMwODQ0Y2RlMDkxMWIvNjVlZmEwZDlkYzMwMTliNjlmZTZhOWNiXzQyNDIlMjBmdWxsLXRyYW5zY29kZS5tcDRcIjtcbnZhciB2aWRlb1dlYk1QYXRoID0gXCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1ZWZhMGQ5ZGMzMDE5YjY5ZmU2YTljYl80MjQyJTIwZnVsbC10cmFuc2NvZGUud2VibVwiO1xuZnVuY3Rpb24gaW5zdGFuY2UkaSgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyBjbG9zZU1vZGFsIH0gPSAkJHByb3BzO1xuICBsZXQgeyBkaXNwbGF5IH0gPSAkJHByb3BzO1xuICBsZXQgeyBvblN1Y2Nlc3NTdWJtaXQgfSA9ICQkcHJvcHM7XG4gIGxldCB7IHBhcmFtcyB9ID0gJCRwcm9wcztcbiAgbGV0IGJ1dHRvblRleHQgPSBcIkNvcHkgU3RyaXBlIFRlc3QgQ2FyZFwiO1xuICBsZXQgc2hvd0Ryb3Bkb3duID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNvcHlUb0NsaXBib2FyZChldmVudCwgY29weVRleHQsIGNoYW5nZVRleHQpIHtcbiAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChjb3B5VGV4dCk7XG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICBpZiAoY2hhbmdlVGV4dClcbiAgICAgICQkaW52YWxpZGF0ZSgzLCBidXR0b25UZXh0ID0gXCJDb3BpZWQgU3RyaXBlIFRlc3QgQ2FyZFwiKTtcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcImNvcGllZFwiKTtcbiAgICBzZXRUaW1lb3V0KFxuICAgICAgKCkgPT4ge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNvcGllZFwiKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDMsIGJ1dHRvblRleHQgPSBcIkNvcHkgU3RyaXBlIFRlc3QgQ2FyZFwiKTtcbiAgICAgICAgJCRpbnZhbGlkYXRlKDQsIHNob3dEcm9wZG93biA9IGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICAxZTNcbiAgICApO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoZXZlbnQpID0+IGNvcHlUb0NsaXBib2FyZChldmVudCwgXCI0MjQyIDQyNDIgNDI0MiA0MjQyXCIsIHRydWUpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAoKSA9PiAkJGludmFsaWRhdGUoNCwgc2hvd0Ryb3Bkb3duID0gIXNob3dEcm9wZG93bik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMiA9IChldmVudCkgPT4gY29weVRvQ2xpcGJvYXJkKGV2ZW50LCBcIjQwMDAgMDU2NiA1NTY2IDU1NTZcIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMyA9IChldmVudCkgPT4gY29weVRvQ2xpcGJvYXJkKGV2ZW50LCBcIjU1NTUgNTU1NSA1NTU1IDQ0NDRcIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfNCA9IChldmVudCkgPT4gY29weVRvQ2xpcGJvYXJkKGV2ZW50LCBcIjM3ODIgODIyNDYzIDEwMDA1XCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzUgPSAoZXZlbnQpID0+IGNvcHlUb0NsaXBib2FyZChldmVudCwgXCI0MDAwIDAwMDAgMDAwMCAwMDAyXCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzYgPSAoZXZlbnQpID0+IGNvcHlUb0NsaXBib2FyZChldmVudCwgXCI0MDAwIDAwMDAgMDAwMCA5OTk1XCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzcgPSAoKSA9PiB7XG4gICAgb25TdWNjZXNzU3VibWl0KCk7XG4gIH07XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImNsb3NlTW9kYWxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBjbG9zZU1vZGFsID0gJCRwcm9wczIuY2xvc2VNb2RhbCk7XG4gICAgaWYgKFwiZGlzcGxheVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDYsIGRpc3BsYXkgPSAkJHByb3BzMi5kaXNwbGF5KTtcbiAgICBpZiAoXCJvblN1Y2Nlc3NTdWJtaXRcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBvblN1Y2Nlc3NTdWJtaXQgPSAkJHByb3BzMi5vblN1Y2Nlc3NTdWJtaXQpO1xuICAgIGlmIChcInBhcmFtc1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIHBhcmFtcyA9ICQkcHJvcHMyLnBhcmFtcyk7XG4gIH07XG4gIHJldHVybiBbXG4gICAgY2xvc2VNb2RhbCxcbiAgICBvblN1Y2Nlc3NTdWJtaXQsXG4gICAgcGFyYW1zLFxuICAgIGJ1dHRvblRleHQsXG4gICAgc2hvd0Ryb3Bkb3duLFxuICAgIGNvcHlUb0NsaXBib2FyZCxcbiAgICBkaXNwbGF5LFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMixcbiAgICBjbGlja19oYW5kbGVyXzMsXG4gICAgY2xpY2tfaGFuZGxlcl80LFxuICAgIGNsaWNrX2hhbmRsZXJfNSxcbiAgICBjbGlja19oYW5kbGVyXzYsXG4gICAgY2xpY2tfaGFuZGxlcl83XG4gIF07XG59XG52YXIgVGVzdENhcmRNb2RhbCA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdChcbiAgICAgIHRoaXMsXG4gICAgICBvcHRpb25zLFxuICAgICAgaW5zdGFuY2UkaSxcbiAgICAgIGNyZWF0ZV9mcmFnbWVudCRCLFxuICAgICAgc2FmZV9ub3RfZXF1YWwsXG4gICAgICB7XG4gICAgICAgIGNsb3NlTW9kYWw6IDAsXG4gICAgICAgIGRpc3BsYXk6IDYsXG4gICAgICAgIG9uU3VjY2Vzc1N1Ym1pdDogMSxcbiAgICAgICAgcGFyYW1zOiAyXG4gICAgICB9LFxuICAgICAgYWRkX2NzcyRoXG4gICAgKTtcbiAgfVxufTtcbkFwcFN0b3JlLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICBpZiAoIWRhdGEuaW5pdGlhbFZhbHVlKSB7XG4gICAgSW5zcGVjdG9yU3RvcmUudXBkYXRlKChzdG9yZSkgPT4ge1xuICAgICAgc3RvcmUuYXBwRGF0YSA9IGRhdGE7XG4gICAgICByZXR1cm4gc3RvcmU7XG4gICAgfSk7XG4gIH1cbn0pO1xudmFyIEluc3BlY3RvclN0b3JlID0gd3JpdGFibGUoe1xuICBzaG93U2lkZWJhcjogZmFsc2UsXG4gIHNob3dTaWRlOiBcInJpZ2h0XCIsXG4gIC8vIFwibGVmdFwiIG9yIFwicmlnaHRcbiAgc2hvd1RhYjogXCJpbnNwZWN0b3JcIixcbiAgLy8gaW5zcGVjdG9yLCBtZW1iZXIsIGFwcFxuICB4UmF5TW9kZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJNU1hSYXlNb2RlXCIpID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIk1TWFJheU1vZGVcIikpIDogdHJ1ZSxcbiAgeFJheUVycm9yRWxlbWVudHM6IFtdLFxuICB4UmF5V2FybmluZ0VsZW1lbnRzOiBbXSxcbiAgY2FydERhdGE6IFtdLFxuICAvLyBkYXRhIGZyb20gdGhlIHNlc3Npb24gc3RvcmFnZVxuICBpbnNwZWN0b3JEYXRhOiBbXSxcbiAgLy8gaWQncyBvZiBpdGVtcyB0aGF0IGhhdmUgYmVlbiBmb3VuZCBvbiB0aGUgcGFnZVxuICAvLyBtZW1iZXIgZGF0YSBmcm9tIHRoZSBtZW1iZXJzdGFjayBsb2NhbCBzdG9yYWdlIF9tcy1tZW1cbiAgbWVtYmVyRGF0YTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJfbXMtbWVtXCIpID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIl9tcy1tZW1cIikpIDoge30sXG4gIGFwcERhdGE6IHt9XG4gIC8vIGRhdGEgZnJvbSB0aGUgYXBwIHN0b3JlXG59KTtcbnZhciBTZXRDYXJ0RGF0YSA9IChkYXRhKSA9PiB7XG4gIEluc3BlY3RvclN0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS5jYXJ0RGF0YSA9IGRhdGE7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9KTtcbn07XG52YXIgQWRkSW5zcGVjdG9yRGF0YSA9IChkYXRhKSA9PiB7XG4gIEluc3BlY3RvclN0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS5pbnNwZWN0b3JEYXRhLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9KTtcbn07XG52YXIgU2V0U2hvd1NpZGViYXIgPSAodG9nZ2xlKSA9PiB7XG4gIEluc3BlY3RvclN0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS5zaG93U2lkZWJhciA9IHRvZ2dsZTtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xufTtcbnZhciBTZXRTaG93U2lkZSA9IChzaWRlKSA9PiB7XG4gIEluc3BlY3RvclN0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS5zaG93U2lkZSA9IHNpZGU7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9KTtcbn07XG52YXIgU2V0U2hvd1RhYiA9ICh0YWIpID0+IHtcbiAgSW5zcGVjdG9yU3RvcmUudXBkYXRlKChzdG9yZSkgPT4ge1xuICAgIHN0b3JlLnNob3dUYWIgPSB0YWI7XG4gICAgcmV0dXJuIHN0b3JlO1xuICB9KTtcbn07XG52YXIgVG9nZ2xlWFJheU1vZGUgPSAoKSA9PiB7XG4gIEluc3BlY3RvclN0b3JlLnVwZGF0ZSgoc3RvcmUpID0+IHtcbiAgICBzdG9yZS54UmF5TW9kZSA9ICFzdG9yZS54UmF5TW9kZTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIk1TWFJheU1vZGVcIiwgc3RvcmUueFJheU1vZGUpO1xuICAgIHJldHVybiBzdG9yZTtcbiAgfSk7XG59O1xudmFyIEFkZFhSYXlFcnJvckVsZW1lbnQgPSAoZGF0YSkgPT4ge1xuICBJbnNwZWN0b3JTdG9yZS51cGRhdGUoKHN0b3JlKSA9PiB7XG4gICAgc3RvcmUueFJheUVycm9yRWxlbWVudHMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xufTtcbnZhciBBZGRYUmF5V2FybmluZ0VsZW1lbnQgPSAoZGF0YSkgPT4ge1xuICBJbnNwZWN0b3JTdG9yZS51cGRhdGUoKHN0b3JlKSA9PiB7XG4gICAgc3RvcmUueFJheVdhcm5pbmdFbGVtZW50cy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBzdG9yZTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gVXBkYXRlTWVtYmVyRGF0YSgpIHtcbiAgSW5zcGVjdG9yU3RvcmUudXBkYXRlKChzdG9yZSkgPT4ge1xuICAgIHN0b3JlLm1lbWJlckRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIl9tcy1tZW1cIikgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiX21zLW1lbVwiKSkgOiB7fTtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xufVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzdG9yYWdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJfbXMtbWVtXCIpIHtcbiAgICAgIFVwZGF0ZU1lbWJlckRhdGEoKTtcbiAgICB9XG4gIH0pO1xufVxudmFyIGluc3BlY3Rvckl0ZW1zID0gW1xuICB7XG4gICAgXCJpZFwiOiBcInJlYWR5LWZvci1jaGVja291dFwiLFxuICAgIFwidHlwZVwiOiBcImNhcnRcIixcbiAgICBcInRpdGxlXCI6IFwiUmVhZHkgZm9yIENoZWNrb3V0XCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPllvdSBwcmV2aW91c2x5IHNlbGVjdGVkIGEgcGFpZCBwbGFuIGF0dHJpYnV0ZS48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hlY2tvdXQgd2l0aCBtdWx0aXBsZSBwbGFucy5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+SXQgaXMgbm90IHBvc3NpYmxlIHRvIHB1cmNoYXNlIG11bHRpcGxlIHBsYW5zL3Byb2R1Y3RzIGF0IHNhbWUgdGltZS4gPC9wPjxwPlBsZWFzZSBzZWUgb3VyIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2NvbW11bml0eS9wb3N0cy8xMTIyMzU1MDEzNDA0My0tV2lzaGxpc3QtRW5hYmxlLXF1YW50aXRpZXMtZHVyaW5nLWNoZWNrb3V0XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+cm9hZG1hcDwvYT4gZm9yIHVwZGF0ZXMuIDwvcD4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTGF1bmNoIHRoZSBjaGVja291dCBwcm9jZXNzLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhpcyBhdHRyaWJ1dGUgd2lsbCBvbmx5IGxhdW5jaCB0aGUgY2hlY2tvdXQgcHJvY2VzcyBmb3IgbG9nZ2VkLWluIG1lbWJlcnMuIDwvcD48cD4gVGhlIGNoZWNrb3V0IHdpbGwgbGF1bmNoIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgeW91IGNyZWF0ZSBhbiBhY2NvdW50IG9yIGxvZyBpbi4gPC9wPlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NDAzMjAwODc3MjExLVBhaWQtUGxhbnNcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInJlYWR5LWZvci1zaWdudXBcIixcbiAgICBcInR5cGVcIjogXCJjYXJ0XCIsXG4gICAgXCJ0aXRsZVwiOiBcIlJlYWR5IGZvciBTaWdudXBcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91IHByZXZpb3VzbHkgc2VsZWN0ZWQgYSBmcmVlIHBsYW4uIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJMYXVuY2ggYSBzaWdudXAgbW9kYWwuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSdyZSBhbG1vc3QgdGhlcmUhIFlvdSBuZWVkIHRvIGFkZCB0aGUgPHN0cm9uZz5kYXRhLW1zLW1vZGFsPVwic2lnbnVwXCIgPC9zdHJvbmc+YXR0cmlidXRlIHRvIHlvdXIgYnV0dG9uLiA8L3A+YFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlJlZGlyZWN0IHRvIG15IHNpZ251cCBwYWdlLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5Zb3UgbmVlZCB0byBtYW51YWxseSBzZXQgdGhlIGxpbmsgdG8geW91ciBzaWdudXAgcGFnZSAoanVzdCBsaWtlIGFueSBvdGhlciBsaW5rIG9uIHlvdXIgc2l0ZSkuPC9wPjxpbWcgbG9hZGluZz1cImxhenlcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YTk0M2Y1NjcyZmZkMDZjODE4NTZlZV9TY3JlZW5zaG90JTIwMjAyNC0wMS0xOCUyMGF0JTIwMTAuMjkuNDklRTIlODAlQUZBTS5wbmdcIiBhbHQ9XCJcIiBjbGFzcz1cImltYWdlXCI+PHA+SWYgeW91IGRvbid0IGhhdmUgYSBzaWdudXAgcGFnZSB5ZXQsIHBsZWFzZSBjcmVhdGUgb25lIGFuZCB0aGVuIGFkZCBhIDxhIGhyZWY9XCJodHRwczovL3d3dy5tZW1iZXJzdGFjay5jb20vd2ViZmxvdy1jb21wb25lbnRzL3NpZ251cFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPnNpZ24gdXAgY29tcG9uZW50PC9hPi4gPC9wPmBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzEyNTExNjY3OTgzODk5XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJwcmljZS1hZGRcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtcHJpY2U6YWRkXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlByaWNlIEFkZFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5UaGUgPHN0cm9uZz5kYXRhLW1zLXByaWNlOmFkZDwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSB3aWxsIGFkZCBhIHBhaWQgcGxhbiwgYW5kIHdpbGwgbm90IGVmZmVjdCBleGlzdGluZyBzdWJzY3JpcHRpb25zIG9yIHB1cmNoYXNlcy4gPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkxhdW5jaCBhIHNpZ251cCBtb2RhbC5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J3JlIGFsbW9zdCB0aGVyZSEgWW91IG5lZWQgdG8gYWRkIHRoZSA8c3Ryb25nPmRhdGEtbXMtbW9kYWw9XCJzaWdudXBcIiA8L3N0cm9uZz5hdHRyaWJ1dGUgdG8geW91ciBidXR0b24uIDwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVkaXJlY3QgdG8gbXkgc2lnbnVwIHBhZ2UuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSBuZWVkIHRvIG1hbnVhbGx5IHNldCB0aGUgbGluayB0byB5b3VyIHNpZ251cCBwYWdlIChqdXN0IGxpa2UgYW55IG90aGVyIGxpbmsgb24geW91ciBzaXRlKS48L3A+PGltZyBsb2FkaW5nPVwibGF6eVwiIHNyYz1cImh0dHBzOi8vYXNzZXRzLWdsb2JhbC53ZWJzaXRlLWZpbGVzLmNvbS82NWE2ZDg3ZjdhZTMwODQ0Y2RlMDkxMWIvNjVhOTQzZjU2NzJmZmQwNmM4MTg1NmVlX1NjcmVlbnNob3QlMjAyMDI0LTAxLTE4JTIwYXQlMjAxMC4yOS40OSVFMiU4MCVBRkFNLnBuZ1wiIGFsdD1cIlwiIGNsYXNzPVwiaW1hZ2VcIj48cD5JZiB5b3UgZG9uJ3QgaGF2ZSBhIHNpZ251cCBwYWdlIHlldCwgcGxlYXNlIGNyZWF0ZSBvbmUgYW5kIHRoZW4gYWRkIGEgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHMvc2lnbnVwXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+c2lnbiB1cCBjb21wb25lbnQ8L2E+LiA8L3A+YFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkxhdW5jaCB0aGUgY2hlY2tvdXQgcHJvY2Vzcy5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoaXMgYXR0cmlidXRlIHdpbGwgb25seSBsYXVuY2ggdGhlIGNoZWNrb3V0IHByb2Nlc3MgZm9yIGxvZ2dlZC1pbiBtZW1iZXJzLiA8L3A+PHA+IFRoZSBjaGVja291dCB3aWxsIGxhdW5jaCBhdXRvbWF0aWNhbGx5IGFmdGVyIHlvdSBjcmVhdGUgYW4gYWNjb3VudCBvciBsb2cgaW4uIDwvcD5cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzQwMzIwMDg3NzIxMS1QYWlkLVBsYW5zXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJwcmljZS11cGRhdGVcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtcHJpY2U6dXBkYXRlXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlByaWNlIFVwZGF0ZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5UaGUgPHNwYW4+PHN0cm9uZz5kYXRhLW1zLXByaWNlOnVwZGF0ZTwvc3Ryb25nPjwvc3Bhbj4gZGF0YSBhdHRyaWJ1dGUgd2lsbCBhZGQgYSBwYWlkIHBsYW4gZm9yIG5ldyBtZW1iZXJzIGFuZCByZXBsYWNlIHBhaWQgcGxhbnMgZm9yIGV4aXN0aW5nIG1lbWJlcnMuIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJMYXVuY2ggdGhlIGNoZWNrb3V0IHByb2Nlc3MuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5UaGlzIGF0dHJpYnV0ZSB3aWxsIG9ubHkgbGF1bmNoIHRoZSBjaGVja291dCBwcm9jZXNzIGZvciBsb2dnZWQtaW4gbWVtYmVycy4gPC9wPjxwPiBUaGUgY2hlY2tvdXQgd2lsbCBsYXVuY2ggYXV0b21hdGljYWxseSBhZnRlciB5b3UgY3JlYXRlIGFuIGFjY291bnQgb3IgbG9nIGluLiA8L3A+XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJSZWRpcmVjdCB0byBteSBzaWdudXAgcGFnZS5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91IG5lZWQgdG8gbWFudWFsbHkgc2V0IHRoZSBsaW5rIHRvIHlvdXIgc2lnbnVwIHBhZ2UgKGp1c3QgbGlrZSBhbnkgb3RoZXIgbGluayBvbiB5b3VyIHNpdGUpLjwvcD48aW1nIGxvYWRpbmc9XCJsYXp5XCIgc3JjPVwiaHR0cHM6Ly9hc3NldHMtZ2xvYmFsLndlYnNpdGUtZmlsZXMuY29tLzY1YTZkODdmN2FlMzA4NDRjZGUwOTExYi82NWE5NDNmNTY3MmZmZDA2YzgxODU2ZWVfU2NyZWVuc2hvdCUyMDIwMjQtMDEtMTglMjBhdCUyMDEwLjI5LjQ5JUUyJTgwJUFGQU0ucG5nXCIgYWx0PVwiXCIgY2xhc3M9XCJpbWFnZVwiPjxwPklmIHlvdSBkb24ndCBoYXZlIGEgc2lnbnVwIHBhZ2UgeWV0LCBwbGVhc2UgY3JlYXRlIG9uZSBhbmQgdGhlbiBhZGQgYSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWVtYmVyc3RhY2suY29tL3dlYmZsb3ctY29tcG9uZW50cy9zaWdudXBcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5zaWduIHVwIGNvbXBvbmVudDwvYT4uIDwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTGF1bmNoIGEgc2lnbnVwIG1vZGFsLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5Zb3UncmUgYWxtb3N0IHRoZXJlISBZb3UgbmVlZCB0byBhZGQgdGhlIDxzdHJvbmc+ZGF0YS1tcy1tb2RhbD1cInNpZ251cFwiIDwvc3Ryb25nPmF0dHJpYnV0ZSB0byB5b3VyIGJ1dHRvbi4gPC9wPmBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc0MDMyMDA4NzcyMTEtUGFpZC1QbGFuc1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicHJpY2UtcmVtb3ZlLWFsbFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1wcmljZTpyZW1vdmU9J2FsbCdcIixcbiAgICBcInRpdGxlXCI6IFwiUHJpY2UgUmVtb3ZlIEFsbFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPlRoZSA8c3Ryb25nPmRhdGEtbXMtcHJpY2U6cmVtb3ZlPVwiYWxsXCI8L3N0cm9uZz4gaXMgdXNlZCB0byBjbGVhciBvdXQgdGhlIHNlc3Npb24gc3RvcmFnZS4gV2hlbiBhIHVzZXIgZ29lcyBiYWNrIGFuZCBmb3J0aCBsb29raW5nIGF0IHByaWNlcyB0aGV5IGdldCBhZGRlZCB0byB0aGUgYnJvd3NlcidzIHNlc3Npb24gc3RvcmFnZS4gPGJyPjwvcD48cD5UaGlzIGVuYWJsZXMgYSB2ZXJ5IGJhc2ljIGNhcnQgZmVhdHVyZS4gVXNpbmcgdGhpcyBkYXRhIGF0dHJpYnV0ZSB3b3VsZCBcXHUyMDFDY2xlYXIgdGhlIGNhcnRcXHUyMDFELjwvcD5gLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlJlbW92ZSBwYXN0IGZyZWUgcGxhbnMuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPlRoaXMgYXR0cmlidXRlIGNhbiBvbmx5IHJlbW92ZSBwYWlkIHBsYW5zLiA8L3A+PHA+WW91J2xsIG5lZWQgdG8gdXNlIDxzdHJvbmc+ZGF0YS1tcy1wbGFuOnJlbW92ZT1cInBsYW4taWRcIiA8L3N0cm9uZz50byByZW1vdmUgaW5kaXZpZHVhbCBmcmVlIHBsYW5zLiBBbmQgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTQwODQxMzcxNDkzMzktUGxhbi1Mb2dpY1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlBsYW4gTG9naWM8L2E+IHRvIHJlbW92ZSBtdWx0aXBsZS48L3A+YFxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzQwMzIwMDg3NzIxMS1TaXRlcy13aXRoLVBhaWQtUGxhbnMjaF8wMUhCQlhUOEo4NTU5R0FXNjdTSzcySkFNMVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicGxhbi1hZGRcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtcGxhbjphZGRcIixcbiAgICBcInRpdGxlXCI6IFwiUGxhbiBBZGRcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlIDxzdHJvbmc+ZGF0YS1tcy1wbGFuOmFkZDwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSB3aWxsIGFkZCBhIGZyZWUgcGxhbi48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTGF1bmNoIGEgc2lnbnVwIG1vZGFsLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5Zb3UncmUgYWxtb3N0IHRoZXJlISBZb3UgbmVlZCB0byBhZGQgdGhlIDxzdHJvbmc+ZGF0YS1tcy1tb2RhbD1cInNpZ251cFwiIDwvc3Ryb25nPmF0dHJpYnV0ZSB0byB5b3VyIGJ1dHRvbi4gPC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJSZWRpcmVjdCB0byBteSBzaWdudXAgcGFnZS5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91IG5lZWQgdG8gbWFudWFsbHkgc2V0IHRoZSBsaW5rIHRvIHlvdXIgc2lnbnVwIHBhZ2UgKGp1c3QgbGlrZSBhbnkgb3RoZXIgbGluayBvbiB5b3VyIHNpdGUpLjwvcD48aW1nIGxvYWRpbmc9XCJsYXp5XCIgc3JjPVwiaHR0cHM6Ly9hc3NldHMtZ2xvYmFsLndlYnNpdGUtZmlsZXMuY29tLzY1YTZkODdmN2FlMzA4NDRjZGUwOTExYi82NWE5NDNmNTY3MmZmZDA2YzgxODU2ZWVfU2NyZWVuc2hvdCUyMDIwMjQtMDEtMTglMjBhdCUyMDEwLjI5LjQ5JUUyJTgwJUFGQU0ucG5nXCIgYWx0PVwiXCIgY2xhc3M9XCJpbWFnZVwiPjxwPklmIHlvdSBkb24ndCBoYXZlIGEgc2lnbnVwIHBhZ2UgeWV0LCBwbGVhc2UgY3JlYXRlIG9uZSBhbmQgdGhlbiBhZGQgYSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWVtYmVyc3RhY2suY29tL3dlYmZsb3ctY29tcG9uZW50cy9zaWdudXBcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5zaWduIHVwIGNvbXBvbmVudDwvYT4uIDwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVtb3ZlIHBhc3QgZnJlZSBwbGFucy5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+VGhpcyBhdHRyaWJ1dGUgY2FuIG9ubHkgcmVtb3ZlIHBhaWQgcGxhbnMuIDwvcD48cD5Zb3UnbGwgbmVlZCB0byB1c2UgPHN0cm9uZz5kYXRhLW1zLXBsYW46cmVtb3ZlPVwicGxhbi1pZFwiIDwvc3Ryb25nPnRvIHJlbW92ZSBpbmRpdmlkdWFsIGZyZWUgcGxhbnMuIEFuZCA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xNDA4NDEzNzE0OTMzOS1QbGFuLUxvZ2ljXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+UGxhbiBMb2dpYzwvYT4gdG8gcmVtb3ZlIG11bHRpcGxlLjwvcD5gXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xMjUxMTY2Nzk4Mzg5OVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicGxhbi11cGRhdGVcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtcGxhbjp1cGRhdGVcIixcbiAgICBcInRpdGxlXCI6IFwiUGxhbiBVcGRhdGVcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlIDxzdHJvbmc+ZGF0YS1tcy1wbGFuOnVwZGF0ZTwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSB3aWxsIGFkZCBhIGZyZWUgcGxhbiBmb3IgbmV3IG1lbWJlcnMgYW5kIHJlcGxhY2UgZnJlZSBwbGFucyBmb3IgZXhpc3RpbmcgbWVtYmVycy4gPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkxhdW5jaCBhIHNpZ251cCBtb2RhbC5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J3JlIGFsbW9zdCB0aGVyZSEgWW91IG5lZWQgdG8gYWRkIHRoZSA8c3Ryb25nPmRhdGEtbXMtbW9kYWw9XCJzaWdudXBcIiA8L3N0cm9uZz5hdHRyaWJ1dGUgdG8geW91ciBidXR0b24uIDwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVkaXJlY3QgdG8gbXkgc2lnbnVwIHBhZ2UuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSBuZWVkIHRvIG1hbnVhbGx5IHNldCB0aGUgbGluayB0byB5b3VyIHNpZ251cCBwYWdlIChqdXN0IGxpa2UgYW55IG90aGVyIGxpbmsgb24geW91ciBzaXRlKS48L3A+PGltZyBsb2FkaW5nPVwibGF6eVwiIHNyYz1cImh0dHBzOi8vYXNzZXRzLWdsb2JhbC53ZWJzaXRlLWZpbGVzLmNvbS82NWE2ZDg3ZjdhZTMwODQ0Y2RlMDkxMWIvNjVhOTQzZjU2NzJmZmQwNmM4MTg1NmVlX1NjcmVlbnNob3QlMjAyMDI0LTAxLTE4JTIwYXQlMjAxMC4yOS40OSVFMiU4MCVBRkFNLnBuZ1wiIGFsdD1cIlwiIGNsYXNzPVwiaW1hZ2VcIj48cD5JZiB5b3UgZG9uJ3QgaGF2ZSBhIHNpZ251cCBwYWdlIHlldCwgcGxlYXNlIGNyZWF0ZSBvbmUgYW5kIHRoZW4gYWRkIGEgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHMvc2lnbnVwXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+c2lnbiB1cCBjb21wb25lbnQ8L2E+LiA8L3A+YFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlJlbW92ZSBwYXN0IGZyZWUgcGxhbnMuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPlRoaXMgYXR0cmlidXRlIGNhbiBvbmx5IHJlbW92ZSBwYWlkIHBsYW5zLiA8L3A+PHA+WW91J2xsIG5lZWQgdG8gdXNlIDxzdHJvbmc+ZGF0YS1tcy1wbGFuOnJlbW92ZT1cInBsYW4taWRcIiA8L3N0cm9uZz50byByZW1vdmUgaW5kaXZpZHVhbCBmcmVlIHBsYW5zLiBBbmQgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTQwODQxMzcxNDkzMzktUGxhbi1Mb2dpY1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlBsYW4gTG9naWM8L2E+IHRvIHJlbW92ZSBtdWx0aXBsZS48L3A+YFxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTI1MTE2Njc5ODM4OTlcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInBsYW4tcmVtb3ZlXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLXBsYW46cmVtb3ZlXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlBsYW4gUmVtb3ZlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZSA8c3Ryb25nPmRhdGEtbXMtcGxhbjpyZW1vdmU8L3N0cm9uZz4gZGF0YSBhdHRyaWJ1dGUgd2lsbCByZW1vdmUgYSBmcmVlIHBsYW4uPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlJlbW92ZSBwYWlkIHBsYW5zLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5UaGlzIGF0dHJpYnV0ZSBjYW4gb25seSByZW1vdmUgZnJlZSBwbGFucy4gPC9wPjxwPllvdSdsbCBuZWVkIHRvIHVzZSA8c3Ryb25nPmRhdGEtbXMtcHJpY2U6cmVtb3ZlPVwiYWxsXCIgPC9zdHJvbmc+dG8gcmVtb3ZlIHByZXZpb3VzbHkgc2VsZWN0ZWQgcGFpZCBwbGFucy48L3A+PHA+WW91IGNhbiBhdXRvbWF0aWNhbGx5IHJlbW92ZSBwYXN0IG9uZS10aW1lIHB1cmNoYXNlcyB1c2luZyBhIGZlYXR1cmUgY2FsbGVkIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODU2MjkzOTc2NTktQ3JlYXRlLWEtTG9naW4tRm9ybS1pbi1XZWJmbG93XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+UGxhbiBMb2dpYzwvYT4uPC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJSZW1vdmUgbXVsdGlwbGUgZnJlZSBwbGFucy5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+VGhpcyBhdHRyaWJ1dGUgY2FuIG9ubHkgcmVtb3ZlIG9uZSBmcmVlIHBsYW4gYXQgYSB0aW1lLjwvcD48cD5Ib3dldmVyLCB5b3UgY2FuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIG11bHRpcGxlIGZyZWUgcGxhbnMgdXNpbmcgYSBmZWF0dXJlIGNhbGxlZCA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Nzg1NjI5Mzk3NjU5LUNyZWF0ZS1hLUxvZ2luLUZvcm0taW4tV2ViZmxvd1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlBsYW4gTG9naWM8L2E+LjwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xOTM5NDk1NTcxNDQ1OS1NYW5hZ2luZy1NZW1iZXItUGxhbnMtd2l0aC1EYXRhLUF0dHJpYnV0ZXNcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNpZ251cC1mb3JtXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLWZvcm09J3NpZ251cCdcIixcbiAgICBcInRpdGxlXCI6IFwiU2lnbnVwIEZvcm1cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSBzaWdudXAgZm9ybSE8YnI+PC9wPjxwPk5ldyB2aXNpdG9ycyBjYW4gdXNlIHRoaXMgZm9ybSB0byBjcmVhdGUgYW4gYWNjb3VudC4gJm5ic3A7PC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkNoYW5nZSByZWRpcmVjdC5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+WW91IGNhbiBzZXQgcmVkaXJlY3RzIGluIGEgZmV3IGRpZmZlcmVudCB3YXlzLjwvcD48cD5XZSByZWNvbW1lbmQgc2V0dGluZyB5b3VyIGdsb2JhbCA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg0NjA4MzcwNzE1LURlZmF1bHQtUmVkaXJlY3RzLVBsYW4tUmVkaXJlY3RzLVNpZ251cC1Mb2dpbi1Mb2dvdXRcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5EZWZhdWx0IFJlZGlyZWN0czwvYT4gZmlyc3QsIGFuZCB0aGVuIHNldHRpbmcgeW91ciA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg0NjA4MzcwNzE1LURlZmF1bHQtUmVkaXJlY3RzLVBsYW4tUmVkaXJlY3RzLVNpZ251cC1Mb2dpbi1Mb2dvdXQjcGxhbnNcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5QbGFuIExldmVsIFJlZGlyZWN0czwvYT4gYWZ0ZXIgdGhhdC48L3A+PHA+WW91IGNhbiBhbHNvIHNldCB0aGUgcmVkaXJlY3QgZGlyZWN0bHkgb24gYSBmb3JtLiBIb3dldmVyIHRoaXMgaXMgdGhlIGxlYXN0IGZsZXhpYmxlIG9wdGlvbi4gPC9wPidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJTb2NpYWwgYXV0aCBkb2Vzbid0IHdvcmsuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSdsbCBuZWVkIHRvIGNyZWF0ZSB5b3VyIG93biBkZXZlbG9wZXIgYWNjb3VudCB3aXRoIGVhY2ggc29jaWFsIGF1dGggcHJvdmlkZXIuIDxicj48L3A+PHA+UGxlYXNlIHNlZSB0aGUgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvc2VjdGlvbnMvOTE4ODM5MDA3ODQ5MS1Tb2NpYWwtQXV0aGVudGljYXRpb24tU1NPXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+aGVscCBjZW50ZXIgZm9yIG1vcmUuPC9hPjwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTGF1bmNoIGNoZWNrb3V0IGFmdGVyIHNpZ251cC5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+WW91IGNhbiBsYXVuY2ggdGhlIGNoZWNrb3V0IGFmdGVyIHNpZ251cCBieSBhZGRpbmcgYSA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg0ODQ5NDQ4MDkxLUdldHRpbmctU3RhcnRlZC13aXRoLVBsYW5zLVByaWNlc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPnByaWNlIGF0dHJpYnV0ZTwvYT4gdG8gdGhlIHNpZ251cCAmbHQ7Zm9ybSZndDssIHRvIGEgYnV0dG9uIG9uIHRoaXMgcGFnZSwgb3IgJm5ic3A7dG8gYSBidXR0b24gb24gYSBwcmV2aW91cyBwYWdlLiA8L3A+J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkZvcm0gZG9lc24ndCBzdWJtaXQgdG8gV2ViZmxvdy5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+TWVtYmVyc3RhY2sgZG9lcyBub3Qgc2VuZCBtZW1iZXItaW5mbyB0byBXZWJmbG93LiA8L3A+PHA+SG93ZXZlciwgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gZm9ybSBub3RpZmljYXRpb25zIHVzaW5nIHRoZSBcIk5ldyBNZW1iZXJcIiBldmVudCBpbiAmbmJzcDs8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83MjUyOTkxNDE1MzIzLU1ha2UtY29tLUludGVncmF0aW9uXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+TWFrZTwvYT4gb3IgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzI1Mjg4NjY2MjI5OS1aYXBpZXItSW50ZWdyYXRpb25cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5aYXBpZXIuPC9hPjwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NDI0MTI5MDAzNTQ3LUNyZWF0ZS1hLVNpZ251cC1Gb3JtLWluLVdlYmZsb3dcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImxvZ2luLWZvcm1cIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtZm9ybT0nbG9naW4nXCIsXG4gICAgXCJ0aXRsZVwiOiBcIkxvZ2luIEZvcm1cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSBsb2dpbiBmb3JtLjwvcD48cD5SZXR1cm5pbmcgbWVtYmVycyBjYW4gdXNlIHRoaXMgZm9ybSB0byBsb2cgaW50byBhY2Nlc3MgdGhlaXIgYWNjb3VudC48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHJlZGlyZWN0LlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3UgY2FuIHNldCByZWRpcmVjdHMgaW4gYSBmZXcgZGlmZmVyZW50IHdheXMuPC9wPjxwPldlIHJlY29tbWVuZCBzZXR0aW5nIHlvdXIgZ2xvYmFsIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODQ2MDgzNzA3MTUtRGVmYXVsdC1SZWRpcmVjdHMtUGxhbi1SZWRpcmVjdHMtU2lnbnVwLUxvZ2luLUxvZ291dFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPkRlZmF1bHQgUmVkaXJlY3RzPC9hPiBmaXJzdCwgYW5kIHRoZW4gc2V0dGluZyB5b3VyIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODQ2MDgzNzA3MTUtRGVmYXVsdC1SZWRpcmVjdHMtUGxhbi1SZWRpcmVjdHMtU2lnbnVwLUxvZ2luLUxvZ291dCNwbGFuc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlBsYW4gTGV2ZWwgUmVkaXJlY3RzPC9hPiBhZnRlciB0aGF0LjwvcD48cD5Zb3UgY2FuIGFsc28gc2V0IHRoZSByZWRpcmVjdCBkaXJlY3RseSBvbiBhIGZvcm0uIEhvd2V2ZXIgdGhpcyBpcyB0aGUgbGVhc3QgZmxleGlibGUgb3B0aW9uLiA8L3A+J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNvY2lhbCBhdXRoIGRvZXNuJ3Qgd29yay5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J2xsIG5lZWQgdG8gY3JlYXRlIHlvdXIgb3duIGRldmVsb3BlciBhY2NvdW50IHdpdGggZWFjaCBzb2NpYWwgYXV0aCBwcm92aWRlci4gPGJyPjwvcD48cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9zZWN0aW9ucy85MTg4MzkwMDc4NDkxLVNvY2lhbC1BdXRoZW50aWNhdGlvbi1TU09cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5oZWxwIGNlbnRlciBmb3IgbW9yZS48L2E+PC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJNZW1iZXItc3BlY2lmaWMgcmVkaXJlY3RzLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5QbGVhc2Ugc2VlIHRoaXMgYXJ0aWNsZSB0byBjcmVhdGUgbWVtYmVyLXNwZWNpZmljIHBhZ2VzIGFuZCByZWRpcmVjdHMuIDwvcD48cD48YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg1MzExOTQ1NDk5XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rIGJyZWFrXCI+aHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg1MzExOTQ1NDk5PC9hPjwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Nzg1NjI5Mzk3NjU5LUNyZWF0ZS1hLUxvZ2luLUZvcm0taW4tV2ViZmxvd1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicGFzc3dvcmRsZXNzLXNpZ251cFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1mb3JtPSdwYXNzd29yZGxlc3Mtc2lnbnVwJ1wiLFxuICAgIFwidGl0bGVcIjogXCJQYXNzd29yZGxlc3MgU2lnbnVwIFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIGEgcGFzc3dvcmRsZXNzIHNpZ251cCBmb3JtISA8L3A+PHA+VGhpcyBpcyBkaWZmZXJlbnQgdGhhbiBhIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc0MjQxMjkwMDM1NDctQ3JlYXRlLWEtU2lnbnVwLUZvcm0taW4tV2ViZmxvd1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPmdlbmVyaWMgc2lnbiB1cDwvYT4gZm9ybS4gUGFzc3dvcmRsZXNzIHNpZ251cCBmb3JtcyBoYXZlIHR3byBwYXJ0cy4gUGFydCAxIGNvbGxlY3RzIHRoZSBlbWFpbCBhZGRyZXNzLiBBbmQgcGFydCAyIGFza3MgZm9yIGEgdW5pcXVlIGNvZGUgd2hpY2ggd2FzIGVtYWlsZWQgdG8gdGhlIG1lbWJlci4gPC9wPicsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHJlZGlyZWN0LlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3UgY2FuIHNldCByZWRpcmVjdHMgaW4gYSBmZXcgZGlmZmVyZW50IHdheXMuPC9wPjxwPldlIHJlY29tbWVuZCBzZXR0aW5nIHlvdXIgZ2xvYmFsIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODQ2MDgzNzA3MTUtRGVmYXVsdC1SZWRpcmVjdHMtUGxhbi1SZWRpcmVjdHMtU2lnbnVwLUxvZ2luLUxvZ291dFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPkRlZmF1bHQgUmVkaXJlY3RzPC9hPiBmaXJzdCwgYW5kIHRoZW4gc2V0dGluZyB5b3VyIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODQ2MDgzNzA3MTUtRGVmYXVsdC1SZWRpcmVjdHMtUGxhbi1SZWRpcmVjdHMtU2lnbnVwLUxvZ2luLUxvZ291dCNwbGFuc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlBsYW4gTGV2ZWwgUmVkaXJlY3RzPC9hPiBhZnRlciB0aGF0LjwvcD48cD5Zb3UgY2FuIGFsc28gc2V0IHRoZSByZWRpcmVjdCBkaXJlY3RseSBvbiBhIGZvcm0uIEhvd2V2ZXIgdGhpcyBpcyB0aGUgbGVhc3QgZmxleGlibGUgb3B0aW9uLiA8L3A+J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNvY2lhbCBhdXRoIGRvZXNuJ3Qgd29yay5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J2xsIG5lZWQgdG8gY3JlYXRlIHlvdXIgb3duIGRldmVsb3BlciBhY2NvdW50IHdpdGggZWFjaCBzb2NpYWwgYXV0aCBwcm92aWRlci4gPGJyPjwvcD48cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9zZWN0aW9ucy85MTg4MzkwMDc4NDkxLVNvY2lhbC1BdXRoZW50aWNhdGlvbi1TU09cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5oZWxwIGNlbnRlciBmb3IgbW9yZS48L2E+PC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDdXN0b21pemUvc2VuZCBlbWFpbHMuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPllvdSBjYW4gYnJhbmQsIG1vZGlmeSwgYW5kIHRyYW5zbGF0ZSB5b3VyIGVtYWlscyBpbiB0aGUgZGFzaGJvYXJkLiA8L3A+PHA+PGEgaHJlZj1cImh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9zZXR0aW5ncy9lbWFpbHNcIiBjbGFzcz1cImxpbmsgYnJlYWtcIj5odHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZW1haWxzPC9hPjwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11c1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicGFzc3dvcmRsZXNzLWxvZ2luXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLWZvcm09J3Bhc3N3b3JkbGVzcy1sb2dpbidcIixcbiAgICBcInRpdGxlXCI6IFwiUGFzc3dvcmRsZXNzIExvZ2luIFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIGEgcGFzc3dvcmRsZXNzIHNpZ251cCBmb3JtISA8L3A+PHA+VGhpcyBpcyBkaWZmZXJlbnQgdGhhbiBhIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODU2MjkzOTc2NTktQ3JlYXRlLWEtTG9naW4tRm9ybS1pbi1XZWJmbG93XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+Z2VuZXJpYyBsb2dpbjwvYT4gZm9ybS4gUGFzc3dvcmRsZXNzIHNpZ251cCBmb3JtcyBoYXZlIHR3byBwYXJ0cy4gUGFydCAxIGNvbGxlY3RzIHRoZSBlbWFpbCBhZGRyZXNzLiBBbmQgcGFydCAyIGFza3MgZm9yIGEgdW5pcXVlIGNvZGUgd2hpY2ggd2FzIGVtYWlsZWQgdG8gdGhlIG1lbWJlci4gPC9wPicsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHJlZGlyZWN0LlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3UgY2FuIHNldCByZWRpcmVjdHMgaW4gYSBmZXcgZGlmZmVyZW50IHdheXMuPC9wPjxwPldlIHJlY29tbWVuZCBzZXR0aW5nIHlvdXIgZ2xvYmFsIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODQ2MDgzNzA3MTUtRGVmYXVsdC1SZWRpcmVjdHMtUGxhbi1SZWRpcmVjdHMtU2lnbnVwLUxvZ2luLUxvZ291dFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPkRlZmF1bHQgUmVkaXJlY3RzPC9hPiBmaXJzdCwgYW5kIHRoZW4gc2V0dGluZyB5b3VyIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODQ2MDgzNzA3MTUtRGVmYXVsdC1SZWRpcmVjdHMtUGxhbi1SZWRpcmVjdHMtU2lnbnVwLUxvZ2luLUxvZ291dCNwbGFuc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlBsYW4gTGV2ZWwgUmVkaXJlY3RzPC9hPiBhZnRlciB0aGF0LjwvcD48cD5Zb3UgY2FuIGFsc28gc2V0IHRoZSByZWRpcmVjdCBkaXJlY3RseSBvbiBhIGZvcm0uIEhvd2V2ZXIgdGhpcyBpcyB0aGUgbGVhc3QgZmxleGlibGUgb3B0aW9uLiA8L3A+J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNvY2lhbCBhdXRoIGRvZXNuJ3Qgd29yay5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J2xsIG5lZWQgdG8gY3JlYXRlIHlvdXIgb3duIGRldmVsb3BlciBhY2NvdW50IHdpdGggZWFjaCBzb2NpYWwgYXV0aCBwcm92aWRlci4gPGJyPjwvcD48cD5QbGVhc2Ugc2VlIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9zZWN0aW9ucy85MTg4MzkwMDc4NDkxLVNvY2lhbC1BdXRoZW50aWNhdGlvbi1TU09cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5oZWxwIGNlbnRlciBmb3IgbW9yZS48L2E+PC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDdXN0b21pemUvc2VuZCBlbWFpbHMuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPllvdSBjYW4gYnJhbmQsIG1vZGlmeSwgYW5kIHRyYW5zbGF0ZSB5b3VyIGVtYWlscyBpbiB0aGUgZGFzaGJvYXJkLiA8L3A+PHA+PGEgaHJlZj1cImh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9zZXR0aW5ncy9lbWFpbHNcIiBjbGFzcz1cImxpbmsgYnJlYWtcIj5odHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZW1haWxzPC9hPjwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11c1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZm9yZ290LXBhc3N3b3JkLWZvcm1cIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtZm9ybT0nZm9yZ290LXBhc3N3b3JkJ1wiLFxuICAgIFwidGl0bGVcIjogXCJGb3Jnb3QgUGFzc3dvcmQgRm9ybVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZSBmb3VuZCBhIGZvcmdvdCBwYXNzd29yZCBmb3JtITwvcD48cD5UaGlzIHR5cGUgb2YgZm9ybSBpcyBmb3IgbG9nZ2VkIG91dCBtZW1iZXJzIHRvIHJlZ2FpbiBhY2Nlc3MgdG8gdGhlaXIgYWNjb3VudC4gSXQgaXMgdGhlIGZpcnN0IG9mIHRocmVlIGZvcm1zLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHJlZGlyZWN0XCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSdsbCBuZWVkIHRvIG1hbnVhbGx5IHNldCB0aGUgcmVkaXJlY3QgZm9yIGVhY2ggcGFzc3dvcmQgZm9ybSBpbiBXZWJmbG93LjwvcD48cD5TZWxlY3QgdGhlICZsdDtmb3JtJmd0OyBlbGVtZW50IGFuZCBhZGQgdGhlIFVSTCBvciBzbHVnIGZvciB0aGUgcmVzZXQgcGFzc3dvcmQgcGFnZS4gPC9wPjxpbWcgc3JjPVwiaHR0cHM6Ly9hc3NldHMtZ2xvYmFsLndlYnNpdGUtZmlsZXMuY29tLzY1YTZkODdmN2FlMzA4NDRjZGUwOTExYi82NWI4NDcxYmEzODVhOGY2NzFhMGQ0YzJfU2NyZWVuc2hvdCUyMDIwMjQtMDEtMzAlMjBhdCUyMDkuNDcuMTclRTIlODAlQUZBTS5wbmdcIiBsb2FkaW5nPVwibGF6eVwiIGFsdD1cIlwiIGNsYXNzPVwiaW1hZ2VcIj5gXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Nzg3MDA5Mzg4MzE1LUNyZWF0ZS1hLUZvcmdvdC1QYXNzd29yZC1Gb3JtLWZvci1sb2dnZWQtb3V0LXVzZXJzLVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicmVzZXQtcGFzc3dvcmQtZm9ybVwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1mb3JtPSdyZXNldC1wYXNzd29yZCdcIixcbiAgICBcInRpdGxlXCI6IFwiUmVzZXQgUGFzc3dvcmQgRm9ybVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIGEgcmVzZXQgcGFzc3dvcmQgZm9ybSE8L3A+PHA+VGhpcyBmb3JtIGNvbWVzIGFmdGVyIGEgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzc4NzAwOTM4ODMxNS1DcmVhdGUtYS1Gb3Jnb3QtUGFzc3dvcmQtRm9ybS1mb3ItbG9nZ2VkLW91dC11c2Vycy1cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5mb3Jnb3QgcGFzc3dvcmQgZm9ybTwvYT4uIEl0IGFsbG93cyBtZW1iZXJzIHdpdGggYSBjb25maXJtYXRpb24gY29kZSB0byBjaGFuZ2UgdGhlaXIgcGFzc3dvcmQgd2l0aG91dCBsb2dnaW5nIGluLiA8L3A+JyxcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDaGFuZ2UgcmVkaXJlY3RcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J2xsIG5lZWQgdG8gbWFudWFsbHkgc2V0IHRoZSByZWRpcmVjdCBmb3IgZWFjaCBwYXNzd29yZCBmb3JtIGluIFdlYmZsb3cuPC9wPjxwPlNlbGVjdCB0aGUgJmx0O2Zvcm0mZ3Q7IGVsZW1lbnQgYW5kIGFkZCB0aGUgVVJMIG9yIHNsdWcgZm9yIHRoZSByZXNldCBwYXNzd29yZCBwYWdlLiA8L3A+PGltZyBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1Yjg0NzFiYTM4NWE4ZjY3MWEwZDRjMl9TY3JlZW5zaG90JTIwMjAyNC0wMS0zMCUyMGF0JTIwOS40Ny4xNyVFMiU4MCVBRkFNLnBuZ1wiIGxvYWRpbmc9XCJsYXp5XCIgYWx0PVwiXCIgY2xhc3M9XCJpbWFnZVwiPmBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODcwMDkzODgzMTUtQ3JlYXRlLWEtRm9yZ290LVBhc3N3b3JkLUZvcm0tZm9yLWxvZ2dlZC1vdXQtdXNlcnMtXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJwcm9maWxlLWZvcm1cIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtZm9ybT0ncHJvZmlsZSdcIixcbiAgICBcInRpdGxlXCI6IFwiUHJvZmlsZSBGb3JtXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPldlIGZvdW5kIGEgcHJvZmlsZSBmb3JtITwvcD48cD5NZW1iZXJzIGNhbiB1c2UgdGhpcyBmb3JtIHRvIHVwZGF0ZSB0aGVpciAmbmJzcDtjdXN0b20gZmllbGRzLCBlbWFpbCwgYW5kIHBhc3N3b3JkLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVkaXJlY3Qgb24gc3VibWlzc2lvbi5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+WW91IGNhbiB0dXJuIGFueSBwcm9maWxlIGZvcm0gaW50byBhbiBvbmJvYXJkaW5nIGZvcm0gYnkgYWRkaW5nIGEgcmVkaXJlY3QgdXJsL3NsdWcgdW5kZXIgZm9ybSBzZXR0aW5ncy4gPC9wPjxpbWcgbG9hZGluZz1cImxhenlcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1Yjg0N2RlYTg4MDY3ZjkwNjQ5MWExMl9TY3JlZW5zaG90JTIwMjAyNC0wMS0zMCUyMGF0JTIwOS41MC4zNSVFMiU4MCVBRkFNLnBuZ1wiIGFsdD1cIlwiIGNsYXNzPVwiaW1hZ2VcIj48cD5Zb3UgY2FuIGxlYXJuIG1vcmUgaW4gb3VyIGhlbHAgY2VudGVyIGFydGljbGUgb24gPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzc4OTQ0OTU3MDU4Ny1DcmVhdGUtYS1NdWx0aS1zdGVwLU9uYm9hcmRpbmctRm9ybS1pbi1XZWJmbG93XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+b25ib2FyZGluZyBmb3Jtcy48L2E+PC9wPidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJEaXNwbGF5IHBsYW4gaW5mby5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+TWVtYmVyc3RhY2sgcmVsaWVzIG9uIFN0cmlwZVxcdTIwMTlzIGhvc3RlZCBCaWxsaW5nIFBvcnRhbCB0byBhbGxvdyBtZW1iZXJzIHRvIHNlY3VyZWx5IG1hbmFnZSBwYWlkIHBsYW5zLCBzdWJzY3JpcHRpb25zLCBwdXJjaGFzZXMsIHBheW1lbnQgaW5mb3JtYXRpb24sIGV0Yy48L3A+PHA+Q3JlYXRlIGEgYnV0dG9uIGFuZCBhZGQgdGhlIDxzdHJvbmc+ZGF0YS1tcy1hY3Rpb249XCJjdXN0b21lci1wb3J0YWxcIjwvc3Ryb25nPiBhdHRyaWJ1dGUuPC9wPjxwPkxlYXJuIG1vcmUgaW4gdGhlIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODI3MTIwMzI1MzktU3RyaXBlLUN1c3RvbWVyLVBvcnRhbFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPmhlbHAgY2VudGVyLiA8L2E+PC9wPidcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODU3NTExMjQzNzktQ3JlYXRlLVByb2ZpbGUtRm9ybXMtaW4tV2ViZmxvd1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicGFzc3dvcmQtZm9ybVwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1mb3JtPSdwYXNzd29yZCdcIixcbiAgICBcInRpdGxlXCI6IFwiUGFzc3dvcmQgRm9ybVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIGEgcGFzc3dvcmQgZm9ybSEgPC9wPjxwPlRoaXMgaXMgYSBkZWRpY2F0ZWQgXCJjaGFuZ2UgcGFzc3dvcmRcIiBVSSBmb3IgbG9nZ2VkIGluIG1lbWJlcnMuIDwvcD4nLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODU3NTExMjQzNzktQ3JlYXRlLVByb2ZpbGUtRm9ybXMtaW4tV2ViZmxvd1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZW1haWwtZm9ybVwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1mb3JtPSdlbWFpbCdcIixcbiAgICBcInRpdGxlXCI6IFwiRW1haWwgRm9ybVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIGFuIHVwZGF0ZSBlbWFpbCBmb3JtISA8L3A+PHA+VGhpcyBpcyBhIGRlZGljYXRlZCBcImNoYW5nZSBwYXNzd29yZFwiIFVJIGZvciBsb2dnZWQgaW4gbWVtYmVycy4gJm5ic3A7PC9wPicsXG4gICAgXCJoZWxwSXRlbXNcIjogW10sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzc4NTc1MTEyNDM3OS1DcmVhdGUtUHJvZmlsZS1Gb3Jtcy1pbi1XZWJmbG93XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJjb21tZW50aW5nLWNoYW5uZWxcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtY2hhbm5lbFwiLFxuICAgIFwidGl0bGVcIjogXCJDb21tZW50aW5nIENoYW5uZWxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSBjb21tZW50aW5nIGNoYW5uZWwhIDxicj48L3A+PHA+QTogVGhpcyBjaGFubmVsIGRvZXMgbm90IGhhdmUgYW4gSUQmbmJzcDtzZXQsIGFuZCBpcyB0aGVyZWZvciB1c2luZyB0aGUgcGFnZSBzbHVnIGZvciBhIHVuaXF1ZSBpZGVudGlmaWVyLjwvcD48cD5COiBUaGlzIGNoYW5uZWwgaGFzIGFuIElEJm5ic3A7b2YgPHN0cm9uZz5Ib21lcGFnZTwvc3Ryb25nPi4gPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkNvbW1lbnRzIGZyb20gb3RoZXIgcGFnZXMuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPkNvbW1lbnRzIGFyZSBkaXNwbGF5ZWQgYmFzZWQgb24gdGhlIGNoYW5uZWwgSUQuIEV4dHJhIGNvbW1lbnRzIGNvdWxkIGJlIHByZXNlbnQgYmVjYXVzZSB5b3UgaGF2ZSBhIGR1cGxpY2F0ZSA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xODk2NjI3NTM4MDEyMy1XZWJmbG93LUNvbW1lbnRpbmcjaF8wMUhCRTA4WkhaN1pYRzcwSzAwS0ZDNzdFSFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPmNoYW5uZWwgSUQ8L2E+IHNldC4gPC9wPjxwPllvdSBjYW4gcmVtb3ZlIHRoZSBjaGFubmVsIElEIHRvIGFzc29jaWF0ZSBjb21tZW50cyB3aXRoIHRoZSBjdXJyZW50IFVSTC4gPC9wPidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJBbGwgY29tbWVudHMgYXJlIG1pc3NpbmcuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPkNvbW1lbnRzIGFyZSBkaXNwbGF5ZWQgYmFzZWQgb24gdGhlIGNoYW5uZWwgSUQuIFlvdXIgY29tbWVudHMgY291bGQgYmUgbWlzc2luZyBiZWNhdXNlIHlvdSBoYXZlIHRoZSB3cm9uZyA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xODk2NjI3NTM4MDEyMy1XZWJmbG93LUNvbW1lbnRpbmcjaF8wMUhCRTA4WkhaN1pYRzcwSzAwS0ZDNzdFSFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPmNoYW5uZWwgSUQ8L2E+IHNldC4gPGJyPjwvcD48cD5JZiB5b3UgcmVjZW50bHkgY2hhbmdlZCBmcm9tIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc1OTUyNjIzODU4MTktTWFuYWdpbmctVGVzdC1Nb2RlLWFuZC1MaXZlLU1vZGVcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj50ZXN0IG1vZGUgdG8gbGl2ZSBtb2RlPC9hPiwgYWxsIG9mIHlvdXIgdGVzdCBtb2RlIGNvbW1lbnRzIGFyZSBvbmx5ICZuYnNwO3Zpc2libGUgaW4gdGVzdCBtb2RlLiBZb3UnbGwgbmVlZCB0byByZWNyZWF0ZSB0aGVtIGluIGxpdmUgbW9kZSBpZiB5b3UgbmVlZCB0aGVtLiA8L3A+YFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNvbWUgY29tbWVudHMgYXJlIG1pc3NpbmcuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPlRoZXJlIGFyZSBhIGZldyByZWFzb25zIHdoeSB0aGlzIGNvdWxkIGJlIGhhcHBlbmluZy4gPGJyPjwvcD48cD5JZiB5b3UgcmVjZW50bHkgY2hhbmdlZCBmcm9tIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc1OTUyNjIzODU4MTktTWFuYWdpbmctVGVzdC1Nb2RlLWFuZC1MaXZlLU1vZGVcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj50ZXN0IG1vZGUgdG8gbGl2ZSBtb2RlPC9hPiwgYWxsIG9mIHlvdXIgdGVzdCBtb2RlIGNvbW1lbnRzIGFyZSBvbmx5ICZuYnNwO3Zpc2libGUgaW4gdGVzdCBtb2RlLiBZb3UnbGwgbmVlZCB0byByZWNyZWF0ZSB0aGVtIGluIGxpdmUgbW9kZSBpZiB5b3UgbmVlZCB0aGVtLiA8L3A+PHA+SXQncyBhbHNvIHBvc3NpYmxlIHRoYXQgeW91ciBjb21tZW50cyBhcmUgYmVpbmcgaGlkZGVuIGZvciBtb2RlcmF0aW9uLiA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xODk2NjI3NTM4MDEyMy1XZWJmbG93LUNvbW1lbnRpbmcjMDFIQkU0VDg0MEhCOTBXUFFFUFRKQThSUzBcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5MZWFybiBtb3JlIGhlcmU8L2E+LiA8L3A+YFxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTg5NjYyNzUzODAxMjNcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImxvZ291dC1saW5rXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLWFjdGlvbj0nbG9nb3V0J1wiLFxuICAgIFwidGl0bGVcIjogXCJMb2dvdXQgTGlua1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZSBmb3VuZCBhIGxvZ291dCBsaW5rITwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJIb3cgZG8gSSBzZXQgYSBwYWdlIHJlZGlyZWN0P1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlcmUgYXJlIGEgZmV3IGRpZmZlcmVudCB3YXlzIHRvIHNldCAmbmJzcDtyZWRpcmVjdHMgaW4gTWVtYmVyc3RhY2suPC9wPjxwPkNsaWNrIHRoZSBkb2N1bWVudGF0aW9uIGJ1dHRvbiBiZWxvdyBmb3IgdGhlIGZ1bGwgcGljdHVyZS48L3A+XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODk5OTAwNjQyODMtQ3JlYXRlLWEtTG9nb3V0LUxpbmstb3ItQnV0dG9uLWluLVdlYmZsb3dcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNpZ251cC1tb2RhbFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1tb2RhbD0nc2lnbnVwJ1wiLFxuICAgIFwidGl0bGVcIjogXCJTaWdudXAgTW9kYWxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYW4gYXR0cmlidXRlIHRvIGxhdW5jaCB0aGUgcHJlLWJ1aWxkIHNpZ251cCBtb2RhbC48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVkaXJlY3QgdG8gbXkgc2lnbnVwIHBhZ2UuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSBuZWVkIHRvIHJlbW92ZSB0aGUgPHN0cm9uZz5kYXRhLW1zLW1vZGFsPC9zdHJvbmc+IGF0dHJpYnV0ZSBtYW51YWxseSBzZXQgdGhlIGxpbmsgdG8geW91ciBzaWdudXAgcGFnZSAoanVzdCBsaWtlIGFueSBvdGhlciBsaW5rIG9uIHlvdXIgc2l0ZSkuPC9wPjxpbWcgbG9hZGluZz1cImxhenlcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YTk0M2Y1NjcyZmZkMDZjODE4NTZlZV9TY3JlZW5zaG90JTIwMjAyNC0wMS0xOCUyMGF0JTIwMTAuMjkuNDklRTIlODAlQUZBTS5wbmdcIiBhbHQ9XCJcIiBjbGFzcz1cImltYWdlXCI+PHA+SWYgeW91IGRvbid0IGhhdmUgYSBzaWdudXAgcGFnZSB5ZXQsIHBsZWFzZSBjcmVhdGUgb25lIGFuZCB0aGVuIGFkZCBhIDxhIGhyZWY9XCJodHRwczovL3d3dy5tZW1iZXJzdGFjay5jb20vd2ViZmxvdy1jb21wb25lbnRzL3NpZ251cFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPnNpZ24gdXAgY29tcG9uZW50PC9hPi4gPC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJIb3cgZG8gSSBzZXQgYSBwYWdlIHJlZGlyZWN0P1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlcmUgYXJlIGEgZmV3IGRpZmZlcmVudCB3YXlzIHRvIHNldCAmbmJzcDtyZWRpcmVjdHMgaW4gTWVtYmVyc3RhY2suPC9wPjxwPkNsaWNrIHRoZSBkb2N1bWVudGF0aW9uIGJ1dHRvbiBiZWxvdyBmb3IgdGhlIGZ1bGwgcGljdHVyZS48L3A+XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDaGFuZ2UgdGhlIGxvZ28gYW5kIGJ1dHRvbiBjb2xvci5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91IGNhbiBtb2RpZnkgeW91ciBhcHAncyBsb2dvIGFuZCBicmFuZCBjb2xvciBpbiB0aGUgZGFzaGJvYXJkIHVuZGVyIDxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+RGVzaWduPC9hPi4gPC9wPjxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJ3LWlubGluZS1ibG9ja1wiPjxpbWcgbG9hZGluZz1cImxhenlcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YzJmMDk2YWYyYjQ3ZTE2MGQxNWE1ZV9TY3JlZW5zaG90JTIwMjAyNC0wMi0wNyUyMGF0JTIwMTEuNTIuNTglRTIlODAlQUZBTS5qcGdcIiBhbHQ9XCJcIiBjbGFzcz1cImltYWdlXCI+PC9hPjxwPklmIHlvdSBuZWVkIG1vcmUgZGVzaWduIGNvbnRyb2wgeW91IGNhbiBzdGFydCAmbmJzcDtmcm9tIG9uZSBvZiBvdXIgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHNcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5odW5kcmVkcyBvZiBmcmVlIFdlYmZsb3cgVUk8L2E+LjwvcD5gXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xMjk3MTQ4MTc1MjA5MVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibG9naW4tbW9kYWxcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtbW9kYWw9J2xvZ2luJ1wiLFxuICAgIFwidGl0bGVcIjogXCJMb2dpbiBNb2RhbFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZSBmb3VuZCBhbiBhdHRyaWJ1dGUgdG8gbGF1bmNoIHRoZSBwcmUtYnVpbGQgbG9naW4gbW9kYWwuPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlJlZGlyZWN0IHRvIG15IGxvZ2luIHBhZ2UuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSBuZWVkIHRvIHJlbW92ZSB0aGUgPHN0cm9uZz5kYXRhLW1zLW1vZGFsPC9zdHJvbmc+IGF0dHJpYnV0ZSBtYW51YWxseSBzZXQgdGhlIGxpbmsgdG8geW91ciBsb2dpbiBwYWdlIChqdXN0IGxpa2UgYW55IG90aGVyIGxpbmsgb24geW91ciBzaXRlKS48L3A+PGltZyBsb2FkaW5nPVwibGF6eVwiIHNyYz1cImh0dHBzOi8vYXNzZXRzLWdsb2JhbC53ZWJzaXRlLWZpbGVzLmNvbS82NWE2ZDg3ZjdhZTMwODQ0Y2RlMDkxMWIvNjVjMmVlNmZhZjJiNDdlMTYwY2ZmZWYxX1NjcmVlbnNob3QlMjAyMDI0LTAyLTA3JTIwYXQlMjAxMS40My4zOCVFMiU4MCVBRkFNLmpwZ1wiIGFsdD1cIlwiIGNsYXNzPVwiaW1hZ2VcIj48cD5JZiB5b3UgZG9uJ3QgaGF2ZSBhIGxvZ2luIHBhZ2UgeWV0LCBwbGVhc2UgY3JlYXRlIG9uZSBhbmQgdGhlbiBhZGQgYSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWVtYmVyc3RhY2suY29tL3dlYmZsb3ctY29tcG9uZW50cy9sb2dpblwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPnNpZ24gdXAgY29tcG9uZW50PC9hPi4gPC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDaGFuZ2UgdGhlIGxvZ28gYW5kIGJ1dHRvbiBjb2xvci5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91IGNhbiBtb2RpZnkgeW91ciBhcHAncyBsb2dvIGFuZCBicmFuZCBjb2xvciBpbiB0aGUgZGFzaGJvYXJkIHVuZGVyIDxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+RGVzaWduPC9hPi4gPC9wPjxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJ3LWlubGluZS1ibG9ja1wiPjxpbWcgbG9hZGluZz1cImxhenlcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YzJmMDk2YWYyYjQ3ZTE2MGQxNWE1ZV9TY3JlZW5zaG90JTIwMjAyNC0wMi0wNyUyMGF0JTIwMTEuNTIuNTglRTIlODAlQUZBTS5qcGdcIiBhbHQ9XCJcIiBjbGFzcz1cImltYWdlXCI+PC9hPjxwPklmIHlvdSBuZWVkIG1vcmUgZGVzaWduIGNvbnRyb2wgeW91IGNhbiBzdGFydCAmbmJzcDtmcm9tIG9uZSBvZiBvdXIgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHNcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5odW5kcmVkcyBvZiBmcmVlIFdlYmZsb3cgVUk8L2E+LjwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiSG93IGRvIEkgc2V0IGEgcGFnZSByZWRpcmVjdD9cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZXJlIGFyZSBhIGZldyBkaWZmZXJlbnQgd2F5cyB0byBzZXQgJm5ic3A7cmVkaXJlY3RzIGluIE1lbWJlcnN0YWNrLjwvcD48cD5DbGljayB0aGUgZG9jdW1lbnRhdGlvbiBidXR0b24gYmVsb3cgZm9yIHRoZSBmdWxsIHBpY3R1cmUuPC9wPlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xMjk3MTQ4MTc1MjA5MVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicHJvZmlsZS1tb2RhbFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1tb2RhbD0ncHJvZmlsZSdcIixcbiAgICBcInRpdGxlXCI6IFwiUHJvZmlsZSBNb2RhbFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZSBmb3VuZCBhbiBhdHRyaWJ1dGUgdG8gbGF1bmNoIHRoZSBwcmUtYnVpbGQgcHJvZmlsZSBtb2RhbC48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHRoZSBsb2dvIGFuZCBidXR0b24gY29sb3IuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogYDxwPllvdSBjYW4gbW9kaWZ5IHlvdXIgYXBwJ3MgbG9nbyBhbmQgYnJhbmQgY29sb3IgaW4gdGhlIGRhc2hib2FyZCB1bmRlciA8YSBocmVmPVwiaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL3NldHRpbmdzL2Rlc2lnblwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPkRlc2lnbjwvYT4uIDwvcD48YSBocmVmPVwiaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL3NldHRpbmdzL2Rlc2lnblwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwidy1pbmxpbmUtYmxvY2tcIj48aW1nIGxvYWRpbmc9XCJsYXp5XCIgc3JjPVwiaHR0cHM6Ly9hc3NldHMtZ2xvYmFsLndlYnNpdGUtZmlsZXMuY29tLzY1YTZkODdmN2FlMzA4NDRjZGUwOTExYi82NWMyZjA5NmFmMmI0N2UxNjBkMTVhNWVfU2NyZWVuc2hvdCUyMDIwMjQtMDItMDclMjBhdCUyMDExLjUyLjU4JUUyJTgwJUFGQU0uanBnXCIgYWx0PVwiXCIgY2xhc3M9XCJpbWFnZVwiPjwvYT48cD5JZiB5b3UgbmVlZCBtb3JlIGRlc2lnbiBjb250cm9sIHlvdSBjYW4gc3RhcnQgJm5ic3A7ZnJvbSBvbmUgb2Ygb3VyIDxhIGhyZWY9XCJodHRwczovL3d3dy5tZW1iZXJzdGFjay5jb20vd2ViZmxvdy1jb21wb25lbnRzXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+aHVuZHJlZHMgb2YgZnJlZSBXZWJmbG93IFVJPC9hPi48L3A+YFxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTI5NzE0ODE3NTIwOTFcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImZvcmdvdC1wYXNzd29yZC1tb2RhbFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1tb2RhbD0nZm9yZ290LXBhc3N3b3JkJ1wiLFxuICAgIFwidGl0bGVcIjogXCJGb3Jnb3QgUGFzc3dvcmQgTW9kYWxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYW4gYXR0cmlidXRlIHRvIGxhdW5jaCB0aGUgcHJlLWJ1aWxkIGZvcmdvdCBwYXNzd29yZCBtb2RhbC4gVGhpcyBVSSBnaXZlcyBsb2dnZWQtb3V0IG1lbWJlcnMgYW4gb3Bwb3J0dW5pdHkgdG8gcmVzZXQgdGhlaXIgcGFzc3dvcmQgdmlhIGVtYWlsLjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDaGFuZ2UgdGhlIGxvZ28gYW5kIGJ1dHRvbiBjb2xvci5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91IGNhbiBtb2RpZnkgeW91ciBhcHAncyBsb2dvIGFuZCBicmFuZCBjb2xvciBpbiB0aGUgZGFzaGJvYXJkIHVuZGVyIDxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+RGVzaWduPC9hPi4gPC9wPjxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJ3LWlubGluZS1ibG9ja1wiPjxpbWcgbG9hZGluZz1cImxhenlcIiBzcmM9XCJodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YzJmMDk2YWYyYjQ3ZTE2MGQxNWE1ZV9TY3JlZW5zaG90JTIwMjAyNC0wMi0wNyUyMGF0JTIwMTEuNTIuNTglRTIlODAlQUZBTS5qcGdcIiBhbHQ9XCJcIiBjbGFzcz1cImltYWdlXCI+PC9hPjxwPklmIHlvdSBuZWVkIG1vcmUgZGVzaWduIGNvbnRyb2wgeW91IGNhbiBzdGFydCAmbmJzcDtmcm9tIG9uZSBvZiBvdXIgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHNcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5odW5kcmVkcyBvZiBmcmVlIFdlYmZsb3cgVUk8L2E+LjwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ3VzdG9taXplL3NlbmQgZW1haWxzLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3UgY2FuIGJyYW5kLCBtb2RpZnksIGFuZCB0cmFuc2xhdGUgeW91ciBlbWFpbHMgaW4gdGhlIGRhc2hib2FyZC4gPC9wPjxwPjxhIGhyZWY9XCJodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZW1haWxzXCIgY2xhc3M9XCJsaW5rIGJyZWFrXCI+aHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL3NldHRpbmdzL2VtYWlsczwvYT48L3A+J1xuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTI5NzE0ODE3NTIwOTFcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInN0cmlwZS1jdXN0b21lci1wb3J0YWxcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtYWN0aW9uPSdjdXN0b21lci1wb3J0YWwnXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlN0cmlwZSBDdXN0b21lciBQb3J0YWxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYW4gYXR0cmlidXRlIHRvIGxhdW5jaCB0aGUgU3RyaXBlIEN1c3RvbWVyIFBvcnRhbC48YnI+PC9wPjxwPk1lbWJlcnN0YWNrIHJlbGllcyBvbiBTdHJpcGVcXHUyMDE5cyBob3N0ZWQgQmlsbGluZyBQb3J0YWwgdG8gZW5hYmxlIG1lbWJlcnMgdG8gc2VjdXJlbHkgbWFuYWdlIHBhaWQgcGxhbnMsIHN1YnNjcmlwdGlvbnMsIHB1cmNoYXNlcywgcGF5bWVudCBpbmZvcm1hdGlvbiwgZXRjLjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDaGFuZ2UgYnJhbmRpbmcvZGVzaWduLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5TdHJpcGUgZ2l2ZXMgeW91IGFuIG9wcG9ydHVuaXR5IHRvIGFkZCBhIHNwbGFzaCBvZiBicmFuZGluZyB0byBpdHMgYWxyZWFkeSBiZWF1dGlmdWwgVUkuIDwvcD48cD48YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xMzA3NDU0MTQzMDQyNy1TdHJpcGUtQ2hlY2tvdXQtQnJhbmRpbmctRGVzaWduXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+VmlzaXQgdGhlIGhlbHAgY2VudGVyICZuYnNwO2ZvciBuZXh0IHN0ZXBzLiA8L2E+PC9wPidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJTaG93L2hpZGUgYSBmZWF0dXJlIGluIFN0cmlwZS5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+TWVtYmVyc3RhY2sgZGVjaWRlcyB3aGF0IGZlYXR1cmVzIGFyZSBlbmFibGVkIGJ5IGRlZmF1bHQsIGJ1dCB5b3UgY2FuIGNoYW5nZSB0aGlzIGluIHlvdXIgU3RyaXBlIHNldHRpbmdzLiA8L3A+PHA+PGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTk4NjMzNzU4MDMxNjMtSG93LXRvLUN1c3RvbWl6ZS1Zb3VyLVN0cmlwZS1Ib3N0ZWQtUG9ydGFsXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+VmlzaXQgdGhlIGhlbHAgY2VudGVyICZuYnNwO2ZvciBuZXh0IHN0ZXBzLiA8L2E+PC9wPidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJXaGl0ZS1sYWJlbCB0aGUgXFx4QTBTdHJpcGUgZG9tYWluLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5Zb3UgY2FuIGNoYW5nZSB0aGlzIGluIHlvdXIgU3RyaXBlIHNldHRpbmdzLiA8YnI+PC9wPjxwPjxhIGhyZWY9XCJodHRwczovL3N0cmlwZS5jb20vZG9jcy9wYXltZW50cy9jaGVja291dC9jdXN0b20tZG9tYWluc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlZpc2l0IFN0cmlwZSdzIGhlbHAgY2VudGVyICZuYnNwO2ZvciBuZXh0IHN0ZXBzLiA8L2E+PC9wPmBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODI3MTIwMzI1MzktU3RyaXBlLUN1c3RvbWVyLVBvcnRhbFwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicmVzZW5kLXZlcmlmaWNhdGlvbi1lbWFpbFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1hY3Rpb249J3Jlc2VuZC12ZXJpZmljYXRpb24tZW1haWwnXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlJlc2VuZCBWZXJpZmljYXRpb24gRW1haWxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYW4gYXR0cmlidXRlIHRvIHJlc2VuZCB2ZXJpZmljYXRpb24gZW1haWxzLiA8YnI+PC9wPjxwPk1lbWJlcnN0YWNrIGF1dG9tYXRpY2FsbHkgc2VuZHMgYSB2ZXJpZmljYXRpb24gbWVzc2FnZSwgYnV0IG1lbWJlcnMgY2FuIHJlcXVlc3QgYSBuZXcgZW1haWwganVzdCBpbmNhc2UuIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDdXN0b21pemUvc2VuZCBlbWFpbHMuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPllvdSBjYW4gYnJhbmQsIG1vZGlmeSwgYW5kIHRyYW5zbGF0ZSB5b3VyIGVtYWlscyBpbiB0aGUgZGFzaGJvYXJkLiA8L3A+PHA+PGEgaHJlZj1cImh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9zZXR0aW5ncy9lbWFpbHNcIiBjbGFzcz1cImxpbmsgYnJlYWtcIj5odHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vc2V0dGluZ3MvZW1haWxzPC9hPjwvcD4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6ICdDaGFuZ2UgRW1haWwgXCJGcm9tXCIgQWRkcmVzcy4nLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5NZW1iZXJzdGFjaydzIHBhc3N3b3JkIHJlc2V0IGVtYWlscyBhbmQgZW1haWwgdmVyaWZpY2F0aW9uIGVtYWlscyBjb21lIGZyb20gYSBnZW5lcmljIDxzdHJvbmc+bm8tcmVwbHlAbWVtYmVyc3RhY2suaW88L3N0cm9uZz4gZW1haWwgYWRkcmVzcy48L3A+PHA+V2UgY2FuICZuYnNwO2NoYW5nZSB0aGUgXCJmcm9tXCIgZW1haWwgZm9yIHlvdS48YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xMTE5Mzk5NDU1NTU0Ny1DaGFuZ2UtdGhlLUZyb20tRW1haWwtQWRkcmVzc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPiBMZWFybiBtb3JlIGhlcmU8L2E+LjwvcD5gXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTm90IGdldHRpbmcgZW1haWxzLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5FbWFpbHMgdXN1YWxseSBhcnJpdmUgaW4gYSBmZXcgc2Vjb25kcy4gU2xvdyBkZWxpdmVyeSB0aW1lcyBjb3VsZCBiZSBjYXVzZWQgYnkgc2xvdyBpbnRlcm5ldCwgaW5jcmVhc2VkIGRlbWFuZCwgb3IgdGhlIGVtYWlscyBhcmUgZ29pbmcgdG8gc3BhbS4gPGJyPjwvcD48cD5QbGVhc2UgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvcmVxdWVzdHMvbmV3XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+Y29udGFjdCBzdXBwb3J0PC9hPiBpZiBlbWFpbHMgYXJlIHRha2luZyBsb25nZXIgdGhhbiAzMCBzZWNvbmRzIHRvIGFycml2ZS4gJm5ic3A7PC9wPidcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzg0Mzc2MzA3MzMwODMtRW1haWwtVmVyaWZpY2F0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJsb2dpbi1yZWRpcmVjdFwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1hY3Rpb249J2xvZ2luLXJlZGlyZWN0J1wiLFxuICAgIFwidGl0bGVcIjogXCJMb2dpbiBSZWRpcmVjdFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIGEgYnV0dG9uIHRoYXQgd2lsbCBkeW5hbWljYWxseSByZWRpcmVjdCB0aGUgdXNlciBiYXNlZCBvbiB0aGVpciA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg0NjA4MzcwNzE1XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+bG9naW4gcmVkaXJlY3Q8L2E+LjwvcD48cD5UaGUgYnV0dG9uIGlzIG9ubHkgdmlzaWJsZSBpZiBhIG1lbWJlciBpcyBsb2dnZWQgaW4uPC9wPicsXG4gICAgXCJoZWxwSXRlbXNcIjogW10sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvOTc4MDI4NzIzNjUwNy1Mb2dpbi1SZWRpcmVjdC1CdXR0b25zXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ1cGxvYWQtcHJvZmlsZS1pbWFnZVwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1hY3Rpb249J3Byb2ZpbGUtaW1hZ2UnXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlByb2ZpbGUgSW1hZ2VcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5XZSBmb3VuZCBhbiBhdHRyaWJ1dGUgZm9yIHVwbG9hZGluZyBwcm9maWxlIGltYWdlcy4gPC9wPjxwPlRoZSBpbWFnZSBpcyBzYXZlZCBhdXRvbWF0aWNhbGx5IG9uIHVwbG9hZC4gVXNlIDxzdHJvbmc+ZGF0YS1tcy1tZW1iZXI9IFwicHJvZmlsZS1pbWFnZVwiPC9zdHJvbmc+IHRvIGRpc3BsYXkgaW1hZ2UuIDwvcD4nLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIk15IGZvcm0gaXMgYnJlYWtpbmcuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Qcm9maWxlIGltYWdlIHVwZGF0ZSBidXR0b25zIGFyZSBub3QgYWxsb3dlZCBpbnNpZGUgZm9ybXMuICZuYnNwO1BsZWFzZSByZW1vdmUgdGhlIGF0dHJpYnV0ZSBvciBwbGFjZSBpdCBvdXRzaWRlIG9mIHRoZSBmb3JtLjwvcD5cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkltYWdlcyBhcmUgbm90IGJlaW5nIGRpc3BsYXllZC5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+VGhpcyBmZWF0dXJlIG9ubHkgd29ya3Mgd2l0aCB0aGUgPHN0cm9uZz48Y29kZT4mbHQ7aW1hZ2UmZ3Q7PC9jb2RlPjwvc3Ryb25nPiBlbGVtZW50LiBJdCBkb2VzIG5vdCBzdXBwb3J0IENTUyBiYWNrZ3JvdW5kIGltYWdlcy4gPGJyPjwvcD48cD5NYWtlIHN1cmUgeW91ciBpbWFnZSBlbGVtZW50IGhhcyB0aGUgYXR0cmlidXRlIG9mIDxzdHJvbmc+ZGF0YS1tcy1tZW1iZXI9IFwicHJvZmlsZS1pbWFnZVwiPC9zdHJvbmc+LjwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xNTk3Mzg5MTA4MDczMS1Qcm9maWxlLUltYWdlc1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibWVtYmVyLWRhdGFcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtbWVtYmVyXCIsXG4gICAgXCJ0aXRsZVwiOiBcIk1lbWJlciBEYXRhXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoaXMgZWxlbWVudCB3aWxsIGRpc3BsYXkgYSBtZW1iZXIncyBkYXRhIG9yIGZhbGxiYWNrIHRvIHRoZSBwbGFjZWhvbGRlciB0ZXh0LiA8L3A+PHA+VGhpcyBkYXRhIGlzIG9ubHkgdmlzaWJsZSB0byB0aGUgbWVtYmVyLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHBsYWNlaG9sZGVyIHZhbHVlLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TWVtYmVyc3RhY2sgd2lsbCBmYWxsYmFjayB0byB3aGF0ZXZlciB2YWx1ZSBpcyBzZXQgaW4gV2ViZmxvdy48L3A+XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJEaXNwbGF5IGRhdGEgcHVibGljYWxseS5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+SXQgaXMgb25seSBwb3NzaWJsZSB0byBkaXNwbGF5IGEgbWVtYmVyJ3MgZGF0YSBwdWJsaWNseSBpZiBpdCBpcy4uLiA8YnI+QSkgU3RvcmVkIGluIGEgc2VwYXJhdGUgZGF0YWJhc2UgbGlrZSB0aGUgV2ViZmxvdyBDTVMgKDxhIGhyZWY9XCJodHRwczovL3d3dy5tZW1iZXJzdGFjay5jb20vd2ViZmxvdy10ZW1wbGF0ZXMvcHVibGljLW1lbWJlci1wcm9maWxlc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPnZpZXcgZXhhbXBsZTwvYT4pLiA8YnI+QikmbmJzcDtJcyBhc3NvY2lhdGVkIHdpdGggYSBjb21tZW50IGNyZWF0ZWQgYnkgdGhhdCBtZW1iZXIgKDxhIGhyZWY9XCJodHRwczovL3lvdXR1LmJlLzR1dlJ0UTJkMlVNXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+dmlldyBleGFtcGxlPC9hPikuPC9wPmBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODk5NjYxNTA5MzktTWVtYmVyLURhdGEtQXR0cmlidXRlcy1pbi1XZWJmbG93XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJmYWNlYm9vay1sb2dpblwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1hdXRoLXByb3ZpZGVyPSdmYWNlYm9vaydcIixcbiAgICBcInRpdGxlXCI6IFwiRmFjZWJvb2sgTG9naW5cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TWVtYmVycyBjYW4gdXNlIHRoaXMgYnV0dG9uIHRvIGxvZ2luIHdpdGggRmFjZWJvb2suIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJCbGFuayBwYWdlIC8gZXJyb3IgbWVzc2FnZVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91J2xsIG5lZWQgdG8gY3JlYXRlIHlvdXIgb3duIGRldmVsb3BlciBhY2NvdW50IHdpdGggZWFjaCBzb2NpYWwgYXV0aCBwcm92aWRlci48YnI+PGJyPkNsaWNrIHRoZSBkb2N1bWVudGF0aW9uIGxpbmsgYmVsb3cuPC9wPlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy85MTE2Mjg2Njc5MTk1LUZhY2Vib29rLUF1dGhlbnRpY2F0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJnb29nbGUtbG9naW5cIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtYXV0aC1wcm92aWRlcj0nZ29vZ2xlJ1wiLFxuICAgIFwidGl0bGVcIjogXCJHb29nbGUgTG9naW5cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TWVtYmVycyBjYW4gdXNlIHRoaXMgYnV0dG9uIHRvIGxvZ2luIHdpdGggR29vZ2xlLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQmxhbmsgcGFnZSAvIGVycm9yIG1lc3NhZ2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPllvdSdsbCBuZWVkIHRvIGNyZWF0ZSB5b3VyIG93biBkZXZlbG9wZXIgYWNjb3VudCB3aXRoIGVhY2ggc29jaWFsIGF1dGggcHJvdmlkZXIuPGJyPjxicj5DbGljayB0aGUgZG9jdW1lbnRhdGlvbiBsaW5rIGJlbG93LjwvcD5cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvODMyNzIzNjU0ODM3OS1Hb29nbGUtQXV0aGVudGljYXRpb25cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImxpbmtlZGluLWxvZ2luXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLWF1dGgtcHJvdmlkZXI9J2xpbmtlZGluJ1wiLFxuICAgIFwidGl0bGVcIjogXCJMaW5rZWRJbiBMb2dpblwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5NZW1iZXJzIGNhbiB1c2UgdGhpcyBidXR0b24gdG8gbG9naW4gd2l0aCBMaW5rZWRJbi4gPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkJsYW5rIHBhZ2UgLyBlcnJvciBtZXNzYWdlXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Zb3UnbGwgbmVlZCB0byBjcmVhdGUgeW91ciBvd24gZGV2ZWxvcGVyIGFjY291bnQgd2l0aCBlYWNoIHNvY2lhbCBhdXRoIHByb3ZpZGVyLjxicj48YnI+Q2xpY2sgdGhlIGRvY3VtZW50YXRpb24gbGluayBiZWxvdy48L3A+XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzkxMjg0MDczMzU4MzUtTGlua2VkSW4tQXV0aGVudGljYXRpb25cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNwb3RpZnktbG9naW5cIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtYXV0aC1wcm92aWRlcj0nc3BvdGlmeSdcIixcbiAgICBcInRpdGxlXCI6IFwiU3BvdGlmeSBMb2dpblwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5NZW1iZXJzIGNhbiB1c2UgdGhpcyBidXR0b24gdG8gbG9naW4gd2l0aCBTcG90aWZ5LiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQmxhbmsgcGFnZSAvIGVycm9yIG1lc3NhZ2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPllvdSdsbCBuZWVkIHRvIGNyZWF0ZSB5b3VyIG93biBkZXZlbG9wZXIgYWNjb3VudCB3aXRoIGVhY2ggc29jaWFsIGF1dGggcHJvdmlkZXIuPGJyPjxicj5DbGljayB0aGUgZG9jdW1lbnRhdGlvbiBsaW5rIGJlbG93LjwvcD5cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvOTE1MTY3OTQ1MTgwMy1TcG90aWZ5LUF1dGhlbnRpY2F0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJkcmliYmJsZS1sb2dpblwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy1hdXRoLXByb3ZpZGVyPSdkcmliYmJsZSdcIixcbiAgICBcInRpdGxlXCI6IFwiRHJpYmJibGUgTG9naW5cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TWVtYmVycyBjYW4gdXNlIHRoaXMgYnV0dG9uIHRvIGxvZ2luIHdpdGggRHJpYmJibGUuIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJCbGFuayBwYWdlIC8gZXJyb3IgbWVzc2FnZVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91J2xsIG5lZWQgdG8gY3JlYXRlIHlvdXIgb3duIGRldmVsb3BlciBhY2NvdW50IHdpdGggZWFjaCBzb2NpYWwgYXV0aCBwcm92aWRlci48YnI+PGJyPkNsaWNrIHRoZSBkb2N1bWVudGF0aW9uIGxpbmsgYmVsb3cuPC9wPlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy85MTUxNzI2ODQ1MzM5LURyaWJiYmxlLUF1dGhlbnRpY2F0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJnaXRodWItbG9naW5cIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtYXV0aC1wcm92aWRlcj0nZ2l0aHViJ1wiLFxuICAgIFwidGl0bGVcIjogXCJHaXRodWIgTG9naW5cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TWVtYmVycyBjYW4gdXNlIHRoaXMgYnV0dG9uIHRvIGxvZ2luIHdpdGggR2l0aHViLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQmxhbmsgcGFnZSAvIGVycm9yIG1lc3NhZ2VcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPllvdSdsbCBuZWVkIHRvIGNyZWF0ZSB5b3VyIG93biBkZXZlbG9wZXIgYWNjb3VudCB3aXRoIGVhY2ggc29jaWFsIGF1dGggcHJvdmlkZXIuPGJyPjxicj5DbGljayB0aGUgZG9jdW1lbnRhdGlvbiBsaW5rIGJlbG93LjwvcD5cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvOTE1MTYyOTU2MzI5MS1HaXRIdWItQXV0aGVudGljYXRpb25cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImdhdGVkLWNvbnRlbnRcIixcbiAgICBcInR5cGVcIjogXCJmb3VuZFwiLFxuICAgIFwiZGF0YUF0dHJpYnV0ZVwiOiBcImRhdGEtbXMtY29udGVudFwiLFxuICAgIFwidGl0bGVcIjogXCJHYXRlZCBDb250ZW50XCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZXNlIGF0dHJpYnV0ZXMgd2lsbCBjaGFuZ2UgdGhlIGRpc3BsYXkgc3RhdGUgb2YgJm5ic3A7YW4gZWxlbWVudCBiYXNlZCBvbiB0aGUgdXNlcnMgcGVybWlzc2lvbnMuPC9wPjxwPjxzdHJvbmc+TmVlZHMgcGVybWlzc2lvbiBcXHUyMTkyPC9zdHJvbmc+IEVsZW1lbnQgaXMgaGlkZGVuIGFuZCByZW1vdmVkLiA8L3A+PHA+PHN0cm9uZz5IYXMgcGVybWlzc2lvbiBcXHUyMTkyIDwvc3Ryb25nPnRoZSBlbGVtZW50IGlzIGxlZnQgYXMtaXMuICZuYnNwOzwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJIaWRlIGVsZW1lbnQgaW4gV2ViZmxvdy5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+Rmlyc3QgaGlkZSB0aGUgZWxlbWVudCBpbiBXZWJmbG93LiA8L3A+PHA+VGhlbiwgYWRkICZuYnNwO3RoZSBhdHRyaWJ1dGUgPHN0cm9uZz5kYXRhLW1zLWJpbmQ6c3R5bGU9XCJZT1VSX1ZBTFVFXCI8L3N0cm9uZz4gdG8gY2hhbmdlIHRoZSBzdHlsaW5nIG9mIGFuIGVsZW1lbnQuIFVzZSB0aGUgdmFsdWUgPHN0cm9uZz5kaXNwbGF5OmJsb2NrPC9zdHJvbmc+IHRvIHNldCBpdCB0byBkaXNwbGF5IGJsb2NrIHdoZW4gdmlzaWJsZS4gPC9wPjxwPjxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE2MDE1NzYyNDU4MDExXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+VmlzaXQgdGhlIGhlbHAgY2VudGVyICZuYnNwO2ZvciBtb3JlIGluZm8uIDwvYT48L3A+J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNldCB0byBkaXNwbGF5OmJsb2NrIHRvIHBhZ2UgbG9hZC5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+Rmlyc3QgaGlkZSB0aGUgZWxlbWVudCBpbiBXZWJmbG93LiA8L3A+PHA+VGhlbiwgYWRkICZuYnNwO3RoZSBhdHRyaWJ1dGUgPHN0cm9uZz5kYXRhLW1zLWJpbmQ6c3R5bGU9XCJZT1VSX1ZBTFVFXCI8L3N0cm9uZz4gdG8gY2hhbmdlIHRoZSBzdHlsaW5nIG9mIGFuIGVsZW1lbnQuIFVzZSB0aGUgdmFsdWUgPHN0cm9uZz5kaXNwbGF5OmJsb2NrPC9zdHJvbmc+IHRvIHNldCBpdCB0byBkaXNwbGF5IGJsb2NrIHdoZW4gdmlzaWJsZS4gPC9wPjxwPjxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE2MDE1NzYyNDU4MDExXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+VmlzaXQgdGhlIGhlbHAgY2VudGVyICZuYnNwO2ZvciBtb3JlIGluZm8uIDwvYT48L3A+J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkV4dHJhIHNlY3VyaXR5LlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3UgY2FuIGhvc3QgSFRNTCBjb250ZW50IGFuZCBsaW5rcyBpbnNpZGUgb2YgTWVtYmVyc3RhY2sgZm9yIGV4dHJhIHNlY3VyaXR5LjwvcD48cD48YSBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xNTA3NDIwNTY2OTQwMy1Ib3N0ZWQtQ29udGVudFwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPlZpc2l0IHRoZSBoZWxwIGNlbnRlciAmbmJzcDtmb3IgbW9yZSBpbmZvLiA8L2E+PC9wPidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJJbnZlcnQgZnVuY3Rpb25hbGl0eS5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+WW91IGNhbiBpbnZlcnQgdGhlIGRpc3BsYXkgc3RhdGUgb2YgYW4gZWxlbWVudCBieSBhZGRpbmcgYW4gZXhjbGFtYXRpb24gbWFyay4gPC9wPjxwPkZvciBleGFtcGxlIGRhdGEtbXMtbWVtYmVyPVwiPHN0cm9uZz5tZW1iZXJzPC9zdHJvbmc+XCIgaXMgY29udGVudCB0aGF0IGlzIG9ubHkgYWNjZXNzaWJsZSB0byBtZW1iZXJzLiAmbmJzcDtJZiB3ZSBjaGFuZ2UgaXQgdG8gZGF0YS1tcy1tZW1iZXI9XCI8c3Ryb25nPiFtZW1iZXJzPC9zdHJvbmc+XCIgbm93IHRoYXQgY29udGVudCAmbmJzcDtpcyBOT1QgYXZhaWxhYmxlIHRvIG1lbWJlcnMuIDwvcD4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NDAzMDM2NzY1MzM5LVNob3ctYW5kLUhpZGUtSW5kaXZpZHVhbC1FbGVtZW50cy1kYXRhLW1zLWNvbnRlbnRcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInBvc3QtY3JlYXRvci1kYXRhXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLXBvc3QtY3JlYXRvclwiLFxuICAgIFwidGl0bGVcIjogXCJQb3N0IENyZWF0b3IgRGF0YVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5UaGlzIGVsZW1lbnQgd2lsbCBkaXNwbGF5IHRoZSBjb21tZW50ZXIncyBpbmZvcm1hdGlvbi4gPC9wPjxwPlRoaXMgaW5mb3JtYXRpb24gd2lsbCB1cGRhdGUgYXV0b21hdGljYWxseSBpZiB0aGUgbWVtYmVyIHVwZGF0ZXMgdGhlaXIgcHJvZmlsZS4gPC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkNoYW5nZSBwbGFjZWhvbGRlciB2YWx1ZS5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPk1lbWJlcnN0YWNrIHdpbGwgZmFsbGJhY2sgdG8gd2hhdGV2ZXIgdmFsdWUgaXMgc2V0IGluIFdlYmZsb3cuPC9wPlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xODk2NjI3NTM4MDEyM1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidGhyZWFkLWNyZWF0b3ItZGF0YVwiLFxuICAgIFwidHlwZVwiOiBcImZvdW5kXCIsXG4gICAgXCJkYXRhQXR0cmlidXRlXCI6IFwiZGF0YS1tcy10aHJlYWQtY3JlYXRvclwiLFxuICAgIFwidGl0bGVcIjogXCJUaHJlYWQgQ3JlYXRvciBEYXRhXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoaXMgZWxlbWVudCB3aWxsIGRpc3BsYXkgdGhlIGNvbW1lbnRlcidzIGluZm9ybWF0aW9uLiA8L3A+PHA+VGhpcyBpbmZvcm1hdGlvbiB3aWxsIHVwZGF0ZSBhdXRvbWF0aWNhbGx5IGlmIHRoZSBtZW1iZXIgdXBkYXRlcyB0aGVpciBwcm9maWxlLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ2hhbmdlIHBsYWNlaG9sZGVyIHZhbHVlLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TWVtYmVyc3RhY2sgd2lsbCBmYWxsYmFjayB0byB3aGF0ZXZlciB2YWx1ZSBpcyBzZXQgaW4gV2ViZmxvdy48L3A+XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE4OTY2Mjc1MzgwMTIzXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJicm9rZW4tcGxhbi1zdWZmaXhcIixcbiAgICBcInR5cGVcIjogXCJlcnJvclwiLFxuICAgIFwidGl0bGVcIjogXCJCcm9rZW4gUGxhbiBTdWZmaXhcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSA8c3Ryb25nPmRhdGEtbXMtcGxhbjwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSB3aXRob3V0IGEgJzphZGQnLCAnOnVwZGF0ZScgb3IgJzpyZW1vdmUnIHN1ZmZpeDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NDA2MjIyODY2NDU5XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJicm9rZW4tcHJpY2Utc3VmZml4XCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiQnJva2VuIFByaWNlIFN1ZmZpeFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZSBmb3VuZCBhIDxzdHJvbmc+ZGF0YS1tcy1wcmljZTwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSB3aXRob3V0IGEgJzphZGQnLCAnOnVwZGF0ZScgb3IgJzpyZW1vdmUnIHN1ZmZpeDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NDA2MjIyODY2NDU5XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJicm9rZW4tcGxhbi1idXR0b25cIixcbiAgICBcInR5cGVcIjogXCJlcnJvclwiLFxuICAgIFwidGl0bGVcIjogXCJCcm9rZW4gUGxhbiBCdXR0b25cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSA8c3Ryb25nPmRhdGEtbXMtcGxhbjwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSB3aXRob3V0IGEgZnJlZSBwbGFuIElELjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDcmVhdGUgYSBwYWlkIHBsYW4gYnV0dG9uLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91J2xsIG5lZWQgdG8gc3dhcCB5b3VyIDxzcGFuPmRhdGEtbXMtPHN0cm9uZz5wbGFuPC9zdHJvbmc+PC9zcGFuPiBhdHRyaWJ1dGUgd2l0aCBhIDxzcGFuPmRhdGEtbXMtPHN0cm9uZz5wcmljZTwvc3Ryb25nPjwvc3Bhbj4gYXR0cmlidXRlLiA8L3A+XCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDcmVhdGUgYSBmcmVlIHBsYW4gYnV0dG9uLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5Zb3UnbGwgbmVlZCB0byBsb2NhdGUgeW91ciBwbGFuIGlkIGFuZCBhZGQgaXQgdG8gdGhlIGRhdGEtbXMtcGxhbiBhdHRyaWJ1dGUuIDwvcD48cD5QbGVhc2UgcmVmZXIgdG8gPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTcyNjU1MDI4MjEyNzVcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj50aGlzIGRvYzwvYT4gZm9yIG1vcmUgaW5mby48L3A+YFxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTcyNjU1MDI4MjEyNzVcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImJyb2tlbi1wcmljZS1idXR0b25cIixcbiAgICBcInR5cGVcIjogXCJlcnJvclwiLFxuICAgIFwidGl0bGVcIjogXCJCcm9rZW4gUHJpY2UgQnV0dG9uXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPldlIGZvdW5kIGEgPHN0cm9uZz5kYXRhLW1zLXByaWNlPC9zdHJvbmc+IGRhdGEgYXR0cmlidXRlIHRoYXQgaXMgbm90IHVzaW5nIHRoZSByaWdodCB2YWx1ZS48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiQ3JlYXRlIGEgcGFpZCBwbGFuIGJ1dHRvbi5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+WW91J2xsIG5lZWQgdG8gc3dhcCB5b3VyIDxzdHJvbmc+UGxhbiBJRDwvc3Ryb25nPiBmb3IgYSBtb3JlIHNwZWNpZmljIDxzdHJvbmc+UHJpY2UgSUQ8L3N0cm9uZz4uIDwvcD48cD5QbGVhc2UgcmVmZXIgdG8gPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzQwMzIwMDg3NzIxMS1QYWlkLVBsYW5zXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+dGhpcyBkb2M8L2E+IGZvciBtb3JlIGluZm8uPC9wPmBcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJDcmVhdGUgYSBmcmVlIHBsYW4gYnV0dG9uLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IGA8cD5Zb3UnbGwgbmVlZCB0byByZXBsYWNlIHlvdXIgPHN0cm9uZz5kYXRhLW1zLXByaWNlPC9zdHJvbmc+IGF0dHJpYnV0ZSB3aXRoIGEgPHN0cm9uZz5kYXRhLW1zLXBsYW48L3N0cm9uZz4gYXR0cmlidXRlLjwvcD48cD5QbGVhc2UgcmVmZXIgdG8gPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTcyNjU1MDI4MjEyNzVcIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj50aGlzIGRvYzwvYT4gZm9yIG1vcmUgaW5mby4gPC9wPmBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE3MjY1NTAyODIxMjc1XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJtaXNzaW5nLWF0dHJpYnV0ZS12YWx1ZVwiLFxuICAgIFwidHlwZVwiOiBcImVycm9yXCIsXG4gICAgXCJ0aXRsZVwiOiBcIk1pc3NpbmcgQXR0cmlidXRlIFZhbHVlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPldlIGZvdW5kIGEgPHN0cm9uZz5kYXRhLW1zLXBsYW48L3N0cm9uZz4gb3IgPHN0cm9uZz5kYXRhLW1zLXByaWNlPC9zdHJvbmc+IGRhdGEgYXR0cmlidXRlIHdpdGhvdXQgYSB2YWx1ZS48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW10sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzI1MjQ2NjQ4NDYzNVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiaW1hZ2UtaW5zaWRlLXByb2ZpbGUtZm9ybVwiLFxuICAgIFwidHlwZVwiOiBcImVycm9yXCIsXG4gICAgXCJ0aXRsZVwiOiBcIkltYWdlIGluc2lkZSBQcm9maWxlIEZvcm1cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+RGVzcGl0ZSB0aGUgbmFtZSwgUHJvZmlsZSBJbWFnZSB1cGxvYWQgYnV0dG9ucyBjYW5ub3QgZ28gaW5zaWRlIG9mIGEgcHJvZmlsZSBmb3JtLiA8L3A+PHA+VGhleSBjYW4gZ28gYW55d2hlcmUgb24gdGhlIHBhZ2UsIGV4Y2VwdCBpbnNpZGUgb2YgYSBwcm9maWxlIGZvcm0uIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xNTk3Mzg5MTA4MDczMS1Qcm9maWxlLUltYWdlc1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiaW1hZ2UtaW5zaWRlLXNpZ251cC1mb3JtXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiSW1hZ2UgaW5zaWRlIFNpZ251cCBGb3JtXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPiBJdCBpcyBub3QgcG9zc2libGUgdG8gY29sbGVjdCBhIHByb2ZpbGUgaW1hZ2UgZHVyaW5nIHNpZ24gdXAsIGJ1dCB5b3UgY2FuIGNyZWF0ZSBhbiBvbmJvYXJkaW5nIGZvcm0gdGhhdCBwcm9tcHQgdGhlIHVzZXIgdG8gYWRkIGEgcHJvZmlsZSBpbWFnZSA8ZW0+YWZ0ZXI8L2VtPiBzaWduIHVwLiA8L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW10sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzc4OTQ0OTU3MDU4Ny1DcmVhdGUtYS1NdWx0aS1zdGVwLU9uYm9hcmRpbmctRm9ybS1pbi1XZWJmbG93XCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJpbWFnZS1pbnNpZGUtY29tbWVudC1mb3JtXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiSW1hZ2UgaW5zaWRlIENvbW1lbnQgRm9ybVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Qcm9maWxlIGltYWdlIHVwZGF0ZSBidXR0b25zIGFyZSBub3QgYWxsb3dlZCBpbnNpZGUgZm9ybXMuICZuYnNwO1BsZWFzZSByZW1vdmUgdGhlIGF0dHJpYnV0ZSBvciBwbGFjZSBpdCBvdXRzaWRlIG9mIHRoZSBmb3JtLjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xNTk3Mzg5MTA4MDczMS1Qcm9maWxlLUltYWdlc1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZXh0cmEtbG9naW4tZWxlbWVudHNcIixcbiAgICBcInR5cGVcIjogXCJlcnJvclwiLFxuICAgIFwidGl0bGVcIjogXCJFeHRyYSBMb2dpbiBFbGVtZW50c1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIG5vdC1hbGxvd2VkIGN1c3RvbSBmaWVsZCBhdHRyaWJ1dGVzIGluc2lkZSB5b3VyIGxvZ2luIGZvcm0uPC9wPjxwPllvdSBwcm9iYWJseSBoYXZlIDxzdHJvbmc+ZGF0YS1tcy1mb3JtPVwibG9naW5cIjwvc3Ryb25nPiBhdHRyaWJ1dGUgb24geW91ciA8c3Ryb25nPnNpZ251cCBmb3JtPC9zdHJvbmc+LiA8L3A+JyxcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Nzg1NjI5Mzk3NjU5LUNyZWF0ZS1hLUxvZ2luLUZvcm0taW4tV2ViZmxvd1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwib3JwaGFuLWNvbW1lbnRpbmctdWlcIixcbiAgICBcInR5cGVcIjogXCJlcnJvclwiLFxuICAgIFwidGl0bGVcIjogXCJPcnBoYW4gQ29tbWVudGluZyBBdHRyaWJ1dGVzXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPldlIGZvdW5kIGEgPHN0cm9uZz5kYXRhLW1zLXRocmVhZDwvc3Ryb25nPiBvciA8c3Ryb25nPmRhdGEtbXMtcG9zdDwvc3Ryb25nPiBhdHRyaWJ1dGUgb3V0c2lkZSBvZiBhPHN0cm9uZz4gZGF0YS1tcy1jaGFubmVsPC9zdHJvbmc+IHNlY3Rpb24uIDwvcD48cD5QbGVhc2UgbWFrZSBzdXJlIGFsbCBjb21tZW50aW5nIFVJIGlzIHBsYWNlZCBpbnNpZGUgb2YgYSBwYXJlbnQgPHN0cm9uZz5kYXRhLW1zLWNoYW5uZWwgPC9zdHJvbmc+ZWxlbWVudC4gJm5ic3A7PC9wPlwiLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE4OTY2Mjc1MzgwMTIzXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJwb3N0LWluLXRocmVhZFwiLFxuICAgIFwidHlwZVwiOiBcImVycm9yXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlBvc3QgQXR0cmlidXRlIGluc2lkZSBhIFRocmVhZFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZSBmb3VuZCBhIDxzdHJvbmc+ZGF0YS1tcy1wb3N0PC9zdHJvbmc+IGF0dHJpYnV0ZSBpbnNpZGUgb2YgdGhlIDxzdHJvbmc+dGhyZWFkPC9zdHJvbmc+IHNlY3Rpb24uPC9wPjxwPlRoaXMgdXN1YWxseSBoYXBwZW5zIGlmIHlvdSBzdGFydCB0byBkdXBsaWNhdGUgZWxlbWVudHMgaW4geW91ciBkZXNpZ24uIDwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly93d3cubG9vbS5jb20vc2hhcmUvMjE4YzU4YTNiYWJkNGM0Njg2MTg0ZGMxMmJkYmQ4NzVcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInBsYW4tb24tc29jaWFsLWF1dGhcIixcbiAgICBcInR5cGVcIjogXCJlcnJvclwiLFxuICAgIFwidGl0bGVcIjogXCJQbGFuIGF0dHJpYnV0ZSBvbiBhIHNvY2lhbCBidXR0b25cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSA8c3Ryb25nPmRhdGEtbXMtcGxhbjwvc3Ryb25nPiBvciA8c3Ryb25nPmRhdGEtbXMtcHJpY2U8L3N0cm9uZz4gYXR0cmlidXRlIG9uIGEgPHN0cm9uZz5kYXRhLW1zLWF1dGgtcHJvdmlkZXIgPC9zdHJvbmc+YnV0dG9uLiBUaGVzZSBhdHRyaWJ1dGVzIGRvIG5vdCB3b3JrIHdlbGwgdG9nZXRoZXIuICZuYnNwOzwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9zZWN0aW9ucy85MTg4MzkwMDc4NDkxLVNvY2lhbC1BdXRoZW50aWNhdGlvbi1TU09cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInByaXZhdGUtY3VzdG9tLWZpZWxkXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiUHJpdmF0ZSBDdXN0b20gRmllbGRzXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBgPHA+V2UgZm91bmQgYSA8c3Ryb25nPmRhdGEtbXMtcG9zdC1jcmVhdG9yPC9zdHJvbmc+IG9yIGEgPHN0cm9uZz5kYXRhLW1zLXRocmVhZC1jcmVhdG9yPC9zdHJvbmc+IGF0dHJpYnV0ZSB0aGF0IGlzIHByaXZhdGUuIDwvcD48cD5Zb3UnbGwgbmVlZCB0byB1cGRhdGUgdGhlIDxzdHJvbmc+Y3VzdG9tIGZpZWxkIHNldHRpbmdzPC9zdHJvbmc+IHRvIG1ha2UgdGhpcyBkYXRhIHB1YmxpYy48YnI+IDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE4OTY2Mjc1MzgwMTIzLVdlYmZsb3ctQ29tbWVudGluZyNwdWJsaWMtY3VzdG9tLWZpZWxkc1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPkxlYXJuIGhvdyBcXHUyMTkyPC9hPjwvcD5gLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzE4OTY2Mjc1MzgwMTIzLVdlYmZsb3ctQ29tbWVudGluZyNwdWJsaWMtY3VzdG9tLWZpZWxkc1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibWlzcGxhY2VkLWZvcm0tYXR0cmlidXRlXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiTWlzcGxhY2VkIEZvcm0gQXR0cmlidXRlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiAnPHA+V2UgZm91bmQgYSA8c3Ryb25nPmRhdGEtbXMtZm9ybTwvc3Ryb25nPiBkYXRhIGF0dHJpYnV0ZSBidXQgaXQgaXMgbm90IG9uIGEgPHN0cm9uZz4mbHQ7Zm9ybSZndDsgPC9zdHJvbmc+ZWxlbWVudC4gUGxlYXNlIGNsaWNrIFwiZG9jdW1lbnRhdGlvblwiIHRvIHNlZSBob3cgdG8gZGVidWcuPC9wPicsXG4gICAgXCJoZWxwSXRlbXNcIjogW10sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vd3d3Lmxvb20uY29tL3NoYXJlLzQ4NmUwYjc2MDg0NTQ0NzI5MGM0ZDdiZmQ1YjEwMGVhXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJkdXBsaWNhdGUtaW5zdGFsbC1jb2RlXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiRHVwbGljYXRlIGluc3RhbGwgY29kZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPldlIGZvdW5kIHR3byBpbnN0YW5jZXMgeW91ciBpbnN0YWxsIGNvZGUuIFBsZWFzZSBjbGljayBcImRvY3VtZW50YXRpb25cIiBiZWxvdyBzZWUgaG93IHRvIGRlYnVnLjwvcD4nLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL3d3dy5sb29tLmNvbS9zaGFyZS8zZjNlNTQyNDU4NDQ0Mjk2ODQxYWI5MTAxMDY0NjkzYz9zaWQ9Y2JlMjEyMjItNGU3Ni00NjQ4LWI5NWQtMTU3NGI2MWM4OGMyXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJtaXNzaW5nLWxvZ2luLWVsZW1lbnRzXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiTWlzc2luZyBMb2dpbiBlbGVtZW50c1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPllvdXIgbG9naW4gZm9ybSBpcyBtaXNzaW5nIG9uZSBvZiB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6PC9wPjx1bCByb2xlPVwibGlzdFwiIGNsYXNzPVwibGlzdFwiPjxsaT5kYXRhLW1zLW1lbWJlcj1cIjxhIGhyZWY9XCIjXCI+cGFzc3dvcmQ8L2E+XCI8L2xpPjxsaT5kYXRhLW1zLW1lbWJlcj1cIjxhIGhyZWY9XCIjXCI+ZW1haWw8L2E+XCI8L2xpPjwvdWw+JyxcbiAgICBcImhlbHBJdGVtc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGl0bGVcIjogXCJBZGQgU29jaWFsIEF1dGhlbnRpY2F0aW9uXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogJzxkaXY+WW91IGNhbiBsZWF2ZSBvdXQgcmVxdWlyZWQgZGF0YSBhdHRyaWJ1dGVzIGlmIHlvdXIgZm9ybSBjb250YWlucyBzb2NpYWwgbG9naW4gYnV0dG9ucy4gJm5ic3A7PGJyPjxicj5Zb3UgY2FuIGNvcHkgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHMvYXV0aC1idXR0b25cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5jb21wb25lbnRzPC9hPiBoZXJlLCBhbmQgZmluZCBhZGRpdGlvbmFsIDxhIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL3NlY3Rpb25zLzkxODgzOTAwNzg0OTEtU29jaWFsLUF1dGhlbnRpY2F0aW9uLVNTT2h0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvc2VjdGlvbnMvOTE4ODM5MDA3ODQ5MS1Tb2NpYWwtQXV0aGVudGljYXRpb24tU1NPXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJsaW5rXCI+ZG9jdW1lbnRhdGlvbjwvYT4gaGVyZS4gPC9kaXY+J1xuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzc4NTYyOTM5NzY1OS1DcmVhdGUtYS1Mb2dpbi1Gb3JtLWluLVdlYmZsb3dcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm1pc3Npbmctc2lnbnVwLWVsZW1lbnRzXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiTWlzc2luZyBTaWdudXAgZWxlbWVudHNcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3VyIHNpZ251cCBmb3JtIGlzIG1pc3Npbmcgb25lIG9mIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczo8L3A+PHVsIHJvbGU9XCJsaXN0XCIgY2xhc3M9XCJsaXN0XCI+PGxpPmRhdGEtbXMtbWVtYmVyPVwiPGEgaHJlZj1cIiNcIj5wYXNzd29yZDwvYT5cIjwvbGk+PGxpPmRhdGEtbXMtbWVtYmVyPVwiPGEgaHJlZj1cIiNcIj5lbWFpbDwvYT5cIjwvbGk+PC91bD4nLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkFkZCBTb2NpYWwgQXV0aGVudGljYXRpb25cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiAnPGRpdj5Zb3UgY2FuIGxlYXZlIG91dCByZXF1aXJlZCBkYXRhIGF0dHJpYnV0ZXMgaWYgeW91ciBmb3JtIGNvbnRhaW5zIHNvY2lhbCBsb2dpbiBidXR0b25zLiAmbmJzcDs8YnI+PGJyPllvdSBjYW4gY29weSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWVtYmVyc3RhY2suY29tL3dlYmZsb3ctY29tcG9uZW50cy9hdXRoLWJ1dHRvblwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwibGlua1wiPmNvbXBvbmVudHM8L2E+IGhlcmUsIGFuZCBmaW5kIGFkZGl0aW9uYWwgPGEgaHJlZj1cImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvc2VjdGlvbnMvOTE4ODM5MDA3ODQ5MS1Tb2NpYWwtQXV0aGVudGljYXRpb24tU1NPaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9zZWN0aW9ucy85MTg4MzkwMDc4NDkxLVNvY2lhbC1BdXRoZW50aWNhdGlvbi1TU09cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cImxpbmtcIj5kb2N1bWVudGF0aW9uPC9hPiBoZXJlLiA8L2Rpdj4nXG4gICAgICB9XG4gICAgXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NDI0MTI5MDAzNTQ3LUNyZWF0ZS1hLVNpZ251cC1Gb3JtLWluLVdlYmZsb3dcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm1pc3NpbmctcmVkaXJlY3RcIixcbiAgICBcInR5cGVcIjogXCJ3YXJuaW5nXCIsXG4gICAgXCJ0aXRsZVwiOiBcIk1pc3NpbmcgUmVkaXJlY3RcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6ICc8cD5Zb3VyIGZvcmdvdCBwYXNzd29yZCBmb3JtIGRvZXMgbm90IGhhdmUgYSByZWRpcmVjdCBzZXQuIDwvcD48ZGl2PjxhIGRhdGEtZG9jdW1lbnRhdGlvbj1cIlwiIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODcwMDkzODgzMTUtQ3JlYXRlLWEtRm9yZ290LVBhc3N3b3JkLUZvcm0tZm9yLWxvZ2dlZC1vdXQtdXNlcnMjaF8wMUhROURFU1lHMkI1Mzg4MllKMjBaUUo2S1wiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiaGVscC1vcHRpb24gdy1pbmxpbmUtYmxvY2tcIj48ZGl2PkRvY3VtZW50YXRpb248L2Rpdj48ZGl2IGNsYXNzPVwic3ZnIHctZW1iZWRcIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIC05NjAgOTYwIDk2MFwiIHdpZHRoPVwiMjRcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0yODAtMjgwcS04MyAwLTE0MS41LTU4LjVUODAtNDgwcTAtODMgNTguNS0xNDEuNVQyODAtNjgwaDEyMHExNyAwIDI4LjUgMTEuNVQ0NDAtNjQwcTAgMTctMTEuNSAyOC41VDQwMC02MDBIMjgwcS01MCAwLTg1IDM1dC0zNSA4NXEwIDUwIDM1IDg1dDg1IDM1aDEyMHExNyAwIDI4LjUgMTEuNVQ0NDAtMzIwcTAgMTctMTEuNSAyOC41VDQwMC0yODBIMjgwWm04MC0xNjBxLTE3IDAtMjguNS0xMS41VDMyMC00ODBxMC0xNyAxMS41LTI4LjVUMzYwLTUyMGgyNDBxMTcgMCAyOC41IDExLjVUNjQwLTQ4MHEwIDE3LTExLjUgMjguNVQ2MDAtNDQwSDM2MFptMjAwIDE2MHEtMTcgMC0yOC41LTExLjVUNTIwLTMyMHEwLTE3IDExLjUtMjguNVQ1NjAtMzYwaDEyMHE1MCAwIDg1LTM1dDM1LTg1cTAtNTAtMzUtODV0LTg1LTM1SDU2MHEtMTcgMC0yOC41LTExLjVUNTIwLTY0MHEwLTE3IDExLjUtMjguNVQ1NjAtNjgwaDEyMHE4MyAwIDE0MS41IDU4LjVUODgwLTQ4MHEwIDgzLTU4LjUgMTQxLjVUNjgwLTI4MEg1NjBaXCI+PC9wYXRoPjwvc3ZnPjwvZGl2PjwvYT48L2Rpdj4nLFxuICAgIFwiaGVscEl0ZW1zXCI6IFtdLFxuICAgIFwiZG9jdW1lbnRhdGlvbkxpbmtcIjogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzc3ODcwMDkzODgzMTUtQ3JlYXRlLWEtRm9yZ290LVBhc3N3b3JkLUZvcm0tZm9yLWxvZ2dlZC1vdXQtdXNlcnMjaF8wMUhROURFU1lHMkI1Mzg4MllKMjBaUUo2S1wiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibWlzcGxhY2VkLWluc3RhbGwtY29kZVwiLFxuICAgIFwidHlwZVwiOiBcIndhcm5pbmdcIixcbiAgICBcInRpdGxlXCI6IFwiTWlzcGxhY2VkIGluc3RhbGwgY29kZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogJzxwPlRoZSBNZW1iZXJzdGFjayBJbnN0YWxsIHNjcmlwdCBpcyBvdXRzaWRlIG9mIHRoZSAmbmJzcDs8c3Ryb25nPiZsdDtoZWFkZXImZ3Q7PC9zdHJvbmc+IGNvZGUgc2VjdGlvbi48L3A+PHA+V2UgcmVjb21tZW5kIG1vdmluZyB0aGlzIHNjcmlwdCB0byB0aGUgdmVyeSB0b3Agb2YgdGhlIDxzdHJvbmc+Jmx0O2hlYWRlciZndDs8L3N0cm9uZz4gY29kZSBzZWN0aW9uLjwvcD48ZGl2PjxhIGRhdGEtZG9jdW1lbnRhdGlvbj1cIlwiIGhyZWY9XCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzcyNTMwOTA3Njg1MzktSW5zdGFsbGluZy1NZW1iZXJzdGFjay1pbi1XZWJmbG93XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJoZWxwLW9wdGlvbiB3LWlubGluZS1ibG9ja1wiPjxkaXY+RG9jdW1lbnRhdGlvbjwvZGl2PjxkaXYgY2xhc3M9XCJzdmcgdy1lbWJlZFwiPjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgLTk2MCA5NjAgOTYwXCIgd2lkdGg9XCIyNFwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTI4MC0yODBxLTgzIDAtMTQxLjUtNTguNVQ4MC00ODBxMC04MyA1OC41LTE0MS41VDI4MC02ODBoMTIwcTE3IDAgMjguNSAxMS41VDQ0MC02NDBxMCAxNy0xMS41IDI4LjVUNDAwLTYwMEgyODBxLTUwIDAtODUgMzV0LTM1IDg1cTAgNTAgMzUgODV0ODUgMzVoMTIwcTE3IDAgMjguNSAxMS41VDQ0MC0zMjBxMCAxNy0xMS41IDI4LjVUNDAwLTI4MEgyODBabTgwLTE2MHEtMTcgMC0yOC41LTExLjVUMzIwLTQ4MHEwLTE3IDExLjUtMjguNVQzNjAtNTIwaDI0MHExNyAwIDI4LjUgMTEuNVQ2NDAtNDgwcTAgMTctMTEuNSAyOC41VDYwMC00NDBIMzYwWm0yMDAgMTYwcS0xNyAwLTI4LjUtMTEuNVQ1MjAtMzIwcTAtMTcgMTEuNS0yOC41VDU2MC0zNjBoMTIwcTUwIDAgODUtMzV0MzUtODVxMC01MC0zNS04NXQtODUtMzVINTYwcS0xNyAwLTI4LjUtMTEuNVQ1MjAtNjQwcTAtMTcgMTEuNS0yOC41VDU2MC02ODBoMTIwcTgzIDAgMTQxLjUgNTguNVQ4ODAtNDgwcTAgODMtNTguNSAxNDEuNVQ2ODAtMjgwSDU2MFpcIj48L3BhdGg+PC9zdmc+PC9kaXY+PC9hPjwvZGl2PicsXG4gICAgXCJoZWxwSXRlbXNcIjogW10sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzI1MzA5MDc2ODUzOS1JbnN0YWxsaW5nLU1lbWJlcnN0YWNrLWluLVdlYmZsb3dcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInBsYW4td2l0aG91dC1hY3Rpb25cIixcbiAgICBcInR5cGVcIjogXCJ3YXJuaW5nXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlBsYW4gQnV0dG9uIHdpdGhvdXQgYW4gQWN0aW9uXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPldlIGZvdW5kIGEgPHN0cm9uZz5kYXRhLW1zLXBsYW48L3N0cm9uZz4gYXR0cmlidXRlIHdpdGhvdXQgYSA8c3Ryb25nPnBhZ2UgbGluazwvc3Ryb25nPiBvciA8c3Ryb25nPmRhdGEtbXMtbW9kYWw8L3N0cm9uZz4uPC9wPjxwPllvdSBjYW4gZGlzcmVnYXJkIHRoaXMgd2FybmluZyBpZiB0aGF0IHdhcyBpbnRlbnRpb25hbC48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVkaXJlY3QgdG8gbXkgc2lnbnVwIHBhZ2UuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Zb3UgbmVlZCB0byBtYW51YWxseSBzZXQgdGhlIGxpbmsgdG8geW91ciBzaWdudXAgcGFnZSAoanVzdCBsaWtlIGFueSBvdGhlciBsaW5rIG9uIHlvdXIgc2l0ZSkuPC9wPjxpbWcgbG9hZGluZz0nbGF6eScgc3JjPSdodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YTk0M2Y1NjcyZmZkMDZjODE4NTZlZV9TY3JlZW5zaG90JTIwMjAyNC0wMS0xOCUyMGF0JTIwMTAuMjkuNDklRTIlODAlQUZBTS5wbmcnIGFsdD0nJz48cD5JZiB5b3UgZG9uJ3QgaGF2ZSBhIHNpZ251cCBwYWdlIHlldCwgcGxlYXNlIGNyZWF0ZSBvbmUgYW5kIHRoZW4gYWRkIGEgPGEgaHJlZj0naHR0cHM6Ly93d3cubWVtYmVyc3RhY2suY29tL3dlYmZsb3ctY29tcG9uZW50cy9zaWdudXAnIHRhcmdldD0nX2JsYW5rJz5zaWduIHVwIGNvbXBvbmVudDwvYT4uPC9wPlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTGF1bmNoIGEgc2lnbnVwIG1vZGFsLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91J3JlIGFsbW9zdCB0aGVyZSEgWW91IG5lZWQgdG8gYWRkIHRoZSA8c3Ryb25nPmRhdGEtbXMtbW9kYWw9J3NpZ251cCcgPC9zdHJvbmc+YXR0cmlidXRlIHRvIHlvdXIgYnV0dG9uLjwvcD5cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJkb2N1bWVudGF0aW9uTGlua1wiOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvMTkzOTQ5NTU3MTQ0NTlcIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInByaWNlLXdpdGhvdXQtYWN0aW9uXCIsXG4gICAgXCJ0eXBlXCI6IFwid2FybmluZ1wiLFxuICAgIFwidGl0bGVcIjogXCJQcmljZSBCdXR0b24gd2l0aG91dCBhbiBBY3Rpb25cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2UgZm91bmQgYSA8c3Ryb25nPmRhdGEtbXMtcHJpY2U8L3N0cm9uZz4gYXR0cmlidXRlIHdpdGhvdXQgYSA8c3Ryb25nPnBhZ2UgbGluazwvc3Ryb25nPiBvciA8c3Ryb25nPmRhdGEtbXMtbW9kYWw8L3N0cm9uZz4uPC9wPjxwPllvdSBjYW4gZGlzcmVnYXJkIHRoaXMgd2FybmluZyBpZiB0aGF0IHdhcyBpbnRlbnRpb25hbC48L3A+XCIsXG4gICAgXCJoZWxwSXRlbXNcIjogW1xuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwibGF1bmNoIHRoZSBjaGVja291dCBwcm9jZXNzLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhpcyBhdHRyaWJ1dGUgd2lsbCBvbmx5IGxhdW5jaCB0aGUgY2hlY2tvdXQgcHJvY2VzcyBmb3IgbG9nZ2VkLWluIG1lbWJlcnMuIDwvcD48cD4gVGhlIGNoZWNrb3V0IHdpbGwgbGF1bmNoIGF1dG9tYXRpY2FsbHkgYWZ0ZXIgeW91IGNyZWF0ZSBhbiBhY2NvdW50IG9yIGxvZyBpbi4gPC9wPlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiUmVkaXJlY3QgdG8gbXkgc2lnbnVwIHBhZ2UuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Zb3UgbmVlZCB0byBtYW51YWxseSBzZXQgdGhlIGxpbmsgdG8geW91ciBzaWdudXAgcGFnZSAoanVzdCBsaWtlIGFueSBvdGhlciBsaW5rIG9uIHlvdXIgc2l0ZSkuPC9wPjxpbWcgbG9hZGluZz0nbGF6eScgc3JjPSdodHRwczovL2Fzc2V0cy1nbG9iYWwud2Vic2l0ZS1maWxlcy5jb20vNjVhNmQ4N2Y3YWUzMDg0NGNkZTA5MTFiLzY1YTk0M2Y1NjcyZmZkMDZjODE4NTZlZV9TY3JlZW5zaG90JTIwMjAyNC0wMS0xOCUyMGF0JTIwMTAuMjkuNDklRTIlODAlQUZBTS5wbmcnIGFsdD0nJz48cD5JZiB5b3UgZG9uJ3QgaGF2ZSBhIHNpZ251cCBwYWdlIHlldCwgcGxlYXNlIGNyZWF0ZSBvbmUgYW5kIHRoZW4gYWRkIGEgPGEgaHJlZj0naHR0cHM6Ly93d3cubWVtYmVyc3RhY2suY29tL3dlYmZsb3ctY29tcG9uZW50cy9zaWdudXAnIHRhcmdldD0nX2JsYW5rJz5zaWduIHVwIGNvbXBvbmVudDwvYT4uPC9wPlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRpdGxlXCI6IFwiTGF1bmNoIGEgc2lnbnVwIG1vZGFsLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91J3JlIGFsbW9zdCB0aGVyZSEgWW91IG5lZWQgdG8gYWRkIHRoZSA8c3Ryb25nPmRhdGEtbXMtbW9kYWw9J3NpZ251cCcgPC9zdHJvbmc+YXR0cmlidXRlIHRvIHlvdXIgYnV0dG9uLjwvcD5cIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJpbmNvcnJlY3QtcGxhbi1pZFwiLFxuICAgIFwidHlwZVwiOiBcImVycm9yXCIsXG4gICAgXCJ0aXRsZVwiOiBcIkluY29ycmVjdCBQbGFuIElEXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoaXMgcGFnZSBjb250YWlucyBhIDxiPmRhdGEtbXMtcGxhbj0nUExBTl9JRCc8L2I+IHRoYXQgaXMgaW5jb3JyZWN0IG9yIGZyb20gYW5vdGhlciBwcm9qZWN0LiBSZXBsYWNlIGl0IHdpdGggYW4gYXR0cmlidXRlIGZyb20geW91ciBwbGFucyBwYWdlLjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8yMzM0Njg4NTgwMDIxOVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiaW5jb3JyZWN0LXByaWNlLWlkXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXJyb3JcIixcbiAgICBcInRpdGxlXCI6IFwiSW5jb3JyZWN0IFByaWNlIElEXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoaXMgcGFnZSBjb250YWlucyBhIDxiPmRhdGEtbXMtcHJpY2U9J1BSSUNFX0lEJzwvYj4gdGhhdCBpcyBpbmNvcnJlY3Qgb3IgZnJvbSBhbm90aGVyIHByb2plY3QuIFJlcGxhY2UgaXQgd2l0aCBhbiBhdHRyaWJ1dGUgZnJvbSB5b3VyIHByaWNlcyBwYWdlLjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8yMzM0Njg4NTgwMDIxOVwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicHJpY2UtdXBkYXRlXCIsXG4gICAgXCJ0eXBlXCI6IFwiZm91bmRcIixcbiAgICBcImRhdGFBdHRyaWJ1dGVcIjogXCJkYXRhLW1zLXByaWNlOnVwZGF0ZVwiLFxuICAgIFwidGl0bGVcIjogXCJQcmljZSBVcGRhdGVcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+WW91IHByZXZpb3VzbHkgc2VsZWN0ZWQgYSBwYWlkIHBsYW4gYXR0cmlidXRlLjwvcD5cIixcbiAgICBcImhlbHBJdGVtc1wiOiBbXSxcbiAgICBcImRvY3VtZW50YXRpb25MaW5rXCI6IFwiI1wiXG4gIH1cbl07XG5mdW5jdGlvbiBnZXRBbmRMb2dTZXNzaW9uU3RvcmFnZUl0ZW0oa2V5LCBpbnNwZWN0b3JEYXRhKSB7XG4gIGNvbnN0IGl0ZW0gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gIGlmIChpdGVtKSB7XG4gICAgY29uc29sZS5sb2coYCVjJHtrZXl9IGNhcnQgZm91bmQ6ICR7aXRlbX1gLCBcImNvbG9yOiBncmVlblwiKTtcbiAgICBTZXRDYXJ0RGF0YShpdGVtKTtcbiAgICBBZGRJbnNwZWN0b3JEYXRhKGluc3BlY3RvckRhdGEpO1xuICB9XG59XG5mdW5jdGlvbiBjaGVja0NhcnRTZXNzaW9uU3RvcmFnZSgpIHtcbiAgZ2V0QW5kTG9nU2Vzc2lvblN0b3JhZ2VJdGVtKFwibXNfcGxhblwiLCBcInJlYWR5LWZvci1zaWdudXBcIik7XG4gIGdldEFuZExvZ1Nlc3Npb25TdG9yYWdlSXRlbShcIm1zX3ByaWNlXCIsIFwicmVhZHktZm9yLWNoZWNrb3V0XCIpO1xufVxuZnVuY3Rpb24gY2hlY2tGb3VuZERhdGFBdHRyaWJ1dGVzJDEoKSB7XG4gIGNvbnN0IGZvdW5kSXRlbXMgPSBpbnNwZWN0b3JJdGVtcy5maWx0ZXIoXG4gICAgKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJmb3VuZFwiXG4gICk7XG4gIGNvbnN0IGNoZWNrZWRBdHRyaWJ1dGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGZvdW5kSXRlbXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVLZXkgPSBpdGVtLmRhdGFBdHRyaWJ1dGUuaW5jbHVkZXMoXCI6XCIpID8gaXRlbS5kYXRhQXR0cmlidXRlLnJlcGxhY2UoLzovZywgXCJcXFxcOlwiKSA6IGl0ZW0uZGF0YUF0dHJpYnV0ZTtcbiAgICBpZiAoY2hlY2tlZEF0dHJpYnV0ZXMuaGFzKGF0dHJpYnV0ZUtleSkpXG4gICAgICBjb250aW51ZTtcbiAgICBjaGVja2VkQXR0cmlidXRlcy5hZGQoYXR0cmlidXRlS2V5KTtcbiAgICBjb25zdCBkYXRhQXR0cmlidXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgWyR7YXR0cmlidXRlS2V5fV1gKTtcbiAgICBpZiAoZGF0YUF0dHJpYnV0ZSkge1xuICAgICAgY29uc29sZS5sb2coYCVjJHtpdGVtLmlkfSBmb3VuZGAsIFwiY29sb3I6IGdyZWVuXCIpO1xuICAgICAgQWRkSW5zcGVjdG9yRGF0YShpdGVtLmlkKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGxvZ0Vycm9yKG1lc3NhZ2UsIGluc3BlY3RvckRhdGFLZXkpIHtcbiAgY29uc29sZS5sb2coYCVjJHttZXNzYWdlfWAsIFwiY29sb3I6IHJlZFwiKTtcbiAgQWRkSW5zcGVjdG9yRGF0YShpbnNwZWN0b3JEYXRhS2V5KTtcbn1cbmZ1bmN0aW9uIGxvZ1dhcm5pbmcobWVzc2FnZSwgaW5zcGVjdG9yRGF0YUtleSkge1xuICBjb25zb2xlLmxvZyhgJWMke21lc3NhZ2V9YCwgXCJjb2xvcjogeWVsbG93XCIpO1xuICBBZGRJbnNwZWN0b3JEYXRhKGluc3BlY3RvckRhdGFLZXkpO1xufVxuZnVuY3Rpb24gY2hlY2tFbGVtZW50cyhzZWxlY3RvciwgY2hlY2tGbikge1xuICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50MikgPT4gY2hlY2tGbihlbGVtZW50MikpO1xufVxuZnVuY3Rpb24gY2hlY2tBdHRyaWJ1dGVGb3JBZGRPclVwZGF0ZShlbGVtZW50MiwgYXR0cmlidXRlTmFtZSwgaW5zcGVjdG9yRGF0YUtleSkge1xuICBjb25zdCBhdHRyaWJ1dGVOYW1lcyA9IGVsZW1lbnQyLmdldEF0dHJpYnV0ZU5hbWVzKCk7XG4gIGNvbnN0IHZhbGlkQXR0cmlidXRlID0gYXR0cmlidXRlTmFtZXMuZmluZChcbiAgICAoYXR0ck5hbWUpID0+IGF0dHJOYW1lLnN0YXJ0c1dpdGgoYXR0cmlidXRlTmFtZSArIFwiOlwiKSAmJiAoZWxlbWVudDIuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKS5zdGFydHNXaXRoKFwicGxuX1wiKSB8fCBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpLnN0YXJ0c1dpdGgoXCJwcmNfXCIpKVxuICApO1xuICBpZiAoIXZhbGlkQXR0cmlidXRlKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFRoZSAke2F0dHJpYnV0ZU5hbWV9IGF0dHJpYnV0ZSdzIHN1ZmZpeCBpcyBpbmNvcnJlY3QgKGUuZy4gJHthdHRyaWJ1dGVOYW1lfTphZGQsICR7YXR0cmlidXRlTmFtZX06dXBkYXRlLCAke2F0dHJpYnV0ZU5hbWV9OnJlbW92ZSkuYDtcbiAgICBsb2dFcnJvcihlcnJvck1lc3NhZ2UsIGluc3BlY3RvckRhdGFLZXkpO1xuICAgIGFkZFhSYXlFcnJvckVsZW1lbnQoZWxlbWVudDIsIGVycm9yTWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFhSYXlFcnJvckVsZW1lbnQoZWxlbWVudDIsIG1lc3NhZ2UpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBBZGRYUmF5RXJyb3JFbGVtZW50KHsgZWxlbWVudDogZWxlbWVudDIsIG1lc3NhZ2UgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY2hlY2tGb3JtRWxlbWVudHMoZm9ybVR5cGUpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCBmb3JtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBgW2RhdGEtbXMtZm9ybT0nJHtmb3JtVHlwZX0nXWBcbiAgICApO1xuICAgIGZvcm1zLmZvckVhY2goKGZvcm0pID0+IHtcbiAgICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1tcy1tZW1iZXI9J2VtYWlsJ11cIik7XG4gICAgICBjb25zdCBwYXNzd29yZElucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBcIltkYXRhLW1zLW1lbWJlcj0ncGFzc3dvcmQnXVwiXG4gICAgICApO1xuICAgICAgY29uc3Qgc29jaWFsQXV0aCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIltkYXRhLW1zLWF1dGgtcHJvdmlkZXJdXCIpO1xuICAgICAgaWYgKCFlbWFpbElucHV0IHx8ICFwYXNzd29yZElucHV0ICYmICFzb2NpYWxBdXRoKSB7XG4gICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgIGBNaXNzaW5nICR7Zm9ybVR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBmb3JtVHlwZS5zbGljZSgxKX0gRWxlbWVudHNgLFxuICAgICAgICAgIGBtaXNzaW5nLSR7Zm9ybVR5cGV9LWVsZW1lbnRzYFxuICAgICAgICApO1xuICAgICAgICBhZGRYUmF5RXJyb3JFbGVtZW50KFxuICAgICAgICAgIGZvcm0sXG4gICAgICAgICAgYE1pc3NpbmcgJHtmb3JtVHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGZvcm1UeXBlLnNsaWNlKDEpfSBFbGVtZW50c2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG52YXIgY2hlY2tlZEZvckVycm9ycyA9IGZhbHNlO1xuZnVuY3Rpb24gY2hlY2tFcnJvcnMoKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgbGV0IGFwcERhdGE7XG4gICAgQXBwU3RvcmUuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWRhdGEuaW5pdGlhbFZhbHVlICYmIGNoZWNrZWRGb3JFcnJvcnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGFwcERhdGEgPSBkYXRhO1xuICAgICAgICBjaGVja2VkRm9yRXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgcnVuQ2hlY2tzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gcnVuQ2hlY2tzKCkge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY2hlY2tFbGVtZW50cyhcIltkYXRhLW1zLXBsYW5dLCBbZGF0YS1tcy1wcmljZV1cIiwgKGVsZW1lbnQyKSA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQyLmhhc0F0dHJpYnV0ZShcImRhdGEtbXMtcGxhblwiKSkge1xuICAgICAgICAgICAgY2hlY2tBdHRyaWJ1dGVGb3JBZGRPclVwZGF0ZShcbiAgICAgICAgICAgICAgZWxlbWVudDIsXG4gICAgICAgICAgICAgIFwiZGF0YS1tcy1wbGFuXCIsXG4gICAgICAgICAgICAgIFwiYnJva2VuLXBsYW4tc3VmZml4XCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbGVtZW50Mi5oYXNBdHRyaWJ1dGUoXCJkYXRhLW1zLXByaWNlXCIpKSB7XG4gICAgICAgICAgICBjaGVja0F0dHJpYnV0ZUZvckFkZE9yVXBkYXRlKFxuICAgICAgICAgICAgICBlbGVtZW50MixcbiAgICAgICAgICAgICAgXCJkYXRhLW1zLXByaWNlXCIsXG4gICAgICAgICAgICAgIFwiYnJva2VuLXByaWNlLXN1ZmZpeFwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrRWxlbWVudHMoXG4gICAgICAgICAgXCJbZGF0YS1tcy1wbGFuXFxcXDp1cGRhdGVdLCBbZGF0YS1tcy1wbGFuXFxcXDphZGRdLCBbZGF0YS1tcy1wbGFuXFxcXDpyZW1vdmVdXCIsXG4gICAgICAgICAgKGVsZW1lbnQyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZSA9IGVsZW1lbnQyLmdldEF0dHJpYnV0ZShcImRhdGEtbXMtcGxhbjp1cGRhdGVcIikgfHwgZWxlbWVudDIuZ2V0QXR0cmlidXRlKFwiZGF0YS1tcy1wbGFuOmFkZFwiKSB8fCBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXBsYW46cmVtb3ZlXCIpO1xuICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICAgICAgICBsb2dFcnJvcihcIkJyb2tlbiBQbGFuIEJ1dHRvbiBGb3VuZFwiLCBcImJyb2tlbi1wbGFuLWJ1dHRvblwiKTtcbiAgICAgICAgICAgICAgYWRkWFJheUVycm9yRWxlbWVudChlbGVtZW50MiwgXCJCcm9rZW4gUGxhbiBCdXR0b24gRm91bmRcIik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYXR0cmlidXRlVmFsdWUuc3RhcnRzV2l0aChcInBsbl9cIikpIHtcbiAgICAgICAgICAgICAgbG9nRXJyb3IoXCJCcm9rZW4gUGxhbiBCdXR0b24gRm91bmRcIiwgXCJicm9rZW4tcGxhbi1idXR0b25cIik7XG4gICAgICAgICAgICAgIGFkZFhSYXlFcnJvckVsZW1lbnQoZWxlbWVudDIsIFwiQnJva2VuIFBsYW4gQnV0dG9uIEZvdW5kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgY2hlY2tFbGVtZW50cyhcbiAgICAgICAgICBcIltkYXRhLW1zLXByaWNlXFxcXDp1cGRhdGVdLCBbZGF0YS1tcy1wcmljZVxcXFw6YWRkXSwgW2RhdGEtbXMtcHJpY2VcXFxcOnJlbW92ZV1cIixcbiAgICAgICAgICAoZWxlbWVudDIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWVzID0gZWxlbWVudDIuZ2V0QXR0cmlidXRlTmFtZXMoKTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWVzLmZvckVhY2goKGF0dHJOYW1lKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChhdHRyTmFtZS5zdGFydHNXaXRoKFwiZGF0YS1tcy1wcmljZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZS5pbmNsdWRlcyhcIjpcIikpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHN1ZmZpeCA9IGF0dHJOYW1lLnNwbGl0KFwiOlwiKVsxXTtcbiAgICAgICAgICAgICAgICAgIGlmIChzdWZmaXggPT09IFwiYWRkXCIgfHwgc3VmZml4ID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZWxlbWVudDIuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKS5zdGFydHNXaXRoKFwicHJjX1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCcm9rZW4gUHJpY2UgQnV0dG9uIEZvdW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJyb2tlbi1wcmljZS1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgYWRkWFJheUVycm9yRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQyLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCcm9rZW4gUHJpY2UgQnV0dG9uIEZvdW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN1ZmZpeCA9PT0gXCJyZW1vdmVcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudDIuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKSAhPT0gXCJhbGxcIikge1xuICAgICAgICAgICAgICAgICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCcm9rZW4gUHJpY2UgQnV0dG9uIEZvdW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJyb2tlbi1wcmljZS1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgYWRkWFJheUVycm9yRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQyLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCcm9rZW4gUHJpY2UgQnV0dG9uIEZvdW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgICAgICAgICAgICBcIkJyb2tlbiBQcmljZSBCdXR0b24gRm91bmRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJicm9rZW4tcHJpY2UtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBhZGRYUmF5RXJyb3JFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50MixcbiAgICAgICAgICAgICAgICAgICAgXCJCcm9rZW4gUHJpY2UgQnV0dG9uIEZvdW5kXCJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIFtcInByb2ZpbGVcIiwgXCJzaWdudXBcIiwgXCJjb21tZW50XCJdLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICBjaGVja0VsZW1lbnRzKGBbZGF0YS1tcy1mb3JtPScke3R5cGV9J11gLCAoZm9ybSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvZmlsZUltYWdlVXBsb2FkQnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICBcIltkYXRhLW1zLWFjdGlvbj0ncHJvZmlsZS1pbWFnZSddXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocHJvZmlsZUltYWdlVXBsb2FkQnV0dG9uKSB7XG4gICAgICAgICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgICAgICAgIGBQcm9maWxlIEltYWdlIFVwbG9hZCBCdXR0b24gRm91bmQgSW5zaWRlICR7dHlwZX0gRm9ybWAsXG4gICAgICAgICAgICAgICAgYGltYWdlLWluc2lkZS0ke3R5cGV9LWZvcm1gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGFkZFhSYXlFcnJvckVsZW1lbnQoXG4gICAgICAgICAgICAgICAgcHJvZmlsZUltYWdlVXBsb2FkQnV0dG9uLFxuICAgICAgICAgICAgICAgIGBQcm9maWxlIEltYWdlIFVwbG9hZCBCdXR0b24gRm91bmQgSW5zaWRlICR7dHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSl9IEZvcm1gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja0VsZW1lbnRzKFwiW2RhdGEtbXMtZm9ybT0nbG9naW4nXVwiLCAoZm9ybSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGludmFsaWRMb2dpbkVsZW1lbnRzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgXCJbZGF0YS1tcy1tZW1iZXJdOm5vdChbZGF0YS1tcy1tZW1iZXI9J2VtYWlsJ10pOm5vdChbZGF0YS1tcy1tZW1iZXI9J3Bhc3N3b3JkJ10pXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChpbnZhbGlkTG9naW5FbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsb2dFcnJvcihcbiAgICAgICAgICAgICAgXCJFeHRyYSBMb2dpbiBFbGVtZW50cyBGb3VuZCBJbnNpZGUgTG9naW4gRm9ybVwiLFxuICAgICAgICAgICAgICBcImV4dHJhLWxvZ2luLWVsZW1lbnRzXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpbnZhbGlkTG9naW5FbGVtZW50cy5mb3JFYWNoKFxuICAgICAgICAgICAgICAoZWxlbWVudDIpID0+IGFkZFhSYXlFcnJvckVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZWxlbWVudDIsXG4gICAgICAgICAgICAgICAgXCJFeHRyYSBMb2dpbiBFbGVtZW50cyBGb3VuZCBJbnNpZGUgTG9naW4gRm9ybVwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tFbGVtZW50cyhcbiAgICAgICAgICBcIltkYXRhLW1zLXByaWNlXSwgW2RhdGEtbXMtcGxhbl0sIFtkYXRhLW1zLXBsYW5cXFxcOmFkZF0sIFtkYXRhLW1zLXBsYW5cXFxcOnVwZGF0ZV0sIFtkYXRhLW1zLXBsYW5cXFxcOnJlbW92ZV0sIFtkYXRhLW1zLXByaWNlXFxcXDphZGRdLCBbZGF0YS1tcy1wcmljZVxcXFw6dXBkYXRlXVwiLFxuICAgICAgICAgIChlbGVtZW50MikgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXByaWNlXCIpIHx8IGVsZW1lbnQyLmdldEF0dHJpYnV0ZShcImRhdGEtbXMtcGxhblwiKSB8fCBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXBsYW46YWRkXCIpIHx8IGVsZW1lbnQyLmdldEF0dHJpYnV0ZShcImRhdGEtbXMtcGxhbjp1cGRhdGVcIikgfHwgZWxlbWVudDIuZ2V0QXR0cmlidXRlKFwiZGF0YS1tcy1wbGFuOnJlbW92ZVwiKSB8fCBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXByaWNlOmFkZFwiKSB8fCBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXByaWNlOnVwZGF0ZVwiKTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVWYWx1ZSkge1xuICAgICAgICAgICAgICBjb25zdCBmcmVlUGxhbnMgPSBhcHBEYXRhLnBsYW5zLmZpbHRlcihcbiAgICAgICAgICAgICAgICAocGxhbikgPT4gcGxhbi5wcmljZXMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNvbnN0IHBhaWRQbGFucyA9IGFwcERhdGEucGxhbnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChwbGFuKSA9PiBwbGFuLnByaWNlcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNvbnN0IGZyZWVQbGFuSWRzID0gZnJlZVBsYW5zLm1hcCgocGxhbikgPT4gcGxhbi5pZCk7XG4gICAgICAgICAgICAgIGNvbnN0IHBhaWRQbGFuSWRzID0gcGFpZFBsYW5zLm1hcCgocGxhbikgPT4gcGxhbi5wcmljZXMubWFwKChwcmljZSkgPT4gcHJpY2UuaWQpKS5mbGF0KCk7XG4gICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVWYWx1ZS5zdGFydHNXaXRoKFwicGxuX1wiKSAmJiAhZnJlZVBsYW5JZHMuaW5jbHVkZXMoYXR0cmlidXRlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbG9nRXJyb3IoXCJJbmNvcnJlY3QgUGxhbiBJRFwiLCBcImluY29ycmVjdC1wbGFuLWlkXCIpO1xuICAgICAgICAgICAgICAgIGFkZFhSYXlFcnJvckVsZW1lbnQoZWxlbWVudDIsIFwiSW5jb3JyZWN0IFBsYW4gSURcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZVZhbHVlLnN0YXJ0c1dpdGgoXCJwcmNfXCIpICYmICFwYWlkUGxhbklkcy5pbmNsdWRlcyhhdHRyaWJ1dGVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBsb2dFcnJvcihcIkluY29ycmVjdCBQcmljZSBJRFwiLCBcImluY29ycmVjdC1wcmljZS1pZFwiKTtcbiAgICAgICAgICAgICAgICBhZGRYUmF5RXJyb3JFbGVtZW50KGVsZW1lbnQyLCBcIkluY29ycmVjdCBQcmljZSBJRFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgW1wiW2RhdGEtbXMtdGhyZWFkXVwiLCBcIltkYXRhLW1zLXBvc3RdXCJdLmZvckVhY2goKHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgY2hlY2tFbGVtZW50cyhzZWxlY3RvciwgKGVsZW1lbnQyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQyLmNsb3Nlc3QoXCJbZGF0YS1tcy1jaGFubmVsXVwiKSkge1xuICAgICAgICAgICAgICBsb2dFcnJvcihcbiAgICAgICAgICAgICAgICBcIk9ycGhhbiBDb21tZW50aW5nIFVJIEZvdW5kXCIsXG4gICAgICAgICAgICAgICAgXCJvcnBoYW4tY29tbWVudGluZy11aVwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGFkZFhSYXlFcnJvckVsZW1lbnQoZWxlbWVudDIsIFwiT3JwaGFuIENvbW1lbnRpbmcgVUkgRm91bmRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja0VsZW1lbnRzKFwiW2RhdGEtbXMtdGhyZWFkXSBbZGF0YS1tcy1wb3N0XVwiLCAoZWxlbWVudDIpID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudDIuZ2V0QXR0cmlidXRlKFwiZGF0YS1tcy1wb3N0XCIpID09PSBcInNob3dUaHJlYWRzXCIpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgbG9nRXJyb3IoXCJQb3N0IEluc2lkZSBUaHJlYWQgRm91bmRcIiwgXCJwb3N0LWluLXRocmVhZFwiKTtcbiAgICAgICAgICBhZGRYUmF5RXJyb3JFbGVtZW50KGVsZW1lbnQyLCBcIlBvc3QgSW5zaWRlIFRocmVhZCBGb3VuZFwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrRWxlbWVudHMoXCJbZGF0YS1tcy1hdXRoLXByb3ZpZGVyXVwiLCAoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgaWYgKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXBsYW5cXFxcOmFkZFwiKSB8fCBidXR0b24uZ2V0QXR0cmlidXRlKFwiZGF0YS1tcy1wbGFuXFxcXDp1cGRhdGVcIikgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZShcImRhdGEtbXMtcGxhblxcXFw6cmVtb3ZlXCIpIHx8IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1zLXByaWNlXFxcXDphZGRcIikgfHwgYnV0dG9uLmdldEF0dHJpYnV0ZShcImRhdGEtbXMtcHJpY2VcXFxcOnVwZGF0ZVwiKSB8fCBidXR0b24uZ2V0QXR0cmlidXRlKFwiZGF0YS1tcy1wcmljZVxcXFw6cmVtb3ZlXCIpKSB7XG4gICAgICAgICAgICBsb2dFcnJvcihcbiAgICAgICAgICAgICAgXCJQbGFuIG9yIFByaWNlIEF0dHJpYnV0ZSBGb3VuZCBvbiBTb2NpYWwgQnV0dG9uXCIsXG4gICAgICAgICAgICAgIFwicGxhbi1vbi1zb2NpYWwtYXV0aFwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYWRkWFJheUVycm9yRWxlbWVudChcbiAgICAgICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgICAgICBcIlBsYW4gb3IgUHJpY2UgQXR0cmlidXRlIEZvdW5kIG9uIFNvY2lhbCBCdXR0b25cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjaGVja0N1c3RvbUZpZWxkVmlzaWJpbGl0eSA9IChlbGVtZW50MiwgYXR0cmlidXRlLCBtZXNzYWdlS2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgY3VzdG9tRmllbGRLZXkgPSBlbGVtZW50Mi5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgICBjb25zdCBjdXN0b21GaWVsZCA9IGFwcERhdGEuY3VzdG9tRmllbGRzLmZpbmQoXG4gICAgICAgICAgICAoZmllbGQpID0+IGZpZWxkLmtleSA9PT0gY3VzdG9tRmllbGRLZXlcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChjdXN0b21GaWVsZCAmJiBjdXN0b21GaWVsZC52aXNpYmlsaXR5ID09PSBcIlBSSVZBVEVcIikge1xuICAgICAgICAgICAgbG9nRXJyb3IoXG4gICAgICAgICAgICAgIGBQcml2YXRlIEN1c3RvbSBGaWVsZCBGb3VuZCBvbiAke2F0dHJpYnV0ZX1gLFxuICAgICAgICAgICAgICBtZXNzYWdlS2V5XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYWRkWFJheUVycm9yRWxlbWVudChcbiAgICAgICAgICAgICAgZWxlbWVudDIsXG4gICAgICAgICAgICAgIGBQcml2YXRlIEN1c3RvbSBGaWVsZCBGb3VuZCBvbiAke2F0dHJpYnV0ZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgW1wiW2RhdGEtbXMtcG9zdC1jcmVhdG9yXVwiLCBcIltkYXRhLW1zLXRocmVhZC1jcmVhdG9yXVwiXS5mb3JFYWNoKFxuICAgICAgICAgICAgKHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICAgIGNoZWNrRWxlbWVudHMoc2VsZWN0b3IsIChlbGVtZW50MikgPT4ge1xuICAgICAgICAgICAgICAgIGNoZWNrQ3VzdG9tRmllbGRWaXNpYmlsaXR5KFxuICAgICAgICAgICAgICAgICAgZWxlbWVudDIsXG4gICAgICAgICAgICAgICAgICBzZWxlY3Rvci5zdWJzdHJpbmcoMSwgc2VsZWN0b3IubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICAgICAgICBcInByaXZhdGUtY3VzdG9tLWZpZWxkXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9LCAxZTMpO1xuICAgICAgICBjaGVja0VsZW1lbnRzKFwiW2RhdGEtbXMtZm9ybV06bm90KGZvcm0pXCIsIChlbGVtZW50MikgPT4ge1xuICAgICAgICAgIGxvZ0Vycm9yKFxuICAgICAgICAgICAgXCJNaXNwbGFjZWQgRm9ybSBBdHRyaWJ1dGUgRm91bmRcIixcbiAgICAgICAgICAgIFwibWlzcGxhY2VkLWZvcm0tYXR0cmlidXRlXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGFkZFhSYXlFcnJvckVsZW1lbnQoZWxlbWVudDIsIFwiTWlzcGxhY2VkIEZvcm0gQXR0cmlidXRlIEZvdW5kXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW5zdGFsbFNjcmlwdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgIFwic2NyaXB0W3NyYz0naHR0cHM6Ly9hcGkubWVtYmVyc3RhY2suY29tL3N0YXRpYy9tZW1iZXJzdGFjay5qcyddXCJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbGxTY3JpcHRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBsb2dFcnJvcihcbiAgICAgICAgICAgIFwiRHVwbGljYXRlIEluc3RhbGwgQ29kZSBGb3VuZFwiLFxuICAgICAgICAgICAgXCJkdXBsaWNhdGUtaW5zdGFsbC1jb2RlXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHlpZWxkIGNoZWNrRm9ybUVsZW1lbnRzKFwic2lnbnVwXCIpO1xuICAgICAgICB5aWVsZCBjaGVja0Zvcm1FbGVtZW50cyhcImxvZ2luXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGFkZFhSYXlXYXJuaW5nRWxlbWVudChlbGVtZW50MiwgbWVzc2FnZSkge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIEFkZFhSYXlXYXJuaW5nRWxlbWVudCh7IGVsZW1lbnQ6IGVsZW1lbnQyLCBtZXNzYWdlIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrV2FybmluZ3MoKSB7XG4gIGNvbnN0IGZvcmdvdFBhc3N3b3JkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgXCJbZGF0YS1tcy1mb3JtPSdmb3Jnb3QtcGFzc3dvcmQnXVwiXG4gICk7XG4gIGlmIChmb3Jnb3RQYXNzd29yZEZvcm0gJiYgIWZvcmdvdFBhc3N3b3JkRm9ybS5nZXRBdHRyaWJ1dGUoXCJyZWRpcmVjdFwiKSkge1xuICAgIGxvZ1dhcm5pbmcoXG4gICAgICBcIkZvcmdvdCBQYXNzd29yZCBGb3JtIE1pc3NpbmcgUmVkaXJlY3RcIixcbiAgICAgIFwibWlzc2luZy1yZWRpcmVjdFwiXG4gICAgKTtcbiAgICBhZGRYUmF5V2FybmluZ0VsZW1lbnQoXG4gICAgICBmb3Jnb3RQYXNzd29yZEZvcm0sXG4gICAgICBcIkZvcmdvdCBQYXNzd29yZCBGb3JtIE1pc3NpbmcgUmVkaXJlY3RcIlxuICAgICk7XG4gIH1cbiAgY29uc3QgaW5zdGFsbFNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgXCJzY3JpcHRbc3JjPSdodHRwczovL2FwaS5tZW1iZXJzdGFjay5jb20vc3RhdGljL21lbWJlcnN0YWNrLmpzJ11cIlxuICApO1xuICBpZiAoaW5zdGFsbFNjcmlwdCAmJiBpbnN0YWxsU2NyaXB0LnBhcmVudEVsZW1lbnQudGFnTmFtZSAhPT0gXCJIRUFEXCIpIHtcbiAgICBsb2dXYXJuaW5nKFwiTWlzcGxhY2VkIEluc3RhbGwgQ29kZVwiLCBcIm1pc3BsYWNlZC1pbnN0YWxsLWNvZGVcIik7XG4gIH1cbiAgY29uc3QgcGxhbkJ1dHRvbnNSYXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgIFwiW2RhdGEtbXMtcGxhblxcXFw6dXBkYXRlXSwgW2RhdGEtbXMtcGxhblxcXFw6YWRkXVwiXG4gICk7XG4gIGNvbnN0IHBsYW5CdXR0b25zID0gQXJyYXkuZnJvbShwbGFuQnV0dG9uc1JhdykuZmlsdGVyKChidXR0b24pID0+IHtcbiAgICByZXR1cm4gYnV0dG9uLnRhZ05hbWUgPT09IFwiQlVUVE9OXCIgfHwgYnV0dG9uLnRhZ05hbWUgPT09IFwiQVwiO1xuICB9KTtcbiAgcGxhbkJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgaWYgKGJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiB8fCAhYnV0dG9uLmdldEF0dHJpYnV0ZShcImhyZWZcIikgfHwgIWJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpICYmICFidXR0b24uZ2V0QXR0cmlidXRlKFwiZGF0YS1tcy1tb2RhbFwiKSkge1xuICAgICAgbG9nV2FybmluZyhcIlBsYW4gV2l0aG91dCBBY3Rpb25cIiwgXCJwbGFuLXdpdGhvdXQtYWN0aW9uXCIpO1xuICAgICAgYWRkWFJheVdhcm5pbmdFbGVtZW50KGJ1dHRvbiwgXCJQbGFuIEJ1dHRvbiBXaXRob3V0IEFjdGlvblwiKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBwcmljZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgIFwiW2RhdGEtbXMtcHJpY2VcXFxcOmFkZF0sIFtkYXRhLW1zLXByaWNlXFxcXDp1cGRhdGVdXCJcbiAgKTtcbiAgcHJpY2VCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgIGlmIChidXR0b24uZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgfHwgIWJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpIHx8ICFidXR0b24uZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSAmJiAhYnV0dG9uLmdldEF0dHJpYnV0ZShcImRhdGEtbXMtbW9kYWxcIikpIHtcbiAgICAgIGxvZ1dhcm5pbmcoXCJQcmljZSBXaXRob3V0IEFjdGlvblwiLCBcInByaWNlLXdpdGhvdXQtYWN0aW9uXCIpO1xuICAgICAgYWRkWFJheVdhcm5pbmdFbGVtZW50KGJ1dHRvbiwgXCJQcmljZSBCdXR0b24gV2l0aG91dCBBY3Rpb25cIik7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrZXIoKSB7XG4gIGNoZWNrQ2FydFNlc3Npb25TdG9yYWdlKCk7XG4gIGNoZWNrRm91bmREYXRhQXR0cmlidXRlcyQxKCk7XG4gIGNoZWNrRXJyb3JzKCk7XG4gIGNoZWNrV2FybmluZ3MoKTtcbn1cbmZ1bmN0aW9uIGFkZF9jc3MkZyh0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLTFkNzE1czZcIiwgXCJzdmcuc3ZlbHRlLTFkNzE1czZ7d2lkdGg6MzRweDttYXgtaGVpZ2h0OjI2cHg7aGVpZ2h0OjEwMCV9XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JEEoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoMDtcbiAgbGV0IHBhdGgxO1xuICBsZXQgcGF0aDI7XG4gIGxldCBwYXRoMztcbiAgbGV0IHBhdGg0O1xuICBsZXQgcGF0aDU7XG4gIGxldCBwYXRoNjtcbiAgbGV0IHBhdGg3O1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGgwID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgcGF0aDEgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBwYXRoMiA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIHBhdGgzID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgcGF0aDQgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBwYXRoNSA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIHBhdGg2ID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgcGF0aDcgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImNsaXAtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImRcIiwgXCJNMjU2Ljk5OSA0MDkuNjZDMjc3LjI2OCA0MDkuNjYgMjk1Ljk3NiA0MDIuOTc0IDMxMS4wMzcgMzkxLjY4OEMzMzUuODMyIDQwOC41NzggMzY4LjU0IDQxMi42MjMgMzk3Ljk2IDM5OS41MjRDNDQzLjE0NSAzNzkuNDA2IDQ2My40NjcgMzI2LjQ2OCA0NDMuMzQ5IDI4MS4yODNMMzkxLjIwNyAxNjQuMTcxQzM3MS4wOSAxMTguOTg2IDMxOC4xNTEgOTguNjY1NCAyNzIuOTY2IDExOC43ODNDMjY2LjYwOSAxMjEuNjE0IDI2MC43NDMgMTI1LjA5NCAyNTUuNDEzIDEyOS4xMTJDMjUwLjMxNCAxMjUuMzY0IDI0NC43MzcgMTIyLjEwMyAyMzguNzE5IDExOS40MjNDMTkzLjUzNCA5OS4zMDU1IDE0MC41OTYgMTE5LjYyNyAxMjAuNDc4IDE2NC44MTJMNjguMzM3IDI4MS45MjNDNDguMjE5MyAzMjcuMTA4IDY4LjU0MDQgMzgwLjA0NyAxMTMuNzI1IDQwMC4xNjRDMTQzLjgwMSA0MTMuNTU1IDE3Ny4zMTIgNDA5LjAzIDIwMi4yOTIgMzkxLjE4MUMyMTcuNDY3IDQwMi43NzQgMjM2LjQyOSA0MDkuNjYgMjU2Ljk5OSA0MDkuNjZaXCIpO1xuICAgICAgYXR0cihwYXRoMCwgXCJmaWxsXCIsIFwiYmxhY2tcIik7XG4gICAgICBhdHRyKHBhdGgxLCBcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICBhdHRyKHBhdGgxLCBcImNsaXAtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICBhdHRyKHBhdGgxLCBcImRcIiwgXCJNMjU1LjAyNyAxNTYuMDQ5QzI2MS42NjggMTQ4LjAxOSAyNzAuMjE3IDE0MS4zNiAyODAuMzgzIDEzNi44MzRDMzE1LjU3NCAxMjEuMTY2IDM1Ni44MDQgMTM2Ljk5MyAzNzIuNDcyIDE3Mi4xODRMNDI1LjAxNyAyOTAuMjAxQzQ0MC42ODUgMzI1LjM5MyA0MjQuODU5IDM2Ni42MjMgMzg5LjY2NyAzODIuMjkxQzM2MS41IDM5NC44MzIgMzI5LjQ2NCAzODcuMTk2IDMwOS43NjMgMzY1LjYwM0MyOTYuNzk5IDM4MC42MzkgMjc3LjYxMSAzOTAuMTU4IDI1Ni4xOTkgMzkwLjE1OEMyMzQuNDAyIDM5MC4xNTggMjE0LjkwOSAzODAuMjkzIDIwMS45NDEgMzY0Ljc4NUMxODIuMzYgMzg3LjQwOCAxNDkuNTgyIDM5NS42MjcgMTIwLjgzNCAzODIuODI3Qzg1LjY0MjEgMzY3LjE1OSA2OS44MTU0IDMyNS45MjkgODUuNDgzNiAyOTAuNzM3TDEzOC4wMjggMTcyLjcyQzE1My42OTcgMTM3LjUyOCAxOTQuOTI3IDEyMS43MDIgMjMwLjExOCAxMzcuMzdDMjQwLjA1NiAxNDEuNzk1IDI0OC40NSAxNDguMjU4IDI1NS4wMjcgMTU2LjA0OVpcIik7XG4gICAgICBhdHRyKHBhdGgxLCBcImZpbGxcIiwgXCJ3aGl0ZVwiKTtcbiAgICAgIGF0dHIocGF0aDIsIFwiZFwiLCBcIk0zNTUuNzYyIDIzNS4xNkwzODguMzY0IDMwNy40NTZDMzk0Ljk2MSAzMjIuMDg2IDM4OC4yOTYgMzM5LjIyNiAzNzMuNDc4IDM0NS43MzlDMzU4LjY2MyAzNTIuMjU0IDM0MS4zMDMgMzQ1LjY3MyAzMzQuNzA1IDMzMS4wNDRMMzA4LjM1MiAyNzIuNjAxTDI5Ni43MzggMjk5LjYxN1YyMzUuMTZIMzU1Ljc2MlpcIik7XG4gICAgICBhdHRyKHBhdGgyLCBcImZpbGxcIiwgXCIjMkFBOEZGXCIpO1xuICAgICAgYXR0cihwYXRoMywgXCJkXCIsIFwiTTM1OS4yOTUgMjQyLjk5NUwzNjYuMDQyIDI1Ny45NTNDMzYxLjk2NiAyNTYuNTU2IDM1Ny41OTEgMjU1Ljc5NiAzNTMuMDM0IDI1NS43OTZDMzM0LjIxMSAyNTUuNzk2IDMxOC40NTggMjY4Ljc1MiAzMTQuNDQ1IDI4Ni4xMTRMMzA4LjM1MiAyNzIuNjAxTDMwMS44OTQgMjg3LjYyMlYyNDIuOTk1SDM1OS4yOTVaXCIpO1xuICAgICAgYXR0cihwYXRoMywgXCJmaWxsXCIsIFwiIzM5MzkzOVwiKTtcbiAgICAgIGF0dHIocGF0aDMsIFwiZmlsbC1vcGFjaXR5XCIsIFwiMC4yXCIpO1xuICAgICAgYXR0cihwYXRoNCwgXCJkXCIsIFwiTTI2MS4xODYgMjMzLjg5VjI4NS4wODZIMjA2Ljg3NkwyMDEuMjQ2IDI3Mi42MDFMMTk1Ljg3OSAyODUuMDg2SDEzNS44MDVWMjc2LjM5OUwxNzMuNDU3IDE4OC44MTlDMTc4LjIxOSAxNzcuNzQzIDE4OS4xMzcgMTcxLjEwNiAyMDAuNjA1IDE3MS4xNDVDMjExLjg4NyAxNzEuMTA2IDIyMi42NjggMTc3LjUyNSAyMjcuNTUxIDE4OC4zNTVMMjU0Ljc5MiAyNDguNzY0TDI2MS4xODYgMjMzLjg5WlwiKTtcbiAgICAgIGF0dHIocGF0aDQsIFwiZmlsbFwiLCBcIiMwMTdBQ0VcIik7XG4gICAgICBhdHRyKHBhdGg1LCBcImRcIiwgXCJNMjU0Ljc1MiAyNDguNjc3TDI1NC43OTIgMjQ4Ljc2NEwyODAuNTYzIDE4OC44MTlDMjg1LjMyNSAxNzcuNzQzIDI5Ni4yNDMgMTcxLjEwNiAzMDcuNzExIDE3MS4xNDVDMzE4Ljk5MyAxNzEuMTA2IDMyOS43NzQgMTc3LjUyNSAzMzQuNjU2IDE4OC4zNTVMMzY2LjAxMiAyNTcuODkyQzM1OS42ODkgMjUyLjUwMSAzNTEuNDUzIDI0OS4yNCAzNDIuNDQyIDI0OS4yNEMzMjYuNzg2IDI0OS4yNCAzMTMuNDYgMjU5LjA4NCAzMDguNDYzIDI3Mi44NDZMMzA4LjM1MiAyNzIuNjAxTDI4My4wMzcgMzMxLjQ4N0MyNzYuNjk5IDM0Ni4yMjggMjU5LjQ1OSAzNTMuMTA2IDI0NC41MjkgMzQ2Ljg0OUMyNDMuMDY4IDM0Ni4yMzYgMjQxLjY4MyAzNDUuNTIxIDI0MC4zOCAzNDQuNzE1QzIzNC45MDUgMzQxLjc3NiAyMzAuMzMgMzM3LjA5OSAyMjcuNiAzMzEuMDQ0TDIwMS4zNDggMjcyLjgyN0MyMDUuMyAyNzMuOTQ1IDIwOS40NzQgMjc0LjU0MyAyMTMuNzg5IDI3NC41NDNDMjMxLjk0NyAyNzQuNTQzIDI0Ny41OTkgMjYzLjk0OCAyNTQuNzUyIDI0OC42NzdaXCIpO1xuICAgICAgYXR0cihwYXRoNSwgXCJmaWxsXCIsIFwiI0FFREVGRlwiKTtcbiAgICAgIGF0dHIocGF0aDYsIFwiZFwiLCBcIk0yMDEuMDgzIDI3Mi45OEwxODIuMTc5IDMxNi45NTRDMTc3LjU2OCAzMTkuMDQzIDE3Mi40MzEgMzIwLjIwNyAxNjcuMDE1IDMyMC4yMDdDMTQ4LjAxNiAzMjAuMjA3IDEzMi40NDYgMzA1Ljg4NyAxMzEuMDI2IDI4Ny41MTdMMTQ0IDI1Ny4zMzlDMTUwLjI0NyAyNTIuMjMxIDE1OC4yNjcgMjQ5LjE2MSAxNjcuMDE1IDI0OS4xNjFDMTgyLjc2IDI0OS4xNjEgMTk2LjE1IDI1OS4xMDggMjAxLjA4MyAyNzIuOThaXCIpO1xuICAgICAgYXR0cihwYXRoNiwgXCJmaWxsXCIsIFwiYmxhY2tcIik7XG4gICAgICBhdHRyKHBhdGg3LCBcImRcIiwgXCJNMTk1LjUzNSAyODUuODg2TDE3NS45MyAzMzEuNDg3QzE2OS41OTMgMzQ2LjIyOCAxNTIuMzUzIDM1My4xMDYgMTM3LjQyMyAzNDYuODQ5QzEyMi40OTIgMzQwLjU5MSAxMTUuNTI3IDMyMy41NjkgMTIxLjg2NCAzMDguODI3TDE0My42MzMgMjU4LjE5MkMxNDguMjQxIDI1Ni4xNzggMTUzLjMzNyAyNTUuMDU5IDE1OC42OTcgMjU1LjA1OUMxNzcuMjAzIDI1NS4wNTkgMTkyLjU2NSAyNjguMzkgMTk1LjUzNSAyODUuODg2WlwiKTtcbiAgICAgIGF0dHIocGF0aDcsIFwiZmlsbFwiLCBcIiMzOTM5MzlcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiNjAuNTcgMTExLjAyIDM5MC41NCAyOTguNjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJjbGFzc1wiLCBcInN2ZWx0ZS0xZDcxNXM2XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDApO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDEpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDIpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDMpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDQpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDUpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDYpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aDcpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBNZW1iZXJzdGFja0xvZ28gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JEEsIHNhZmVfbm90X2VxdWFsLCB7fSwgYWRkX2NzcyRnKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCR6KGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJNNDgwLTQyNCAyODQtMjI4cS0xMSAxMS0yOCAxMXQtMjgtMTFxLTExLTExLTExLTI4dDExLTI4bDE5Ni0xOTYtMTk2LTE5NnEtMTEtMTEtMTEtMjh0MTEtMjhxMTEtMTEgMjgtMTF0MjggMTFsMTk2IDE5NiAxOTYtMTk2cTExLTExIDI4LTExdDI4IDExcTExIDExIDExIDI4dC0xMSAyOEw1MzYtNDgwbDE5NiAxOTZxMTEgMTEgMTEgMjh0LTExIDI4cS0xMSAxMS0yOCAxMXQtMjgtMTFMNDgwLTQyNFpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAtOTYwIDk2MCA5NjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBJbnNwZWN0b3JCYWRnZU9wZW4gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JHosIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRfY3NzJGYodGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS1yaHZlaXdcIiwgXCIubXMtaW5zcGVjdG9yLWJhZGdlLnN2ZWx0ZS1yaHZlaXd7cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjEwcHg7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7ei1pbmRleDoyMTQ3NDgzNjQ4ICFpbXBvcnRhbnQ7YmFja2dyb3VuZDojZmZmO3BhZGRpbmc6MCA3cHg7bWFyZ2luOjA7Ym94LXNoYWRvdzowIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOnN0cmV0Y2g7Y29sb3I6IzAwMDtiYWNrZ3JvdW5kLWNvbG9yOiNmYWYzZTE7Ym9yZGVyOjFweCBzb2xpZCAjZDc4ZTJjO2JvcmRlci1yYWRpdXM6NHB4O2ZvbnQtc2l6ZToxMnB4O2ZvbnQtd2VpZ2h0OjcwMDtmb250LWZhbWlseTpQbHVzIEpha2FydGEgU2Fucywgc2Fucy1zZXJpZjtnYXA6N3B4O2hlaWdodDo0MnB4fS5tcy1pbnNwZWN0b3ItYmFkZ2UtLWVycm9yLnN2ZWx0ZS1yaHZlaXd7YmFja2dyb3VuZC1jb2xvcjojZjZjZmNhO2JvcmRlci1jb2xvcjojZTA2NjU3fS5tcy1pbnNwZWN0b3ItYmFkZ2VfX3RleHQtd3JhcHBlci5zdmVsdGUtcmh2ZWl3e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtnYXA6N3B4fS5tcy1pbnNwZWN0b3ItYmFkZ2VfX2xvZ28uc3ZlbHRlLXJodmVpd3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyfS5tcy1pbnNwZWN0b3ItYmFkZ2VfX3RleHQuc3ZlbHRlLXJodmVpd3thbGlnbi1zZWxmOmNlbnRlcn0ubXMtaW5zcGVjdG9yLWJhZGdlX19kaXZpZGVyLnN2ZWx0ZS1yaHZlaXd7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNkODhlMmJ9Lm1zLWluc3BlY3Rvci1iYWRnZV9fY291bnQuc3ZlbHRlLXJodmVpd3tib3JkZXI6MXB4IHNvbGlkICNjMWMxYzE7Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbG9yOiMwMDA7cGFkZGluZzowIDdweDttYXJnaW46N3B4IDA7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZX0ubXMtaW5zcGVjdG9yLWJhZGdlX19jb3VudC0tb3Blbi5zdmVsdGUtcmh2ZWl3e2JhY2tncm91bmQtY29sb3I6I2ZmZjtjb2xvcjojMDAwO3BhZGRpbmc6MH0ubXMtaW5zcGVjdG9yLWJhZGdlX19lcnJvci1pbmRpY2F0b3Iuc3ZlbHRlLXJodmVpd3t3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtY29sb3I6I2UwNjY1Nztib3JkZXItcmFkaXVzOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO3RyYW5zZm9ybTp0cmFuc2xhdGUoNTAlLCAtNTAlKX1cIik7XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9ja18xJDEoY3R4KSB7XG4gIGxldCBzcGFuO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuLnRleHRDb250ZW50ID0gXCJIaWRlIEluc3BlY3RvclwiO1xuICAgICAgYXR0cihzcGFuLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWJhZGdlX190ZXh0IHN2ZWx0ZS1yaHZlaXdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzcGFuLCBhbmNob3IpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzcGFuKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiQ4KGN0eCkge1xuICBsZXQgc3BhbjtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IFwiVGVzdCBNb2RlXCI7XG4gICAgICBhdHRyKHNwYW4sIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItYmFkZ2VfX3RleHQgc3ZlbHRlLXJodmVpd1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHNwYW4sIGFuY2hvcik7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHNwYW4pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJGIoY3R4KSB7XG4gIGxldCBzcGFuO1xuICBsZXQgc3Bhbl90cmFuc2l0aW9uO1xuICBsZXQgY3VycmVudDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgYXR0cihzcGFuLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWJhZGdlX19lcnJvci1pbmRpY2F0b3Igc3ZlbHRlLXJodmVpd1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHNwYW4sIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKCFjdXJyZW50KVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCFzcGFuX3RyYW5zaXRpb24pXG4gICAgICAgICAgc3Bhbl90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihzcGFuLCBmYWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgdHJ1ZSk7XG4gICAgICAgIHNwYW5fdHJhbnNpdGlvbi5ydW4oMSk7XG4gICAgICB9KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgaWYgKCFzcGFuX3RyYW5zaXRpb24pXG4gICAgICAgIHNwYW5fdHJhbnNpdGlvbiA9IGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24oc3BhbiwgZmFkZSwgeyBkdXJhdGlvbjogMzAwIH0sIGZhbHNlKTtcbiAgICAgIHNwYW5fdHJhbnNpdGlvbi5ydW4oMCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHNwYW4pO1xuICAgICAgaWYgKGRldGFjaGluZyAmJiBzcGFuX3RyYW5zaXRpb24pXG4gICAgICAgIHNwYW5fdHJhbnNpdGlvbi5lbmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayQ2KGN0eCkge1xuICBsZXQgaW5zcGVjdG9yYmFkZ2VvcGVuO1xuICBsZXQgY3VycmVudDtcbiAgaW5zcGVjdG9yYmFkZ2VvcGVuID0gbmV3IEluc3BlY3RvckJhZGdlT3Blbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoaW5zcGVjdG9yYmFkZ2VvcGVuLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChpbnNwZWN0b3JiYWRnZW9wZW4sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpbnNwZWN0b3JiYWRnZW9wZW4uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaW5zcGVjdG9yYmFkZ2VvcGVuLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoaW5zcGVjdG9yYmFkZ2VvcGVuLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRlKGN0eCkge1xuICBsZXQgdF92YWx1ZSA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgKGN0eFswXS5pbnNwZWN0b3JEYXRhLmxlbmd0aCB8fCAwKSArIFwiXCJcbiAgKTtcbiAgbGV0IHQ7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHQgPSB0ZXh0KHRfdmFsdWUpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdCwgYW5jaG9yKTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEgJiYgdF92YWx1ZSAhPT0gKHRfdmFsdWUgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAoY3R4MlswXS5pbnNwZWN0b3JEYXRhLmxlbmd0aCB8fCAwKSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0LCB0X3ZhbHVlKTtcbiAgICB9LFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCR5KGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgc3BhbjE7XG4gIGxldCBzcGFuMDtcbiAgbGV0IG1lbWJlcnN0YWNrbG9nbztcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCBzcGFuMjtcbiAgbGV0IHQyO1xuICBsZXQgc3BhbjM7XG4gIGxldCB0MztcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrMjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbWVtYmVyc3RhY2tsb2dvID0gbmV3IE1lbWJlcnN0YWNrTG9nbyh7fSk7XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKCEvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4MlswXS5zaG93U2lkZWJhcilcbiAgICAgIHJldHVybiBjcmVhdGVfaWZfYmxvY2tfMiQ4O1xuICAgIHJldHVybiBjcmVhdGVfZWxzZV9ibG9ja18xJDE7XG4gIH1cbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGxldCBpZl9ibG9jazAgPSBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLnhSYXlFcnJvckVsZW1lbnRzLmxlbmd0aCA+IDAgJiYgY3JlYXRlX2lmX2Jsb2NrXzEkYigpXG4gICk7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9jayRlLCBjcmVhdGVfZWxzZV9ibG9jayQ2XTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzEoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoIS8qJEluc3BlY3RvclN0b3JlKi9cbiAgICBjdHgyWzBdLnNob3dTaWRlYmFyKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgpO1xuICBpZl9ibG9jazIgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHNwYW4xID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuMCA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtZW1iZXJzdGFja2xvZ28uJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIHNwYW4yID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBzcGFuMyA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICBhdHRyKHNwYW4wLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWJhZGdlX19sb2dvIHN2ZWx0ZS1yaHZlaXdcIik7XG4gICAgICBhdHRyKHNwYW4xLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWJhZGdlX190ZXh0LXdyYXBwZXIgc3ZlbHRlLXJodmVpd1wiKTtcbiAgICAgIGF0dHIoc3BhbjIsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItYmFkZ2VfX2RpdmlkZXIgc3ZlbHRlLXJodmVpd1wiKTtcbiAgICAgIGF0dHIoc3BhbjMsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItYmFkZ2VfX2NvdW50IHN2ZWx0ZS1yaHZlaXdcIik7XG4gICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgIHNwYW4zLFxuICAgICAgICBcIm1zLWluc3BlY3Rvci1iYWRnZV9fY291bnQtLW9wZW5cIixcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uc2hvd1NpZGViYXJcbiAgICAgICk7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1iYWRnZSBzdmVsdGUtcmh2ZWl3XCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiZGF0YS1jeVwiLCBcImluc3BlY3Rvci1idXR0b25cIik7XG4gICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJtcy1pbnNwZWN0b3ItYmFkZ2UtLWVycm9yXCIsXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4WzBdLnhSYXlFcnJvckVsZW1lbnRzLmxlbmd0aCA+IDBcbiAgICAgICk7XG4gICAgICBzZXRfc3R5bGUoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJ6LWluZGV4XCIsXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4WzBdLnNob3dTaWRlYmFyID8gMjE0NzQ4MzY0NyA6IDIxNDc0ODM2NDhcbiAgICAgICk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuMSk7XG4gICAgICBhcHBlbmQoc3BhbjEsIHNwYW4wKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtZW1iZXJzdGFja2xvZ28sIHNwYW4wLCBudWxsKTtcbiAgICAgIGFwcGVuZChzcGFuMSwgdDApO1xuICAgICAgaWZfYmxvY2swLm0oc3BhbjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDEpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3BhbjIpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDIpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3BhbjMpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0oc3BhbjMsIG51bGwpO1xuICAgICAgYXBwZW5kKHNwYW4zLCB0Myk7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKHNwYW4zLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgIGN0eFsyXVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSAhPT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpKSkge1xuICAgICAgICBpZl9ibG9jazAuZCgxKTtcbiAgICAgICAgaWZfYmxvY2swID0gY3VycmVudF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICBpZl9ibG9jazAubShzcGFuMSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLnhSYXlFcnJvckVsZW1lbnRzLmxlbmd0aCA+IDBcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrXzEkYigpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5tKHNwYW4zLCB0Myk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBsZXQgcHJldmlvdXNfYmxvY2tfaW5kZXggPSBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gICAgICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ucChjdHgyLCBkaXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrMiA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrMikge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMi5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgIGlmX2Jsb2NrMi5tKHNwYW4zLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIHNwYW4zLFxuICAgICAgICAgIFwibXMtaW5zcGVjdG9yLWJhZGdlX19jb3VudC0tb3BlblwiLFxuICAgICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICBjdHgyWzBdLnNob3dTaWRlYmFyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSB7XG4gICAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJtcy1pbnNwZWN0b3ItYmFkZ2UtLWVycm9yXCIsXG4gICAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIGN0eDJbMF0ueFJheUVycm9yRWxlbWVudHMubGVuZ3RoID4gMFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSkge1xuICAgICAgICBzZXRfc3R5bGUoXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiei1pbmRleFwiLFxuICAgICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICBjdHgyWzBdLnNob3dTaWRlYmFyID8gMjE0NzQ4MzY0NyA6IDIxNDc0ODM2NDhcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1lbWJlcnN0YWNrbG9nby4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChtZW1iZXJzdGFja2xvZ28uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazIpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobWVtYmVyc3RhY2tsb2dvKTtcbiAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZCgpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGgoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0ICRJbnNwZWN0b3JTdG9yZTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEluc3BlY3RvclN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDAsICRJbnNwZWN0b3JTdG9yZSA9ICQkdmFsdWUpKTtcbiAgZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpIHtcbiAgICBTZXRTaG93U2lkZWJhcighJEluc3BlY3RvclN0b3JlLnNob3dTaWRlYmFyKTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gdG9nZ2xlU2lkZWJhcigpO1xuICByZXR1cm4gWyRJbnNwZWN0b3JTdG9yZSwgdG9nZ2xlU2lkZWJhciwgY2xpY2tfaGFuZGxlcl07XG59XG52YXIgSW5zcGVjdG9yQmFkZ2UgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkaCwgY3JlYXRlX2ZyYWdtZW50JHksIHNhZmVfbm90X2VxdWFsLCB7fSwgYWRkX2NzcyRmKTtcbiAgfVxufTtcbnZhciBldmVudExpc3RlbmVycyA9IFtdO1xuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcldpdGhUcmFja2luZyh0eXBlLCBsaXN0ZW5lcikge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XG4gIGV2ZW50TGlzdGVuZXJzLnB1c2goeyB0eXBlLCBsaXN0ZW5lciB9KTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKCkge1xuICBldmVudExpc3RlbmVycy5mb3JFYWNoKCh7IHR5cGUsIGxpc3RlbmVyIH0pID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XG4gIH0pO1xuICBldmVudExpc3RlbmVycy5sZW5ndGggPSAwO1xufVxuZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oZWxlbWVudDIsIGhpZ2hsaWdodEJveCwgbGFiZWwpIHtcbiAgY29uc3QgcmVjdCA9IGVsZW1lbnQyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBoaWdobGlnaHRCb3guc3R5bGUudG9wID0gYCR7cmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWSAtIDZ9cHhgO1xuICBoaWdobGlnaHRCb3guc3R5bGUubGVmdCA9IGAke3JlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYIC0gNn1weGA7XG4gIGxhYmVsLnN0eWxlLnRvcCA9IGAke3JlY3QudG9wICsgd2luZG93LnNjcm9sbFkgLSBsYWJlbC5vZmZzZXRIZWlnaHQgLSA2fXB4YDtcbiAgbGFiZWwuc3R5bGUubGVmdCA9IGAke3JlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYIC0gNn1weGA7XG59XG5mdW5jdGlvbiBlc2NhcGVDU1NTZWxlY3RvcihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IucmVwbGFjZSgvKFs6XSkvZywgXCJcXFxcJDFcIik7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVaSW5kZXgob3JpZ2luYWxaSW5kZXgsIHR5cGUpIHtcbiAgbGV0IG5ld1pJbmRleCA9IG9yaWdpbmFsWkluZGV4O1xuICBpZiAoaXNOYU4obmV3WkluZGV4KSB8fCBuZXdaSW5kZXggPCAwKSB7XG4gICAgbmV3WkluZGV4ID0gNTA7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiZXJyb3JcIikge1xuICAgIG5ld1pJbmRleCArPSAzO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwid2FybmluZ1wiKSB7XG4gICAgbmV3WkluZGV4ICs9IDI7XG4gIH0gZWxzZSB7XG4gICAgbmV3WkluZGV4ICs9IDE7XG4gIH1cbiAgcmV0dXJuIG5ld1pJbmRleDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhpZ2hsaWdodEJveChyZWN0LCBjb2xvciwgemluZGV4LCB0eXBlKSB7XG4gIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGJveC5jbGFzc0xpc3QuYWRkKFwibXMteHJheS1vdXRsaW5lXCIpO1xuICBPYmplY3QuYXNzaWduKGJveC5zdHlsZSwge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgdG9wOiBgJHtyZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZIC0gNn1weGAsXG4gICAgbGVmdDogYCR7cmVjdC5sZWZ0ICsgd2luZG93LnNjcm9sbFggLSA2fXB4YCxcbiAgICB3aWR0aDogYCR7cmVjdC53aWR0aCArIDEyfXB4YCxcbiAgICBoZWlnaHQ6IGAke3JlY3QuaGVpZ2h0ICsgMTJ9cHhgLFxuICAgIGJvcmRlcjogXCIycHggc29saWRcIixcbiAgICBib3JkZXJDb2xvcjogY29sb3IsXG4gICAgcG9pbnRlckV2ZW50czogXCJub25lXCIsXG4gICAgekluZGV4OiBjYWxjdWxhdGVaSW5kZXgoemluZGV4LCB0eXBlKVxuICB9KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChib3gpO1xuICByZXR1cm4gYm94O1xufVxuZnVuY3Rpb24gZ2V0U3ZnRm9yVHlwZSh0eXBlKSB7XG4gIGNvbnN0IHN2Z3MgPSB7XG4gICAgZm91bmQ6IGBcbiAgICA8c3ZnXG4gICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICBoZWlnaHQ9XCIxM1wiXG4gICAgICAgIHZpZXdCb3g9XCIwIC05NjAgOTYwIDk2MFwiXG4gICAgICAgIHdpZHRoPVwiMTNcIlxuICAgICAgICA+PHBhdGhcbiAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICBkPVwiTTEyMC0yMDBxLTE3IDAtMjguNS0xMS41VDgwLTI0MHEwLTE3IDExLjUtMjguNVQxMjAtMjgwaDMyMHExNyAwIDI4LjUgMTEuNVQ0ODAtMjQwcTAgMTctMTEuNSAyOC41VDQ0MC0yMDBIMTIwWm0wLTIwMHEtMTcgMC0yOC41LTExLjVUODAtNDQwcTAtMTcgMTEuNS0yOC41VDEyMC00ODBoMTIwcTE3IDAgMjguNSAxMS41VDI4MC00NDBxMCAxNy0xMS41IDI4LjVUMjQwLTQwMEgxMjBabTAtMjAwcS0xNyAwLTI4LjUtMTEuNVQ4MC02NDBxMC0xNyAxMS41LTI4LjVUMTIwLTY4MGgxMjBxMTcgMCAyOC41IDExLjVUMjgwLTY0MHEwIDE3LTExLjUgMjguNVQyNDAtNjAwSDEyMFptNDQwIDI4MHEtODMgMC0xNDEuNS01OC41VDM2MC01MjBxMC04MyA1OC41LTE0MS41VDU2MC03MjBxODMgMCAxNDEuNSA1OC41VDc2MC01MjBxMCAyOS04LjUgNTcuNVQ3MjYtNDEwbDEyNiAxMjZxMTEgMTEgMTEgMjh0LTExIDI4cS0xMSAxMS0yOCAxMXQtMjgtMTFMNjcwLTM1NHEtMjQgMTctNTIuNSAyNS41VDU2MC0zMjBabTAtODBxNTAgMCA4NS0zNXQzNS04NXEwLTUwLTM1LTg1dC04NS0zNXEtNTAgMC04NSAzNXQtMzUgODVxMCA1MCAzNSA4NXQ4NSAzNVpcIlxuICAgICAgICAvPlxuICAgIDwvc3ZnPlxuICAgIGAsXG4gICAgLy8gU1ZHIGZvciAnZm91bmQnIGl0ZW1zXG4gICAgZXJyb3I6IGBcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBoZWlnaHQ9XCIxM1wiIHZpZXdCb3g9XCIwIC05NjAgOTYwIDk2MFwiIHdpZHRoPVwiMTNcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIm00ODAtNDI0IDExNiAxMTZxMTEgMTEgMjggMTF0MjgtMTFxMTEtMTEgMTEtMjh0LTExLTI4TDUzNi00ODBsMTE2LTExNnExMS0xMSAxMS0yOHQtMTEtMjhxLTExLTExLTI4LTExdC0yOCAxMUw0ODAtNTM2IDM2NC02NTJxLTExLTExLTI4LTExdC0yOCAxMXEtMTEgMTEtMTEgMjh0MTEgMjhsMTE2IDExNi0xMTYgMTE2cS0xMSAxMS0xMSAyOHQxMSAyOHExMSAxMSAyOCAxMXQyOC0xMWwxMTYtMTE2Wm0wIDM0NHEtODMgMC0xNTYtMzEuNVQxOTctMTk3cS01NC01NC04NS41LTEyN1Q4MC00ODBxMC04MyAzMS41LTE1NlQxOTctNzYzcTU0LTU0IDEyNy04NS41VDQ4MC04ODBxODMgMCAxNTYgMzEuNVQ3NjMtNzYzcTU0IDU0IDg1LjUgMTI3VDg4MC00ODBxMCA4My0zMS41IDE1NlQ3NjMtMTk3cS01NCA1NC0xMjcgODUuNVQ0ODAtODBaXCI+PC9wYXRoPjwvc3ZnPlxuICAgIGAsXG4gICAgLy8gU1ZHIGZvciAnZXJyb3InIGl0ZW1zXG4gICAgd2FybmluZzogYFxuICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGhlaWdodD1cIjEzXCIgdmlld0JveD1cIjAgLTk2MCA5NjAgOTYwXCIgd2lkdGg9XCIxM1wiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTEwOS0xMjBxLTExIDAtMjAtNS41VDc1LTE0MHEtNS05LTUuNS0xOS41VDc1LTE4MGwzNzAtNjQwcTYtMTAgMTUuNS0xNXQxOS41LTVxMTAgMCAxOS41IDV0MTUuNSAxNWwzNzAgNjQwcTYgMTAgNS41IDIwLjVUODg1LTE0MHEtNSA5LTE0IDE0LjV0LTIwIDUuNUgxMDlabTM3MS0xMjBxMTcgMCAyOC41LTExLjVUNTIwLTI4MHEwLTE3LTExLjUtMjguNVQ0ODAtMzIwcS0xNyAwLTI4LjUgMTEuNVQ0NDAtMjgwcTAgMTcgMTEuNSAyOC41VDQ4MC0yNDBabTAtMTIwcTE3IDAgMjguNS0xMS41VDUyMC00MDB2LTEyMHEwLTE3LTExLjUtMjguNVQ0ODAtNTYwcS0xNyAwLTI4LjUgMTEuNVQ0NDAtNTIwdjEyMHEwIDE3IDExLjUgMjguNVQ0ODAtMzYwWlwiPjwvcGF0aD48L3N2Zz5cbiAgICBgXG4gICAgLy8gU1ZHIGZvciAnd2FybmluZycgaXRlbXNcbiAgfTtcbiAgcmV0dXJuIHN2Z3NbdHlwZV0gfHwgXCJcIjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUxhYmVsKHJlY3QsIHRleHQyLCBjb2xvciwgdHlwZSwgemluZGV4LCBlbGVtZW50RGF0YUF0dHJpYnV0ZSkge1xuICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGxhYmVsLmNsYXNzTGlzdC5hZGQoXCJtcy14cmF5LXRvb2x0aXBcIik7XG4gIGNvbnN0IHN2ZyA9IGdldFN2Z0ZvclR5cGUodHlwZSk7XG4gIGlmICh0eXBlID09PSBcImZvdW5kXCIgJiYgZWxlbWVudERhdGFBdHRyaWJ1dGUgIT09IHZvaWQgMCAmJiB0ZXh0MiA9PT0gXCJkYXRhLW1zLW1lbWJlclwiKSB7XG4gICAgbGFiZWwuaW5uZXJIVE1MID0gYCR7c3ZnfSAke3RleHQyfT0nJHtlbGVtZW50RGF0YUF0dHJpYnV0ZX0nYDtcbiAgfSBlbHNlIHtcbiAgICBsYWJlbC5pbm5lckhUTUwgPSBgJHtzdmd9ICR7dGV4dDJ9YDtcbiAgfVxuICBPYmplY3QuYXNzaWduKGxhYmVsLnN0eWxlLCB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB0b3A6IGAke3JlY3QudG9wICsgd2luZG93LnNjcm9sbFl9cHhgLFxuICAgIGxlZnQ6IGAke3JlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYIC0gNn1weGAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICBjb2xvcjogY29sb3IgPT09IFwiI2VmZDM1MFwiID8gXCIjMDAwXCIgOiBcIiNmZmZcIixcbiAgICBwYWRkaW5nOiBcIjJweCAzcHhcIixcbiAgICBmb250U2l6ZTogXCI5cHhcIixcbiAgICBsaW5lSGVpZ2h0OiBcIjFcIixcbiAgICBmb250RmFtaWx5OiBcIlBsdXMgSmFrYXJ0YSBTYW5zLCBzYW5zLXNlcmlmXCIsXG4gICAgekluZGV4OiBjYWxjdWxhdGVaSW5kZXgoemluZGV4LCB0eXBlKSxcbiAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgIGJvcmRlclJhZGl1czogXCIzcHggM3B4IDAgMFwiLFxuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgZ2FwOiBcIjNweFwiLFxuICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiXG4gIH0pO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgcmV0dXJuIGxhYmVsO1xufVxuZnVuY3Rpb24gcmVtb3ZlWHJheXMoKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tcy14cmF5LW91dGxpbmUsIC5tcy14cmF5LXRvb2x0aXBcIikuZm9yRWFjaCgoZWwpID0+IGVsLnJlbW92ZSgpKTtcbiAgICByZW1vdmVBbGxFdmVudExpc3RlbmVycygpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrQXR0cmlidXRlcyh0eXBlKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3Qgc3RvcmUgPSBnZXRfc3RvcmVfdmFsdWUoSW5zcGVjdG9yU3RvcmUpO1xuICAgIGxldCBpdGVtcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICBpdGVtcyA9IHN0b3JlLnhSYXlFcnJvckVsZW1lbnRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICAgIGl0ZW1zID0gc3RvcmUueFJheVdhcm5pbmdFbGVtZW50cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZm91bmRcIjpcbiAgICAgICAgaXRlbXMgPSBpbnNwZWN0b3JJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJmb3VuZFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpdGVtcyA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBjb2xvciA9IHR5cGUgPT09IFwiZXJyb3JcIiA/IFwiI2UwNjY1N1wiIDogdHlwZSA9PT0gXCJ3YXJuaW5nXCIgPyBcIiNlZmQzNTBcIiA6IFwiIzVjOWQ2ZlwiO1xuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGxldCBlbGVtZW50cztcbiAgICAgIGlmICh0eXBlID09PSBcImZvdW5kXCIpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZXNjYXBlQ1NTU2VsZWN0b3IoaXRlbS5kYXRhQXR0cmlidXRlKTtcbiAgICAgICAgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbJHthdHRyaWJ1dGV9XWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudHMgPSBbaXRlbS5lbGVtZW50XTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgIGlmICghZWwgfHwgZWwub2Zmc2V0UGFyZW50ID09PSBudWxsKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCB6aW5kZXggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuekluZGV4O1xuICAgICAgICBjb25zdCBoaWdobGlnaHRCb3ggPSBjcmVhdGVIaWdobGlnaHRCb3gocmVjdCwgY29sb3IsIHppbmRleCwgdHlwZSk7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gY3JlYXRlTGFiZWwocmVjdCwgdHlwZSA9PT0gXCJmb3VuZFwiID8gaXRlbS5kYXRhQXR0cmlidXRlIDogaXRlbS5tZXNzYWdlLCBjb2xvciwgdHlwZSwgemluZGV4LCBlbC5nZXRBdHRyaWJ1dGUoaXRlbS5kYXRhQXR0cmlidXRlKSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZTIgPSAoKSA9PiB1cGRhdGVQb3NpdGlvbihlbCwgaGlnaGxpZ2h0Qm94LCBsYWJlbCk7XG4gICAgICAgIHVwZGF0ZTIoKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcldpdGhUcmFja2luZyhcInNjcm9sbFwiLCB1cGRhdGUyKTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcldpdGhUcmFja2luZyhcInJlc2l6ZVwiLCB1cGRhdGUyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrRm91bmREYXRhQXR0cmlidXRlcygpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBjaGVja0F0dHJpYnV0ZXMoXCJmb3VuZFwiKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjaGVja0Vycm9yRGF0YUF0dHJpYnV0ZXMoKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY2hlY2tBdHRyaWJ1dGVzKFwiZXJyb3JcIik7XG4gIH0pO1xufVxuZnVuY3Rpb24gY2hlY2tXYXJuaW5nRGF0YUF0dHJpYnV0ZXMoKSB7XG4gIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY2hlY2tBdHRyaWJ1dGVzKFwid2FybmluZ1wiKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkeChjdHgpIHtcbiAgbGV0IHNwYW47XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIkFJXCI7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzcGFuLCBhbmNob3IpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzcGFuKTtcbiAgICB9XG4gIH07XG59XG52YXIgQUlJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCR4LCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JHcoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoMDtcbiAgbGV0IHBhdGgxO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGgwID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgcGF0aDEgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImRcIiwgXCJNMCAwaDI0djI0SDBWMHpcIik7XG4gICAgICBhdHRyKHBhdGgwLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgYXR0cihwYXRoMSwgXCJkXCIsIFwiTTQgMTNoNmMuNTUgMCAxLS40NSAxLTFWNGMwLS41NS0uNDUtMS0xLTFINGMtLjU1IDAtMSAuNDUtMSAxdjhjMCAuNTUuNDUgMSAxIDF6bTAgOGg2Yy41NSAwIDEtLjQ1IDEtMXYtNGMwLS41NS0uNDUtMS0xLTFINGMtLjU1IDAtMSAuNDUtMSAxdjRjMCAuNTUuNDUgMSAxIDF6bTEwIDBoNmMuNTUgMCAxLS40NSAxLTF2LThjMC0uNTUtLjQ1LTEtMS0xaC02Yy0uNTUgMC0xIC40NS0xIDF2OGMwIC41NS40NSAxIDEgMXpNMTMgNHY0YzAgLjU1LjQ1IDEgMSAxaDZjLjU1IDAgMS0uNDUgMS0xVjRjMC0uNTUtLjQ1LTEtMS0xaC02Yy0uNTUgMC0xIC40NS0xIDF6XCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjI0cHhcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDI0IDI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwid2lkdGhcIiwgXCIyNHB4XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgwKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgxKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgQ29tcG9uZW50c0ljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JHcsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkdihjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGgwO1xuICBsZXQgcGF0aDE7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aDAgPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBwYXRoMSA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aDAsIFwiZFwiLCBcIk0wIDBoMjR2MjRIMFYwelwiKTtcbiAgICAgIGF0dHIocGF0aDAsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHBhdGgxLCBcImRcIiwgXCJNMjAgNmgtMXY4YzAgLjU1LS40NSAxLTEgMUg2djFjMCAxLjEuOSAyIDIgMmgxMGw0IDRWOGMwLTEuMS0uOS0yLTItMnptLTMgNVY0YzAtMS4xLS45LTItMi0ySDRjLTEuMSAwLTIgLjktMiAydjEzbDQtNGg5YzEuMSAwIDItLjkgMi0yelwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJoZWlnaHRcIiwgXCIxMDAlXCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgMCAyNCAyNFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcIndpZHRoXCIsIFwiMTAwMHB4XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgwKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgxKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgRm9ydW1zSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkdiwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCR1KGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgZzA7XG4gIGxldCByZWN0MDtcbiAgbGV0IHJlY3QxO1xuICBsZXQgZzE7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIGcwID0gc3ZnX2VsZW1lbnQoXCJnXCIpO1xuICAgICAgcmVjdDAgPSBzdmdfZWxlbWVudChcInJlY3RcIik7XG4gICAgICByZWN0MSA9IHN2Z19lbGVtZW50KFwicmVjdFwiKTtcbiAgICAgIGcxID0gc3ZnX2VsZW1lbnQoXCJnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocmVjdDAsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHJlY3QwLCBcImhlaWdodFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihyZWN0MCwgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihyZWN0MSwgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgIGF0dHIocmVjdDEsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHJlY3QxLCBcIndpZHRoXCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk0xMiwyQzYuNDgsMiwyLDYuNDgsMiwxMmMwLDUuNTIsNC40OCwxMCwxMCwxMHMxMC00LjQ4LDEwLTEwQzIyLDYuNDgsMTcuNTIsMiwxMiwyeiBNMTkuNDYsOS4xMmwtMi43OCwxLjE1IGMtMC41MS0xLjM2LTEuNTgtMi40NC0yLjk1LTIuOTRsMS4xNS0yLjc4QzE2Ljk4LDUuMzUsMTguNjUsNy4wMiwxOS40Niw5LjEyeiBNMTIsMTVjLTEuNjYsMC0zLTEuMzQtMy0zczEuMzQtMywzLTNzMywxLjM0LDMsMyBTMTMuNjYsMTUsMTIsMTV6IE05LjEzLDQuNTRsMS4xNywyLjc4Yy0xLjM4LDAuNS0yLjQ3LDEuNTktMi45OCwyLjk3TDQuNTQsOS4xM0M1LjM1LDcuMDIsNy4wMiw1LjM1LDkuMTMsNC41NHogTTQuNTQsMTQuODcgbDIuNzgtMS4xNWMwLjUxLDEuMzgsMS41OSwyLjQ2LDIuOTcsMi45NmwtMS4xNywyLjc4QzcuMDIsMTguNjUsNS4zNSwxNi45OCw0LjU0LDE0Ljg3eiBNMTQuODgsMTkuNDZsLTEuMTUtMi43OCBjMS4zNy0wLjUxLDIuNDUtMS41OSwyLjk1LTIuOTdsMi43OCwxLjE3QzE4LjY1LDE2Ljk4LDE2Ljk4LDE4LjY1LDE0Ljg4LDE5LjQ2elwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJoZWlnaHRcIiwgXCIxMDAlXCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgMCAyNCAyNFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcIndpZHRoXCIsIFwiMTAwMHB4XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIGcwKTtcbiAgICAgIGFwcGVuZChnMCwgcmVjdDApO1xuICAgICAgYXBwZW5kKGcwLCByZWN0MSk7XG4gICAgICBhcHBlbmQoc3ZnLCBnMSk7XG4gICAgICBhcHBlbmQoZzEsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBIZWxwSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkdSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCR0KGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiY2xpcC1ydWxlXCIsIFwiZXZlbm9kZFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTEzIDEwQzEzIDExLjEwNDYgMTMuODk1NCAxMiAxNSAxMkMxNi4xMDQ2IDEyIDE3IDExLjEwNDYgMTcgMTBWNUMxNyAzLjg5NTQzIDE2LjEwNDYgMyAxNSAzQzEzLjg5NTQgMyAxMyAzLjg5NTQzIDEzIDVWMTBaTTUgOEMzLjg5NTQzIDggMyA4Ljg5NTQzIDMgMTBDMyAxMS4xMDQ2IDMuODk1NDMgMTIgNSAxMkgxMEMxMS4xMDQ2IDEyIDEyIDExLjEwNDYgMTIgMTBDMTIgOC44OTU0MyAxMS4xMDQ2IDggMTAgOEg1Wk0xNSAxM0MxMy44OTU0IDEzIDEzIDEzLjg5NTQgMTMgMTVDMTMgMTYuMTA0NiAxMy44OTU0IDE3IDE1IDE3SDIwQzIxLjEwNDYgMTcgMjIgMTYuMTA0NiAyMiAxNUMyMiAxMy44OTU0IDIxLjEwNDYgMTMgMjAgMTNIMTVaTTEwIDIyQzguODk1NDMgMjIgOCAyMS4xMDQ2IDggMjBMOCAxNUM4IDEzLjg5NTQgOC44OTU0MyAxMyAxMCAxM0MxMS4xMDQ2IDEzIDEyIDEzLjg5NTQgMTIgMTVWMjBDMTIgMjEuMTA0NiAxMS4xMDQ2IDIyIDEwIDIyWk04IDVDOCAzLjg5NTQzIDguODk1NDMgMyAxMCAzQzExLjEwNDYgMyAxMiAzLjg5NTQzIDEyIDVWN0gxMEM4Ljg5NTQzIDcgOCA2LjEwNDU3IDggNVpNMyAxNUMzIDE2LjEwNDYgMy44OTU0MyAxNyA1IDE3QzYuMTA0NTcgMTcgNyAxNi4xMDQ2IDcgMTVWMTNINUMzLjg5NTQzIDEzIDMgMTMuODk1NCAzIDE1Wk0xNyAyMEMxNyAyMS4xMDQ2IDE2LjEwNDYgMjIgMTUgMjJDMTMuODk1NCAyMiAxMyAyMS4xMDQ2IDEzIDIwVjE4SDE1QzE2LjEwNDYgMTggMTcgMTguODk1NCAxNyAyMFpNMjIgMTBDMjIgOC44OTU0MyAyMS4xMDQ2IDggMjAgOEMxOC44OTU0IDggMTggOC44OTU0MyAxOCAxMFYxMkgyMEMyMS4xMDQ2IDEyIDIyIDExLjEwNDYgMjIgMTBaXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAwIDI0IDI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwiZmlsbFwiLCBcIm5vbmVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFNsYWNrSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkdCwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRzKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk0yODAtODBxLTMzIDAtNTYuNS0yMy41VDIwMC0xNjBxMC0zMyAyMy41LTU2LjVUMjgwLTI0MHEzMyAwIDU2LjUgMjMuNVQzNjAtMTYwcTAgMzMtMjMuNSA1Ni41VDI4MC04MFptNDAwIDBxLTMzIDAtNTYuNS0yMy41VDYwMC0xNjBxMC0zMyAyMy41LTU2LjVUNjgwLTI0MHEzMyAwIDU2LjUgMjMuNVQ3NjAtMTYwcTAgMzMtMjMuNSA1Ni41VDY4MC04MFpNMjA4LTgwMGg1OTBxMjMgMCAzNSAyMC41dDEgNDEuNUw2OTItNDgycS0xMSAyMC0yOS41IDMxVDYyMi00NDBIMzI0bC00NCA4MGg0NDBxMTcgMCAyOC41IDExLjVUNzYwLTMyMHEwIDE3LTExLjUgMjguNVQ3MjAtMjgwSDI4MHEtNDUgMC02OC0zOS41dC0yLTc4LjVsNTQtOTgtMTQ0LTMwNEg4MHEtMTcgMC0yOC41LTExLjVUNDAtODQwcTAtMTcgMTEuNS0yOC41VDgwLTg4MGg2NXExMSAwIDIxIDZ0MTUgMTdsMjcgNTdaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgLTk2MCA5NjAgOTYwXCIpO1xuICAgICAgYXR0cihzdmcsIFwid2lkdGhcIiwgXCIyNFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBDYXJ0SWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkcywgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRyKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk0xMjAtMjAwcS0xNyAwLTI4LjUtMTEuNVQ4MC0yNDBxMC0xNyAxMS41LTI4LjVUMTIwLTI4MGgzMjBxMTcgMCAyOC41IDExLjVUNDgwLTI0MHEwIDE3LTExLjUgMjguNVQ0NDAtMjAwSDEyMFptMC0yMDBxLTE3IDAtMjguNS0xMS41VDgwLTQ0MHEwLTE3IDExLjUtMjguNVQxMjAtNDgwaDEyMHExNyAwIDI4LjUgMTEuNVQyODAtNDQwcTAgMTctMTEuNSAyOC41VDI0MC00MDBIMTIwWm0wLTIwMHEtMTcgMC0yOC41LTExLjVUODAtNjQwcTAtMTcgMTEuNS0yOC41VDEyMC02ODBoMTIwcTE3IDAgMjguNSAxMS41VDI4MC02NDBxMCAxNy0xMS41IDI4LjVUMjQwLTYwMEgxMjBabTQ0MCAyODBxLTgzIDAtMTQxLjUtNTguNVQzNjAtNTIwcTAtODMgNTguNS0xNDEuNVQ1NjAtNzIwcTgzIDAgMTQxLjUgNTguNVQ3NjAtNTIwcTAgMjktOC41IDU3LjVUNzI2LTQxMGwxMjYgMTI2cTExIDExIDExIDI4dC0xMSAyOHEtMTEgMTEtMjggMTF0LTI4LTExTDY3MC0zNTRxLTI0IDE3LTUyLjUgMjUuNVQ1NjAtMzIwWm0wLTgwcTUwIDAgODUtMzV0MzUtODVxMC01MC0zNS04NXQtODUtMzVxLTUwIDAtODUgMzV0LTM1IDg1cTAgNTAgMzUgODV0ODUgMzVaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgLTk2MCA5NjAgOTYwXCIpO1xuICAgICAgYXR0cihzdmcsIFwid2lkdGhcIiwgXCIyNFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBNYWdJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCRyLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JHEoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTYwNi0xMDVxLTIzIDExLTQ2IDIuNVQ1MjYtMTM0TDQwNi0zOTJsLTkzIDEzMHEtMTcgMjQtNDUgMTV0LTI4LTM4di01MTNxMC0yNSAyMi41LTM2dDQyLjUgNWw0MDQgMzE4cTIzIDE3IDEzLjUgNDRUNjg0LTQ0MEg1MTZsMTE5IDI1NXExMSAyMyAyLjUgNDZUNjA2LTEwNVpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAtOTYwIDk2MCA5NjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIFBvaW50ZXJJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCRxLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JHAoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTc5Mi01NiA2MjQtMjIycS0zNSAxMS03MSAxNi41dC03MyA1LjVxLTEzNCAwLTI0NS03MlQ2MS00NjJxLTUtOS03LjUtMTguNVQ1MS01MDBxMC0xMCAyLjUtMTkuNVQ2MS01MzhxMjItMzkgNDctNzZ0NTgtNjZMNTYtNzkybDU2LTU2IDczNiA3MzYtNTYgNTZaTTQ4MC0zMjBxMTEgMCAyMS0xdDIwLTRMMzA1LTU0MXEtMyAxMC00IDIwdC0xIDIxcTAgNzUgNTIuNSAxMjcuNVQ0ODAtMzIwWm0yOTIgMThMNjQ1LTQyOHE3LTE3IDExLTM1dDQtMzdxMC03NS01Mi41LTEyNy41VDQ4MC02ODBxLTE5IDAtMzcgNHQtMzUgMTJMMzA2LTc2NnE0Mi0xNyA4NS41LTI1LjVUNDgwLTgwMHExMzQgMCAyNDUuNSA3Mi41VDkwMC01MzdxNSA4IDcuNSAxNy41VDkxMC01MDBxMCAxMC0yIDE5LjV0LTcgMTcuNXEtMjQgNDctNTUuNSA4OFQ3NzItMzAyWk01ODctNDg2IDQ2Ny02MDZxMjYtNSA1MC41IDR0NDEuNSAyOHExNyAxOCAyNC41IDQxdDMuNSA0N1pcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAtOTYwIDk2MCA5NjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIEV5ZUNsb3NlZEljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JHAsIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkbyhjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJtNDgwLTQyNCAxMTYgMTE2cTExIDExIDI4IDExdDI4LTExcTExLTExIDExLTI4dC0xMS0yOEw1MzYtNDgwbDExNi0xMTZxMTEtMTEgMTEtMjh0LTExLTI4cS0xMS0xMS0yOC0xMXQtMjggMTFMNDgwLTUzNiAzNjQtNjUycS0xMS0xMS0yOC0xMXQtMjggMTFxLTExIDExLTExIDI4dDExIDI4bDExNiAxMTYtMTE2IDExNnEtMTEgMTEtMTEgMjh0MTEgMjhxMTEgMTEgMjggMTF0MjgtMTFsMTE2LTExNlptMCAzNDRxLTgzIDAtMTU2LTMxLjVUMTk3LTE5N3EtNTQtNTQtODUuNS0xMjdUODAtNDgwcTAtODMgMzEuNS0xNTZUMTk3LTc2M3E1NC01NCAxMjctODUuNVQ0ODAtODgwcTgzIDAgMTU2IDMxLjVUNzYzLTc2M3E1NCA1NCA4NS41IDEyN1Q4ODAtNDgwcTAgODMtMzEuNSAxNTZUNzYzLTE5N3EtNTQgNTQtMTI3IDg1LjVUNDgwLTgwWlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJoZWlnaHRcIiwgXCIyNFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIwIC05NjAgOTYwIDk2MFwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcIndpZHRoXCIsIFwiMjRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgWEljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JG8sIHNhZmVfbm90X2VxdWFsLCB7fSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkbihjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJNMTA5LTEyMHEtMTEgMC0yMC01LjVUNzUtMTQwcS01LTktNS41LTE5LjVUNzUtMTgwbDM3MC02NDBxNi0xMCAxNS41LTE1dDE5LjUtNXExMCAwIDE5LjUgNXQxNS41IDE1bDM3MCA2NDBxNiAxMCA1LjUgMjAuNVQ4ODUtMTQwcS01IDktMTQgMTQuNXQtMjAgNS41SDEwOVptMzcxLTEyMHExNyAwIDI4LjUtMTEuNVQ1MjAtMjgwcTAtMTctMTEuNS0yOC41VDQ4MC0zMjBxLTE3IDAtMjguNSAxMS41VDQ0MC0yODBxMCAxNyAxMS41IDI4LjVUNDgwLTI0MFptMC0xMjBxMTcgMCAyOC41LTExLjVUNTIwLTQwMHYtMTIwcTAtMTctMTEuNS0yOC41VDQ4MC01NjBxLTE3IDAtMjguNSAxMS41VDQ0MC01MjB2MTIwcTAgMTcgMTEuNSAyOC41VDQ4MC0zNjBaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjAgLTk2MCA5NjAgOTYwXCIpO1xuICAgICAgYXR0cihzdmcsIFwid2lkdGhcIiwgXCIyNFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBXYXJuaW5nSWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkbiwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3MkZSh0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLTFscmludGxcIiwgXCIuc3ZnLnN2ZWx0ZS0xbHJpbnRse3dpZHRoOjEuNWVtO2hlaWdodDoxLjVlbTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtkaXNwbGF5OmZsZXg7bWFyZ2luOjB9XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JG0oY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTI4MC0yODBxLTgzIDAtMTQxLjUtNTguNVQ4MC00ODBxMC04MyA1OC41LTE0MS41VDI4MC02ODBoMTIwcTE3IDAgMjguNSAxMS41VDQ0MC02NDBxMCAxNy0xMS41IDI4LjVUNDAwLTYwMEgyODBxLTUwIDAtODUgMzV0LTM1IDg1cTAgNTAgMzUgODV0ODUgMzVoMTIwcTE3IDAgMjguNSAxMS41VDQ0MC0zMjBxMCAxNy0xMS41IDI4LjVUNDAwLTI4MEgyODBabTgwLTE2MHEtMTcgMC0yOC41LTExLjVUMzIwLTQ4MHEwLTE3IDExLjUtMjguNVQzNjAtNTIwaDI0MHExNyAwIDI4LjUgMTEuNVQ2NDAtNDgwcTAgMTctMTEuNSAyOC41VDYwMC00NDBIMzYwWm0yMDAgMTYwcS0xNyAwLTI4LjUtMTEuNVQ1MjAtMzIwcTAtMTcgMTEuNS0yOC41VDU2MC0zNjBoMTIwcTUwIDAgODUtMzV0MzUtODVxMC01MC0zNS04NXQtODUtMzVINTYwcS0xNyAwLTI4LjUtMTEuNVQ1MjAtNjQwcTAtMTcgMTEuNS0yOC41VDU2MC02ODBoMTIwcTgzIDAgMTQxLjUgNTguNVQ4ODAtNDgwcTAgODMtNTguNSAxNDEuNVQ2ODAtMjgwSDU2MFpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAtOTYwIDk2MCA5NjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgICAgYXR0cihzdmcsIFwiY2xhc3NcIiwgXCJzdmcgc3ZlbHRlLTFscmludGxcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgTGlua0ljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgbnVsbCwgY3JlYXRlX2ZyYWdtZW50JG0sIHNhZmVfbm90X2VxdWFsLCB7fSwgYWRkX2NzcyRlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3MkZCh0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLWU1eXY2NlwiLCBcIi5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwLnN2ZWx0ZS1lNXl2NjZ7bWFyZ2luLWJvdHRvbTo3cHh9Lm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50LWl0ZW1fX2hlbHAgYXt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2NvbG9yOiNmZmY7d29yZC1icmVhazpicmVhay13b3JkfS5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwIGE6aG92ZXJ7Y29sb3I6I2ZmZn0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fdGl0bGUuc3ZlbHRlLWU1eXY2Nnt3aWR0aDoxMDAlO2dyaWQtY29sdW1uLWdhcDo0cHg7Z3JpZC1yb3ctZ2FwOjRweDtib3JkZXI6MXB4IHNvbGlkICMzNzM3Mzc7YmFja2dyb3VuZC1jb2xvcjojNTM1MzUzO2JvcmRlci1yYWRpdXM6NHB4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tdG9wOjAuNmVtO21hcmdpbi1ib3R0b206LTNweDtwYWRkaW5nLWxlZnQ6MWVtO3BhZGRpbmctcmlnaHQ6MWVtO2xpbmUtaGVpZ2h0OjIuN2VtO2Rpc3BsYXk6ZmxleDtjb2xvcjojZmZmfS5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwX190aXRsZS5zdmVsdGUtZTV5djY2OmhvdmVye2JvcmRlci1jb2xvcjojMjkyOTI5O2JhY2tncm91bmQtY29sb3I6IzQ0NH0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fZGVzY3JpcHRpb24uc3ZlbHRlLWU1eXY2Nntib3JkZXI6MXB4IHNvbGlkICMzNzM3Mzc7YmFja2dyb3VuZC1jb2xvcjojNTM1MzUzO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjRweDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjRweDtwYWRkaW5nOjhweCA4cHggMTBweH0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fZGVzY3JpcHRpb24gcDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206MH0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fZGVzY3JpcHRpb24gaW1ne21hcmdpbi1ib3R0b206N3B4fVwiKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRkKGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgcmF3X3ZhbHVlID0gKFxuICAgIC8qaGVscEl0ZW0qL1xuICAgIGN0eFswXS5kZXNjcmlwdGlvbiArIFwiXCJcbiAgKTtcbiAgbGV0IGRpdl90cmFuc2l0aW9uO1xuICBsZXQgY3VycmVudDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fZGVzY3JpcHRpb24gc3ZlbHRlLWU1eXY2NlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGRpdi5pbm5lckhUTUwgPSByYXdfdmFsdWU7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmhlbHBJdGVtKi9cbiAgICAgIDEpICYmIHJhd192YWx1ZSAhPT0gKHJhd192YWx1ZSA9IC8qaGVscEl0ZW0qL1xuICAgICAgY3R4MlswXS5kZXNjcmlwdGlvbiArIFwiXCIpKVxuICAgICAgICBkaXYuaW5uZXJIVE1MID0gcmF3X3ZhbHVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgaWYgKCFkaXZfdHJhbnNpdGlvbilcbiAgICAgICAgICAgIGRpdl90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYsIHNsaWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgdHJ1ZSk7XG4gICAgICAgICAgZGl2X3RyYW5zaXRpb24ucnVuKDEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgaWYgKGxvY2FsKSB7XG4gICAgICAgIGlmICghZGl2X3RyYW5zaXRpb24pXG4gICAgICAgICAgZGl2X3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKGRpdiwgc2xpZGUsIHsgZHVyYXRpb246IDMwMCB9LCBmYWxzZSk7XG4gICAgICAgIGRpdl90cmFuc2l0aW9uLnJ1bigwKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGlmIChkZXRhY2hpbmcgJiYgZGl2X3RyYW5zaXRpb24pXG4gICAgICAgIGRpdl90cmFuc2l0aW9uLmVuZCgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRsKGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgYnV0dG9uO1xuICBsZXQgdDBfdmFsdWUgPSAoXG4gICAgLypoZWxwSXRlbSovXG4gICAgY3R4WzBdLnRpdGxlICsgXCJcIlxuICApO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLypvcGVuSGVscEl0ZW0qL1xuICAgIGN0eFsxXSAmJiBjcmVhdGVfaWZfYmxvY2skZChjdHgpXG4gICk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgdDAgPSB0ZXh0KHQwX3ZhbHVlKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwX190aXRsZSBzdmVsdGUtZTV5djY2XCIpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwIHN2ZWx0ZS1lNXl2NjZcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBidXR0b24pO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDApO1xuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qaGFuZGxlQ2xpY2sqL1xuICAgICAgICAgIGN0eFsyXVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKGRpcnR5ICYgLypoZWxwSXRlbSovXG4gICAgICAxICYmIHQwX3ZhbHVlICE9PSAodDBfdmFsdWUgPSAvKmhlbHBJdGVtKi9cbiAgICAgIGN0eDJbMF0udGl0bGUgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDAsIHQwX3ZhbHVlKTtcbiAgICAgIGlmIChcbiAgICAgICAgLypvcGVuSGVscEl0ZW0qL1xuICAgICAgICBjdHgyWzFdXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypvcGVuSGVscEl0ZW0qL1xuICAgICAgICAgIDIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9jayRkKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZCgpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGcoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgaGVscEl0ZW0gfSA9ICQkcHJvcHM7XG4gIGxldCBvcGVuSGVscEl0ZW0gPSBmYWxzZTtcbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gICAgJCRpbnZhbGlkYXRlKDEsIG9wZW5IZWxwSXRlbSA9ICFvcGVuSGVscEl0ZW0pO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImhlbHBJdGVtXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgaGVscEl0ZW0gPSAkJHByb3BzMi5oZWxwSXRlbSk7XG4gIH07XG4gIHJldHVybiBbaGVscEl0ZW0sIG9wZW5IZWxwSXRlbSwgaGFuZGxlQ2xpY2tdO1xufVxudmFyIEluc3BlY3RvckhlbHBJdGVtID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJGcsIGNyZWF0ZV9mcmFnbWVudCRsLCBzYWZlX25vdF9lcXVhbCwgeyBoZWxwSXRlbTogMCB9LCBhZGRfY3NzJGQpO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyRjKHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtMXBlOXRteFwiLCBcInN2Zy5zdmVsdGUtMXBlOXRteHt3aWR0aDo4cHg7aGVpZ2h0OmF1dG99XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JGsoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTQ1OS0zODEgMzE0LTUyNnEtMy0zLTQuNS02LjVUMzA4LTU0MHEwLTggNS41LTE0dDE0LjUtNmgzMDRxOSAwIDE0LjUgNnQ1LjUgMTRxMCAyLTYgMTRMNTAxLTM4MXEtNSA1LTEwIDd0LTExIDJxLTYgMC0xMS0ydC0xMC03WlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMzA4IC01NjAgMzQ0IDE4OFwiKTtcbiAgICAgIGF0dHIoXG4gICAgICAgIHN2ZyxcbiAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICAvKnN0eWxlKi9cbiAgICAgICAgY3R4WzBdXG4gICAgICApO1xuICAgICAgYXR0cihzdmcsIFwiY2xhc3NcIiwgXCJzdmVsdGUtMXBlOXRteFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoZGlydHkgJiAvKnN0eWxlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgYXR0cihcbiAgICAgICAgICBzdmcsXG4gICAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICAgIC8qc3R5bGUqL1xuICAgICAgICAgIGN0eDJbMF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkZigkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyBzdHlsZSA9IFwiXCIgfSA9ICQkcHJvcHM7XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcInN0eWxlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgc3R5bGUgPSAkJHByb3BzMi5zdHlsZSk7XG4gIH07XG4gIHJldHVybiBbc3R5bGVdO1xufVxudmFyIEFycm93SWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRmLCBjcmVhdGVfZnJhZ21lbnQkaywgc2FmZV9ub3RfZXF1YWwsIHsgc3R5bGU6IDAgfSwgYWRkX2NzcyRjKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQkNShjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFs1XSA9IGxpc3RbaV07XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfOCQxKGN0eCkge1xuICBsZXQgd2FybmluZ2ljb247XG4gIGxldCBjdXJyZW50O1xuICB3YXJuaW5naWNvbiA9IG5ldyBXYXJuaW5nSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQod2FybmluZ2ljb24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHdhcm5pbmdpY29uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHdhcm5pbmdpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHdhcm5pbmdpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQod2FybmluZ2ljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzckMShjdHgpIHtcbiAgbGV0IHhpY29uO1xuICBsZXQgY3VycmVudDtcbiAgeGljb24gPSBuZXcgWEljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHhpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudCh4aWNvbiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbih4aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dCh4aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHhpY29uLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja182JDIoY3R4KSB7XG4gIGxldCBleWVjbG9zZWRpY29uO1xuICBsZXQgY3VycmVudDtcbiAgZXllY2xvc2VkaWNvbiA9IG5ldyBFeWVDbG9zZWRJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChleWVjbG9zZWRpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChleWVjbG9zZWRpY29uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGV5ZWNsb3NlZGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoZXllY2xvc2VkaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGV5ZWNsb3NlZGljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzUkMihjdHgpIHtcbiAgbGV0IHBvaW50ZXJpY29uO1xuICBsZXQgY3VycmVudDtcbiAgcG9pbnRlcmljb24gPSBuZXcgUG9pbnRlckljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHBvaW50ZXJpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwb2ludGVyaWNvbiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwb2ludGVyaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwb2ludGVyaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHBvaW50ZXJpY29uLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja180JDMoY3R4KSB7XG4gIGxldCBtYWdpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbWFnaWNvbiA9IG5ldyBNYWdJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtYWdpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtYWdpY29uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1hZ2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobWFnaWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1hZ2ljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkNShjdHgpIHtcbiAgbGV0IGNhcnRpY29uO1xuICBsZXQgY3VycmVudDtcbiAgY2FydGljb24gPSBuZXcgQ2FydEljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNhcnRpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjYXJ0aWNvbiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjYXJ0aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjYXJ0aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNhcnRpY29uLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRjKGN0eCkge1xuICBsZXQgZGl2NDtcbiAgbGV0IGRpdjA7XG4gIGxldCBodG1sX3RhZztcbiAgbGV0IHJhd192YWx1ZSA9IChcbiAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgIGN0eFswXS5kZXNjcmlwdGlvbiArIFwiXCJcbiAgKTtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCBkaXYzO1xuICBsZXQgZGl2MTtcbiAgbGV0IHQzO1xuICBsZXQgZGl2MjtcbiAgbGV0IHQ0O1xuICBsZXQgZGl2NF90cmFuc2l0aW9uO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGlmX2Jsb2NrMCA9IChcbiAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgIGN0eFswXS50eXBlID09PSBcImNhcnRcIiAmJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzJdLmNhcnREYXRhICYmIGNyZWF0ZV9pZl9ibG9ja18yJDcoY3R4KVxuICApO1xuICBsZXQgZWFjaF92YWx1ZSA9IChcbiAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgIGN0eFswXS5oZWxwSXRlbXNcbiAgKTtcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2skNShnZXRfZWFjaF9jb250ZXh0JDUoY3R4LCBlYWNoX3ZhbHVlLCBpKSk7XG4gIH1cbiAgY29uc3Qgb3V0ID0gKGkpID0+IHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldLCAxLCAxLCAoKSA9PiB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBudWxsO1xuICB9KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgIGN0eFswXS5kb2N1bWVudGF0aW9uTGluayAmJiBjcmVhdGVfaWZfYmxvY2tfMSRhKGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGh0bWxfdGFnID0gbmV3IEh0bWxUYWcoZmFsc2UpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGRpdjMgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYxLnRleHRDb250ZW50ID0gXCJOZWVkIGhlbHA/XCI7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgfVxuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIGh0bWxfdGFnLmEgPSB0MDtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50LWl0ZW1cIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX190aXRsZVwiKTtcbiAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX19oZWxwLWl0ZW1zXCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbVwiKTtcbiAgICAgIGF0dHIoZGl2NCwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX193cmFwcGVyXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2NCwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXY0LCBkaXYwKTtcbiAgICAgIGh0bWxfdGFnLm0ocmF3X3ZhbHVlLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0MCk7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAubShkaXYwLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXY0LCB0MSk7XG4gICAgICBhcHBlbmQoZGl2NCwgZGl2Myk7XG4gICAgICBhcHBlbmQoZGl2MywgZGl2MSk7XG4gICAgICBhcHBlbmQoZGl2MywgdDMpO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdjIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBlbmQoZGl2MiwgdDQpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0oZGl2MiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgMSkgJiYgcmF3X3ZhbHVlICE9PSAocmF3X3ZhbHVlID0gLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eDJbMF0uZGVzY3JpcHRpb24gKyBcIlwiKSlcbiAgICAgICAgaHRtbF90YWcucChyYXdfdmFsdWUpO1xuICAgICAgaWYgKFxuICAgICAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnR5cGUgPT09IFwiY2FydFwiICYmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlsyXS5jYXJ0RGF0YVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzIkNyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKGRpdjAsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICBpZl9ibG9jazAuZCgxKTtcbiAgICAgICAgaWZfYmxvY2swID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAxKSB7XG4gICAgICAgIGVhY2hfdmFsdWUgPSAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgICBjdHgyWzBdLmhlbHBJdGVtcztcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dCQ1KGN0eDIsIGVhY2hfdmFsdWUsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJDUoY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXYyLCB0NCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICBmb3IgKGkgPSBlYWNoX3ZhbHVlLmxlbmd0aDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgICBjdHgyWzBdLmRvY3VtZW50YXRpb25MaW5rXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrXzEkYShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubShkaXYyLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSk7XG4gICAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGlmICghZGl2NF90cmFuc2l0aW9uKVxuICAgICAgICAgICAgZGl2NF90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXY0LCBzbGlkZSwgeyBkdXJhdGlvbjogMzAwIH0sIHRydWUpO1xuICAgICAgICAgIGRpdjRfdHJhbnNpdGlvbi5ydW4oMSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICBlYWNoX2Jsb2NrcyA9IGVhY2hfYmxvY2tzLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBpZiAoIWRpdjRfdHJhbnNpdGlvbilcbiAgICAgICAgICBkaXY0X3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKGRpdjQsIHNsaWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgZmFsc2UpO1xuICAgICAgICBkaXY0X3RyYW5zaXRpb24ucnVuKDApO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXY0KTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBkZXN0cm95X2VhY2goZWFjaF9ibG9ja3MsIGRldGFjaGluZyk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZCgpO1xuICAgICAgaWYgKGRldGFjaGluZyAmJiBkaXY0X3RyYW5zaXRpb24pXG4gICAgICAgIGRpdjRfdHJhbnNpdGlvbi5lbmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiQ3KGN0eCkge1xuICBsZXQgc3BhbjtcbiAgbGV0IHRfdmFsdWUgPSAoXG4gICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIGN0eFsyXS5jYXJ0RGF0YSArIFwiXCJcbiAgKTtcbiAgbGV0IHQ7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHQgPSB0ZXh0KHRfdmFsdWUpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3BhbiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzcGFuLCB0KTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDQgJiYgdF92YWx1ZSAhPT0gKHRfdmFsdWUgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHgyWzJdLmNhcnREYXRhICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQsIHRfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzcGFuKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9jayQ1KGN0eCkge1xuICBsZXQgaW5zcGVjdG9yaGVscGl0ZW07XG4gIGxldCBjdXJyZW50O1xuICBpbnNwZWN0b3JoZWxwaXRlbSA9IG5ldyBJbnNwZWN0b3JIZWxwSXRlbSh7IHByb3BzOiB7IGhlbHBJdGVtOiAoXG4gICAgLypoZWxwSXRlbSovXG4gICAgY3R4WzVdXG4gICkgfSB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChpbnNwZWN0b3JoZWxwaXRlbS4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoaW5zcGVjdG9yaGVscGl0ZW0sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgaW5zcGVjdG9yaGVscGl0ZW1fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIDEpXG4gICAgICAgIGluc3BlY3RvcmhlbHBpdGVtX2NoYW5nZXMuaGVscEl0ZW0gPSAvKmhlbHBJdGVtKi9cbiAgICAgICAgY3R4Mls1XTtcbiAgICAgIGluc3BlY3RvcmhlbHBpdGVtLiRzZXQoaW5zcGVjdG9yaGVscGl0ZW1fY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpbnNwZWN0b3JoZWxwaXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpbnNwZWN0b3JoZWxwaXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGluc3BlY3RvcmhlbHBpdGVtLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJGEoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBhO1xuICBsZXQgdDtcbiAgbGV0IGxpbmtpY29uO1xuICBsZXQgYV9ocmVmX3ZhbHVlO1xuICBsZXQgY3VycmVudDtcbiAgbGlua2ljb24gPSBuZXcgTGlua0ljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYSA9IGVsZW1lbnQoXCJhXCIpO1xuICAgICAgdCA9IHRleHQoXCJEb2N1bWVudGF0aW9uIFwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobGlua2ljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihhLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fdGl0bGUgbXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fdGl0bGUtLWxpbmtcIik7XG4gICAgICBhdHRyKGEsIFwiaHJlZlwiLCBhX2hyZWZfdmFsdWUgPSAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgY3R4WzBdLmRvY3VtZW50YXRpb25MaW5rKTtcbiAgICAgIGF0dHIoYSwgXCJ0YXJnZXRcIiwgXCJfYmxhbmtcIik7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50LWl0ZW1fX2hlbHBcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2LCBhKTtcbiAgICAgIGFwcGVuZChhLCB0KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChsaW5raWNvbiwgYSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAxICYmIGFfaHJlZl92YWx1ZSAhPT0gKGFfaHJlZl92YWx1ZSA9IC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICBjdHgyWzBdLmRvY3VtZW50YXRpb25MaW5rKSkge1xuICAgICAgICBhdHRyKGEsIFwiaHJlZlwiLCBhX2hyZWZfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obGlua2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobGlua2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGxpbmtpY29uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkaihjdHgpIHtcbiAgbGV0IGRpdjI7XG4gIGxldCBkaXYwO1xuICBsZXQgYnV0dG9uO1xuICBsZXQgc3BhbjA7XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jazA7XG4gIGxldCB0MDtcbiAgbGV0IHQxX3ZhbHVlID0gKFxuICAgIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgY3R4WzBdLnRpdGxlICsgXCJcIlxuICApO1xuICBsZXQgdDE7XG4gIGxldCB0MjtcbiAgbGV0IHNwYW4xO1xuICBsZXQgYXJyb3dpY29uO1xuICBsZXQgdDM7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2Ml9jbGFzc192YWx1ZTtcbiAgbGV0IGRpdjJfaWRfdmFsdWU7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW1xuICAgIGNyZWF0ZV9pZl9ibG9ja18zJDUsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzQkMyxcbiAgICBjcmVhdGVfaWZfYmxvY2tfNSQyLFxuICAgIGNyZWF0ZV9pZl9ibG9ja182JDIsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzckMSxcbiAgICBjcmVhdGVfaWZfYmxvY2tfOCQxXG4gIF07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmIChcbiAgICAgIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICBjdHgyWzBdLnR5cGUgPT09IFwiY2FydFwiXG4gICAgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKFxuICAgICAgLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eDJbMF0udHlwZSA9PT0gXCJmb3VuZFwiXG4gICAgKVxuICAgICAgcmV0dXJuIDE7XG4gICAgaWYgKFxuICAgICAgLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eDJbMF0udHlwZSA9PT0gXCJwbGFuLXByaWNlLWNsaWNrZWRcIlxuICAgIClcbiAgICAgIHJldHVybiAyO1xuICAgIGlmIChcbiAgICAgIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICBjdHgyWzBdLnR5cGUgPT09IFwiY29udGVudC1yZW1vdmVkXCJcbiAgICApXG4gICAgICByZXR1cm4gMztcbiAgICBpZiAoXG4gICAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgY3R4MlswXS50eXBlID09PSBcImVycm9yXCJcbiAgICApXG4gICAgICByZXR1cm4gNDtcbiAgICBpZiAoXG4gICAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgY3R4MlswXS50eXBlID09PSBcIndhcm5pbmdcIlxuICAgIClcbiAgICAgIHJldHVybiA1O1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAofihjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpKSkge1xuICAgIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICB9XG4gIGFycm93aWNvbiA9IG5ldyBBcnJvd0ljb24oe1xuICAgIHByb3BzOiB7XG4gICAgICBzdHlsZTogXCJ0cmFuc2Zvcm06IHJvdGF0ZShcIiArIC8qb3Blbkluc3BlY3Rvckl0ZW0qL1xuICAgICAgKGN0eFsxXSA/IFwiMTgwZGVnXCIgOiBcIjBkZWdcIikgKyBcIilcIlxuICAgIH1cbiAgfSk7XG4gIGxldCBpZl9ibG9jazEgPSAoXG4gICAgLypvcGVuSW5zcGVjdG9ySXRlbSovXG4gICAgY3R4WzFdICYmIGNyZWF0ZV9pZl9ibG9jayRjKGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuMCA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIHQxID0gdGV4dCh0MV92YWx1ZSk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBzcGFuMSA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChhcnJvd2ljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgYXR0cihzcGFuMCwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX19pY29uXCIpO1xuICAgICAgYXR0cihzcGFuMSwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX19hcnJvd1wiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWl0ZW1fX3RhYlwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJpbnNwZWN0b3ItaXRlbS1idXR0b25cIik7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fdGFic1wiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIGRpdjJfY2xhc3NfdmFsdWUgPSBcIm1zLWluc3BlY3Rvci1pdGVtIFwiICsgYWRkVHlwZUNsYXNzJDEoXG4gICAgICAgIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAgIGN0eFswXS50eXBlXG4gICAgICApKTtcbiAgICAgIGF0dHIoZGl2MiwgXCJpZFwiLCBkaXYyX2lkX3ZhbHVlID0gLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eFswXS5pZCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYyLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuMCk7XG4gICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKHNwYW4wLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGFwcGVuZChidXR0b24sIHQwKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQxKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQyKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4xKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChhcnJvd2ljb24sIHNwYW4xLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEubShkaXYxLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgIGN0eFs0XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ICE9PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSA9IG51bGw7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgICBpZiAoIWlmX2Jsb2NrMCkge1xuICAgICAgICAgICAgaWZfYmxvY2swID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eDIpO1xuICAgICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKHNwYW4wLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKCFjdXJyZW50IHx8IGRpcnR5ICYgLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIDEpICYmIHQxX3ZhbHVlICE9PSAodDFfdmFsdWUgPSAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgY3R4MlswXS50aXRsZSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MSwgdDFfdmFsdWUpO1xuICAgICAgY29uc3QgYXJyb3dpY29uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qb3Blbkluc3BlY3Rvckl0ZW0qL1xuICAgICAgMilcbiAgICAgICAgYXJyb3dpY29uX2NoYW5nZXMuc3R5bGUgPSBcInRyYW5zZm9ybTogcm90YXRlKFwiICsgLypvcGVuSW5zcGVjdG9ySXRlbSovXG4gICAgICAgIChjdHgyWzFdID8gXCIxODBkZWdcIiA6IFwiMGRlZ1wiKSArIFwiKVwiO1xuICAgICAgYXJyb3dpY29uLiRzZXQoYXJyb3dpY29uX2NoYW5nZXMpO1xuICAgICAgaWYgKFxuICAgICAgICAvKm9wZW5JbnNwZWN0b3JJdGVtKi9cbiAgICAgICAgY3R4MlsxXVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypvcGVuSW5zcGVjdG9ySXRlbSovXG4gICAgICAgICAgMikge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBjcmVhdGVfaWZfYmxvY2skYyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubShkaXYxLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAxICYmIGRpdjJfY2xhc3NfdmFsdWUgIT09IChkaXYyX2NsYXNzX3ZhbHVlID0gXCJtcy1pbnNwZWN0b3ItaXRlbSBcIiArIGFkZFR5cGVDbGFzcyQxKFxuICAgICAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnR5cGVcbiAgICAgICkpKSB7XG4gICAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBkaXYyX2NsYXNzX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAxICYmIGRpdjJfaWRfdmFsdWUgIT09IChkaXYyX2lkX3ZhbHVlID0gLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eDJbMF0uaWQpKSB7XG4gICAgICAgIGF0dHIoZGl2MiwgXCJpZFwiLCBkaXYyX2lkX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGFycm93aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYXJyb3dpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYyKTtcbiAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLmQoKTtcbiAgICAgIH1cbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGFycm93aWNvbik7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZCgpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGFkZFR5cGVDbGFzcyQxKHR5cGUpIHtcbiAgcmV0dXJuIGBtcy1pbnNwZWN0b3ItaXRlbS0tJHt0eXBlfWA7XG59XG5mdW5jdGlvbiBpbnN0YW5jZSRlKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkSW5zcGVjdG9yU3RvcmU7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBJbnNwZWN0b3JTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSgyLCAkSW5zcGVjdG9yU3RvcmUgPSAkJHZhbHVlKSk7XG4gIGxldCB7IGluc3BlY3Rvckl0ZW0gfSA9ICQkcHJvcHM7XG4gIGxldCBvcGVuSW5zcGVjdG9ySXRlbSA9IGZhbHNlO1xuICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICQkaW52YWxpZGF0ZSgxLCBvcGVuSW5zcGVjdG9ySXRlbSA9IGZhbHNlKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIHNob3dJbnNwZWN0b3JJdGVtQ29udGVudCgpIHtcbiAgICAkJGludmFsaWRhdGUoMSwgb3Blbkluc3BlY3Rvckl0ZW0gPSAhb3Blbkluc3BlY3Rvckl0ZW0pO1xuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiBzaG93SW5zcGVjdG9ySXRlbUNvbnRlbnQoKTtcbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwiaW5zcGVjdG9ySXRlbVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGluc3BlY3Rvckl0ZW0gPSAkJHByb3BzMi5pbnNwZWN0b3JJdGVtKTtcbiAgfTtcbiAgcmV0dXJuIFtcbiAgICBpbnNwZWN0b3JJdGVtLFxuICAgIG9wZW5JbnNwZWN0b3JJdGVtLFxuICAgICRJbnNwZWN0b3JTdG9yZSxcbiAgICBzaG93SW5zcGVjdG9ySXRlbUNvbnRlbnQsXG4gICAgY2xpY2tfaGFuZGxlclxuICBdO1xufVxudmFyIEluc3BlY3Rvckl0ZW0gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkZSwgY3JlYXRlX2ZyYWdtZW50JGosIHNhZmVfbm90X2VxdWFsLCB7IGluc3BlY3Rvckl0ZW06IDAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRfY3NzJGIodGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS0xdmxnczVpXCIsICcubXMtaW5zcGVjdG9yLWl0ZW1zX19oZWFkZXIuc3ZlbHRlLTF2bGdzNWkuc3ZlbHRlLTF2bGdzNWl7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW4tYm90dG9tOjdweDtmb250LXNpemU6MTFweDtjb2xvcjojZmZmO2ZsZXgtc2hyaW5rOjA7ZmxleC1ncm93OjF9Lm1zLWluc3BlY3Rvci1pdGVtc19fdGl0bGUuc3ZlbHRlLTF2bGdzNWkuc3ZlbHRlLTF2bGdzNWl7Zm9udC13ZWlnaHQ6NzAwfS5tcy1pbnNwZWN0b3ItaXRlbXNfX3RvZ2dsZS5zdmVsdGUtMXZsZ3M1aS5zdmVsdGUtMXZsZ3M1aXtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2dhcDo1cHh9Lm1zLWluc3BlY3Rvci1pdGVtc19fc3dpdGNoLnN2ZWx0ZS0xdmxnczVpLnN2ZWx0ZS0xdmxnczVpe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjQwcHg7aGVpZ2h0OjIwcHg7bWFyZ2luOjA7cGFkZGluZzowfS5tcy1pbnNwZWN0b3ItaXRlbXNfX3N3aXRjaC5zdmVsdGUtMXZsZ3M1aSBpbnB1dC5zdmVsdGUtMXZsZ3M1aXtvcGFjaXR5OjA7d2lkdGg6MDtoZWlnaHQ6MH0ubXMtaW5zcGVjdG9yLWl0ZW1zX19zbGlkZXIuc3ZlbHRlLTF2bGdzNWkuc3ZlbHRlLTF2bGdzNWl7cG9zaXRpb246YWJzb2x1dGU7Y3Vyc29yOnBvaW50ZXI7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZC1jb2xvcjojNDQ0O2JvcmRlcjoxcHggc29saWQgIzRiNGI0Yjstd2Via2l0LXRyYW5zaXRpb246MC40czt0cmFuc2l0aW9uOjAuNHM7Ym9yZGVyLXJhZGl1czoxMDBweH0ubXMtaW5zcGVjdG9yLWl0ZW1zX19zbGlkZXIuc3ZlbHRlLTF2bGdzNWkuc3ZlbHRlLTF2bGdzNWk6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XCJcIjtoZWlnaHQ6MTZweDt3aWR0aDoxNnB4O2xlZnQ6MXB4O2JvdHRvbToxcHg7YmFja2dyb3VuZC1jb2xvcjojYzFjMWMxOy13ZWJraXQtdHJhbnNpdGlvbjowLjRzO3RyYW5zaXRpb246MC40cztib3JkZXItcmFkaXVzOjUwJX1pbnB1dC5zdmVsdGUtMXZsZ3M1aTpjaGVja2VkKy5tcy1pbnNwZWN0b3ItaXRlbXNfX3NsaWRlci5zdmVsdGUtMXZsZ3M1aXtiYWNrZ3JvdW5kLWNvbG9yOiMyOTYyZmY7Ym9yZGVyLWNvbG9yOiMyOTYyZmZ9aW5wdXQuc3ZlbHRlLTF2bGdzNWk6Zm9jdXMrLm1zLWluc3BlY3Rvci1pdGVtc19fc2xpZGVyLnN2ZWx0ZS0xdmxnczVpe2JveC1zaGFkb3c6MCAwIDFweCAjMjk2MmZmfWlucHV0LnN2ZWx0ZS0xdmxnczVpOmNoZWNrZWQrLm1zLWluc3BlY3Rvci1pdGVtc19fc2xpZGVyLnN2ZWx0ZS0xdmxnczVpOmJlZm9yZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0ubXMtaW5zcGVjdG9yLWl0ZW17d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiM0NDQ7Ym9yZGVyOjFweCBzb2xpZCAjNWM1YzVjO2JvcmRlci1yYWRpdXM6NHB4O2ZsZXgtd3JhcDp3cmFwO21hcmdpbi1ib3R0b206MC41ZW07ZGlzcGxheTpmbGV4O3RyYW5zaXRpb246aGVpZ2h0IDAuMnMgZWFzZS1pbi1vdXQ7b3ZlcmZsb3c6aGlkZGVufS5tcy1pbnNwZWN0b3ItaXRlbV9fdGFic3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6c3RyZXRjaDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDoxMDAlfS5tcy1pbnNwZWN0b3ItaXRlbV9fdGFie2dhcDo2cHg7cGFkZGluZzo0cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2UtaW4tb3V0fS5tcy1pbnNwZWN0b3ItaXRlbV9fdGFiOmZpcnN0LWNoaWxke2ZsZXgtZ3JvdzoxfS5tcy1pbnNwZWN0b3ItaXRlbV9fdGFiOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzUzNTM1M30ubXMtaW5zcGVjdG9yLWl0ZW0tLWVycm9ye2JvcmRlci1jb2xvcjojZTA2NjU3fS5tcy1pbnNwZWN0b3ItaXRlbS0td2FybmluZ3tib3JkZXItY29sb3I6I2U0ZDE3OX0ubXMtaW5zcGVjdG9yLWl0ZW1fX2ljb257d2lkdGg6MjJweDtoZWlnaHQ6MjJweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjojMjkyOTI5O2JvcmRlci1yYWRpdXM6M3B4O2NvbG9yOiNmZmZ9Lm1zLWluc3BlY3Rvci1pdGVtX19pY29uIHN2Z3twYWRkaW5nOjJweH0ubXMtaW5zcGVjdG9yLWl0ZW0tLWNhcnQgLm1zLWluc3BlY3Rvci1pdGVtX19pY29ue2JhY2tncm91bmQtY29sb3I6IzI5MjkyOX0ubXMtaW5zcGVjdG9yLWl0ZW0tLWZvdW5kIC5tcy1pbnNwZWN0b3ItaXRlbV9faWNvbntiYWNrZ3JvdW5kLWNvbG9yOiM1YjljNmZ9XFxuICAgICAgLm1zLWluc3BlY3Rvci1pdGVtLS1wbGFuLXByaWNlLWNsaWNrZWQgLm1zLWluc3BlY3Rvci1pdGVtX19pY29uXFxuICAgIHtiYWNrZ3JvdW5kLWNvbG9yOiMyOTYyZmZ9XFxuICAgICAgLm1zLWluc3BlY3Rvci1pdGVtLS1jb250ZW50LXJlbW92ZWQgLm1zLWluc3BlY3Rvci1pdGVtX19pY29uXFxuICAgIHtiYWNrZ3JvdW5kLWNvbG9yOiNiYjViY2V9Lm1zLWluc3BlY3Rvci1pdGVtLS1lcnJvciAubXMtaW5zcGVjdG9yLWl0ZW1fX2ljb257YmFja2dyb3VuZC1jb2xvcjojZTA2NjU3fS5tcy1pbnNwZWN0b3ItaXRlbS0td2FybmluZyAubXMtaW5zcGVjdG9yLWl0ZW1fX2ljb257YmFja2dyb3VuZC1jb2xvcjojNTM1MzUzO2NvbG9yOiNlZmQzNTB9Lm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50e3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0ubXMtaW5zcGVjdG9yLWl0ZW1fX3dyYXBwZXJ7d2lkdGg6MTAwJX0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbXtwYWRkaW5nOjdweDtib3JkZXItdG9wOjFweCBzb2xpZCByZ2JhKDQxLCA0MSwgNDEsIDAuNSk7d2lkdGg6MTAwJX0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbSA+ICp7Zm9udC1mYW1pbHk6UGx1cyBKYWthcnRhIFNhbnMsIHNhbnMtc2VyaWYgIWltcG9ydGFudDtsaW5lLWhlaWdodDoxLjVlbTtmb250LXNpemU6MTFweCAhaW1wb3J0YW50O21hcmdpbjowO3BhZGRpbmc6MH0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbSBwe2xpbmUtaGVpZ2h0OjEuNSAhaW1wb3J0YW50O21hcmdpbi1ib3R0b206N3B4O2NvbG9yOiNjMWMxYzE7Zm9udC1zaXplOjExcHggIWltcG9ydGFudH0ubXMtaW5zcGVjdG9yLWl0ZW1fX2NvbnRlbnQtaXRlbSBwOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtIGF7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtjb2xvcjojZmZmO3dvcmQtd3JhcDpicmVhay1hbGx9Lm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50LWl0ZW1fX3RpdGxle2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTJweDttYXJnaW4tYm90dG9tOjdweDtjb2xvcjojYzFjMWMxfS5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwX190aXRsZXt3aWR0aDoxMDAlO2dyaWQtY29sdW1uLWdhcDo0cHg7Z3JpZC1yb3ctZ2FwOjRweDtib3JkZXI6MXB4IHNvbGlkICMzNzM3Mzc7YmFja2dyb3VuZC1jb2xvcjojNTM1MzUzO2JvcmRlci1yYWRpdXM6NHB4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tdG9wOjAuNmVtO21hcmdpbi1ib3R0b206LTNweDtwYWRkaW5nLWxlZnQ6MWVtO3BhZGRpbmctcmlnaHQ6MWVtO2xpbmUtaGVpZ2h0OjIuN2VtO2Rpc3BsYXk6ZmxleDtjb2xvcjojZmZmfS5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwX190aXRsZTpob3Zlcntib3JkZXItY29sb3I6IzI5MjkyOTtiYWNrZ3JvdW5kLWNvbG9yOiM0NDR9Lm1zLWluc3BlY3Rvci1pdGVtX19jb250ZW50LWl0ZW1fX2hlbHBfX3RpdGxlLS1saW5re3RleHQtZGVjb3JhdGlvbjpub25lfS5tcy1pbnNwZWN0b3ItaXRlbV9fY29udGVudC1pdGVtX19oZWxwX19kZXNjcmlwdGlvbntvdmVyZmxvdzpoaWRkZW59Lm1zLWluc3BlY3Rvci1pdGVtX19jb3VudHtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7Y29sb3I6I2U4ZThlODtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjkuOXB4O2xpbmUtaGVpZ2h0OjE7cGFkZGluZzozcHg7bWFyZ2luOjB9Lm1zLWluc3BlY3Rvci1pdGVtX19hcnJvd3ttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDo4cHg7d2lkdGg6OHB4O3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXR9Jyk7XG59XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0JDQoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbNl0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8xJDMoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbNl0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8yJDEoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbNl0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8zKGN0eCwgbGlzdCwgaSkge1xuICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgY2hpbGRfY3R4WzZdID0gbGlzdFtpXTtcbiAgcmV0dXJuIGNoaWxkX2N0eDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzMoa2V5XzEsIGN0eCkge1xuICBsZXQgZmlyc3Q7XG4gIGxldCBpbnNwZWN0b3JpdGVtO1xuICBsZXQgY3VycmVudDtcbiAgaW5zcGVjdG9yaXRlbSA9IG5ldyBJbnNwZWN0b3JJdGVtKHtcbiAgICBwcm9wczogeyBpbnNwZWN0b3JJdGVtOiAoXG4gICAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgY3R4WzZdXG4gICAgKSB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGtleToga2V5XzEsXG4gICAgZmlyc3Q6IG51bGwsXG4gICAgYygpIHtcbiAgICAgIGZpcnN0ID0gZW1wdHkoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoaW5zcGVjdG9yaXRlbS4kJC5mcmFnbWVudCk7XG4gICAgICB0aGlzLmZpcnN0ID0gZmlyc3Q7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBmaXJzdCwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChpbnNwZWN0b3JpdGVtLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAobmV3X2N0eCwgZGlydHkpIHtcbiAgICAgIGN0eCA9IG5ld19jdHg7XG4gICAgICBjb25zdCBpbnNwZWN0b3JpdGVtX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgIDIpXG4gICAgICAgIGluc3BlY3Rvcml0ZW1fY2hhbmdlcy5pbnNwZWN0b3JJdGVtID0gLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgICAgY3R4WzZdO1xuICAgICAgaW5zcGVjdG9yaXRlbS4kc2V0KGluc3BlY3Rvcml0ZW1fY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpbnNwZWN0b3JpdGVtLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGluc3BlY3Rvcml0ZW0uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZmlyc3QpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoaW5zcGVjdG9yaXRlbSwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skYihjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBkaXYwO1xuICBsZXQgYnV0dG9uO1xuICBsZXQgc3BhbjA7XG4gIGxldCBtYWdpY29uO1xuICBsZXQgdDA7XG4gIGxldCBzcGFuMTtcbiAgbGV0IHQyO1xuICBsZXQgc3BhbjI7XG4gIGxldCB0MztcbiAgbGV0IHQ0X3ZhbHVlID0gKFxuICAgIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICBjdHhbMV0uZmlsdGVyKGZ1bmNfMiQxKS5sZW5ndGggKyBcIlwiXG4gICk7XG4gIGxldCB0NDtcbiAgbGV0IHQ1O1xuICBsZXQgc3BhbjM7XG4gIGxldCBhcnJvd2ljb247XG4gIGxldCB0NjtcbiAgbGV0IGlmX2Jsb2NrX2FuY2hvcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbWFnaWNvbiA9IG5ldyBNYWdJY29uKHt9KTtcbiAgYXJyb3dpY29uID0gbmV3IEFycm93SWNvbih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHN0eWxlOiBcInRyYW5zZm9ybTogcm90YXRlKFwiICsgLypzaG93Rm91bmRJdGVtcyovXG4gICAgICAoY3R4WzJdID8gXCIxODBkZWdcIiA6IFwiMGRlZ1wiKSArIFwiKVwiXG4gICAgfVxuICB9KTtcbiAgbGV0IGlmX2Jsb2NrID0gKFxuICAgIC8qc2hvd0ZvdW5kSXRlbXMqL1xuICAgIGN0eFsyXSAmJiBjcmVhdGVfaWZfYmxvY2tfMSQ5KGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuMCA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtYWdpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIHNwYW4xID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuMS50ZXh0Q29udGVudCA9IFwiQXR0cmlidXRlcyBGb3VuZFwiO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgc3BhbjIgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHQzID0gdGV4dChcInhcIik7XG4gICAgICB0NCA9IHRleHQodDRfdmFsdWUpO1xuICAgICAgdDUgPSBzcGFjZSgpO1xuICAgICAgc3BhbjMgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYXJyb3dpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQ2ID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgaWZfYmxvY2tfYW5jaG9yID0gZW1wdHkoKTtcbiAgICAgIGF0dHIoc3BhbjAsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9faWNvblwiKTtcbiAgICAgIGF0dHIoc3BhbjEsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fdGV4dFwiKTtcbiAgICAgIGF0dHIoc3BhbjIsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fY291bnRcIik7XG4gICAgICBhdHRyKHNwYW4zLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWl0ZW1fX2Fycm93XCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fdGFiXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiZGF0YS1jeVwiLCBcImluc3BlY3Rvci1pdGVtLS1ncm91cC1idXR0b25cIik7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbV9fdGFic1wiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtIG1zLWluc3BlY3Rvci1pdGVtLS1mb3VuZFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgYnV0dG9uKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4wKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtYWdpY29uLCBzcGFuMCwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuMSk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0Mik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuMik7XG4gICAgICBhcHBlbmQoc3BhbjIsIHQzKTtcbiAgICAgIGFwcGVuZChzcGFuMiwgdDQpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDUpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3BhbjMpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGFycm93aWNvbiwgc3BhbjMsIG51bGwpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDYsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgaWZfYmxvY2tfYW5jaG9yLCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qdG9nZ2xlU2hvd0ZvdW5kSXRlbXMqL1xuICAgICAgICAgIGN0eFszXVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAyKSAmJiB0NF92YWx1ZSAhPT0gKHQ0X3ZhbHVlID0gLyppbnNwZWN0b3JJdGVtc0RhdGEqL1xuICAgICAgY3R4MlsxXS5maWx0ZXIoZnVuY18yJDEpLmxlbmd0aCArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0NCwgdDRfdmFsdWUpO1xuICAgICAgY29uc3QgYXJyb3dpY29uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qc2hvd0ZvdW5kSXRlbXMqL1xuICAgICAgNClcbiAgICAgICAgYXJyb3dpY29uX2NoYW5nZXMuc3R5bGUgPSBcInRyYW5zZm9ybTogcm90YXRlKFwiICsgLypzaG93Rm91bmRJdGVtcyovXG4gICAgICAgIChjdHgyWzJdID8gXCIxODBkZWdcIiA6IFwiMGRlZ1wiKSArIFwiKVwiO1xuICAgICAgYXJyb3dpY29uLiRzZXQoYXJyb3dpY29uX2NoYW5nZXMpO1xuICAgICAgaWYgKFxuICAgICAgICAvKnNob3dGb3VuZEl0ZW1zKi9cbiAgICAgICAgY3R4MlsyXVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qc2hvd0ZvdW5kSXRlbXMqL1xuICAgICAgICAgIDQpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9ja18xJDkoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oaWZfYmxvY2tfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrX2FuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihtYWdpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGFycm93aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KG1hZ2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGFycm93aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYxKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1hZ2ljb24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYXJyb3dpY29uKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Nik7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJDkoY3R4KSB7XG4gIGxldCBlYWNoX2Jsb2NrcyA9IFtdO1xuICBsZXQgZWFjaF8xX2xvb2t1cCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCBlYWNoXzFfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGVhY2hfdmFsdWVfMiA9IChcbiAgICAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgY3R4WzFdLmZpbHRlcihmdW5jXzMkMSlcbiAgKTtcbiAgY29uc3QgZ2V0X2tleSA9IChjdHgyKSA9PiAoXG4gICAgLyppbnNwZWN0b3JJdGVtKi9cbiAgICBjdHgyWzZdLmlkXG4gICk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8yLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHRfMiQxKGN0eCwgZWFjaF92YWx1ZV8yLCBpKTtcbiAgICBsZXQga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgIGVhY2hfMV9sb29rdXAuc2V0KGtleSwgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9ja18yJDEoa2V5LCBjaGlsZF9jdHgpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIGVhY2hfMV9hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zZXJ0KHRhcmdldCwgZWFjaF8xX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKGRpcnR5ICYgLyppbnNwZWN0b3JJdGVtc0RhdGEqL1xuICAgICAgMikge1xuICAgICAgICBlYWNoX3ZhbHVlXzIgPSAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAgIGN0eDJbMV0uZmlsdGVyKGZ1bmNfMyQxKTtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIGVhY2hfYmxvY2tzID0gdXBkYXRlX2tleWVkX2VhY2goZWFjaF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCAxLCBjdHgyLCBlYWNoX3ZhbHVlXzIsIGVhY2hfMV9sb29rdXAsIGVhY2hfMV9hbmNob3IucGFyZW50Tm9kZSwgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIGNyZWF0ZV9lYWNoX2Jsb2NrXzIkMSwgZWFjaF8xX2FuY2hvciwgZ2V0X2VhY2hfY29udGV4dF8yJDEpO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWVfMi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5kKGRldGFjaGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZWFjaF8xX2FuY2hvcik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2tfMiQxKGtleV8xLCBjdHgpIHtcbiAgbGV0IGZpcnN0O1xuICBsZXQgaW5zcGVjdG9yaXRlbTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGluc3BlY3Rvcml0ZW0gPSBuZXcgSW5zcGVjdG9ySXRlbSh7XG4gICAgcHJvcHM6IHsgaW5zcGVjdG9ySXRlbTogKFxuICAgICAgLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eFs2XVxuICAgICkgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleV8xLFxuICAgIGZpcnN0OiBudWxsLFxuICAgIGMoKSB7XG4gICAgICBmaXJzdCA9IGVtcHR5KCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGluc3BlY3Rvcml0ZW0uJCQuZnJhZ21lbnQpO1xuICAgICAgdGhpcy5maXJzdCA9IGZpcnN0O1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZmlyc3QsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoaW5zcGVjdG9yaXRlbSwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgY29uc3QgaW5zcGVjdG9yaXRlbV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAyKVxuICAgICAgICBpbnNwZWN0b3JpdGVtX2NoYW5nZXMuaW5zcGVjdG9ySXRlbSA9IC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAgIGN0eFs2XTtcbiAgICAgIGluc3BlY3Rvcml0ZW0uJHNldChpbnNwZWN0b3JpdGVtX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaW5zcGVjdG9yaXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpbnNwZWN0b3JpdGVtLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZpcnN0KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGluc3BlY3Rvcml0ZW0sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2tfMSQzKGtleV8xLCBjdHgpIHtcbiAgbGV0IGZpcnN0O1xuICBsZXQgaW5zcGVjdG9yaXRlbTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGluc3BlY3Rvcml0ZW0gPSBuZXcgSW5zcGVjdG9ySXRlbSh7XG4gICAgcHJvcHM6IHsgaW5zcGVjdG9ySXRlbTogKFxuICAgICAgLyppbnNwZWN0b3JJdGVtKi9cbiAgICAgIGN0eFs2XVxuICAgICkgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleV8xLFxuICAgIGZpcnN0OiBudWxsLFxuICAgIGMoKSB7XG4gICAgICBmaXJzdCA9IGVtcHR5KCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGluc3BlY3Rvcml0ZW0uJCQuZnJhZ21lbnQpO1xuICAgICAgdGhpcy5maXJzdCA9IGZpcnN0O1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZmlyc3QsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoaW5zcGVjdG9yaXRlbSwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKG5ld19jdHgsIGRpcnR5KSB7XG4gICAgICBjdHggPSBuZXdfY3R4O1xuICAgICAgY29uc3QgaW5zcGVjdG9yaXRlbV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAyKVxuICAgICAgICBpbnNwZWN0b3JpdGVtX2NoYW5nZXMuaW5zcGVjdG9ySXRlbSA9IC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICAgIGN0eFs2XTtcbiAgICAgIGluc3BlY3Rvcml0ZW0uJHNldChpbnNwZWN0b3JpdGVtX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaW5zcGVjdG9yaXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpbnNwZWN0b3JpdGVtLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGZpcnN0KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGluc3BlY3Rvcml0ZW0sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2skNChrZXlfMSwgY3R4KSB7XG4gIGxldCBmaXJzdDtcbiAgbGV0IGluc3BlY3Rvcml0ZW07XG4gIGxldCBjdXJyZW50O1xuICBpbnNwZWN0b3JpdGVtID0gbmV3IEluc3BlY3Rvckl0ZW0oe1xuICAgIHByb3BzOiB7IGluc3BlY3Rvckl0ZW06IChcbiAgICAgIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgICBjdHhbNl1cbiAgICApIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAga2V5OiBrZXlfMSxcbiAgICBmaXJzdDogbnVsbCxcbiAgICBjKCkge1xuICAgICAgZmlyc3QgPSBlbXB0eSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChpbnNwZWN0b3JpdGVtLiQkLmZyYWdtZW50KTtcbiAgICAgIHRoaXMuZmlyc3QgPSBmaXJzdDtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGZpcnN0LCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGluc3BlY3Rvcml0ZW0sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChuZXdfY3R4LCBkaXJ0eSkge1xuICAgICAgY3R4ID0gbmV3X2N0eDtcbiAgICAgIGNvbnN0IGluc3BlY3Rvcml0ZW1fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyppbnNwZWN0b3JJdGVtc0RhdGEqL1xuICAgICAgMilcbiAgICAgICAgaW5zcGVjdG9yaXRlbV9jaGFuZ2VzLmluc3BlY3Rvckl0ZW0gPSAvKmluc3BlY3Rvckl0ZW0qL1xuICAgICAgICBjdHhbNl07XG4gICAgICBpbnNwZWN0b3JpdGVtLiRzZXQoaW5zcGVjdG9yaXRlbV9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGluc3BlY3Rvcml0ZW0uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaW5zcGVjdG9yaXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChmaXJzdCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChpbnNwZWN0b3JpdGVtLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRpKGN0eCkge1xuICBsZXQgZGl2MjtcbiAgbGV0IGRpdjA7XG4gIGxldCB0MTtcbiAgbGV0IGRpdjE7XG4gIGxldCB0MjtcbiAgbGV0IGxhYmVsO1xuICBsZXQgaW5wdXQ7XG4gIGxldCB0MztcbiAgbGV0IHNwYW47XG4gIGxldCB0NDtcbiAgbGV0IGVhY2hfYmxvY2tzXzIgPSBbXTtcbiAgbGV0IGVhY2gwX2xvb2t1cCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCB0NTtcbiAgbGV0IHNob3dfaWYgPSAoXG4gICAgLyppbnNwZWN0b3JJdGVtc0RhdGEqL1xuICAgIGN0eFsxXS5maWx0ZXIoZnVuYyQxKS5sZW5ndGggPiAwXG4gICk7XG4gIGxldCB0NjtcbiAgbGV0IGVhY2hfYmxvY2tzXzEgPSBbXTtcbiAgbGV0IGVhY2gxX2xvb2t1cCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCB0NztcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGxldCBlYWNoMl9sb29rdXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBsZXQgZWFjaDJfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICBsZXQgZWFjaF92YWx1ZV8zID0gKFxuICAgIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICBjdHhbMV0uZmlsdGVyKGZ1bmNfMSQxKVxuICApO1xuICBjb25zdCBnZXRfa2V5ID0gKGN0eDIpID0+IChcbiAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgIGN0eDJbNl0uaWRcbiAgKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dF8zKGN0eCwgZWFjaF92YWx1ZV8zLCBpKTtcbiAgICBsZXQga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgIGVhY2gwX2xvb2t1cC5zZXQoa2V5LCBlYWNoX2Jsb2Nrc18yW2ldID0gY3JlYXRlX2VhY2hfYmxvY2tfMyhrZXksIGNoaWxkX2N0eCkpO1xuICB9XG4gIGxldCBpZl9ibG9jayA9IHNob3dfaWYgJiYgY3JlYXRlX2lmX2Jsb2NrJGIoY3R4KTtcbiAgbGV0IGVhY2hfdmFsdWVfMSA9IChcbiAgICAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgY3R4WzFdLmZpbHRlcihmdW5jXzQkMSlcbiAgKTtcbiAgY29uc3QgZ2V0X2tleV8xID0gKGN0eDIpID0+IChcbiAgICAvKmluc3BlY3Rvckl0ZW0qL1xuICAgIGN0eDJbNl0uaWRcbiAgKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dF8xJDMoY3R4LCBlYWNoX3ZhbHVlXzEsIGkpO1xuICAgIGxldCBrZXkgPSBnZXRfa2V5XzEoY2hpbGRfY3R4KTtcbiAgICBlYWNoMV9sb29rdXAuc2V0KGtleSwgZWFjaF9ibG9ja3NfMVtpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrXzEkMyhrZXksIGNoaWxkX2N0eCkpO1xuICB9XG4gIGxldCBlYWNoX3ZhbHVlID0gKFxuICAgIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICBjdHhbMV0uZmlsdGVyKGZ1bmNfNSQxKVxuICApO1xuICBjb25zdCBnZXRfa2V5XzIgPSAoY3R4MikgPT4gKFxuICAgIC8qaW5zcGVjdG9ySXRlbSovXG4gICAgY3R4Mls2XS5pZFxuICApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dCQ0KGN0eCwgZWFjaF92YWx1ZSwgaSk7XG4gICAgbGV0IGtleSA9IGdldF9rZXlfMihjaGlsZF9jdHgpO1xuICAgIGVhY2gyX2xvb2t1cC5zZXQoa2V5LCBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJDQoa2V5LCBjaGlsZF9jdHgpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MC50ZXh0Q29udGVudCA9IFwiRXZlbnRzICYgRXJyb3JzXCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIHQyID0gdGV4dChcIlgtcmF5XFxuICAgIFwiKTtcbiAgICAgIGxhYmVsID0gZWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgaW5wdXQgPSBlbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzXzIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NfMltpXS5jKCk7XG4gICAgICB9XG4gICAgICB0NSA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIHQ2ID0gc3BhY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3NfMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc18xW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIHQ3ID0gc3BhY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgfVxuICAgICAgZWFjaDJfYW5jaG9yID0gZW1wdHkoKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtc19fdGl0bGUgc3ZlbHRlLTF2bGdzNWlcIik7XG4gICAgICBhdHRyKGlucHV0LCBcInR5cGVcIiwgXCJjaGVja2JveFwiKTtcbiAgICAgIGF0dHIoaW5wdXQsIFwiZGF0YS1jeVwiLCBcIngtcmF5LXN3aXRjaFwiKTtcbiAgICAgIGF0dHIoaW5wdXQsIFwiY2xhc3NcIiwgXCJzdmVsdGUtMXZsZ3M1aVwiKTtcbiAgICAgIGF0dHIoc3BhbiwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtc19fc2xpZGVyIHN2ZWx0ZS0xdmxnczVpXCIpO1xuICAgICAgYXR0cihsYWJlbCwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1pdGVtc19fc3dpdGNoIHN2ZWx0ZS0xdmxnczVpXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWl0ZW1zX190b2dnbGUgc3ZlbHRlLTF2bGdzNWlcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItaXRlbXNfX2hlYWRlciBzdmVsdGUtMXZsZ3M1aVwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjIsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjEpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQyKTtcbiAgICAgIGFwcGVuZChkaXYxLCBsYWJlbCk7XG4gICAgICBhcHBlbmQobGFiZWwsIGlucHV0KTtcbiAgICAgIGlucHV0LmNoZWNrZWQgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0ueFJheU1vZGU7XG4gICAgICBhcHBlbmQobGFiZWwsIHQzKTtcbiAgICAgIGFwcGVuZChsYWJlbCwgc3Bhbik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NCwgYW5jaG9yKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3NfMi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZWFjaF9ibG9ja3NfMltpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzXzJbaV0ubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluc2VydCh0YXJnZXQsIHQ1LCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQ2LCBhbmNob3IpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrc18xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc18xW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NfMVtpXS5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zZXJ0KHRhcmdldCwgdDcsIGFuY2hvcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnNlcnQodGFyZ2V0LCBlYWNoMl9hbmNob3IsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gW1xuICAgICAgICAgIGxpc3RlbihcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgXCJjaGFuZ2VcIixcbiAgICAgICAgICAgIC8qaGFuZGxlQ2hhbmdlKi9cbiAgICAgICAgICAgIGN0eFs0XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBcImNoYW5nZVwiLFxuICAgICAgICAgICAgLyppbnB1dF9jaGFuZ2VfaGFuZGxlciovXG4gICAgICAgICAgICBjdHhbNV1cbiAgICAgICAgICApXG4gICAgICAgIF07XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSB7XG4gICAgICAgIGlucHV0LmNoZWNrZWQgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0ueFJheU1vZGU7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAyKSB7XG4gICAgICAgIGVhY2hfdmFsdWVfMyA9IC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgICAgY3R4MlsxXS5maWx0ZXIoZnVuY18xJDEpO1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgZWFjaF9ibG9ja3NfMiA9IHVwZGF0ZV9rZXllZF9lYWNoKGVhY2hfYmxvY2tzXzIsIGRpcnR5LCBnZXRfa2V5LCAxLCBjdHgyLCBlYWNoX3ZhbHVlXzMsIGVhY2gwX2xvb2t1cCwgdDUucGFyZW50Tm9kZSwgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIGNyZWF0ZV9lYWNoX2Jsb2NrXzMsIHQ1LCBnZXRfZWFjaF9jb250ZXh0XzMpO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgIDIpXG4gICAgICAgIHNob3dfaWYgPSAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAgIGN0eDJbMV0uZmlsdGVyKGZ1bmMkMSkubGVuZ3RoID4gMDtcbiAgICAgIGlmIChzaG93X2lmKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgICAgICAyKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBjcmVhdGVfaWZfYmxvY2skYihjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgaWZfYmxvY2subSh0Ni5wYXJlbnROb2RlLCB0Nik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKmluc3BlY3Rvckl0ZW1zRGF0YSovXG4gICAgICAyKSB7XG4gICAgICAgIGVhY2hfdmFsdWVfMSA9IC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgICAgY3R4MlsxXS5maWx0ZXIoZnVuY180JDEpO1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgZWFjaF9ibG9ja3NfMSA9IHVwZGF0ZV9rZXllZF9lYWNoKGVhY2hfYmxvY2tzXzEsIGRpcnR5LCBnZXRfa2V5XzEsIDEsIGN0eDIsIGVhY2hfdmFsdWVfMSwgZWFjaDFfbG9va3VwLCB0Ny5wYXJlbnROb2RlLCBvdXRyb19hbmRfZGVzdHJveV9ibG9jaywgY3JlYXRlX2VhY2hfYmxvY2tfMSQzLCB0NywgZ2V0X2VhY2hfY29udGV4dF8xJDMpO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgIDIpIHtcbiAgICAgICAgZWFjaF92YWx1ZSA9IC8qaW5zcGVjdG9ySXRlbXNEYXRhKi9cbiAgICAgICAgY3R4MlsxXS5maWx0ZXIoZnVuY181JDEpO1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgZWFjaF9ibG9ja3MgPSB1cGRhdGVfa2V5ZWRfZWFjaChlYWNoX2Jsb2NrcywgZGlydHksIGdldF9rZXlfMiwgMSwgY3R4MiwgZWFjaF92YWx1ZSwgZWFjaDJfbG9va3VwLCBlYWNoMl9hbmNob3IucGFyZW50Tm9kZSwgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIGNyZWF0ZV9lYWNoX2Jsb2NrJDQsIGVhY2gyX2FuY2hvciwgZ2V0X2VhY2hfY29udGV4dCQ0KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc18yW2ldKTtcbiAgICAgIH1cbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc18xW2ldKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrc18yLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzXzJbaV0pO1xuICAgICAgfVxuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrc18xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzXzFbaV0pO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjIpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ0KTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3NfMi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc18yW2ldLmQoZGV0YWNoaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0NSk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Nik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NfMVtpXS5kKGRldGFjaGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDcpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5kKGRldGFjaGluZyk7XG4gICAgICB9XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZWFjaDJfYW5jaG9yKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHJ1bl9hbGwoZGlzcG9zZSk7XG4gICAgfVxuICB9O1xufVxudmFyIGZ1bmMkMSA9IChpdGVtKSA9PiBpdGVtLnR5cGUgPT09IFwiZm91bmRcIjtcbnZhciBmdW5jXzEkMSA9IChpdGVtKSA9PiBpdGVtLnR5cGUgPT09IFwiY2FydFwiO1xudmFyIGZ1bmNfMiQxID0gKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJmb3VuZFwiO1xudmFyIGZ1bmNfMyQxID0gKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJmb3VuZFwiO1xudmFyIGZ1bmNfNCQxID0gKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJlcnJvclwiO1xudmFyIGZ1bmNfNSQxID0gKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJ3YXJuaW5nXCI7XG5mdW5jdGlvbiBpbnN0YW5jZSRkKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkSW5zcGVjdG9yU3RvcmU7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBJbnNwZWN0b3JTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSgwLCAkSW5zcGVjdG9yU3RvcmUgPSAkJHZhbHVlKSk7XG4gIGxldCBpbnNwZWN0b3JJdGVtc0RhdGEgPSBbXTtcbiAgbGV0IHNob3dGb3VuZEl0ZW1zID0gZmFsc2U7XG4gIG9uRGVzdHJveSgoKSA9PiB7XG4gICAgJCRpbnZhbGlkYXRlKDIsIHNob3dGb3VuZEl0ZW1zID0gZmFsc2UpO1xuICB9KTtcbiAgZnVuY3Rpb24gdG9nZ2xlU2hvd0ZvdW5kSXRlbXMoKSB7XG4gICAgJCRpbnZhbGlkYXRlKDIsIHNob3dGb3VuZEl0ZW1zID0gIXNob3dGb3VuZEl0ZW1zKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgVG9nZ2xlWFJheU1vZGUoKTtcbiAgfVxuICBmdW5jdGlvbiBpbnB1dF9jaGFuZ2VfaGFuZGxlcigpIHtcbiAgICAkSW5zcGVjdG9yU3RvcmUueFJheU1vZGUgPSB0aGlzLmNoZWNrZWQ7XG4gICAgSW5zcGVjdG9yU3RvcmUuc2V0KCRJbnNwZWN0b3JTdG9yZSk7XG4gIH1cbiAgJCRzZWxmLiQkLnVwZGF0ZSA9ICgpID0+IHtcbiAgICBpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIDEpIHtcbiAgICAgIGlmICgkSW5zcGVjdG9yU3RvcmUuaW5zcGVjdG9yRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICQkaW52YWxpZGF0ZSgxLCBpbnNwZWN0b3JJdGVtc0RhdGEgPSAkSW5zcGVjdG9yU3RvcmUuaW5zcGVjdG9yRGF0YS5tYXAoKGlkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGluc3BlY3Rvckl0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoJCRzZWxmLiQkLmRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIDEpIHtcbiAgICAgIGlmICgkSW5zcGVjdG9yU3RvcmUueFJheU1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgY2hlY2tGb3VuZERhdGFBdHRyaWJ1dGVzKCk7XG4gICAgICAgIGNoZWNrRXJyb3JEYXRhQXR0cmlidXRlcygpO1xuICAgICAgICBjaGVja1dhcm5pbmdEYXRhQXR0cmlidXRlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlWHJheXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBbXG4gICAgJEluc3BlY3RvclN0b3JlLFxuICAgIGluc3BlY3Rvckl0ZW1zRGF0YSxcbiAgICBzaG93Rm91bmRJdGVtcyxcbiAgICB0b2dnbGVTaG93Rm91bmRJdGVtcyxcbiAgICBoYW5kbGVDaGFuZ2UsXG4gICAgaW5wdXRfY2hhbmdlX2hhbmRsZXJcbiAgXTtcbn1cbnZhciBJbnNwZWN0b3JUYWIgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkZCwgY3JlYXRlX2ZyYWdtZW50JGksIHNhZmVfbm90X2VxdWFsLCB7fSwgYWRkX2NzcyRiKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3MkYSh0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLTFhdmU2c3JcIiwgXCJidXR0b24uc3ZlbHRlLTFhdmU2c3J7YmFja2dyb3VuZDpub25lO2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO3BhZGRpbmc6MDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyfVwiKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRoKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgbGV0IGJ1dHRvbl9jbGFzc192YWx1ZTtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk0zNjAtMjQwcS0zMyAwLTU2LjUtMjMuNVQyODAtMzIwdi00ODBxMC0zMyAyMy41LTU2LjVUMzYwLTg4MGgzNjBxMzMgMCA1Ni41IDIzLjVUODAwLTgwMHY0ODBxMCAzMy0yMy41IDU2LjVUNzIwLTI0MEgzNjBabTAtODBoMzYwdi00ODBIMzYwdjQ4MFpNMjAwLTgwcS0zMyAwLTU2LjUtMjMuNVQxMjAtMTYwdi01MjBxMC0xNyAxMS41LTI4LjVUMTYwLTcyMHExNyAwIDI4LjUgMTEuNVQyMDAtNjgwdjUyMGg0MDBxMTcgMCAyOC41IDExLjVUNjQwLTEyMHEwIDE3LTExLjUgMjguNVQ2MDAtODBIMjAwWm0xNjAtMjQwdi00ODAgNDgwWlwiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMTIwIC04ODAgNjgwIDgwMFwiKTtcbiAgICAgIGF0dHIoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICAvKnN0eWxlKi9cbiAgICAgICAgY3R4WzBdXG4gICAgICApO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgYnV0dG9uX2NsYXNzX3ZhbHVlID0gbnVsbF90b19lbXB0eShcbiAgICAgICAgLypjbGF6eiovXG4gICAgICAgIGN0eFsxXVxuICAgICAgKSArIFwiIHN2ZWx0ZS0xYXZlNnNyXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3ZnKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNvcHlUb0NsaXBib2FyZCovXG4gICAgICAgICAgY3R4WzJdXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoZGlydHkgJiAvKnN0eWxlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgYXR0cihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJzdHlsZVwiLFxuICAgICAgICAgIC8qc3R5bGUqL1xuICAgICAgICAgIGN0eDJbMF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSAmIC8qY2xhenoqL1xuICAgICAgMiAmJiBidXR0b25fY2xhc3NfdmFsdWUgIT09IChidXR0b25fY2xhc3NfdmFsdWUgPSBudWxsX3RvX2VtcHR5KFxuICAgICAgICAvKmNsYXp6Ki9cbiAgICAgICAgY3R4MlsxXVxuICAgICAgKSArIFwiIHN2ZWx0ZS0xYXZlNnNyXCIpKSB7XG4gICAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIGJ1dHRvbl9jbGFzc192YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGMoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgc3R5bGUgPSBcIlwiIH0gPSAkJHByb3BzO1xuICBsZXQgeyBjbGFzczogY2xhenogfSA9ICQkcHJvcHM7XG4gIGxldCB7IGNvcHlUZXh0IH0gPSAkJHByb3BzO1xuICBmdW5jdGlvbiBjb3B5VG9DbGlwYm9hcmQoKSB7XG4gICAgaWYgKGNvcHlUZXh0KSB7XG4gICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChjb3B5VGV4dCk7XG4gICAgfVxuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcInN0eWxlXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgc3R5bGUgPSAkJHByb3BzMi5zdHlsZSk7XG4gICAgaWYgKFwiY2xhc3NcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBjbGF6eiA9ICQkcHJvcHMyLmNsYXNzKTtcbiAgICBpZiAoXCJjb3B5VGV4dFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDMsIGNvcHlUZXh0ID0gJCRwcm9wczIuY29weVRleHQpO1xuICB9O1xuICByZXR1cm4gW3N0eWxlLCBjbGF6eiwgY29weVRvQ2xpcGJvYXJkLCBjb3B5VGV4dF07XG59XG52YXIgQ29weUljb24gPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkYywgY3JlYXRlX2ZyYWdtZW50JGgsIHNhZmVfbm90X2VxdWFsLCB7IHN0eWxlOiAwLCBjbGFzczogMSwgY29weVRleHQ6IDMgfSwgYWRkX2NzcyRhKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3MkOSh0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLXBpdnFmdVwiLCBcIi5tcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwLnN2ZWx0ZS1waXZxZnV7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtnYXA6M3B4O21hcmdpbi1ib3R0b206NnB4fS5tcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwLnN2ZWx0ZS1waXZxZnU6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9Lm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXAubXMtbWVtYmVyLXRhYl9fZGF0YS1ncm91cC0tZmxleC10b3Auc3ZlbHRlLXBpdnFmdXthbGlnbi1pdGVtczpmbGV4LXN0YXJ0fS5tcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwX19sYWJlbC5zdmVsdGUtcGl2cWZ1e3dpZHRoOjE1MHB4O2NvbG9yOiNlOGU4ZTg7Ym9yZGVyOjFweCBzb2xpZCAjNGI0YjRiO2JvcmRlci1yYWRpdXM6NHB4O2JhY2tncm91bmQ6IzQ0NDtmb250LXNpemU6OXB4O2xpbmUtaGVpZ2h0OjE7cGFkZGluZzo2cHg7ZmxleC1zaHJpbms6MDt3aWR0aDphdXRvfS5tcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwX19jb3B5LWJveC5zdmVsdGUtcGl2cWZ1e2ZsZXgtZ3JvdzowO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7b3ZlcmZsb3c6aGlkZGVuO2dhcDo2cHh9Lm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19idXR0b24uc3ZlbHRlLXBpdnFmdXtib3JkZXI6MXB4IHNvbGlkICM0YjRiNGI7Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZDojMDAwO2NvbG9yOiNlOGU4ZTg7Zm9udC1zaXplOjEwcHg7Zm9udC13ZWlnaHQ6NzAwO2xpbmUtaGVpZ2h0OjE7cGFkZGluZzo2cHg7ZmxleC1ncm93OjE7dGV4dC1hbGlnbjpsZWZ0O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcH0ubXMtbWVtYmVyLXRhYl9fZGF0YS1ncm91cF9fY29weS1ib3hfX2ljb257d2lkdGg6MTFweDtoZWlnaHQ6YXV0bztmbGV4LXNocmluazowO2ZpbGw6I2U4ZThlODtvcGFjaXR5OjA7dHJhbnNpdGlvbjpvcGFjaXR5IDAuMnMgZWFzZS1pbi1vdXR9XFxuICAgICAgLm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19idXR0b246aG92ZXJcXG4gICAgICAgICsgLm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19pY29uXFxuICAgIHtvcGFjaXR5OjF9Lm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19pY29uOmhvdmVye29wYWNpdHk6MTtjdXJzb3I6cG9pbnRlcn1cIik7XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayQ1KGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICBsZXQgdDtcbiAgbGV0IG1vdW50ZWQ7XG4gIGxldCBkaXNwb3NlO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgdCA9IHRleHQoXG4gICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgIGN0eFswXVxuICAgICAgKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYl9fZGF0YS1ncm91cF9fY29weS1ib3hfX2J1dHRvbiBzdmVsdGUtcGl2cWZ1XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdCk7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IGxpc3RlbihcbiAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgIC8qY29weVRvQ2xpcGJvYXJkKi9cbiAgICAgICAgICBjdHhbM11cbiAgICAgICAgKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoZGlydHkgJiAvKmJ1dHRvblRleHQqL1xuICAgICAgMSlcbiAgICAgICAgc2V0X2RhdGEoXG4gICAgICAgICAgdCxcbiAgICAgICAgICAvKmJ1dHRvblRleHQqL1xuICAgICAgICAgIGN0eDJbMF1cbiAgICAgICAgKTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSQ4KGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwX19jb3B5LWJveF9fYnV0dG9uIG1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19idXR0b24tLWltYWdlIHN2ZWx0ZS1waXZxZnVcIik7XG4gICAgICBzZXRfc3R5bGUoYnV0dG9uLCBcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoXCIgKyAvKmJ1dHRvblRleHQqL1xuICAgICAgY3R4WzBdICsgXCIpXCIpO1xuICAgICAgc2V0X3N0eWxlKGJ1dHRvbiwgXCJtaW4td2lkdGhcIiwgXCI0MnB4XCIpO1xuICAgICAgc2V0X3N0eWxlKGJ1dHRvbiwgXCJtaW4taGVpZ2h0XCIsIFwiNDJweFwiKTtcbiAgICAgIHNldF9zdHlsZShidXR0b24sIFwiYmFja2dyb3VuZC1zaXplXCIsIFwiY292ZXJcIik7XG4gICAgICBzZXRfc3R5bGUoYnV0dG9uLCBcImJhY2tncm91bmQtcG9zaXRpb25cIiwgXCJjZW50ZXJcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoZGlydHkgJiAvKmJ1dHRvblRleHQqL1xuICAgICAgMSkge1xuICAgICAgICBzZXRfc3R5bGUoYnV0dG9uLCBcImJhY2tncm91bmQtaW1hZ2VcIiwgXCJ1cmwoXCIgKyAvKmJ1dHRvblRleHQqL1xuICAgICAgICBjdHgyWzBdICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayRhKGN0eCkge1xuICBsZXQgYnV0dG9uO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwX19jb3B5LWJveF9fYnV0dG9uIG1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19idXR0b24tLWNvbG9yIHN2ZWx0ZS1waXZxZnVcIik7XG4gICAgICBzZXRfc3R5bGUoXG4gICAgICAgIGJ1dHRvbixcbiAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsXG4gICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgIGN0eFswXVxuICAgICAgKTtcbiAgICAgIHNldF9zdHlsZShidXR0b24sIFwibWluLXdpZHRoXCIsIFwiNDJweFwiKTtcbiAgICAgIHNldF9zdHlsZShidXR0b24sIFwibWluLWhlaWdodFwiLCBcIjIzcHhcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBidXR0b24sIGFuY2hvcik7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoZGlydHkgJiAvKmJ1dHRvblRleHQqL1xuICAgICAgMSkge1xuICAgICAgICBzZXRfc3R5bGUoXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiLFxuICAgICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgICAgY3R4MlswXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChidXR0b24pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRnKGN0eCkge1xuICBsZXQgZGl2MjtcbiAgbGV0IGRpdjA7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgZGl2MTtcbiAgbGV0IHNob3dfaWY7XG4gIGxldCBzaG93X2lmXzE7XG4gIGxldCB0MjtcbiAgbGV0IGNvcHlpY29uO1xuICBsZXQgZGl2Ml9jbGFzc192YWx1ZTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKGRpcnR5ICYgLypidXR0b25UZXh0Ki9cbiAgICAxKVxuICAgICAgc2hvd19pZiA9IG51bGw7XG4gICAgaWYgKGRpcnR5ICYgLypidXR0b25UZXh0Ki9cbiAgICAxKVxuICAgICAgc2hvd19pZl8xID0gbnVsbDtcbiAgICBpZiAoc2hvd19pZiA9PSBudWxsKVxuICAgICAgc2hvd19pZiA9ICEhLypidXR0b25UZXh0Ki9cbiAgICAgIChjdHgyWzBdICYmIC8qYnV0dG9uVGV4dCovXG4gICAgICAoY3R4MlswXS5zdGFydHNXaXRoKFwiI1wiKSB8fCAvKmJ1dHRvblRleHQqL1xuICAgICAgY3R4MlswXSAmJiAvKmJ1dHRvblRleHQqL1xuICAgICAgY3R4MlswXS5zdGFydHNXaXRoKFwicmdiXCIpKSk7XG4gICAgaWYgKHNob3dfaWYpXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrJGE7XG4gICAgaWYgKHNob3dfaWZfMSA9PSBudWxsKVxuICAgICAgc2hvd19pZl8xID0gISEvKmVuZHNXaXRoKi9cbiAgICAgIChjdHgyWzRdKFxuICAgICAgICAvKmJ1dHRvblRleHQqL1xuICAgICAgICBjdHgyWzBdLFxuICAgICAgICBcIi5wbmdcIlxuICAgICAgKSB8fCAvKmVuZHNXaXRoKi9cbiAgICAgIGN0eDJbNF0oXG4gICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgIGN0eDJbMF0sXG4gICAgICAgIFwiLmpwZ1wiXG4gICAgICApIHx8IC8qZW5kc1dpdGgqL1xuICAgICAgY3R4Mls0XShcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4MlswXSxcbiAgICAgICAgXCIuanBlZ1wiXG4gICAgICApIHx8IC8qZW5kc1dpdGgqL1xuICAgICAgY3R4Mls0XShcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4MlswXSxcbiAgICAgICAgXCIuZ2lmXCJcbiAgICAgICkpO1xuICAgIGlmIChzaG93X2lmXzEpXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrXzEkODtcbiAgICByZXR1cm4gY3JlYXRlX2Vsc2VfYmxvY2skNTtcbiAgfVxuICBsZXQgY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4LCAtMSk7XG4gIGxldCBpZl9ibG9jayA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgpO1xuICBjb3B5aWNvbiA9IG5ldyBDb3B5SWNvbih7XG4gICAgcHJvcHM6IHtcbiAgICAgIGNsYXNzOiBcIm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXBfX2NvcHktYm94X19pY29uXCIsXG4gICAgICBjb3B5VGV4dDogKFxuICAgICAgICAvKmJ1dHRvblRleHQqL1xuICAgICAgICBjdHhbMF1cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgdDAgPSB0ZXh0KFxuICAgICAgICAvKmxhYmVsVGV4dCovXG4gICAgICAgIGN0eFsxXVxuICAgICAgKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5aWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwX19sYWJlbCBzdmVsdGUtcGl2cWZ1XCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYl9fZGF0YS1ncm91cF9fY29weS1ib3ggc3ZlbHRlLXBpdnFmdVwiKTtcbiAgICAgIGF0dHIoXG4gICAgICAgIGRpdjIsXG4gICAgICAgIFwiZGF0YS1jeVwiLFxuICAgICAgICAvKmN5cHJlc3MqL1xuICAgICAgICBjdHhbMl1cbiAgICAgICk7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgZGl2Ml9jbGFzc192YWx1ZSA9IFwibXMtbWVtYmVyLXRhYl9fZGF0YS1ncm91cCBcIiArIC8qZW5kc1dpdGgqL1xuICAgICAgKGN0eFs0XShcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4WzBdLFxuICAgICAgICBcIi5wbmdcIlxuICAgICAgKSB8fCAvKmVuZHNXaXRoKi9cbiAgICAgIGN0eFs0XShcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4WzBdLFxuICAgICAgICBcIi5qcGdcIlxuICAgICAgKSB8fCAvKmVuZHNXaXRoKi9cbiAgICAgIGN0eFs0XShcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4WzBdLFxuICAgICAgICBcIi5qcGVnXCJcbiAgICAgICkgfHwgLyplbmRzV2l0aCovXG4gICAgICBjdHhbNF0oXG4gICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgIGN0eFswXSxcbiAgICAgICAgXCIuZ2lmXCJcbiAgICAgICkgPyBcIm1zLW1lbWJlci10YWJfX2RhdGEtZ3JvdXAtLWZsZXgtdG9wXCIgOiBcIlwiKSArIFwiIHN2ZWx0ZS1waXZxZnVcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYyLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBpZl9ibG9jay5tKGRpdjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQyKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5aWNvbiwgZGl2MSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLypsYWJlbFRleHQqL1xuICAgICAgMilcbiAgICAgICAgc2V0X2RhdGEoXG4gICAgICAgICAgdDAsXG4gICAgICAgICAgLypsYWJlbFRleHQqL1xuICAgICAgICAgIGN0eDJbMV1cbiAgICAgICAgKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGUgPT09IChjdXJyZW50X2Jsb2NrX3R5cGUgPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkpICYmIGlmX2Jsb2NrKSB7XG4gICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWZfYmxvY2suZCgxKTtcbiAgICAgICAgaWZfYmxvY2sgPSBjdXJyZW50X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGRpdjEsIHQyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgY29weWljb25fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypidXR0b25UZXh0Ki9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlpY29uX2NoYW5nZXMuY29weVRleHQgPSAvKmJ1dHRvblRleHQqL1xuICAgICAgICBjdHgyWzBdO1xuICAgICAgY29weWljb24uJHNldChjb3B5aWNvbl9jaGFuZ2VzKTtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qY3lwcmVzcyovXG4gICAgICA0KSB7XG4gICAgICAgIGF0dHIoXG4gICAgICAgICAgZGl2MixcbiAgICAgICAgICBcImRhdGEtY3lcIixcbiAgICAgICAgICAvKmN5cHJlc3MqL1xuICAgICAgICAgIGN0eDJbMl1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qYnV0dG9uVGV4dCovXG4gICAgICAxICYmIGRpdjJfY2xhc3NfdmFsdWUgIT09IChkaXYyX2NsYXNzX3ZhbHVlID0gXCJtcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwIFwiICsgLyplbmRzV2l0aCovXG4gICAgICAoY3R4Mls0XShcbiAgICAgICAgLypidXR0b25UZXh0Ki9cbiAgICAgICAgY3R4MlswXSxcbiAgICAgICAgXCIucG5nXCJcbiAgICAgICkgfHwgLyplbmRzV2l0aCovXG4gICAgICBjdHgyWzRdKFxuICAgICAgICAvKmJ1dHRvblRleHQqL1xuICAgICAgICBjdHgyWzBdLFxuICAgICAgICBcIi5qcGdcIlxuICAgICAgKSB8fCAvKmVuZHNXaXRoKi9cbiAgICAgIGN0eDJbNF0oXG4gICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgIGN0eDJbMF0sXG4gICAgICAgIFwiLmpwZWdcIlxuICAgICAgKSB8fCAvKmVuZHNXaXRoKi9cbiAgICAgIGN0eDJbNF0oXG4gICAgICAgIC8qYnV0dG9uVGV4dCovXG4gICAgICAgIGN0eDJbMF0sXG4gICAgICAgIFwiLmdpZlwiXG4gICAgICApID8gXCJtcy1tZW1iZXItdGFiX19kYXRhLWdyb3VwLS1mbGV4LXRvcFwiIDogXCJcIikgKyBcIiBzdmVsdGUtcGl2cWZ1XCIpKSB7XG4gICAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBkaXYyX2NsYXNzX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjIpO1xuICAgICAgaWZfYmxvY2suZCgpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWljb24pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGIoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgbGFiZWxUZXh0IH0gPSAkJHByb3BzO1xuICBsZXQgeyBidXR0b25UZXh0IH0gPSAkJHByb3BzO1xuICBsZXQgeyBjeXByZXNzIH0gPSAkJHByb3BzO1xuICBmdW5jdGlvbiBjb3B5VG9DbGlwYm9hcmQoKSB7XG4gICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoYnV0dG9uVGV4dCk7XG4gIH1cbiAgY29uc3QgZW5kc1dpdGggPSAodGV4dDIsIHN1ZmZpeCkgPT4gdHlwZW9mIHRleHQyID09PSBcInN0cmluZ1wiICYmIHRleHQyLmVuZHNXaXRoKHN1ZmZpeCk7XG4gIGlmIChidXR0b25UZXh0ICE9PSBudWxsICYmIGJ1dHRvblRleHQgIT09IHZvaWQgMCAmJiB0eXBlb2YgYnV0dG9uVGV4dCAhPT0gXCJzdHJpbmdcIikge1xuICAgIGJ1dHRvblRleHQgPSBidXR0b25UZXh0LnRvU3RyaW5nKCk7XG4gIH1cbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwibGFiZWxUZXh0XCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMSwgbGFiZWxUZXh0ID0gJCRwcm9wczIubGFiZWxUZXh0KTtcbiAgICBpZiAoXCJidXR0b25UZXh0XCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgYnV0dG9uVGV4dCA9ICQkcHJvcHMyLmJ1dHRvblRleHQpO1xuICAgIGlmIChcImN5cHJlc3NcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgyLCBjeXByZXNzID0gJCRwcm9wczIuY3lwcmVzcyk7XG4gIH07XG4gIHJldHVybiBbYnV0dG9uVGV4dCwgbGFiZWxUZXh0LCBjeXByZXNzLCBjb3B5VG9DbGlwYm9hcmQsIGVuZHNXaXRoXTtcbn1cbnZhciBDb3B5QnV0dG9uR3JvdXAgPSBjbGFzcyBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGluaXQodGhpcywgb3B0aW9ucywgaW5zdGFuY2UkYiwgY3JlYXRlX2ZyYWdtZW50JGcsIHNhZmVfbm90X2VxdWFsLCB7IGxhYmVsVGV4dDogMSwgYnV0dG9uVGV4dDogMCwgY3lwcmVzczogMiB9LCBhZGRfY3NzJDkpO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JGYoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTIwMC0xMjBxLTMzIDAtNTYuNS0yMy41VDEyMC0yMDB2LTU2MHEwLTMzIDIzLjUtNTYuNVQyMDAtODQwaDM1N2wtODAgODBIMjAwdjU2MGg1NjB2LTI3OGw4MC04MHYzNThxMCAzMy0yMy41IDU2LjVUNzYwLTEyMEgyMDBabTI4MC0zNjBabS0xMjAgODB2LTk3cTAtMTYgNi0zMC41dDE3LTI1LjVsMzQ0LTM0NHExMi0xMiAyNy0xOHQzMC02cTE2IDAgMzAuNSA2dDI2LjUgMThsNTYgNTdxMTEgMTIgMTcgMjYuNXQ2IDI5LjVxMCAxNS01LjUgMjkuNVQ4OTctNzI4TDU1My0zODRxLTExIDExLTI1LjUgMTcuNVQ0OTctMzYwaC05N3EtMTcgMC0yOC41LTExLjVUMzYwLTQwMFptNDgxLTM4NC01Ni01NiA1NiA1NlpNNDQwLTQ0MGg1NmwyMzItMjMyLTI4LTI4LTI5LTI4LTIzMSAyMzF2NTdabTI2MC0yNjAtMjktMjggMjkgMjggMjggMjgtMjgtMjhaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIxMjAgLTkyMSA4MDAgODAxXCIpO1xuICAgICAgYXR0cihcbiAgICAgICAgc3ZnLFxuICAgICAgICBcImNsYXNzXCIsXG4gICAgICAgIC8qY2xhenoqL1xuICAgICAgICBjdHhbMF1cbiAgICAgICk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKGRpcnR5ICYgLypjbGF6eiovXG4gICAgICAxKSB7XG4gICAgICAgIGF0dHIoXG4gICAgICAgICAgc3ZnLFxuICAgICAgICAgIFwiY2xhc3NcIixcbiAgICAgICAgICAvKmNsYXp6Ki9cbiAgICAgICAgICBjdHgyWzBdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJGEoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgY2xhc3M6IGNsYXp6IH0gPSAkJHByb3BzO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJjbGFzc1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIGNsYXp6ID0gJCRwcm9wczIuY2xhc3MpO1xuICB9O1xuICByZXR1cm4gW2NsYXp6XTtcbn1cbnZhciBFZGl0SWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSRhLCBjcmVhdGVfZnJhZ21lbnQkZiwgc2FmZV9ub3RfZXF1YWwsIHsgY2xhc3M6IDAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRfY3NzJDgodGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS0xbDUzZm5pXCIsIFwiLm1zLXNlY3Rpb24taGVhZGVyLnN2ZWx0ZS0xbDUzZm5pe2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luLWJvdHRvbToxMnB4O3dpZHRoOjEwMCV9Lm1zLXNlY3Rpb24taGVhZGVyX190aXRsZS5zdmVsdGUtMWw1M2ZuaXtmb250LXNpemU6MTFweDtsaW5lLWhlaWdodDoxO2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojZThlOGU4fS5tcy1zZWN0aW9uLWhlYWRlcl9fbGluay5zdmVsdGUtMWw1M2ZuaXt0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2dhcDo0cHg7Y29sb3I6I2MxYzFjMTtmb250LXNpemU6MTBweDtmb250LXdlaWdodDo0MDA7dHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLWluLW91dDtib3JkZXI6MXB4IHNvbGlkICM1MzUzNTM7Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZDojNDQ0O3BhZGRpbmc6MXB4IDNweH0ubXMtc2VjdGlvbi1oZWFkZXJfX2xpbmsuc3ZlbHRlLTFsNTNmbmk6aG92ZXJ7Y29sb3I6I2ZmZn0ubXMtc2VjdGlvbi1oZWFkZXJfX2xpbmtfX3N2Z3t3aWR0aDoxM3B4O2hlaWdodDphdXRvO2ZpbGw6I2MxYzFjMX1cIik7XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skOShjdHgpIHtcbiAgbGV0IGE7XG4gIGxldCBlZGl0aWNvbjtcbiAgbGV0IHNwYW47XG4gIGxldCBjdXJyZW50O1xuICBlZGl0aWNvbiA9IG5ldyBFZGl0SWNvbih7XG4gICAgcHJvcHM6IHsgY2xhc3M6IFwibXMtc2VjdGlvbi1oZWFkZXJfX2xpbmtfX3N2Z1wiIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGEgPSBlbGVtZW50KFwiYVwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoZWRpdGljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3Bhbi50ZXh0Q29udGVudCA9IFwiRWRpdFwiO1xuICAgICAgYXR0cihhLCBcImNsYXNzXCIsIFwibXMtc2VjdGlvbi1oZWFkZXJfX2xpbmsgc3ZlbHRlLTFsNTNmbmlcIik7XG4gICAgICBhdHRyKFxuICAgICAgICBhLFxuICAgICAgICBcImhyZWZcIixcbiAgICAgICAgLyplZGl0VVJMKi9cbiAgICAgICAgY3R4WzFdXG4gICAgICApO1xuICAgICAgYXR0cihhLCBcInRhcmdldFwiLCBcIl9ibGFua1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGEsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoZWRpdGljb24sIGEsIG51bGwpO1xuICAgICAgYXBwZW5kKGEsIHNwYW4pO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmVkaXRVUkwqL1xuICAgICAgMikge1xuICAgICAgICBhdHRyKFxuICAgICAgICAgIGEsXG4gICAgICAgICAgXCJocmVmXCIsXG4gICAgICAgICAgLyplZGl0VVJMKi9cbiAgICAgICAgICBjdHgyWzFdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihlZGl0aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChlZGl0aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChhKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGVkaXRpY29uKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkZShjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBkaXYwO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBpZl9ibG9jayA9IChcbiAgICAvKmVkaXRVUkwqL1xuICAgIGN0eFsxXSAmJiBjcmVhdGVfaWZfYmxvY2skOShjdHgpXG4gICk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0MCA9IHRleHQoXG4gICAgICAgIC8qdGl0bGVUZXh0Ki9cbiAgICAgICAgY3R4WzBdXG4gICAgICApO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1zZWN0aW9uLWhlYWRlcl9fdGl0bGUgc3ZlbHRlLTFsNTNmbmlcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1zZWN0aW9uLWhlYWRlciBzdmVsdGUtMWw1M2ZuaVwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MSwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDApO1xuICAgICAgYXBwZW5kKGRpdjEsIHQxKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2subShkaXYxLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKnRpdGxlVGV4dCovXG4gICAgICAxKVxuICAgICAgICBzZXRfZGF0YShcbiAgICAgICAgICB0MCxcbiAgICAgICAgICAvKnRpdGxlVGV4dCovXG4gICAgICAgICAgY3R4MlswXVxuICAgICAgICApO1xuICAgICAgaWYgKFxuICAgICAgICAvKmVkaXRVUkwqL1xuICAgICAgICBjdHgyWzFdXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyplZGl0VVJMKi9cbiAgICAgICAgICAyKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBjcmVhdGVfaWZfYmxvY2skOShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgaWZfYmxvY2subShkaXYxLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jaykge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jayA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYxKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZCgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJDkoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgdGl0bGVUZXh0IH0gPSAkJHByb3BzO1xuICBsZXQgeyBlZGl0VVJMIH0gPSAkJHByb3BzO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJ0aXRsZVRleHRcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCB0aXRsZVRleHQgPSAkJHByb3BzMi50aXRsZVRleHQpO1xuICAgIGlmIChcImVkaXRVUkxcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBlZGl0VVJMID0gJCRwcm9wczIuZWRpdFVSTCk7XG4gIH07XG4gIHJldHVybiBbdGl0bGVUZXh0LCBlZGl0VVJMXTtcbn1cbnZhciBTZWN0aW9uSGVhZGVyID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJDksIGNyZWF0ZV9mcmFnbWVudCRlLCBzYWZlX25vdF9lcXVhbCwgeyB0aXRsZVRleHQ6IDAsIGVkaXRVUkw6IDEgfSwgYWRkX2NzcyQ4KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRkKGN0eCkge1xuICBsZXQgc3ZnO1xuICBsZXQgcGF0aDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgc3ZnID0gc3ZnX2VsZW1lbnQoXCJzdmdcIik7XG4gICAgICBwYXRoID0gc3ZnX2VsZW1lbnQoXCJwYXRoXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZFwiLCBcIk00ODAtODBxLTgzIDAtMTU2LTMxLjVUMTk3LTE5N3EtNTQtNTQtODUuNS0xMjdUODAtNDgwcTAtODMgMzEuNS0xNTZUMTk3LTc2M3E1NC01NCAxMjctODUuNVQ0ODAtODgwcTQ4IDAgOTMuNSAxMXQ4Ny41IDMycTE1IDggMTkuNSAyNHQtNS41IDMwcS0xMCAxNC0yNi41IDE4dC0zMi41LTRxLTMyLTE1LTY2LjUtMjN0LTY5LjUtOHEtMTMzIDAtMjI2LjUgOTMuNVQxNjAtNDgwcTAgMTMzIDkzLjUgMjI2LjVUNDgwLTE2MHExMzMgMCAyMjYuNS05My41VDgwMC00ODBxMC04LS41LTE1LjVUNzk4LTUxMXEtMi0xNyA2LjUtMzIuNVQ4MzAtNTY0cTE2LTUgMzAgM3QxNiAyNHEyIDE0IDMgMjh0MSAyOXEwIDgzLTMxLjUgMTU2VDc2My0xOTdxLTU0IDU0LTEyNyA4NS41VDQ4MC04MFptLTU2LTMyOCAzNzItMzczcTExLTExIDI3LjUtMTEuNVQ4NTItNzgxcTExIDExIDExIDI4dC0xMSAyOEw0NTItMzI0cS0xMiAxMi0yOCAxMnQtMjgtMTJMMjgyLTQzOHEtMTEtMTEtMTEtMjh0MTEtMjhxMTEtMTEgMjgtMTF0MjggMTFsODYgODZaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcImhlaWdodFwiLCBcIjEwMCVcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAtOTYwIDk2MCA5NjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjEwMCVcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzdmcsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoc3ZnLCBwYXRoKTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaTogbm9vcCxcbiAgICBvOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goc3ZnKTtcbiAgICB9XG4gIH07XG59XG52YXIgQ2hlY2tJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCRkLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyQ3KHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtbGg2ZG4xXCIsIFwiLm1zLWJ1dHRvbi1saW5rLnN2ZWx0ZS1saDZkbjF7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtnYXA6NHB4O2NvbG9yOiNlOGU4ZTg7Zm9udC1zaXplOjExcHg7bGluZS1oZWlnaHQ6MTt0ZXh0LWRlY29yYXRpb246bm9uZTtib3JkZXI6MXB4IHNvbGlkICMzNzM3Mzc7Ym9yZGVyLXJhZGl1czo0cHg7YmFja2dyb3VuZDojNTM1MzUzO3BhZGRpbmc6NXB4IDEwcHg7dHJhbnNpdGlvbjphbGwgMC4ycyBlYXNlLWluLW91dDttYXJnaW4tdG9wOjEycHh9Lm1zLWFwcC10YWJfX3NlY3Rpb25fX2NvbnRlbnQtLWF1dGggLm1zLWJ1dHRvbi1saW5re21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjAuNWVtfS5tcy1idXR0b24tbGluay5zdmVsdGUtbGg2ZG4xOmxhc3QtY2hpbGR7bWFyZ2luLWJvdHRvbTowfS5tcy1idXR0b24tbGluay5zdmVsdGUtbGg2ZG4xOmhvdmVye2NvbG9yOiNmZmZ9Lm1zLWJ1dHRvbi1saW5rX19zdmd7d2lkdGg6MTNweDtoZWlnaHQ6YXV0bztmaWxsOiNjMWMxYzF9LmhlbHAtb3B0aW9uX19sZWZ0LWljb24uc3ZlbHRlLWxoNmRuMXtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjJweDttYXJnaW4tbGVmdDotNnB4fS5oZWxwLW9wdGlvbl9fbGVmdC1pY29uLS1lbmFibGVkLnN2ZWx0ZS1saDZkbjF7YmFja2dyb3VuZDojNWI5YzZmXFxuICB9LmhlbHAtb3B0aW9uX19sZWZ0LWljb24tLWRpc2FibGVkLnN2ZWx0ZS1saDZkbjF7YmFja2dyb3VuZDojMjkyOTI5XFxuICB9LmhlbHAtb3B0aW9uX19sZWZ0LWljb24gc3Zne3dpZHRoOjEwMCU7aGVpZ2h0OmF1dG99LmhlbHAtb3B0aW9uX190ZXh0LnN2ZWx0ZS1saDZkbjF7ZmxleDoxfVwiKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJDcoY3R4KSB7XG4gIGxldCBzcGFuO1xuICBsZXQgY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICBsZXQgaWZfYmxvY2s7XG4gIGxldCBzcGFuX2NsYXNzX3ZhbHVlO1xuICBsZXQgY3VycmVudDtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbY3JlYXRlX2lmX2Jsb2NrXzIkNiwgY3JlYXRlX2Vsc2VfYmxvY2skNF07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmIChcbiAgICAgIC8qc3RhdHVzKi9cbiAgICAgIGN0eDJbMV0gPT09IHRydWVcbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpO1xuICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzcGFuID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBhdHRyKHNwYW4sIFwiY2xhc3NcIiwgc3Bhbl9jbGFzc192YWx1ZSA9IG51bGxfdG9fZW1wdHkoYGhlbHAtb3B0aW9uX19sZWZ0LWljb24gaGVscC1vcHRpb25fX2xlZnQtaWNvbi0tJHsvKnN0YXR1cyovXG4gICAgICBjdHhbMV0gPyBcImVuYWJsZWRcIiA6IFwiZGlzYWJsZWRcIn1gKSArIFwiIHN2ZWx0ZS1saDZkbjFcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBzcGFuLCBhbmNob3IpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShzcGFuLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ICE9PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0gPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF07XG4gICAgICAgIGlmICghaWZfYmxvY2spIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgIGlmX2Jsb2NrLm0oc3BhbiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKnN0YXR1cyovXG4gICAgICAyICYmIHNwYW5fY2xhc3NfdmFsdWUgIT09IChzcGFuX2NsYXNzX3ZhbHVlID0gbnVsbF90b19lbXB0eShgaGVscC1vcHRpb25fX2xlZnQtaWNvbiBoZWxwLW9wdGlvbl9fbGVmdC1pY29uLS0key8qc3RhdHVzKi9cbiAgICAgIGN0eDJbMV0gPyBcImVuYWJsZWRcIiA6IFwiZGlzYWJsZWRcIn1gKSArIFwiIHN2ZWx0ZS1saDZkbjFcIikpIHtcbiAgICAgICAgYXR0cihzcGFuLCBcImNsYXNzXCIsIHNwYW5fY2xhc3NfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHNwYW4pO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrJDQoY3R4KSB7XG4gIGxldCB4aWNvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIHhpY29uID0gbmV3IFhJY29uKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudCh4aWNvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoeGljb24sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oeGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoeGljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudCh4aWNvbiwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiQ2KGN0eCkge1xuICBsZXQgY2hlY2tpY29uO1xuICBsZXQgY3VycmVudDtcbiAgY2hlY2tpY29uID0gbmV3IENoZWNrSWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY2hlY2tpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjaGVja2ljb24sIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY2hlY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNoZWNraWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNoZWNraWNvbiwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skOChjdHgpIHtcbiAgbGV0IGxpbmtpY29uO1xuICBsZXQgY3VycmVudDtcbiAgbGlua2ljb24gPSBuZXcgTGlua0ljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGxpbmtpY29uLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChsaW5raWNvbiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihsaW5raWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChsaW5raWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGxpbmtpY29uLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCRjKGN0eCkge1xuICBsZXQgYTtcbiAgbGV0IHQwO1xuICBsZXQgc3BhbjtcbiAgbGV0IHQxO1xuICBsZXQgdDI7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgaWZfYmxvY2swID0gKFxuICAgIC8qc3RhdHVzKi9cbiAgICBjdHhbMV0gIT09IHZvaWQgMCAmJiBjcmVhdGVfaWZfYmxvY2tfMSQ3KGN0eClcbiAgKTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKnNob3dJY29uKi9cbiAgICBjdHhbM10gJiYgY3JlYXRlX2lmX2Jsb2NrJDgoKVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBhID0gZWxlbWVudChcImFcIik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgc3BhbiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgdDEgPSB0ZXh0KFxuICAgICAgICAvKnRleHQqL1xuICAgICAgICBjdHhbMl1cbiAgICAgICk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgYXR0cihzcGFuLCBcImNsYXNzXCIsIFwiaGVscC1vcHRpb25fX3RleHQgc3ZlbHRlLWxoNmRuMVwiKTtcbiAgICAgIGF0dHIoXG4gICAgICAgIGEsXG4gICAgICAgIFwiaHJlZlwiLFxuICAgICAgICAvKmxpbmsqL1xuICAgICAgICBjdHhbMF1cbiAgICAgICk7XG4gICAgICBhdHRyKGEsIFwidGFyZ2V0XCIsIFwiX2JsYW5rXCIpO1xuICAgICAgYXR0cihhLCBcImNsYXNzXCIsIFwibXMtYnV0dG9uLWxpbmsgc3ZlbHRlLWxoNmRuMVwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYSxcbiAgICAgICAgXCJtcy1idXR0b24tbGluay0tc3RhdHVzXCIsXG4gICAgICAgIC8qc3RhdHVzKi9cbiAgICAgICAgY3R4WzFdID09PSB0cnVlXG4gICAgICApO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYSwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5tKGEsIG51bGwpO1xuICAgICAgYXBwZW5kKGEsIHQwKTtcbiAgICAgIGFwcGVuZChhLCBzcGFuKTtcbiAgICAgIGFwcGVuZChzcGFuLCB0MSk7XG4gICAgICBhcHBlbmQoYSwgdDIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0oYSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKFxuICAgICAgICAvKnN0YXR1cyovXG4gICAgICAgIGN0eDJbMV0gIT09IHZvaWQgMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLypzdGF0dXMqL1xuICAgICAgICAgIDIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzEkNyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazAubShhLCB0MCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazAsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKnRleHQqL1xuICAgICAgNClcbiAgICAgICAgc2V0X2RhdGEoXG4gICAgICAgICAgdDEsXG4gICAgICAgICAgLyp0ZXh0Ki9cbiAgICAgICAgICBjdHgyWzJdXG4gICAgICAgICk7XG4gICAgICBpZiAoXG4gICAgICAgIC8qc2hvd0ljb24qL1xuICAgICAgICBjdHgyWzNdXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qc2hvd0ljb24qL1xuICAgICAgICAgIDgpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrJDgoKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubShhLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qbGluayovXG4gICAgICAxKSB7XG4gICAgICAgIGF0dHIoXG4gICAgICAgICAgYSxcbiAgICAgICAgICBcImhyZWZcIixcbiAgICAgICAgICAvKmxpbmsqL1xuICAgICAgICAgIGN0eDJbMF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qc3RhdHVzKi9cbiAgICAgIDIpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIGEsXG4gICAgICAgICAgXCJtcy1idXR0b24tbGluay0tc3RhdHVzXCIsXG4gICAgICAgICAgLypzdGF0dXMqL1xuICAgICAgICAgIGN0eDJbMV0gPT09IHRydWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChhKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKCk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZCgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJDgoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgbGluayB9ID0gJCRwcm9wcztcbiAgbGV0IHsgc3RhdHVzIH0gPSAkJHByb3BzO1xuICBsZXQgeyB0ZXh0OiB0ZXh0MiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgc2hvd0ljb24gPSB0cnVlIH0gPSAkJHByb3BzO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJsaW5rXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgbGluayA9ICQkcHJvcHMyLmxpbmspO1xuICAgIGlmIChcInN0YXR1c1wiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDEsIHN0YXR1cyA9ICQkcHJvcHMyLnN0YXR1cyk7XG4gICAgaWYgKFwidGV4dFwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDIsIHRleHQyID0gJCRwcm9wczIudGV4dCk7XG4gICAgaWYgKFwic2hvd0ljb25cIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgzLCBzaG93SWNvbiA9ICQkcHJvcHMyLnNob3dJY29uKTtcbiAgfTtcbiAgcmV0dXJuIFtsaW5rLCBzdGF0dXMsIHRleHQyLCBzaG93SWNvbl07XG59XG52YXIgQnV0dG9uTGluayA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSQ4LCBjcmVhdGVfZnJhZ21lbnQkYywgc2FmZV9ub3RfZXF1YWwsIHsgbGluazogMCwgc3RhdHVzOiAxLCB0ZXh0OiAyLCBzaG93SWNvbjogMyB9LCBhZGRfY3NzJDcpO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JGIoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwibTQ0MC0zODAtMjM3LTMwcS0yNS0zLTMyLjUtMjd0MTAuNS00MWw0MDktMzkycTUtNSAxMi03LjV0MTktMi41cTIwIDAgMzAuNSAxN3QuNSAzNUw1MjAtNTgwbDIzNyAzMHEyNSAzIDMyLjUgMjdUNzc5LTQ4MkwzNzAtOTBxLTUgNS0xMiA3LjVUMzM5LTgwcS0yMCAwLTMwLjUtMTd0LS41LTM1bDEzMi0yNDhaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIxNjguMjkgLTg4MCA2MjMuNDEgODAwXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIExpZ2h0bmluZ0JvbHRJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCRiLCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JGEoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTQ4MC04MHEtODMgMC0xNTYtMzEuNVQxOTctMTk3cS01NC01NC04NS41LTEyN1Q4MC00ODBxMC04MyAzMS41LTE1NlQxOTctNzYzcTU0LTU0IDEyNy04NS41VDQ4MC04ODBxODMgMCAxNTYgMzEuNVQ3NjMtNzYzcTU0IDU0IDg1LjUgMTI3VDg4MC00ODBxMCA4My0zMS41IDE1NlQ3NjMtMTk3cS01NCA1NC0xMjcgODUuNVQ0ODAtODBabS0xLTEyMHExNCAwIDI0LjUtMTAuNVQ1MTQtMjM1di0xNXE1MC05IDg2LTM5dDM2LTg5cTAtNDItMjQtNzd0LTk2LTYxcS02MC0yMC04My0zNXQtMjMtNDFxMC0yNiAxOC41LTQxdDUzLjUtMTVxMjAgMCAzNSA3dDI1IDE5cTEwIDEyIDIyLjUgMTYuNXQyMy41LS41cTE1LTYgMjAuNS0yMC41VDYwNi02NTNxLTE2LTIzLTM5LjUtMzlUNTE2LTcxMHYtMTVxMC0xNC0xMC41LTI0LjVUNDgxLTc2MHEtMTQgMC0yNC41IDEwLjVUNDQ2LTcyNXYxNXEtNTAgMTEtNzggNDR0LTI4IDc0cTAgNDcgMjcuNSA3NnQ4Ni41IDUwcTYzIDIzIDg3LjUgNDF0MjQuNSA0N3EwIDMzLTIzLjUgNDguNVQ0ODYtMzE0cS0yNiAwLTQ3LTEyLjVUNDA0LTM2NHEtOC0xNC0yMS0xOXQtMjYgMHEtMTQgNS0yMC41IDE5dC0uNSAyN3ExNiAzNCA0MyA1NS41dDY1IDI5LjV2MTdxMCAxNCAxMC41IDI0LjVUNDc5LTIwMFpcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuICAgICAgYXR0cihzdmcsIFwiaGVpZ2h0XCIsIFwiMjRcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ2aWV3Qm94XCIsIFwiMCAtOTYwIDk2MCA5NjBcIik7XG4gICAgICBhdHRyKHN2ZywgXCJ3aWR0aFwiLCBcIjI0XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIE1vbmV5SWNvbiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBudWxsLCBjcmVhdGVfZnJhZ21lbnQkYSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3MkNih0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLTFkZDVwMDJcIiwgXCIubXMtbWVtYmVyLXBsYW4taXRlbS5zdmVsdGUtMWRkNXAwMi5zdmVsdGUtMWRkNXAwMnt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6IzQ0NDtib3JkZXI6MXB4IHNvbGlkICM1YzVjNWM7Ym9yZGVyLXJhZGl1czo0cHg7ZmxleC13cmFwOndyYXA7bWFyZ2luLWJvdHRvbTowLjVlbTtkaXNwbGF5OmZsZXg7dHJhbnNpdGlvbjpoZWlnaHQgMC4ycyBlYXNlLWluLW91dDtvdmVyZmxvdzpoaWRkZW59Lm1zLW1lbWJlci1wbGFuLWl0ZW1fX3RhYnMuc3ZlbHRlLTFkZDVwMDIuc3ZlbHRlLTFkZDVwMDJ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOnN0cmV0Y2g7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47d2lkdGg6MTAwJX0ubXMtbWVtYmVyLXBsYW4taXRlbV9fdGFiLnN2ZWx0ZS0xZGQ1cDAyLnN2ZWx0ZS0xZGQ1cDAye2dhcDo2cHg7cGFkZGluZzo0cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2UtaW4tb3V0O3dpZHRoOjEwMCV9Lm1zLW1lbWJlci1wbGFuLWl0ZW0tLWZyZWUuc3ZlbHRlLTFkZDVwMDIgLm1zLW1lbWJlci1wbGFuLWl0ZW1fX2ljb24uc3ZlbHRlLTFkZDVwMDJ7YmFja2dyb3VuZC1jb2xvcjojMjk2MmZmfS5tcy1tZW1iZXItcGxhbi1pdGVtLS1wYWlkLnN2ZWx0ZS0xZGQ1cDAyIC5tcy1tZW1iZXItcGxhbi1pdGVtX19pY29uLnN2ZWx0ZS0xZGQ1cDAye2JhY2tncm91bmQtY29sb3I6IzViOWM2Zn0ubXMtbWVtYmVyLXBsYW4taXRlbV9faWNvbi5zdmVsdGUtMWRkNXAwMi5zdmVsdGUtMWRkNXAwMnt3aWR0aDoyMnB4O2hlaWdodDoyMnB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiMyOTI5Mjk7Ym9yZGVyLXJhZGl1czozcHg7Y29sb3I6I2ZmZjtwYWRkaW5nOjJweH0ubXMtbWVtYmVyLXBsYW4taXRlbV9faWNvbiBzdmd7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0ubXMtbWVtYmVyLXBsYW4taXRlbV9fYXJyb3cuc3ZlbHRlLTFkZDVwMDIuc3ZlbHRlLTFkZDVwMDJ7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6OHB4O3dpZHRoOjhweDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjJzIGVhc2UtaW4tb3V0fS5tcy1tZW1iZXItcGxhbi1pdGVtX19jb250ZW50LnN2ZWx0ZS0xZGQ1cDAyLnN2ZWx0ZS0xZGQ1cDAye3dpZHRoOjEwMCV9Lm1zLW1lbWJlci1wbGFuLWl0ZW1fX3dyYXBwZXIuc3ZlbHRlLTFkZDVwMDIuc3ZlbHRlLTFkZDVwMDJ7YmFja2dyb3VuZC1jb2xvcjojMjkyOTI5O3dpZHRoOjEwMCU7cGFkZGluZzo4cHh9Lm1zLW1lbWJlci1wbGFuLWl0ZW1fX2NvbnRlbnQtaXRlbS5zdmVsdGUtMWRkNXAwMi5zdmVsdGUtMWRkNXAwMnttYXJnaW4tYm90dG9tOjEwcHh9Lm1zLW1lbWJlci1wbGFuLWl0ZW1fX2NvbnRlbnQtaXRlbV9fdGl0bGUuc3ZlbHRlLTFkZDVwMDIuc3ZlbHRlLTFkZDVwMDJ7Zm9udC13ZWlnaHQ6Ym9sZDttYXJnaW4tYm90dG9tOjVweH0ubXMtbWVtYmVyLXBsYW4taXRlbV9fY29udGVudC1pdGVtX19oZWxwLnN2ZWx0ZS0xZGQ1cDAyLnN2ZWx0ZS0xZGQ1cDAye21hcmdpbi10b3A6MTBweH0ubXMtbWVtYmVyLXBsYW4taXRlbV9fY29udGVudC1pdGVtX19oZWxwX190aXRsZS5zdmVsdGUtMWRkNXAwMi5zdmVsdGUtMWRkNXAwMntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiMwMDdiZmZ9Lm1zLW1lbWJlci1wbGFuLWl0ZW1fX2NvbnRlbnQtaXRlbV9faGVscF9fdGl0bGUtLWxpbmsuc3ZlbHRlLTFkZDVwMDIuc3ZlbHRlLTFkZDVwMDJ7Y29sb3I6IzI4YTc0NX1cIik7XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9ja18yKGN0eCkge1xuICBsZXQgbGlnaHRuaW5nYm9sdGljb247XG4gIGxldCBjdXJyZW50O1xuICBsaWdodG5pbmdib2x0aWNvbiA9IG5ldyBMaWdodG5pbmdCb2x0SWNvbih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobGlnaHRuaW5nYm9sdGljb24uJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGxpZ2h0bmluZ2JvbHRpY29uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGxpZ2h0bmluZ2JvbHRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGxpZ2h0bmluZ2JvbHRpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobGlnaHRuaW5nYm9sdGljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkNChjdHgpIHtcbiAgbGV0IG1vbmV5aWNvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIG1vbmV5aWNvbiA9IG5ldyBNb25leUljb24oe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KG1vbmV5aWNvbi4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQobW9uZXlpY29uLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1vbmV5aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChtb25leWljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtb25leWljb24sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2tfMShjdHgpIHtcbiAgbGV0IHRfdmFsdWUgPSAoXG4gICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgY3R4WzBdLnBsYW5OYW1lICsgXCJcIlxuICApO1xuICBsZXQgdDtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgdCA9IHRleHQodF92YWx1ZSk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0LCBhbmNob3IpO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxICYmIHRfdmFsdWUgIT09ICh0X3ZhbHVlID0gLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICBjdHgyWzBdLnBsYW5OYW1lICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQsIHRfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0KTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiQ1KGN0eCkge1xuICBsZXQgdF92YWx1ZSA9IChcbiAgICAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICBjdHhbMF0ucHJpY2VEZXRhaWxzLnByaWNlTmFtZSArIFwiXCJcbiAgKTtcbiAgbGV0IHQ7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHQgPSB0ZXh0KHRfdmFsdWUpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdCwgYW5jaG9yKTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgMSAmJiB0X3ZhbHVlICE9PSAodF92YWx1ZSA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgY3R4MlswXS5wcmljZURldGFpbHMucHJpY2VOYW1lICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQsIHRfdmFsdWUpO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0KTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skNyhjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrO1xuICBsZXQgZGl2X3RyYW5zaXRpb247XG4gIGxldCBjdXJyZW50O1xuICBjb25zdCBpZl9ibG9ja19jcmVhdG9ycyA9IFtjcmVhdGVfaWZfYmxvY2tfMSQ2LCBjcmVhdGVfZWxzZV9ibG9jayQzXTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzIoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgIGN0eDJbMF0gJiYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICBjdHgyWzBdLnByaWNlRGV0YWlsc1xuICAgIClcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlXzIoY3R4KTtcbiAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXBsYW4taXRlbV9fd3JhcHBlciBzdmVsdGUtMWRkNXAwMlwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLm0oZGl2LCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGVfMihjdHgyKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPT09IHByZXZpb3VzX2Jsb2NrX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICBpZl9ibG9jay5tKGRpdiwgbnVsbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGlmICghZGl2X3RyYW5zaXRpb24pXG4gICAgICAgICAgICBkaXZfdHJhbnNpdGlvbiA9IGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24oZGl2LCBzbGlkZSwgeyBkdXJhdGlvbjogMzAwIH0sIHRydWUpO1xuICAgICAgICAgIGRpdl90cmFuc2l0aW9uLnJ1bigxKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBpZiAoIWRpdl90cmFuc2l0aW9uKVxuICAgICAgICAgIGRpdl90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYsIHNsaWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgZmFsc2UpO1xuICAgICAgICBkaXZfdHJhbnNpdGlvbi5ydW4oMCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5kKCk7XG4gICAgICBpZiAoZGV0YWNoaW5nICYmIGRpdl90cmFuc2l0aW9uKVxuICAgICAgICBkaXZfdHJhbnNpdGlvbi5lbmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayQzKGN0eCkge1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMDtcbiAgbGV0IHQ7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAxO1xuICBsZXQgY3VycmVudDtcbiAgY29weWJ1dHRvbmdyb3VwMCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiSURcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eFswXS5wbGFuSWRcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXAxID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJQcmlvcml0eVwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgY3R4WzBdLnByaW9yaXR5XG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwLiQkLmZyYWdtZW50KTtcbiAgICAgIHQgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0LCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDEsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cDBfY2hhbmdlcy5idXR0b25UZXh0ID0gLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eDJbMF0ucGxhbklkO1xuICAgICAgY29weWJ1dHRvbmdyb3VwMC4kc2V0KGNvcHlidXR0b25ncm91cDBfY2hhbmdlcyk7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwMV9jaGFuZ2VzLmJ1dHRvblRleHQgPSAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgY3R4MlswXS5wcmlvcml0eTtcbiAgICAgIGNvcHlidXR0b25ncm91cDEuJHNldChjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwMC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cDEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwLCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMSwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMSQ2KGN0eCkge1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMDtcbiAgbGV0IHQwO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMTtcbiAgbGV0IHQxO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMjtcbiAgbGV0IHQyO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMztcbiAgbGV0IHQzO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwNDtcbiAgbGV0IHQ0O1xuICBsZXQgY29weWJ1dHRvbmdyb3VwNTtcbiAgbGV0IHQ1O1xuICBsZXQgY29weWJ1dHRvbmdyb3VwNjtcbiAgbGV0IHQ2O1xuICBsZXQgY29weWJ1dHRvbmdyb3VwNztcbiAgbGV0IHQ3O1xuICBsZXQgY29weWJ1dHRvbmdyb3VwODtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cDAgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiBcIklEXCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHhbMF0ucGxhbklkXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgY29weWJ1dHRvbmdyb3VwMSA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiUHJpb3JpdHlcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eFswXS5wcmlvcml0eVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIGNvcHlidXR0b25ncm91cDIgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiBcIlByaWNlIE5hbWVcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eFswXS5wcmljZURldGFpbHMucHJpY2VOYW1lXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgY29weWJ1dHRvbmdyb3VwMyA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiQW1vdW50XCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHhbMF0ucHJpY2VEZXRhaWxzLmFtb3VudFxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIGNvcHlidXR0b25ncm91cDQgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiBcIkludGVydmFsXCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHhbMF0ucHJpY2VEZXRhaWxzLmludGVydmFsLnR5cGVcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXA1ID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJJbnRldmFsIENvdW50XCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHhbMF0ucHJpY2VEZXRhaWxzLmludGVydmFsLmNvdW50XG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgY29weWJ1dHRvbmdyb3VwNiA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiVHlwZVwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgY3R4WzBdLnByaWNlRGV0YWlscy50eXBlXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgY29weWJ1dHRvbmdyb3VwNyA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiQ3VycmVuY3lcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eFswXS5wcmljZURldGFpbHMuY3VycmVuY3lcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXA4ID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJQbGFuIE5hbWVcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eFswXS5wbGFuTmFtZVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMC4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDEuJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAyLiQkLmZyYWdtZW50KTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMy4kJC5mcmFnbWVudCk7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDQuJCQuZnJhZ21lbnQpO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA1LiQkLmZyYWdtZW50KTtcbiAgICAgIHQ1ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwNi4kJC5mcmFnbWVudCk7XG4gICAgICB0NiA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDcuJCQuZnJhZ21lbnQpO1xuICAgICAgdDcgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA4LiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MCwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MSwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAyLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAzLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MywgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA0LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NCwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA1LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NSwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA2LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA3LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NywgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA4LCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cDBfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnBsYW5JZDtcbiAgICAgIGNvcHlidXR0b25ncm91cDAuJHNldChjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMpO1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cDFfY2hhbmdlcy5idXR0b25UZXh0ID0gLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eDJbMF0ucHJpb3JpdHk7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAxLiRzZXQoY29weWJ1dHRvbmdyb3VwMV9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cDJfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAyX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnByaWNlRGV0YWlscy5wcmljZU5hbWU7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAyLiRzZXQoY29weWJ1dHRvbmdyb3VwMl9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cDNfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAzX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnByaWNlRGV0YWlscy5hbW91bnQ7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAzLiRzZXQoY29weWJ1dHRvbmdyb3VwM19jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cDRfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXA0X2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnByaWNlRGV0YWlscy5pbnRlcnZhbC50eXBlO1xuICAgICAgY29weWJ1dHRvbmdyb3VwNC4kc2V0KGNvcHlidXR0b25ncm91cDRfY2hhbmdlcyk7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXA1X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwNV9jaGFuZ2VzLmJ1dHRvblRleHQgPSAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgY3R4MlswXS5wcmljZURldGFpbHMuaW50ZXJ2YWwuY291bnQ7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXA1LiRzZXQoY29weWJ1dHRvbmdyb3VwNV9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cDZfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXA2X2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnByaWNlRGV0YWlscy50eXBlO1xuICAgICAgY29weWJ1dHRvbmdyb3VwNi4kc2V0KGNvcHlidXR0b25ncm91cDZfY2hhbmdlcyk7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXA3X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwN19jaGFuZ2VzLmJ1dHRvblRleHQgPSAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgY3R4MlswXS5wcmljZURldGFpbHMuY3VycmVuY3k7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXA3LiRzZXQoY29weWJ1dHRvbmdyb3VwN19jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cDhfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXA4X2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnBsYW5OYW1lO1xuICAgICAgY29weWJ1dHRvbmdyb3VwOC4kc2V0KGNvcHlidXR0b25ncm91cDhfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwMi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAzLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwNS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXA2LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDcuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwOC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAzLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXA0LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXA1LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXA2LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXA3LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXA4LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMCwgZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxLCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQxKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDIsIGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDIpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMywgZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Myk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA0LCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ0KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDUsIGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDUpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwNiwgZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0Nik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXA3LCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ3KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDgsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDkoY3R4KSB7XG4gIGxldCBkaXYyO1xuICBsZXQgZGl2MDtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IHNwYW4wO1xuICBsZXQgY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICBsZXQgaWZfYmxvY2swO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IHNwYW4xO1xuICBsZXQgYXJyb3dpY29uO1xuICBsZXQgdDI7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2Ml9jbGFzc192YWx1ZTtcbiAgbGV0IGRpdjJfaWRfdmFsdWU7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja18zJDQsIGNyZWF0ZV9lbHNlX2Jsb2NrXzJdO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgIGN0eDJbMF0gJiYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICBjdHgyWzBdLnByaWNlRGV0YWlsc1xuICAgIClcbiAgICAgIHJldHVybiAwO1xuICAgIHJldHVybiAxO1xuICB9XG4gIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eCk7XG4gIGlmX2Jsb2NrMCA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKFxuICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICBjdHgyWzBdICYmIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgY3R4MlswXS5wcmljZURldGFpbHNcbiAgICApXG4gICAgICByZXR1cm4gY3JlYXRlX2lmX2Jsb2NrXzIkNTtcbiAgICByZXR1cm4gY3JlYXRlX2Vsc2VfYmxvY2tfMTtcbiAgfVxuICBsZXQgY3VycmVudF9ibG9ja190eXBlID0gc2VsZWN0X2Jsb2NrX3R5cGVfMShjdHgpO1xuICBsZXQgaWZfYmxvY2sxID0gY3VycmVudF9ibG9ja190eXBlKGN0eCk7XG4gIGFycm93aWNvbiA9IG5ldyBBcnJvd0ljb24oe1xuICAgIHByb3BzOiB7XG4gICAgICBzdHlsZTogXCJ0cmFuc2Zvcm06IHJvdGF0ZShcIiArIC8qb3Blbk1lbWJlclBsYW5JdGVtKi9cbiAgICAgIChjdHhbMV0gPyBcIjE4MGRlZ1wiIDogXCIwZGVnXCIpICsgXCIpXCJcbiAgICB9XG4gIH0pO1xuICBsZXQgaWZfYmxvY2syID0gKFxuICAgIC8qb3Blbk1lbWJlclBsYW5JdGVtKi9cbiAgICBjdHhbMV0gJiYgY3JlYXRlX2lmX2Jsb2NrJDcoY3R4KVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHNwYW4wID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIHNwYW4xID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGFycm93aWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICBhdHRyKHNwYW4wLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXBsYW4taXRlbV9faWNvbiBzdmVsdGUtMWRkNXAwMlwiKTtcbiAgICAgIGF0dHIoc3BhbjEsIFwiY2xhc3NcIiwgXCJtcy1tZW1iZXItcGxhbi1pdGVtX19hcnJvdyBzdmVsdGUtMWRkNXAwMlwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXBsYW4taXRlbV9fdGFiIHN2ZWx0ZS0xZGQ1cDAyXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiZGF0YS1jeVwiLCBcIm1lbWJlci1wbGFuLWl0ZW0tYnV0dG9uXCIpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXBsYW4taXRlbV9fdGFicyBzdmVsdGUtMWRkNXAwMlwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLW1lbWJlci1wbGFuLWl0ZW1fX2NvbnRlbnQgc3ZlbHRlLTFkZDVwMDJcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgZGl2Ml9jbGFzc192YWx1ZSA9IFwibXMtbWVtYmVyLXBsYW4taXRlbSBcIiArIGFkZFR5cGVDbGFzcyhcbiAgICAgICAgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eFswXVxuICAgICAgKSArIFwiIHN2ZWx0ZS0xZGQ1cDAyXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImlkXCIsIGRpdjJfaWRfdmFsdWUgPSAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgIGN0eFswXS5pZCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYyLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbik7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuMCk7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKHNwYW4wLCBudWxsKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQwKTtcbiAgICAgIGlmX2Jsb2NrMS5tKGJ1dHRvbiwgbnVsbCk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCB0MSk7XG4gICAgICBhcHBlbmQoYnV0dG9uLCBzcGFuMSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYXJyb3dpY29uLCBzcGFuMSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDIpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjEpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLm0oZGl2MSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKFxuICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICBjdHhbM11cbiAgICAgICAgKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCAhPT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMCwgMSk7XG4gICAgICAgIGlmX2Jsb2NrMC5tKHNwYW4wLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGUgPT09IChjdXJyZW50X2Jsb2NrX3R5cGUgPSBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIpKSAmJiBpZl9ibG9jazEpIHtcbiAgICAgICAgaWZfYmxvY2sxLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWZfYmxvY2sxLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrMSA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgyKTtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICAgICAgaWZfYmxvY2sxLm0oYnV0dG9uLCB0MSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGFycm93aWNvbl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm9wZW5NZW1iZXJQbGFuSXRlbSovXG4gICAgICAyKVxuICAgICAgICBhcnJvd2ljb25fY2hhbmdlcy5zdHlsZSA9IFwidHJhbnNmb3JtOiByb3RhdGUoXCIgKyAvKm9wZW5NZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIChjdHgyWzFdID8gXCIxODBkZWdcIiA6IFwiMGRlZ1wiKSArIFwiKVwiO1xuICAgICAgYXJyb3dpY29uLiRzZXQoYXJyb3dpY29uX2NoYW5nZXMpO1xuICAgICAgaWYgKFxuICAgICAgICAvKm9wZW5NZW1iZXJQbGFuSXRlbSovXG4gICAgICAgIGN0eDJbMV1cbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgICAgaWZfYmxvY2syLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qb3Blbk1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgICAyKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGNyZWF0ZV9pZl9ibG9jayQ3KGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMi5tKGRpdjEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2syID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyptZW1iZXJQbGFuSXRlbSovXG4gICAgICAxICYmIGRpdjJfY2xhc3NfdmFsdWUgIT09IChkaXYyX2NsYXNzX3ZhbHVlID0gXCJtcy1tZW1iZXItcGxhbi1pdGVtIFwiICsgYWRkVHlwZUNsYXNzKFxuICAgICAgICAvKm1lbWJlclBsYW5JdGVtKi9cbiAgICAgICAgY3R4MlswXVxuICAgICAgKSArIFwiIHN2ZWx0ZS0xZGQ1cDAyXCIpKSB7XG4gICAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBkaXYyX2NsYXNzX3ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgMSAmJiBkaXYyX2lkX3ZhbHVlICE9PSAoZGl2Ml9pZF92YWx1ZSA9IC8qbWVtYmVyUGxhbkl0ZW0qL1xuICAgICAgY3R4MlswXS5pZCkpIHtcbiAgICAgICAgYXR0cihkaXYyLCBcImlkXCIsIGRpdjJfaWRfdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYXJyb3dpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMCk7XG4gICAgICB0cmFuc2l0aW9uX291dChhcnJvd2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMik7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjIpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgaWZfYmxvY2sxLmQoKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGFycm93aWNvbik7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuZCgpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGFkZFR5cGVDbGFzcyhtZW1iZXJQbGFuSXRlbSkge1xuICBpZiAobWVtYmVyUGxhbkl0ZW0gJiYgbWVtYmVyUGxhbkl0ZW0ucHJpY2VEZXRhaWxzKSB7XG4gICAgcmV0dXJuIFwibXMtbWVtYmVyLXBsYW4taXRlbS0tcGFpZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm1zLW1lbWJlci1wbGFuLWl0ZW0tLWZyZWVcIjtcbiAgfVxufVxuZnVuY3Rpb24gaW5zdGFuY2UkNygkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyBtZW1iZXJQbGFuSXRlbSB9ID0gJCRwcm9wcztcbiAgbGV0IG9wZW5NZW1iZXJQbGFuSXRlbSA9IGZhbHNlO1xuICBmdW5jdGlvbiBzaG93TWVtYmVyUGxhbkl0ZW1Db250ZW50KCkge1xuICAgICQkaW52YWxpZGF0ZSgxLCBvcGVuTWVtYmVyUGxhbkl0ZW0gPSAhb3Blbk1lbWJlclBsYW5JdGVtKTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gc2hvd01lbWJlclBsYW5JdGVtQ29udGVudCgpO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJtZW1iZXJQbGFuSXRlbVwiIGluICQkcHJvcHMyKVxuICAgICAgJCRpbnZhbGlkYXRlKDAsIG1lbWJlclBsYW5JdGVtID0gJCRwcm9wczIubWVtYmVyUGxhbkl0ZW0pO1xuICB9O1xuICByZXR1cm4gW21lbWJlclBsYW5JdGVtLCBvcGVuTWVtYmVyUGxhbkl0ZW0sIHNob3dNZW1iZXJQbGFuSXRlbUNvbnRlbnQsIGNsaWNrX2hhbmRsZXJdO1xufVxudmFyIE1lbWJlclBsYW5JdGVtID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJDcsIGNyZWF0ZV9mcmFnbWVudCQ5LCBzYWZlX25vdF9lcXVhbCwgeyBtZW1iZXJQbGFuSXRlbTogMCB9LCBhZGRfY3NzJDYpO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyQ1KHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtMTYxMmZsc1wiLCBcIi5tcy1tZW1iZXItdGFiX19oZWFkZXIuc3ZlbHRlLTE2MTJmbHN7bWFyZ2luLWJvdHRvbToxMnB4fS5tcy1tZW1iZXItdGFiLXN0YXR1cy5zdmVsdGUtMTYxMmZsc3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6NnB4IDEycHg7Ym9yZGVyOjFweCBzb2xpZCAjZTA2NjU3O2JvcmRlci1yYWRpdXM6NHB4fS5tcy1tZW1iZXItdGFiLXN0YXR1cy0tYWN0aXZlLnN2ZWx0ZS0xNjEyZmxze2JvcmRlci1jb2xvcjojNWM5ZDZmfS5tcy1tZW1iZXItdGFiLXN0YXR1c19faW5kaWNhdG9yLnN2ZWx0ZS0xNjEyZmxze3dpZHRoOjEwcHg7aGVpZ2h0OjEwcHg7Ym9yZGVyLXJhZGl1czo1MCU7bWFyZ2luLXJpZ2h0OjEwcHg7YmFja2dyb3VuZC1jb2xvcjpyZ2IoMjI0LCAxMDIsIDg3KX0ubXMtbWVtYmVyLXRhYi1zdGF0dXNfX2luZGljYXRvci0tYWN0aXZlLnN2ZWx0ZS0xNjEyZmxze2JhY2tncm91bmQtY29sb3I6IzVjOWQ2Zn0ubXMtbWVtYmVyLXRhYi1zdGF0dXNfX2J1dHRvbi5zdmVsdGUtMTYxMmZsc3tmb250LXNpemU6MTFweDtsaW5lLWhlaWdodDoxO21hcmdpbi1sZWZ0OmF1dG87cGFkZGluZzo0cHg7Ym9yZGVyOjFweCBzb2xpZCAjNWM1YzVjO2JvcmRlci1yYWRpdXM6NHB4O2JhY2tncm91bmQtY29sb3I6IzQ0NDtjb2xvcjojZmZmO2N1cnNvcjpwb2ludGVyfS5tcy1tZW1iZXItdGFiX19zZWN0aW9uLnN2ZWx0ZS0xNjEyZmxze3BhZGRpbmctYm90dG9tOjZweDttYXJnaW4tYm90dG9tOjEycHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzUzNTM1M30ubXMtbWVtYmVyLXRhYl9fc2VjdGlvbi5zdmVsdGUtMTYxMmZsczpsYXN0LWNoaWxke2JvcmRlci1ib3R0b206bm9uZTttYXJnaW4tYm90dG9tOjB9Lm1zLWNvZGUtYmxvY2suc3ZlbHRlLTE2MTJmbHN7YmFja2dyb3VuZC1jb2xvcjojMDAwO2NvbG9yOiNmZmY7cGFkZGluZzo0cHggOHB4O2JvcmRlci1yYWRpdXM6NHB4O292ZXJmbG93OmF1dG87Ym9yZGVyOjFweCBzb2xpZCAjNGI0YjRiO2ZvbnQtc2l6ZToxMHB4fVwiKTtcbn1cbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQkMyhjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFsxMV0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8xJDIoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbMTRdID0gbGlzdFtpXTtcbiAgcmV0dXJuIGNoaWxkX2N0eDtcbn1cbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHRfMihjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFsxMV0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gY3JlYXRlX2Vsc2VfYmxvY2skMihjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHQxO1xuICBsZXQgYnV0dG9uO1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYudGV4dENvbnRlbnQgPSBcIllvdSBhcmUgTG9nZ2VkIE91dFwiO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IFwiTG9naW5cIjtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYi1zdGF0dXNfX3RleHRcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1lbWJlci10YWItc3RhdHVzX19idXR0b24gc3ZlbHRlLTE2MTJmbHNcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJkYXRhLWN5XCIsIFwibWVtYmVyLWxvZ2luLWJ1dHRvblwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdiwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQxLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYnV0dG9uLCBhbmNob3IpO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXJfMSovXG4gICAgICAgICAgY3R4WzddXG4gICAgICAgICk7XG4gICAgICAgIG1vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDEpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGJ1dHRvbik7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzYkMShjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHQxO1xuICBsZXQgYnV0dG9uO1xuICBsZXQgbW91bnRlZDtcbiAgbGV0IGRpc3Bvc2U7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYudGV4dENvbnRlbnQgPSBcIllvdSBhcmUgTG9nZ2VkIEluXCI7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBidXR0b24gPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gXCJMb2dvdXRcIjtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYi1zdGF0dXNfX3RleHRcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLW1lbWJlci10YWItc3RhdHVzX19idXR0b24gc3ZlbHRlLTE2MTJmbHNcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJkYXRhLWN5XCIsIFwibWVtYmVyLWxvZ291dC1idXR0b25cIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MSwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGJ1dHRvbiwgYW5jaG9yKTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKFxuICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICBjdHhbNl1cbiAgICAgICAgKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MSk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goYnV0dG9uKTtcbiAgICAgIG1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIGRpc3Bvc2UoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skNihjdHgpIHtcbiAgbGV0IGRpdjA7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAwO1xuICBsZXQgdDA7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAxO1xuICBsZXQgdDE7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAyO1xuICBsZXQgdDI7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAzO1xuICBsZXQgdDM7XG4gIGxldCBzaG93X2lmXzEgPSAoXG4gICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIGN0eFswXS5tZW1iZXJEYXRhLmN1c3RvbUZpZWxkcyAmJiBPYmplY3Qua2V5cyhcbiAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIGN0eFswXS5tZW1iZXJEYXRhLmN1c3RvbUZpZWxkc1xuICAgICkuc29tZShcbiAgICAgIC8qZnVuYyovXG4gICAgICBjdHhbNV1cbiAgICApXG4gICk7XG4gIGxldCB0NDtcbiAgbGV0IHQ1O1xuICBsZXQgc2hvd19pZiA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLm1lbWJlckRhdGEubWV0YURhdGEgJiYgT2JqZWN0LmtleXMoXG4gICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0ubWVtYmVyRGF0YS5tZXRhRGF0YVxuICAgICkubGVuZ3RoID4gMFxuICApO1xuICBsZXQgdDY7XG4gIGxldCB0NztcbiAgbGV0IGRpdjI7XG4gIGxldCBzZWN0aW9uaGVhZGVyO1xuICBsZXQgdDg7XG4gIGxldCBkaXYxO1xuICBsZXQgcHJlO1xuICBsZXQgY29kZTtcbiAgbGV0IHQ5X3ZhbHVlID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIGN0eFswXS5tZW1iZXJEYXRhLFxuICAgIG51bGwsXG4gICAgMlxuICApICsgXCJcIjtcbiAgbGV0IHQ5O1xuICBsZXQgY3VycmVudDtcbiAgY29weWJ1dHRvbmdyb3VwMCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiTWVtYmVyIElEXCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4WzBdLm1lbWJlckRhdGEuaWRcbiAgICAgICksXG4gICAgICBjeXByZXNzOiBcIm1lbWJlci1pZFwiXG4gICAgfVxuICB9KTtcbiAgY29weWJ1dHRvbmdyb3VwMSA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiRW1haWxcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0ubWVtYmVyRGF0YS5hdXRoLmVtYWlsXG4gICAgICApLFxuICAgICAgY3lwcmVzczogXCJtZW1iZXItZW1haWxcIlxuICAgIH1cbiAgfSk7XG4gIGNvcHlidXR0b25ncm91cDIgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiBcIkNyZWF0ZWQgRGF0ZVwiLFxuICAgICAgYnV0dG9uVGV4dDogcmVhZGFibGVEYXRlKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5tZW1iZXJEYXRhLmNyZWF0ZWRBdFxuICAgICAgKSxcbiAgICAgIGN5cHJlc3M6IFwibWVtYmVyLWNyZWF0ZWQtZGF0ZVwiXG4gICAgfVxuICB9KTtcbiAgY29weWJ1dHRvbmdyb3VwMyA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiVmVyaWZpZWRcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0ubWVtYmVyRGF0YS52ZXJpZmllZFxuICAgICAgKSxcbiAgICAgIGN5cHJlc3M6IFwibWVtYmVyLXZlcmlmaWVkXCJcbiAgICB9XG4gIH0pO1xuICBsZXQgaWZfYmxvY2swID0gc2hvd19pZl8xICYmIGNyZWF0ZV9pZl9ibG9ja180JDIoY3R4KTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKm1lbWJlclBsYW5EYXRhKi9cbiAgICBjdHhbMl0ubGVuZ3RoID4gMCAmJiBjcmVhdGVfaWZfYmxvY2tfMyQzKGN0eClcbiAgKTtcbiAgbGV0IGlmX2Jsb2NrMiA9IHNob3dfaWYgJiYgY3JlYXRlX2lmX2Jsb2NrXzIkNChjdHgpO1xuICBsZXQgaWZfYmxvY2szID0gKFxuICAgIC8qbWVtYmVySlNPTiovXG4gICAgY3R4WzFdICYmIC8qbWVtYmVySlNPTiovXG4gICAgY3R4WzFdLmRhdGEgJiYgY3JlYXRlX2lmX2Jsb2NrXzEkNShjdHgpXG4gICk7XG4gIHNlY3Rpb25oZWFkZXIgPSBuZXcgU2VjdGlvbkhlYWRlcih7XG4gICAgcHJvcHM6IHsgdGl0bGVUZXh0OiBcIk1lbWJlciBEYXRhIChyYXcpXCIgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMi4kJC5mcmFnbWVudCk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDMuJCQuZnJhZ21lbnQpO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQ0ID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0NSA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgdDYgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLmMoKTtcbiAgICAgIHQ3ID0gc3BhY2UoKTtcbiAgICAgIGRpdjIgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIHQ4ID0gc3BhY2UoKTtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgcHJlID0gZWxlbWVudChcInByZVwiKTtcbiAgICAgIGNvZGUgPSBlbGVtZW50KFwiY29kZVwiKTtcbiAgICAgIHQ5ID0gdGV4dCh0OV92YWx1ZSk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1tZW1iZXItdGFiX19zZWN0aW9uIHN2ZWx0ZS0xNjEyZmxzXCIpO1xuICAgICAgYXR0cihkaXYwLCBcImRhdGEtY3lcIiwgXCJtZW1iZXItc2VjdGlvbi1yZXF1aXJlZFwiKTtcbiAgICAgIGF0dHIocHJlLCBcImNsYXNzXCIsIFwibXMtY29kZS1ibG9jayBzdmVsdGUtMTYxMmZsc1wiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLWFwcC10YWJfX3NlY3Rpb25fX2NvbnRlbnRcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiZGF0YS1jeVwiLCBcImFwcC1zZWN0aW9uLWFsbC1kYXRhLWNvbnRlbnRcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1hcHAtdGFiX19zZWN0aW9uXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImRhdGEtY3lcIiwgXCJhcHAtc2VjdGlvbi1hbGwtZGF0YVwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjAsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMCwgZGl2MCwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDApO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDEsIGRpdjAsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjAsIHQxKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAyLCBkaXYwLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0Mik7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMywgZGl2MCwgbnVsbCk7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0MywgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQ0LCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDUsIGFuY2hvcik7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0NiwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazMpXG4gICAgICAgIGlmX2Jsb2NrMy5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQ3LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2MiwgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChzZWN0aW9uaGVhZGVyLCBkaXYyLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0OCk7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBhcHBlbmQoZGl2MSwgcHJlKTtcbiAgICAgIGFwcGVuZChwcmUsIGNvZGUpO1xuICAgICAgYXBwZW5kKGNvZGUsIHQ5KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLmlkO1xuICAgICAgY29weWJ1dHRvbmdyb3VwMC4kc2V0KGNvcHlidXR0b25ncm91cDBfY2hhbmdlcyk7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cDFfY2hhbmdlcy5idXR0b25UZXh0ID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuYXV0aC5lbWFpbDtcbiAgICAgIGNvcHlidXR0b25ncm91cDEuJHNldChjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMpO1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAyX2NoYW5nZXMuYnV0dG9uVGV4dCA9IHJlYWRhYmxlRGF0ZShcbiAgICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLmNyZWF0ZWRBdFxuICAgICAgICApO1xuICAgICAgY29weWJ1dHRvbmdyb3VwMi4kc2V0KGNvcHlidXR0b25ncm91cDJfY2hhbmdlcyk7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXAzX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cDNfY2hhbmdlcy5idXR0b25UZXh0ID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEudmVyaWZpZWQ7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAzLiRzZXQoY29weWJ1dHRvbmdyb3VwM19jaGFuZ2VzKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIHNob3dfaWZfMSA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLmN1c3RvbUZpZWxkcyAmJiBPYmplY3Qua2V5cyhcbiAgICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLmN1c3RvbUZpZWxkc1xuICAgICAgICApLnNvbWUoXG4gICAgICAgICAgLypmdW5jKi9cbiAgICAgICAgICBjdHgyWzVdXG4gICAgICAgICk7XG4gICAgICBpZiAoc2hvd19pZl8xKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazApIHtcbiAgICAgICAgICBpZl9ibG9jazAucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2swID0gY3JlYXRlX2lmX2Jsb2NrXzQkMihjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazAubSh0NC5wYXJlbnROb2RlLCB0NCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2swKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazAsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qbWVtYmVyUGxhbkRhdGEqL1xuICAgICAgICBjdHgyWzJdLmxlbmd0aCA+IDBcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgICAgaWZfYmxvY2sxLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyUGxhbkRhdGEqL1xuICAgICAgICAgIDQpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrXzMkMyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubSh0NS5wYXJlbnROb2RlLCB0NSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2sxKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazEsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBzaG93X2lmID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEubWV0YURhdGEgJiYgT2JqZWN0LmtleXMoXG4gICAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIGN0eDJbMF0ubWVtYmVyRGF0YS5tZXRhRGF0YVxuICAgICAgICApLmxlbmd0aCA+IDA7XG4gICAgICBpZiAoc2hvd19pZikge1xuICAgICAgICBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgICAgaWZfYmxvY2syLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICAxKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGNyZWF0ZV9pZl9ibG9ja18yJDQoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgaWZfYmxvY2syLm0odDYucGFyZW50Tm9kZSwgdDYpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2syID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKm1lbWJlckpTT04qL1xuICAgICAgICBjdHgyWzFdICYmIC8qbWVtYmVySlNPTiovXG4gICAgICAgIGN0eDJbMV0uZGF0YVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazMpIHtcbiAgICAgICAgICBpZl9ibG9jazMucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXJKU09OKi9cbiAgICAgICAgICAyKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMyA9IGNyZWF0ZV9pZl9ibG9ja18xJDUoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2szLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMywgMSk7XG4gICAgICAgICAgaWZfYmxvY2szLm0odDcucGFyZW50Tm9kZSwgdDcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMykge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2szLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2szID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpICYmIHQ5X3ZhbHVlICE9PSAodDlfdmFsdWUgPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEsXG4gICAgICAgIG51bGwsXG4gICAgICAgIDJcbiAgICAgICkgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDksIHQ5X3ZhbHVlKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwMS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDMuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szKTtcbiAgICAgIHRyYW5zaXRpb25faW4oc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAzLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazApO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMik7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazMpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYwKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDApO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMSk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAyKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDMpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQzKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5kKGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDQpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0NSk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQ2KTtcbiAgICAgIGlmIChpZl9ibG9jazMpXG4gICAgICAgIGlmX2Jsb2NrMy5kKGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjIpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoc2VjdGlvbmhlYWRlcik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzQkMihjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHNlY3Rpb25oZWFkZXI7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgYnV0dG9ubGluaztcbiAgbGV0IGN1cnJlbnQ7XG4gIHNlY3Rpb25oZWFkZXIgPSBuZXcgU2VjdGlvbkhlYWRlcih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHRpdGxlVGV4dDogXCJDdXN0b20gRmllbGRzXCIsXG4gICAgICBlZGl0VVJMOiBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0uYXBwRGF0YS5pZH0vbWVtYmVycy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIGN0eFswXS5tZW1iZXJEYXRhLmlkfS9wcm9maWxlYFxuICAgIH1cbiAgfSk7XG4gIGxldCBlYWNoX3ZhbHVlXzIgPSBPYmplY3Qua2V5cyhcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLm1lbWJlckRhdGEuY3VzdG9tRmllbGRzXG4gICk7XG4gIGxldCBlYWNoX2Jsb2NrcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWVfMi5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2tfMihnZXRfZWFjaF9jb250ZXh0XzIoY3R4LCBlYWNoX3ZhbHVlXzIsIGkpKTtcbiAgfVxuICBjb25zdCBvdXQgPSAoaSkgPT4gdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sIDEsIDEsICgpID0+IHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IG51bGw7XG4gIH0pO1xuICBidXR0b25saW5rID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzM4OTUwMjU3OTM1NVwiLFxuICAgICAgdGV4dDogXCJEb2N1bWVudGF0aW9uXCJcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgfVxuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChidXR0b25saW5rLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYl9fc2VjdGlvbiBzdmVsdGUtMTYxMmZsc1wiKTtcbiAgICAgIGF0dHIoZGl2LCBcImRhdGEtY3lcIiwgXCJtZW1iZXItc2VjdGlvbi1jdXN0b20tZmllbGRzXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIsIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJ1dHRvbmxpbmssIGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHNlY3Rpb25oZWFkZXJfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgc2VjdGlvbmhlYWRlcl9jaGFuZ2VzLmVkaXRVUkwgPSBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5pZH0vbWVtYmVycy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLmlkfS9wcm9maWxlYDtcbiAgICAgIHNlY3Rpb25oZWFkZXIuJHNldChzZWN0aW9uaGVhZGVyX2NoYW5nZXMpO1xuICAgICAgaWYgKGRpcnR5ICYgLypPYmplY3QsICRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSB7XG4gICAgICAgIGVhY2hfdmFsdWVfMiA9IE9iamVjdC5rZXlzKFxuICAgICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuY3VzdG9tRmllbGRzXG4gICAgICAgICk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8yLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dF8yKGN0eDIsIGVhY2hfdmFsdWVfMiwgaSk7XG4gICAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2tfMihjaGlsZF9jdHgpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSwgMSk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdiwgdDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgZm9yIChpID0gZWFjaF92YWx1ZV8yLmxlbmd0aDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICB0cmFuc2l0aW9uX2luKGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgZWFjaF9ibG9ja3MgPSBlYWNoX2Jsb2Nrcy5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIHRyYW5zaXRpb25fb3V0KGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIpO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluayk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzUkMShjdHgpIHtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IChcbiAgICAgICAgLyprZXkqL1xuICAgICAgICBjdHhbMTFdXG4gICAgICApLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5tZW1iZXJEYXRhLmN1c3RvbUZpZWxkc1tcbiAgICAgICAgICAvKmtleSovXG4gICAgICAgICAgY3R4WzExXVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgY3lwcmVzczogYGN1c3RvbS1maWVsZC0key8qa2V5Ki9cbiAgICAgIGN0eFsxMV19YFxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cF9jaGFuZ2VzLmxhYmVsVGV4dCA9IC8qa2V5Ki9cbiAgICAgICAgY3R4MlsxMV07XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcy5idXR0b25UZXh0ID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuY3VzdG9tRmllbGRzW1xuICAgICAgICAgIC8qa2V5Ki9cbiAgICAgICAgICBjdHgyWzExXVxuICAgICAgICBdO1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMuY3lwcmVzcyA9IGBjdXN0b20tZmllbGQtJHsvKmtleSovXG4gICAgICAgIGN0eDJbMTFdfWA7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAuJHNldChjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzIoY3R4KSB7XG4gIGxldCBpZl9ibG9ja19hbmNob3I7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIGN0eFswXS5tZW1iZXJEYXRhLmN1c3RvbUZpZWxkc1tcbiAgICAgIC8qa2V5Ki9cbiAgICAgIGN0eFsxMV1cbiAgICBdICE9PSBcIlwiICYmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICBjdHhbMF0ubWVtYmVyRGF0YS5jdXN0b21GaWVsZHNbXG4gICAgICAvKmtleSovXG4gICAgICBjdHhbMTFdXG4gICAgXSAhPT0gbnVsbCAmJiBjcmVhdGVfaWZfYmxvY2tfNSQxKGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBpZl9ibG9ja19hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0ubWVtYmVyRGF0YS5jdXN0b21GaWVsZHNbXG4gICAgICAgICAgLyprZXkqL1xuICAgICAgICAgIGN0eDJbMTFdXG4gICAgICAgIF0gIT09IFwiXCIgJiYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuY3VzdG9tRmllbGRzW1xuICAgICAgICAgIC8qa2V5Ki9cbiAgICAgICAgICBjdHgyWzExXVxuICAgICAgICBdICE9PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9ja181JDEoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oaWZfYmxvY2tfYW5jaG9yLnBhcmVudE5vZGUsIGlmX2Jsb2NrX2FuY2hvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18zJDMoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBzZWN0aW9uaGVhZGVyO1xuICBsZXQgdDA7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXA7XG4gIGxldCB0MTtcbiAgbGV0IGN1cnJlbnQ7XG4gIHNlY3Rpb25oZWFkZXIgPSBuZXcgU2VjdGlvbkhlYWRlcih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHRpdGxlVGV4dDogXCJQbGFuc1wiLFxuICAgICAgZWRpdFVSTDogYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgY3R4WzBdLmFwcERhdGEuaWR9L21lbWJlcnMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0ubWVtYmVyRGF0YS5pZH0vcHJvZmlsZWBcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXAgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiBcIlN0cmlwZSBJRFwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5tZW1iZXJEYXRhLnN0cmlwZUN1c3RvbWVySWRcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICBsZXQgZWFjaF92YWx1ZV8xID0gKFxuICAgIC8qbWVtYmVyUGxhbkRhdGEqL1xuICAgIGN0eFsyXVxuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrXzEkMihnZXRfZWFjaF9jb250ZXh0XzEkMihjdHgsIGVhY2hfdmFsdWVfMSwgaSkpO1xuICB9XG4gIGNvbnN0IG91dCA9IChpKSA9PiB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSwgMSwgMSwgKCkgPT4ge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gbnVsbDtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1lbWJlci10YWJfX3NlY3Rpb24gc3ZlbHRlLTE2MTJmbHNcIik7XG4gICAgICBhdHRyKGRpdiwgXCJkYXRhLWN5XCIsIFwibWVtYmVyLXNlY3Rpb24tcGxhbnNcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoc2VjdGlvbmhlYWRlciwgZGl2LCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYsIHQwKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBzZWN0aW9uaGVhZGVyX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIHNlY3Rpb25oZWFkZXJfY2hhbmdlcy5lZGl0VVJMID0gYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEuaWR9L21lbWJlcnMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0ubWVtYmVyRGF0YS5pZH0vcHJvZmlsZWA7XG4gICAgICBzZWN0aW9uaGVhZGVyLiRzZXQoc2VjdGlvbmhlYWRlcl9jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcy5idXR0b25UZXh0ID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuc3RyaXBlQ3VzdG9tZXJJZDtcbiAgICAgIGNvcHlidXR0b25ncm91cC4kc2V0KGNvcHlidXR0b25ncm91cF9jaGFuZ2VzKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyUGxhbkRhdGEqL1xuICAgICAgNCkge1xuICAgICAgICBlYWNoX3ZhbHVlXzEgPSAvKm1lbWJlclBsYW5EYXRhKi9cbiAgICAgICAgY3R4MlsyXTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfZWFjaF9jb250ZXh0XzEkMihjdHgyLCBlYWNoX3ZhbHVlXzEsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrXzEkMihjaGlsZF9jdHgpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSwgMSk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5tKGRpdiwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICBmb3IgKGkgPSBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBvdXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgZWFjaF9ibG9ja3MgPSBlYWNoX2Jsb2Nrcy5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwKTtcbiAgICAgIGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcywgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9ja18xJDIoY3R4KSB7XG4gIGxldCBtZW1iZXJwbGFuaXRlbTtcbiAgbGV0IGN1cnJlbnQ7XG4gIG1lbWJlcnBsYW5pdGVtID0gbmV3IE1lbWJlclBsYW5JdGVtKHtcbiAgICBwcm9wczoge1xuICAgICAgbWVtYmVyUGxhbkl0ZW06IChcbiAgICAgICAgLypwbGFuQ29ubmVjdGlvbiovXG4gICAgICAgIGN0eFsxNF1cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KG1lbWJlcnBsYW5pdGVtLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChtZW1iZXJwbGFuaXRlbSwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBtZW1iZXJwbGFuaXRlbV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm1lbWJlclBsYW5EYXRhKi9cbiAgICAgIDQpXG4gICAgICAgIG1lbWJlcnBsYW5pdGVtX2NoYW5nZXMubWVtYmVyUGxhbkl0ZW0gPSAvKnBsYW5Db25uZWN0aW9uKi9cbiAgICAgICAgY3R4MlsxNF07XG4gICAgICBtZW1iZXJwbGFuaXRlbS4kc2V0KG1lbWJlcnBsYW5pdGVtX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obWVtYmVycGxhbml0ZW0uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobWVtYmVycGxhbml0ZW0uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtZW1iZXJwbGFuaXRlbSwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMiQ0KGN0eCkge1xuICBsZXQgZGl2O1xuICBsZXQgc2VjdGlvbmhlYWRlcjtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCBidXR0b25saW5rO1xuICBsZXQgY3VycmVudDtcbiAgc2VjdGlvbmhlYWRlciA9IG5ldyBTZWN0aW9uSGVhZGVyKHtcbiAgICBwcm9wczoge1xuICAgICAgdGl0bGVUZXh0OiBcIk1ldGEgRGF0YVwiLFxuICAgICAgZWRpdFVSTDogYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgY3R4WzBdLmFwcERhdGEuaWR9L21lbWJlcnMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0ubWVtYmVyRGF0YS5pZH0vcHJvZmlsZWBcbiAgICB9XG4gIH0pO1xuICBsZXQgZWFjaF92YWx1ZSA9IE9iamVjdC5rZXlzKFxuICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICBjdHhbMF0ubWVtYmVyRGF0YS5tZXRhRGF0YVxuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQzKGdldF9lYWNoX2NvbnRleHQkMyhjdHgsIGVhY2hfdmFsdWUsIGkpKTtcbiAgfVxuICBjb25zdCBvdXQgPSAoaSkgPT4gdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sIDEsIDEsICgpID0+IHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IG51bGw7XG4gIH0pO1xuICBidXR0b25saW5rID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzM4OTYyNzA2MjI5OS1DdXN0b20tRmllbGRzLXZzLU1ldGFkYXRhLXZzLUpTT05cIixcbiAgICAgIHRleHQ6IFwiRG9jdW1lbnRhdGlvblwiXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluay4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGRpdiwgXCJjbGFzc1wiLCBcIm1zLW1lbWJlci10YWJfX3NlY3Rpb24gc3ZlbHRlLTE2MTJmbHNcIik7XG4gICAgICBhdHRyKGRpdiwgXCJkYXRhLWN5XCIsIFwibWVtYmVyLXNlY3Rpb24tbWV0YS1kYXRhXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIsIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJ1dHRvbmxpbmssIGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHNlY3Rpb25oZWFkZXJfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgc2VjdGlvbmhlYWRlcl9jaGFuZ2VzLmVkaXRVUkwgPSBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5pZH0vbWVtYmVycy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLmlkfS9wcm9maWxlYDtcbiAgICAgIHNlY3Rpb25oZWFkZXIuJHNldChzZWN0aW9uaGVhZGVyX2NoYW5nZXMpO1xuICAgICAgaWYgKGRpcnR5ICYgLypPYmplY3QsICRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSB7XG4gICAgICAgIGVhY2hfdmFsdWUgPSBPYmplY3Qua2V5cyhcbiAgICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhLm1ldGFEYXRhXG4gICAgICAgICk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHQkMyhjdHgyLCBlYWNoX3ZhbHVlLCBpKTtcbiAgICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQzKGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2LCB0MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICBmb3IgKGkgPSBlYWNoX3ZhbHVlLmxlbmd0aDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgdHJhbnNpdGlvbl9pbihidXR0b25saW5rLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGVhY2hfYmxvY2tzID0gZWFjaF9ibG9ja3MuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICB0cmFuc2l0aW9uX291dChidXR0b25saW5rLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN0aW9uaGVhZGVyKTtcbiAgICAgIGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcywgZGV0YWNoaW5nKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGJ1dHRvbmxpbmspO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrJDMoY3R4KSB7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXA7XG4gIGxldCBjdXJyZW50O1xuICBjb3B5YnV0dG9uZ3JvdXAgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiAoXG4gICAgICAgIC8qa2V5Ki9cbiAgICAgICAgY3R4WzExXVxuICAgICAgKSxcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0ubWVtYmVyRGF0YS5tZXRhRGF0YVtcbiAgICAgICAgICAvKmtleSovXG4gICAgICAgICAgY3R4WzExXVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgY3lwcmVzczogYG1ldGEtZGF0YS0key8qa2V5Ki9cbiAgICAgIGN0eFsxMV19YFxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cF9jaGFuZ2VzLmxhYmVsVGV4dCA9IC8qa2V5Ki9cbiAgICAgICAgY3R4MlsxMV07XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcy5idXR0b25UZXh0ID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEubWV0YURhdGFbXG4gICAgICAgICAgLyprZXkqL1xuICAgICAgICAgIGN0eDJbMTFdXG4gICAgICAgIF07XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcy5jeXByZXNzID0gYG1ldGEtZGF0YS0key8qa2V5Ki9cbiAgICAgICAgY3R4MlsxMV19YDtcbiAgICAgIGNvcHlidXR0b25ncm91cC4kc2V0KGNvcHlidXR0b25ncm91cF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzEkNShjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHNlY3Rpb25oZWFkZXI7XG4gIGxldCB0MDtcbiAgbGV0IHByZTtcbiAgbGV0IGNvZGU7XG4gIGxldCB0MV92YWx1ZSA9IEpTT04uc3RyaW5naWZ5KFxuICAgIC8qbWVtYmVySlNPTiovXG4gICAgY3R4WzFdLmRhdGEsXG4gICAgbnVsbCxcbiAgICAyXG4gICkgKyBcIlwiO1xuICBsZXQgdDE7XG4gIGxldCB0MjtcbiAgbGV0IGJ1dHRvbmxpbms7XG4gIGxldCBjdXJyZW50O1xuICBzZWN0aW9uaGVhZGVyID0gbmV3IFNlY3Rpb25IZWFkZXIoe1xuICAgIHByb3BzOiB7XG4gICAgICB0aXRsZVRleHQ6IFwiTWVtYmVyIEpTT05cIixcbiAgICAgIGVkaXRVUkw6IGBodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vYXBwcy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIGN0eFswXS5hcHBEYXRhLmlkfS9tZW1iZXJzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgY3R4WzBdLm1lbWJlckRhdGEuaWR9L3Byb2ZpbGVgXG4gICAgfVxuICB9KTtcbiAgYnV0dG9ubGluayA9IG5ldyBCdXR0b25MaW5rKHtcbiAgICBwcm9wczoge1xuICAgICAgbGluazogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzczODk2MjcwNjIyOTktQ3VzdG9tLUZpZWxkcy12cy1NZXRhZGF0YS12cy1KU09OXCIsXG4gICAgICB0ZXh0OiBcIkRvY3VtZW50YXRpb25cIlxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgcHJlID0gZWxlbWVudChcInByZVwiKTtcbiAgICAgIGNvZGUgPSBlbGVtZW50KFwiY29kZVwiKTtcbiAgICAgIHQxID0gdGV4dCh0MV92YWx1ZSk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihwcmUsIFwiY2xhc3NcIiwgXCJtcy1jb2RlLWJsb2NrIHN2ZWx0ZS0xNjEyZmxzXCIpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1tZW1iZXItdGFiX19zZWN0aW9uIHN2ZWx0ZS0xNjEyZmxzXCIpO1xuICAgICAgYXR0cihkaXYsIFwiZGF0YS1jeVwiLCBcIm1lbWJlci1zZWN0aW9uLWpzb25cIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoc2VjdGlvbmhlYWRlciwgZGl2LCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYsIHByZSk7XG4gICAgICBhcHBlbmQocHJlLCBjb2RlKTtcbiAgICAgIGFwcGVuZChjb2RlLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2LCB0Mik7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluaywgZGl2LCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3Qgc2VjdGlvbmhlYWRlcl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBzZWN0aW9uaGVhZGVyX2NoYW5nZXMuZWRpdFVSTCA9IGBodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vYXBwcy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmlkfS9tZW1iZXJzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuaWR9L3Byb2ZpbGVgO1xuICAgICAgc2VjdGlvbmhlYWRlci4kc2V0KHNlY3Rpb25oZWFkZXJfY2hhbmdlcyk7XG4gICAgICBpZiAoKCFjdXJyZW50IHx8IGRpcnR5ICYgLyptZW1iZXJKU09OKi9cbiAgICAgIDIpICYmIHQxX3ZhbHVlICE9PSAodDFfdmFsdWUgPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgLyptZW1iZXJKU09OKi9cbiAgICAgICAgY3R4MlsxXS5kYXRhLFxuICAgICAgICBudWxsLFxuICAgICAgICAyXG4gICAgICApICsgXCJcIikpXG4gICAgICAgIHNldF9kYXRhKHQxLCB0MV92YWx1ZSk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYnV0dG9ubGluay4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoc2VjdGlvbmhlYWRlcik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChidXR0b25saW5rKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkOChjdHgpIHtcbiAgbGV0IGRpdjI7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2MDtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCBpZl9ibG9jazFfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKmlzTG9nZ2VkSW4qL1xuICAgICAgY3R4MlszXVxuICAgIClcbiAgICAgIHJldHVybiBjcmVhdGVfaWZfYmxvY2tfNiQxO1xuICAgIHJldHVybiBjcmVhdGVfZWxzZV9ibG9jayQyO1xuICB9XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGUgPSBzZWxlY3RfYmxvY2tfdHlwZShjdHgpO1xuICBsZXQgaWZfYmxvY2swID0gY3VycmVudF9ibG9ja190eXBlKGN0eCk7XG4gIGxldCBpZl9ibG9jazEgPSAoXG4gICAgLyppc0xvZ2dlZEluKi9cbiAgICBjdHhbM10gJiYgY3JlYXRlX2lmX2Jsb2NrJDYoY3R4KVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgIGlmX2Jsb2NrMV9hbmNob3IgPSBlbXB0eSgpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYi1zdGF0dXNfX2luZGljYXRvciBzdmVsdGUtMTYxMmZsc1wiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgZGl2MCxcbiAgICAgICAgXCJtcy1tZW1iZXItdGFiLXN0YXR1c19faW5kaWNhdG9yLS1hY3RpdmVcIixcbiAgICAgICAgLyppc0xvZ2dlZEluKi9cbiAgICAgICAgY3R4WzNdXG4gICAgICApO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYi1zdGF0dXMgc3ZlbHRlLTE2MTJmbHNcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiZGF0YS1jeVwiLCBcIm1lbWJlci10YWItc3RhdHVzXCIpO1xuICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICBkaXYxLFxuICAgICAgICBcIm1zLW1lbWJlci10YWItc3RhdHVzLS1hY3RpdmVcIixcbiAgICAgICAgLyppc0xvZ2dlZEluKi9cbiAgICAgICAgY3R4WzNdXG4gICAgICApO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtbWVtYmVyLXRhYl9faGVhZGVyIHN2ZWx0ZS0xNjEyZmxzXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2MiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYyLCBkaXYxKTtcbiAgICAgIGFwcGVuZChkaXYxLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYxLCB0MCk7XG4gICAgICBpZl9ibG9jazAubShkaXYxLCBudWxsKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQxLCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgaWZfYmxvY2sxX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmlzTG9nZ2VkSW4qL1xuICAgICAgOCkge1xuICAgICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgICAgZGl2MCxcbiAgICAgICAgICBcIm1zLW1lbWJlci10YWItc3RhdHVzX19pbmRpY2F0b3ItLWFjdGl2ZVwiLFxuICAgICAgICAgIC8qaXNMb2dnZWRJbiovXG4gICAgICAgICAgY3R4MlszXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZSA9PT0gKGN1cnJlbnRfYmxvY2tfdHlwZSA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpKSAmJiBpZl9ibG9jazApIHtcbiAgICAgICAgaWZfYmxvY2swLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWZfYmxvY2swLmQoMSk7XG4gICAgICAgIGlmX2Jsb2NrMCA9IGN1cnJlbnRfYmxvY2tfdHlwZShjdHgyKTtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgaWZfYmxvY2swLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qaXNMb2dnZWRJbiovXG4gICAgICA4KSB7XG4gICAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgICBkaXYxLFxuICAgICAgICAgIFwibXMtbWVtYmVyLXRhYi1zdGF0dXMtLWFjdGl2ZVwiLFxuICAgICAgICAgIC8qaXNMb2dnZWRJbiovXG4gICAgICAgICAgY3R4MlszXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKmlzTG9nZ2VkSW4qL1xuICAgICAgICBjdHgyWzNdXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKmlzTG9nZ2VkSW4qL1xuICAgICAgICAgIDgpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrJDYoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2sxLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSwgMSk7XG4gICAgICAgICAgaWZfYmxvY2sxLm0oaWZfYmxvY2sxX2FuY2hvci5wYXJlbnROb2RlLCBpZl9ibG9jazFfYW5jaG9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMSk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjIpO1xuICAgICAgaWZfYmxvY2swLmQoKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MSk7XG4gICAgICBpZiAoaWZfYmxvY2sxKVxuICAgICAgICBpZl9ibG9jazEuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGlmX2Jsb2NrMV9hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHJlYWRhYmxlRGF0ZShkYXRlKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgbW9udGg6IFwic2hvcnRcIixcbiAgICBkYXk6IFwibnVtZXJpY1wiXG4gIH07XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlKS50b0xvY2FsZURhdGVTdHJpbmcodm9pZCAwLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGxvZ291dE1lbWJlcigpIHtcbiAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmxvZ291dCgpO1xuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJDYoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IGlzTG9nZ2VkSW47XG4gIGxldCBtZW1iZXJQbGFuRGF0YTtcbiAgbGV0ICRJbnNwZWN0b3JTdG9yZTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEluc3BlY3RvclN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDAsICRJbnNwZWN0b3JTdG9yZSA9ICQkdmFsdWUpKTtcbiAgbGV0IG1lbWJlckpTT04gPSBudWxsO1xuICBvbk1vdW50KCgpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICBpZiAoISRJbnNwZWN0b3JTdG9yZS5tZW1iZXJEYXRhKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICghaXNMb2dnZWRJbilcbiAgICAgIHJldHVybjtcbiAgICB0cnkge1xuICAgICAgJCRpbnZhbGlkYXRlKDEsIG1lbWJlckpTT04gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmdldE1lbWJlckpTT04oKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggbWVtYmVyIEpTT046XCIsIGVycm9yKTtcbiAgICB9XG4gIH0pKTtcbiAgY29uc3QgZmluZFBsYW4gPSAocGxhbklkKSA9PiAkSW5zcGVjdG9yU3RvcmUuYXBwRGF0YS5wbGFucy5maW5kKChwbGFuKSA9PiBwbGFuLmlkID09PSBwbGFuSWQpO1xuICBjb25zdCBmaW5kUHJpY2UgPSAocGxhbiwgcHJpY2VJZCkgPT4gcGxhbi5wcmljZXMuZmluZCgocHJpY2UpID0+IHByaWNlLmlkID09PSBwcmljZUlkKTtcbiAgY29uc3QgZ2V0UGxhbkFuZFByaWNlRGV0YWlscyA9IChtZW1iZXJEYXRhLCBhcHBEYXRhKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGlmICghbWVtYmVyRGF0YSB8fCAhbWVtYmVyRGF0YS5wbGFuQ29ubmVjdGlvbnMgfHwgIWFwcERhdGEpXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICBtZW1iZXJEYXRhLnBsYW5Db25uZWN0aW9ucy5mb3JFYWNoKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICBjb25zdCBwbGFuID0gZmluZFBsYW4oY29ubmVjdGlvbi5wbGFuSWQpO1xuICAgICAgaWYgKHBsYW4pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgIHBsYW5JZDogcGxhbi5pZCxcbiAgICAgICAgICBwbGFuTmFtZTogcGxhbi5uYW1lLFxuICAgICAgICAgIHByaW9yaXR5OiBwbGFuLnByaW9yaXR5IHx8IDAsXG4gICAgICAgICAgcHJpY2VEZXRhaWxzOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChjb25uZWN0aW9uLnBheW1lbnQgJiYgY29ubmVjdGlvbi5wYXltZW50LnByaWNlSWQpIHtcbiAgICAgICAgICBjb25zdCBwcmljZSA9IGZpbmRQcmljZShwbGFuLCBjb25uZWN0aW9uLnBheW1lbnQucHJpY2VJZCk7XG4gICAgICAgICAgaWYgKHByaWNlKSB7XG4gICAgICAgICAgICByZXN1bHQucHJpY2VEZXRhaWxzID0ge1xuICAgICAgICAgICAgICBwcmljZUlkOiBwcmljZS5pZCxcbiAgICAgICAgICAgICAgcHJpY2VOYW1lOiBwcmljZS5uYW1lLFxuICAgICAgICAgICAgICB0eXBlOiBwcmljZS50eXBlLFxuICAgICAgICAgICAgICBhbW91bnQ6IHByaWNlLmFtb3VudCxcbiAgICAgICAgICAgICAgY3VycmVuY3k6IHByaWNlLmN1cnJlbmN5LFxuICAgICAgICAgICAgICBpbnRlcnZhbDogcHJpY2UuaW50ZXJ2YWxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuICBmdW5jdGlvbiBvcGVuTG9naW5Nb2RhbCgpIHtcbiAgICB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLm9wZW5Nb2RhbChcIkxPR0lOXCIpLnRoZW4oKGxvZ2luRGF0YSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJVc2VyIGxvZ2dlZCBpbiFcIiwgbG9naW5EYXRhKTtcbiAgICAgIHdpbmRvdy4kbWVtYmVyc3RhY2tEb20uaGlkZU1vZGFsKCk7XG4gICAgICBVcGRhdGVNZW1iZXJEYXRhKCk7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgZnVuYzIgPSAoa2V5KSA9PiAkSW5zcGVjdG9yU3RvcmUubWVtYmVyRGF0YS5jdXN0b21GaWVsZHNba2V5XSAhPT0gXCJcIiAmJiAkSW5zcGVjdG9yU3RvcmUubWVtYmVyRGF0YS5jdXN0b21GaWVsZHNba2V5XSAhPT0gbnVsbDtcbiAgY29uc3QgY2xpY2tfaGFuZGxlciA9ICgpID0+IGxvZ291dE1lbWJlcigpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzEgPSAoKSA9PiBvcGVuTG9naW5Nb2RhbCgpO1xuICAkJHNlbGYuJCQudXBkYXRlID0gKCkgPT4ge1xuICAgIGlmICgkJHNlbGYuJCQuZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgMSkge1xuICAgICAgJCRpbnZhbGlkYXRlKDMsIGlzTG9nZ2VkSW4gPSAkSW5zcGVjdG9yU3RvcmUubWVtYmVyRGF0YSAmJiAkSW5zcGVjdG9yU3RvcmUubWVtYmVyRGF0YS5pZCk7XG4gICAgfVxuICAgIGlmICgkJHNlbGYuJCQuZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgMSkge1xuICAgICAgJCRpbnZhbGlkYXRlKDIsIG1lbWJlclBsYW5EYXRhID0gZ2V0UGxhbkFuZFByaWNlRGV0YWlscygkSW5zcGVjdG9yU3RvcmUubWVtYmVyRGF0YSwgJEluc3BlY3RvclN0b3JlLmFwcERhdGEpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBbXG4gICAgJEluc3BlY3RvclN0b3JlLFxuICAgIG1lbWJlckpTT04sXG4gICAgbWVtYmVyUGxhbkRhdGEsXG4gICAgaXNMb2dnZWRJbixcbiAgICBvcGVuTG9naW5Nb2RhbCxcbiAgICBmdW5jMixcbiAgICBjbGlja19oYW5kbGVyLFxuICAgIGNsaWNrX2hhbmRsZXJfMVxuICBdO1xufVxudmFyIE1lbWJlclRhYiA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSQ2LCBjcmVhdGVfZnJhZ21lbnQkOCwgc2FmZV9ub3RfZXF1YWwsIHt9LCBhZGRfY3NzJDUpO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDcoY3R4KSB7XG4gIGxldCBzdmc7XG4gIGxldCBwYXRoO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBzdmcgPSBzdmdfZWxlbWVudChcInN2Z1wiKTtcbiAgICAgIHBhdGggPSBzdmdfZWxlbWVudChcInBhdGhcIik7XG4gICAgICBhdHRyKHBhdGgsIFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJkXCIsIFwiTTI0MC04MHEtMzMgMC01Ni41LTIzLjVUMTYwLTE2MHYtNDAwcTAtMzMgMjMuNS01Ni41VDI0MC02NDBoNDB2LTgwcTAtODMgNTguNS0xNDEuNVQ0ODAtOTIwcTgzIDAgMTQxLjUgNTguNVQ2ODAtNzIwdjgwaDQwcTMzIDAgNTYuNSAyMy41VDgwMC01NjB2NDAwcTAgMzMtMjMuNSA1Ni41VDcyMC04MEgyNDBabTI0MC0yMDBxMzMgMCA1Ni41LTIzLjVUNTYwLTM2MHEwLTMzLTIzLjUtNTYuNVQ0ODAtNDQwcS0zMyAwLTU2LjUgMjMuNVQ0MDAtMzYwcTAgMzMgMjMuNSA1Ni41VDQ4MC0yODBaTTM2MC02NDBoMjQwdi04MHEwLTUwLTM1LTg1dC04NS0zNXEtNTAgMC04NSAzNXQtMzUgODV2ODBaXCIpO1xuICAgICAgYXR0cihzdmcsIFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgIGF0dHIoc3ZnLCBcInZpZXdCb3hcIiwgXCIxNjAgLTkyMCA2NDAgODQwXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgc3ZnLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKHN2ZywgcGF0aCk7XG4gICAgfSxcbiAgICBwOiBub29wLFxuICAgIGk6IG5vb3AsXG4gICAgbzogbm9vcCxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHN2Zyk7XG4gICAgfVxuICB9O1xufVxudmFyIExvY2tJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQ3LCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyQ0KHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtcmQwbTJsXCIsIFwiLm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW0uc3ZlbHRlLXJkMG0ybHt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6IzQ0NDtib3JkZXI6MXB4IHNvbGlkICM1YzVjNWM7Ym9yZGVyLXJhZGl1czo0cHg7ZmxleC13cmFwOndyYXA7bWFyZ2luLWJvdHRvbTowLjVlbTtkaXNwbGF5OmZsZXg7dHJhbnNpdGlvbjpoZWlnaHQgMC4ycyBlYXNlLWluLW91dDtvdmVyZmxvdzpoaWRkZW59Lm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX3RhYnMuc3ZlbHRlLXJkMG0ybHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6c3RyZXRjaDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDoxMDAlfS5tcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtX190YWIuc3ZlbHRlLXJkMG0ybHtnYXA6NnB4O3BhZGRpbmc6NHB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dDt3aWR0aDoxMDAlO2xpbmUtaGVpZ2h0OjF9Lm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX2ljb24uc3ZlbHRlLXJkMG0ybHt3aWR0aDoyMnB4O2hlaWdodDoyMnB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNiZTgyMmU7Ym9yZGVyLXJhZGl1czozcHg7Y29sb3I6I2ZmZjtwYWRkaW5nOjJweH0ubXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9faWNvbiBzdmd7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0ubXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9fYXJyb3cuc3ZlbHRlLXJkMG0ybHttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDo4cHg7d2lkdGg6OHB4O3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXR9Lm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX2NvbnRlbnQuc3ZlbHRlLXJkMG0ybHt3aWR0aDoxMDAlfS5tcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtX193cmFwcGVyLnN2ZWx0ZS1yZDBtMmx7YmFja2dyb3VuZC1jb2xvcjojMjkyOTI5O3dpZHRoOjEwMCU7cGFkZGluZzo4cHh9Lm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX2dyb3VwLnN2ZWx0ZS1yZDBtMmx7YmFja2dyb3VuZDojMzczNzM3O3BhZGRpbmc6NHB4O21hcmdpbi1ib3R0b206NnB4O2JvcmRlci1yYWRpdXM6NHB4fS5tcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtX19ncm91cC10aXRsZS5zdmVsdGUtcmQwbTJse2ZvbnQtc2l6ZTo5cHg7bGluZS1oZWlnaHQ6MTtiYWNrZ3JvdW5kOiM0NDQ7cGFkZGluZzo2cHg7bWFyZ2luLWJvdHRvbTo2cHg7Ym9yZGVyOjFweCBzb2xpZCAjNGI0YjRiO2JvcmRlci1yYWRpdXM6NHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrfVwiKTtcbn1cbmZ1bmN0aW9uIGdldF9lYWNoX2NvbnRleHQkMihjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFs0XSA9IGxpc3RbaV07XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0XzEkMShjdHgsIGxpc3QsIGkpIHtcbiAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gIGNoaWxkX2N0eFs3XSA9IGxpc3RbaV07XG4gIHJldHVybiBjaGlsZF9jdHg7XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skNShjdHgpIHtcbiAgbGV0IGRpdjM7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAwO1xuICBsZXQgdDA7XG4gIGxldCBkaXYyO1xuICBsZXQgZGl2MDtcbiAgbGV0IHQyO1xuICBsZXQgZGl2MTtcbiAgbGV0IHQzO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMTtcbiAgbGV0IHQ0O1xuICBsZXQgY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICBsZXQgaWZfYmxvY2s7XG4gIGxldCBkaXYzX3RyYW5zaXRpb247XG4gIGxldCBjdXJyZW50O1xuICBjb3B5YnV0dG9uZ3JvdXAwID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJLZXlcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgICAgY3R4WzBdLmtleVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIGxldCBlYWNoX3ZhbHVlXzEgPSAoXG4gICAgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICBjdHhbMF0udXJsc1xuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrXzEkMShnZXRfZWFjaF9jb250ZXh0XzEkMShjdHgsIGVhY2hfdmFsdWVfMSwgaSkpO1xuICB9XG4gIGNvbnN0IG91dCA9IChpKSA9PiB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSwgMSwgMSwgKCkgPT4ge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gbnVsbDtcbiAgfSk7XG4gIGNvcHlidXR0b25ncm91cDEgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiBcIkFjY2VzcyBEZW5pZWRcIixcbiAgICAgIGJ1dHRvblRleHQ6IFwiL1wiICsgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIGN0eFswXS5yZWRpcmVjdFxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlmX2Jsb2NrX2NyZWF0b3JzID0gW2NyZWF0ZV9pZl9ibG9ja18xJDQsIGNyZWF0ZV9lbHNlX2Jsb2NrJDFdO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgY3R4MlswXS5wbGFucyAmJiAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgY3R4MlswXS5wbGFucy5sZW5ndGggPiAwXG4gICAgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4KTtcbiAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAudGV4dENvbnRlbnQgPSBcIkdhdGVkIFBhZ2VzICYgRm9sZGVyc1wiO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMS4kJC5mcmFnbWVudCk7XG4gICAgICB0NCA9IHNwYWNlKCk7XG4gICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtX19ncm91cC10aXRsZSBzdmVsdGUtcmQwbTJsXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9fZ3JvdXAgc3ZlbHRlLXJkMG0ybFwiKTtcbiAgICAgIGF0dHIoZGl2MywgXCJjbGFzc1wiLCBcIm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX3dyYXBwZXIgc3ZlbHRlLXJkMG0ybFwiKTtcbiAgICAgIGF0dHIoZGl2MywgXCJkYXRhLWN5XCIsIFwiYXBwLWdhdGVkLWNvbnRlbnQtaXRlbS1jb250ZW50LXdyYXBwZXJcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYzLCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDAsIGRpdjMsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIGFwcGVuZChkaXYyLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Mik7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGVuZChkaXYzLCB0Myk7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMSwgZGl2MywgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MywgdDQpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShkaXYzLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwMF9jaGFuZ2VzLmJ1dHRvblRleHQgPSAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgICBjdHgyWzBdLmtleTtcbiAgICAgIGNvcHlidXR0b25ncm91cDAuJHNldChjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMpO1xuICAgICAgaWYgKGRpcnR5ICYgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIDEpIHtcbiAgICAgICAgZWFjaF92YWx1ZV8xID0gLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgICAgY3R4MlswXS51cmxzO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVhY2hfdmFsdWVfMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHRfMSQxKGN0eDIsIGVhY2hfdmFsdWVfMSwgaSk7XG4gICAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2tfMSQxKGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICBmb3IgKGkgPSBlYWNoX3ZhbHVlXzEubGVuZ3RoOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBvdXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qYXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMuYnV0dG9uVGV4dCA9IFwiL1wiICsgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgICAgY3R4MlswXS5yZWRpcmVjdDtcbiAgICAgIGNvcHlidXR0b25ncm91cDEuJHNldChjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMpO1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ID09PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XTtcbiAgICAgICAgaWYgKCFpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgaWZfYmxvY2subShkaXYzLCBudWxsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgaWYgKCFkaXYzX3RyYW5zaXRpb24pXG4gICAgICAgICAgICBkaXYzX3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKGRpdjMsIHNsaWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgdHJ1ZSk7XG4gICAgICAgICAgZGl2M190cmFuc2l0aW9uLnJ1bigxKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGVhY2hfYmxvY2tzID0gZWFjaF9ibG9ja3MuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jayk7XG4gICAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgaWYgKCFkaXYzX3RyYW5zaXRpb24pXG4gICAgICAgICAgZGl2M190cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYzLCBzbGlkZSwgeyBkdXJhdGlvbjogMzAwIH0sIGZhbHNlKTtcbiAgICAgICAgZGl2M190cmFuc2l0aW9uLnJ1bigwKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Myk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwKTtcbiAgICAgIGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcywgZGV0YWNoaW5nKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDEpO1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgaWYgKGRldGFjaGluZyAmJiBkaXYzX3RyYW5zaXRpb24pXG4gICAgICAgIGRpdjNfdHJhbnNpdGlvbi5lbmQoKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9ja18xJDEoY3R4KSB7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXA7XG4gIGxldCBjdXJyZW50O1xuICBjb3B5YnV0dG9uZ3JvdXAgPSBuZXcgQ29weUJ1dHRvbkdyb3VwKHtcbiAgICBwcm9wczoge1xuICAgICAgbGFiZWxUZXh0OiAoXG4gICAgICAgIC8qdXJsKi9cbiAgICAgICAgY3R4WzddLmZpbHRlclxuICAgICAgKSxcbiAgICAgIGJ1dHRvblRleHQ6IFwiL1wiICsgLyp1cmwqL1xuICAgICAgY3R4WzddLnVybFxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qYXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcy5sYWJlbFRleHQgPSAvKnVybCovXG4gICAgICAgIGN0eDJbN10uZmlsdGVyO1xuICAgICAgaWYgKGRpcnR5ICYgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cF9jaGFuZ2VzLmJ1dHRvblRleHQgPSBcIi9cIiArIC8qdXJsKi9cbiAgICAgICAgY3R4Mls3XS51cmw7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAuJHNldChjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lbHNlX2Jsb2NrJDEoY3R4KSB7XG4gIGxldCBkaXYyO1xuICBsZXQgZGl2MDtcbiAgbGV0IHQxO1xuICBsZXQgZGl2MTtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiQWxsIE1lbWJlcnNcIixcbiAgICAgIGJ1dHRvblRleHQ6IFwidHJ1ZVwiXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAudGV4dENvbnRlbnQgPSBcIkdyYW50IEFjY2VzcyB0by4uLlwiO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtX19ncm91cC10aXRsZSBzdmVsdGUtcmQwbTJsXCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9fZ3JvdXAgc3ZlbHRlLXJkMG0ybFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjIsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MiwgdDEpO1xuICAgICAgYXBwZW5kKGRpdjIsIGRpdjEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cCwgZGl2MSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYyKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzEkNChjdHgpIHtcbiAgbGV0IGRpdjI7XG4gIGxldCBkaXYwO1xuICBsZXQgdDE7XG4gIGxldCBkaXYxO1xuICBsZXQgY3VycmVudDtcbiAgbGV0IGVhY2hfdmFsdWUgPSAoXG4gICAgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICBjdHhbMF0ucGxhbnNcbiAgKTtcbiAgbGV0IGVhY2hfYmxvY2tzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2skMihnZXRfZWFjaF9jb250ZXh0JDIoY3R4LCBlYWNoX3ZhbHVlLCBpKSk7XG4gIH1cbiAgY29uc3Qgb3V0ID0gKGkpID0+IHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldLCAxLCAxLCAoKSA9PiB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBudWxsO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAudGV4dENvbnRlbnQgPSBcIkdyYW50IEFjY2VzcyB0by4uLlwiO1xuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgIH1cbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX2dyb3VwLXRpdGxlIHN2ZWx0ZS1yZDBtMmxcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtX19ncm91cCBzdmVsdGUtcmQwbTJsXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2MiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYyLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKGRpcnR5ICYgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIDEpIHtcbiAgICAgICAgZWFjaF92YWx1ZSA9IC8qYXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgICAgIGN0eDJbMF0ucGxhbnM7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHQkMihjdHgyLCBlYWNoX3ZhbHVlLCBpKTtcbiAgICAgICAgICBpZiAoZWFjaF9ibG9ja3NbaV0pIHtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQyKGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICBmb3IgKGkgPSBlYWNoX3ZhbHVlLmxlbmd0aDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgZWFjaF9ibG9ja3MgPSBlYWNoX2Jsb2Nrcy5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Mik7XG4gICAgICBkZXN0cm95X2VhY2goZWFjaF9ibG9ja3MsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2skMihjdHgpIHtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiUGxhblwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKnBsYW4qL1xuICAgICAgICBjdHhbNF0uaWRcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qcGxhbiovXG4gICAgICAgIGN0eDJbNF0uaWQ7XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAuJHNldChjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudCQ2KGN0eCkge1xuICBsZXQgZGl2MjtcbiAgbGV0IGRpdjA7XG4gIGxldCBidXR0b247XG4gIGxldCBzcGFuMDtcbiAgbGV0IGxvY2tpY29uO1xuICBsZXQgdDA7XG4gIGxldCB0MV92YWx1ZSA9IChcbiAgICAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgIGN0eFswXS5uYW1lICsgXCJcIlxuICApO1xuICBsZXQgdDE7XG4gIGxldCB0MjtcbiAgbGV0IHNwYW4xO1xuICBsZXQgYXJyb3dpY29uO1xuICBsZXQgdDM7XG4gIGxldCBkaXYxO1xuICBsZXQgZGl2Ml9pZF92YWx1ZTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgbG9ja2ljb24gPSBuZXcgTG9ja0ljb24oe30pO1xuICBhcnJvd2ljb24gPSBuZXcgQXJyb3dJY29uKHtcbiAgICBwcm9wczoge1xuICAgICAgc3R5bGU6IFwidHJhbnNmb3JtOiByb3RhdGUoXCIgKyAvKm9wZW5BcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIChjdHhbMV0gPyBcIjE4MGRlZ1wiIDogXCIwZGVnXCIpICsgXCIpXCJcbiAgICB9XG4gIH0pO1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLypvcGVuQXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgY3R4WzFdICYmIGNyZWF0ZV9pZl9ibG9jayQ1KGN0eClcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbiA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuMCA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChsb2NraWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICB0MSA9IHRleHQodDFfdmFsdWUpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgc3BhbjEgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYXJyb3dpY29uLiQkLmZyYWdtZW50KTtcbiAgICAgIHQzID0gc3BhY2UoKTtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBhdHRyKHNwYW4wLCBcImNsYXNzXCIsIFwibXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9faWNvbiBzdmVsdGUtcmQwbTJsXCIpO1xuICAgICAgYXR0cihzcGFuMSwgXCJjbGFzc1wiLCBcIm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX2Fycm93IHN2ZWx0ZS1yZDBtMmxcIik7XG4gICAgICBhdHRyKGJ1dHRvbiwgXCJjbGFzc1wiLCBcIm1zLWFwcC1nYXRlZC1jb250ZW50LWl0ZW1fX3RhYiBzdmVsdGUtcmQwbTJsXCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiZGF0YS1jeVwiLCBcImFwcC1nYXRlZC1jb250ZW50LWl0ZW0tYnV0dG9uXCIpO1xuICAgICAgYXR0cihkaXYwLCBcImNsYXNzXCIsIFwibXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9fdGFicyBzdmVsdGUtcmQwbTJsXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtYXBwLWdhdGVkLWNvbnRlbnQtaXRlbV9fY29udGVudCBzdmVsdGUtcmQwbTJsXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImRhdGEtY3lcIiwgXCJhcHAtZ2F0ZWQtY29udGVudC1pdGVtLWNvbnRlbnRcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1hcHAtZ2F0ZWQtY29udGVudC1pdGVtIHN2ZWx0ZS1yZDBtMmxcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiaWRcIiwgZGl2Ml9pZF92YWx1ZSA9IC8qYXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgICBjdHhbMF0ua2V5KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjIsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MCk7XG4gICAgICBhcHBlbmQoZGl2MCwgYnV0dG9uKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4wKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChsb2NraWNvbiwgc3BhbjAsIG51bGwpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDEpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgdDIpO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3BhbjEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGFycm93aWNvbiwgc3BhbjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjIsIHQzKTtcbiAgICAgIGFwcGVuZChkaXYyLCBkaXYxKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2subShkaXYxLCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAvKmNsaWNrX2hhbmRsZXIqL1xuICAgICAgICAgIGN0eFszXVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgW2RpcnR5XSkge1xuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qYXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgICAxKSAmJiB0MV92YWx1ZSAhPT0gKHQxX3ZhbHVlID0gLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIGN0eDJbMF0ubmFtZSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MSwgdDFfdmFsdWUpO1xuICAgICAgY29uc3QgYXJyb3dpY29uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qb3BlbkFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgMilcbiAgICAgICAgYXJyb3dpY29uX2NoYW5nZXMuc3R5bGUgPSBcInRyYW5zZm9ybTogcm90YXRlKFwiICsgLypvcGVuQXBwR2F0ZWRDb250ZW50SXRlbSovXG4gICAgICAgIChjdHgyWzFdID8gXCIxODBkZWdcIiA6IFwiMGRlZ1wiKSArIFwiKVwiO1xuICAgICAgYXJyb3dpY29uLiRzZXQoYXJyb3dpY29uX2NoYW5nZXMpO1xuICAgICAgaWYgKFxuICAgICAgICAvKm9wZW5BcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgICAgY3R4MlsxXVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qb3BlbkFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgICAgIDIpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGNyZWF0ZV9pZl9ibG9jayQ1KGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGRpdjEsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyphcHBHYXRlZENvbnRlbnRJdGVtKi9cbiAgICAgIDEgJiYgZGl2Ml9pZF92YWx1ZSAhPT0gKGRpdjJfaWRfdmFsdWUgPSAvKmFwcEdhdGVkQ29udGVudEl0ZW0qL1xuICAgICAgY3R4MlswXS5rZXkpKSB7XG4gICAgICAgIGF0dHIoZGl2MiwgXCJpZFwiLCBkaXYyX2lkX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGxvY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGFycm93aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGxvY2tpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChhcnJvd2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Mik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChsb2NraWNvbik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChhcnJvd2ljb24pO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5kKCk7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBkaXNwb3NlKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5zdGFuY2UkNSgkJHNlbGYsICQkcHJvcHMsICQkaW52YWxpZGF0ZSkge1xuICBsZXQgeyBhcHBHYXRlZENvbnRlbnRJdGVtIH0gPSAkJHByb3BzO1xuICBsZXQgb3BlbkFwcEdhdGVkQ29udGVudEl0ZW0gPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2hvd0FwcEdhdGVkQ29udGVudEl0ZW1Db250ZW50KCkge1xuICAgICQkaW52YWxpZGF0ZSgxLCBvcGVuQXBwR2F0ZWRDb250ZW50SXRlbSA9ICFvcGVuQXBwR2F0ZWRDb250ZW50SXRlbSk7XG4gIH1cbiAgY29uc3QgY2xpY2tfaGFuZGxlciA9ICgpID0+IHNob3dBcHBHYXRlZENvbnRlbnRJdGVtQ29udGVudCgpO1xuICAkJHNlbGYuJCRzZXQgPSAoJCRwcm9wczIpID0+IHtcbiAgICBpZiAoXCJhcHBHYXRlZENvbnRlbnRJdGVtXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgYXBwR2F0ZWRDb250ZW50SXRlbSA9ICQkcHJvcHMyLmFwcEdhdGVkQ29udGVudEl0ZW0pO1xuICB9O1xuICByZXR1cm4gW1xuICAgIGFwcEdhdGVkQ29udGVudEl0ZW0sXG4gICAgb3BlbkFwcEdhdGVkQ29udGVudEl0ZW0sXG4gICAgc2hvd0FwcEdhdGVkQ29udGVudEl0ZW1Db250ZW50LFxuICAgIGNsaWNrX2hhbmRsZXJcbiAgXTtcbn1cbnZhciBBcHBHYXRlZENvbnRlbnRJdGVtID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJDUsIGNyZWF0ZV9mcmFnbWVudCQ2LCBzYWZlX25vdF9lcXVhbCwgeyBhcHBHYXRlZENvbnRlbnRJdGVtOiAwIH0sIGFkZF9jc3MkNCk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkNShjdHgpIHtcbiAgbGV0IHN2ZztcbiAgbGV0IHBhdGg7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIHN2ZyA9IHN2Z19lbGVtZW50KFwic3ZnXCIpO1xuICAgICAgcGF0aCA9IHN2Z19lbGVtZW50KFwicGF0aFwiKTtcbiAgICAgIGF0dHIocGF0aCwgXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuICAgICAgYXR0cihwYXRoLCBcImRcIiwgXCJNNSAxM2gxNHYtMkg1djJ6bS0yIDRoMTR2LTJIM3Yyek03IDd2MmgxNFY3SDd6XCIpO1xuICAgICAgYXR0cihzdmcsIFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgYXR0cihzdmcsIFwidmlld0JveFwiLCBcIjMgNyAxOCAxMFwiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIHN2ZywgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChzdmcsIHBhdGgpO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpOiBub29wLFxuICAgIG86IG5vb3AsXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChzdmcpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBGaWVsZHNJY29uID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIG51bGwsIGNyZWF0ZV9mcmFnbWVudCQ1LCBzYWZlX25vdF9lcXVhbCwge30pO1xuICB9XG59O1xuZnVuY3Rpb24gYWRkX2NzcyQzKHRhcmdldCkge1xuICBhcHBlbmRfc3R5bGVzKHRhcmdldCwgXCJzdmVsdGUtazNodTg0XCIsIFwiLm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW0uc3ZlbHRlLWszaHU4NHt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6IzQ0NDtib3JkZXI6MXB4IHNvbGlkICM1YzVjNWM7Ym9yZGVyLXJhZGl1czo0cHg7ZmxleC13cmFwOndyYXA7bWFyZ2luLWJvdHRvbTowLjVlbTtkaXNwbGF5OmZsZXg7dHJhbnNpdGlvbjpoZWlnaHQgMC4ycyBlYXNlLWluLW91dDtvdmVyZmxvdzpoaWRkZW59Lm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW1fX3RhYnMuc3ZlbHRlLWszaHU4NHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6c3RyZXRjaDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDoxMDAlfS5tcy1hcHAtY3VzdG9tLWZpZWxkcy1pdGVtX190YWIuc3ZlbHRlLWszaHU4NHtnYXA6NnB4O3BhZGRpbmc6NHB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dDt3aWR0aDoxMDAlO2xpbmUtaGVpZ2h0OjF9Lm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW1fX2ljb24uc3ZlbHRlLWszaHU4NHt3aWR0aDoyMnB4O2hlaWdodDoyMnB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiMyOTI5Mjk7Ym9yZGVyLXJhZGl1czozcHg7Y29sb3I6I2ZmZjtwYWRkaW5nOjJweH0ubXMtYXBwLWN1c3RvbS1maWVsZHMtaXRlbV9faWNvbiBzdmd7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0ubXMtYXBwLWN1c3RvbS1maWVsZHMtaXRlbV9fYXJyb3cuc3ZlbHRlLWszaHU4NHttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDo4cHg7d2lkdGg6OHB4O3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXR9Lm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW1fX2NvbnRlbnQuc3ZlbHRlLWszaHU4NHt3aWR0aDoxMDAlfS5tcy1hcHAtY3VzdG9tLWZpZWxkcy1pdGVtX193cmFwcGVyLnN2ZWx0ZS1rM2h1ODR7YmFja2dyb3VuZC1jb2xvcjojMjkyOTI5O3dpZHRoOjEwMCU7cGFkZGluZzo4cHh9XCIpO1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJDQoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgdDI7XG4gIGxldCBkaXZfdHJhbnNpdGlvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBpZl9ibG9jazAgPSAoXG4gICAgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgIGN0eFswXS5rZXkgJiYgY3JlYXRlX2lmX2Jsb2NrXzQkMShjdHgpXG4gICk7XG4gIGxldCBpZl9ibG9jazEgPSAoXG4gICAgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgIChjdHhbMF0ub3JkZXIgfHwgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgIGN0eFswXS5vcmRlciA9PT0gMCkgJiYgY3JlYXRlX2lmX2Jsb2NrXzMkMihjdHgpXG4gICk7XG4gIGxldCBpZl9ibG9jazIgPSAoXG4gICAgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgIGN0eFswXS5oaWRkZW4gJiYgY3JlYXRlX2lmX2Jsb2NrXzIkMyhjdHgpXG4gICk7XG4gIGxldCBpZl9ibG9jazMgPSAoXG4gICAgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgIGN0eFswXS52aXNpYmlsaXR5ICYmIGNyZWF0ZV9pZl9ibG9ja18xJDMoY3R4KVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmMoKTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuYygpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLmMoKTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtYXBwLWN1c3RvbS1maWVsZHMtaXRlbV9fd3JhcHBlciBzdmVsdGUtazNodTg0XCIpO1xuICAgICAgYXR0cihkaXYsIFwiZGF0YS1jeVwiLCBcImFwcC1jdXN0b20tZmllbGRzLWl0ZW0tY29udGVudC13cmFwcGVyXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLm0oZGl2LCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYsIHQwKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5tKGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MSk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIubShkaXYsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdiwgdDIpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLm0oZGl2LCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgaWYgKFxuICAgICAgICAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgIGN0eDJbMF0ua2V5XG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMC5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBjcmVhdGVfaWZfYmxvY2tfNCQxKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKGRpdiwgdDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2swID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgIGN0eDJbMF0ub3JkZXIgfHwgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgICBjdHgyWzBdLm9yZGVyID09PSAwXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICAgIGlmX2Jsb2NrMS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazEgPSBjcmVhdGVfaWZfYmxvY2tfMyQyKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazEsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMS5tKGRpdiwgdDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMSkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2sxLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgIGN0eDJbMF0uaGlkZGVuXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICAgIGlmX2Jsb2NrMi5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazIgPSBjcmVhdGVfaWZfYmxvY2tfMiQzKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazIsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMi5tKGRpdiwgdDIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMikge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2syLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2syID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgIGN0eDJbMF0udmlzaWJpbGl0eVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazMpIHtcbiAgICAgICAgICBpZl9ibG9jazMucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2szID0gY3JlYXRlX2lmX2Jsb2NrXzEkMyhjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazMuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazMubShkaXYsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMykge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2szLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2szID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szKTtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgaWYgKCFkaXZfdHJhbnNpdGlvbilcbiAgICAgICAgICAgIGRpdl90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYsIHNsaWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgdHJ1ZSk7XG4gICAgICAgICAgZGl2X3RyYW5zaXRpb24ucnVuKDEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSk7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazIpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2szKTtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBpZiAoIWRpdl90cmFuc2l0aW9uKVxuICAgICAgICAgIGRpdl90cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYsIHNsaWRlLCB7IGR1cmF0aW9uOiAzMDAgfSwgZmFsc2UpO1xuICAgICAgICBkaXZfdHJhbnNpdGlvbi5ydW4oMCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuZCgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmQoKTtcbiAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgIGlmX2Jsb2NrMi5kKCk7XG4gICAgICBpZiAoaWZfYmxvY2szKVxuICAgICAgICBpZl9ibG9jazMuZCgpO1xuICAgICAgaWYgKGRldGFjaGluZyAmJiBkaXZfdHJhbnNpdGlvbilcbiAgICAgICAgZGl2X3RyYW5zaXRpb24uZW5kKCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzQkMShjdHgpIHtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiS2V5XCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qYXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgICAgY3R4WzBdLmtleS50b1N0cmluZygpXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qYXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgICAgY3R4MlswXS5rZXkudG9TdHJpbmcoKTtcbiAgICAgIGNvcHlidXR0b25ncm91cC4kc2V0KGNvcHlidXR0b25ncm91cF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzMkMihjdHgpIHtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiT3JkZXJcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgICBjdHhbMF0ub3JkZXIudG9TdHJpbmcoKVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qYXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cF9jaGFuZ2VzLmJ1dHRvblRleHQgPSAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgIGN0eDJbMF0ub3JkZXIudG9TdHJpbmcoKTtcbiAgICAgIGNvcHlidXR0b25ncm91cC4kc2V0KGNvcHlidXR0b25ncm91cF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkMyhjdHgpIHtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiSGlkZGVuXCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qYXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgICAgY3R4WzBdLmhpZGRlbi50b1N0cmluZygpXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgMSlcbiAgICAgICAgY29weWJ1dHRvbmdyb3VwX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qYXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgICAgY3R4MlswXS5oaWRkZW4udG9TdHJpbmcoKTtcbiAgICAgIGNvcHlidXR0b25ncm91cC4kc2V0KGNvcHlidXR0b25ncm91cF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzEkMyhjdHgpIHtcbiAgbGV0IGNvcHlidXR0b25ncm91cDtcbiAgbGV0IGN1cnJlbnQ7XG4gIGNvcHlidXR0b25ncm91cCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiVmlzaWJpbGl0eVwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgIGN0eFswXS52aXNpYmlsaXR5LnRvU3RyaW5nKClcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGNvcHlidXR0b25ncm91cF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXBfY2hhbmdlcy5idXR0b25UZXh0ID0gLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgICBjdHgyWzBdLnZpc2liaWxpdHkudG9TdHJpbmcoKTtcbiAgICAgIGNvcHlidXR0b25ncm91cC4kc2V0KGNvcHlidXR0b25ncm91cF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChjb3B5YnV0dG9uZ3JvdXAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50JDQoY3R4KSB7XG4gIGxldCBkaXYyO1xuICBsZXQgZGl2MDtcbiAgbGV0IGJ1dHRvbjtcbiAgbGV0IHNwYW4wO1xuICBsZXQgZmllbGRzaWNvbjtcbiAgbGV0IHQwO1xuICBsZXQgdDFfdmFsdWUgPSAoXG4gICAgLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgIGN0eFswXS5sYWJlbCArIFwiXCJcbiAgKTtcbiAgbGV0IHQxO1xuICBsZXQgdDI7XG4gIGxldCBzcGFuMTtcbiAgbGV0IGFycm93aWNvbjtcbiAgbGV0IHQzO1xuICBsZXQgZGl2MTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgZmllbGRzaWNvbiA9IG5ldyBGaWVsZHNJY29uKHt9KTtcbiAgYXJyb3dpY29uID0gbmV3IEFycm93SWNvbih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHN0eWxlOiBcInRyYW5zZm9ybTogcm90YXRlKFwiICsgLypvcGVuQXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgIChjdHhbMV0gPyBcIjE4MGRlZ1wiIDogXCIwZGVnXCIpICsgXCIpXCJcbiAgICB9XG4gIH0pO1xuICBsZXQgaWZfYmxvY2sgPSAoXG4gICAgLypvcGVuQXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICBjdHhbMV0gJiYgY3JlYXRlX2lmX2Jsb2NrJDQoY3R4KVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYyID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgYnV0dG9uID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIHNwYW4wID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGZpZWxkc2ljb24uJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgdDEgPSB0ZXh0KHQxX3ZhbHVlKTtcbiAgICAgIHQyID0gc3BhY2UoKTtcbiAgICAgIHNwYW4xID0gZWxlbWVudChcInNwYW5cIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGFycm93aWNvbi4kJC5mcmFnbWVudCk7XG4gICAgICB0MyA9IHNwYWNlKCk7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgYXR0cihzcGFuMCwgXCJjbGFzc1wiLCBcIm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW1fX2ljb24gc3ZlbHRlLWszaHU4NFwiKTtcbiAgICAgIGF0dHIoc3BhbjEsIFwiY2xhc3NcIiwgXCJtcy1hcHAtY3VzdG9tLWZpZWxkcy1pdGVtX19hcnJvdyBzdmVsdGUtazNodTg0XCIpO1xuICAgICAgYXR0cihidXR0b24sIFwiY2xhc3NcIiwgXCJtcy1hcHAtY3VzdG9tLWZpZWxkcy1pdGVtX190YWIgc3ZlbHRlLWszaHU4NFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uLCBcImRhdGEtY3lcIiwgXCJhcHAtY3VzdG9tLWZpZWxkcy1pdGVtLWJ1dHRvblwiKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW1fX3RhYnMgc3ZlbHRlLWszaHU4NFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLWFwcC1jdXN0b20tZmllbGRzLWl0ZW1fX2NvbnRlbnQgc3ZlbHRlLWszaHU4NFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJkYXRhLWN5XCIsIFwiYXBwLWN1c3RvbS1maWVsZHMtaXRlbS1jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXYyLCBcImNsYXNzXCIsIFwibXMtYXBwLWN1c3RvbS1maWVsZHMtaXRlbSBzdmVsdGUtazNodTg0XCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2MiwgYW5jaG9yKTtcbiAgICAgIGFwcGVuZChkaXYyLCBkaXYwKTtcbiAgICAgIGFwcGVuZChkaXYwLCBidXR0b24pO1xuICAgICAgYXBwZW5kKGJ1dHRvbiwgc3BhbjApO1xuICAgICAgbW91bnRfY29tcG9uZW50KGZpZWxkc2ljb24sIHNwYW4wLCBudWxsKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQwKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQxKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHQyKTtcbiAgICAgIGFwcGVuZChidXR0b24sIHNwYW4xKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChhcnJvd2ljb24sIHNwYW4xLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYyLCB0Myk7XG4gICAgICBhcHBlbmQoZGl2MiwgZGl2MSk7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLm0oZGl2MSwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICAgIGlmICghbW91bnRlZCkge1xuICAgICAgICBkaXNwb3NlID0gbGlzdGVuKFxuICAgICAgICAgIGJ1dHRvbixcbiAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICBjdHhbM11cbiAgICAgICAgKTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKmFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAxKSAmJiB0MV92YWx1ZSAhPT0gKHQxX3ZhbHVlID0gLyphcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgY3R4MlswXS5sYWJlbCArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MSwgdDFfdmFsdWUpO1xuICAgICAgY29uc3QgYXJyb3dpY29uX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qb3BlbkFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAyKVxuICAgICAgICBhcnJvd2ljb25fY2hhbmdlcy5zdHlsZSA9IFwidHJhbnNmb3JtOiByb3RhdGUoXCIgKyAvKm9wZW5BcHBDdXN0b21GaWVsZEl0ZW0qL1xuICAgICAgICAoY3R4MlsxXSA/IFwiMTgwZGVnXCIgOiBcIjBkZWdcIikgKyBcIilcIjtcbiAgICAgIGFycm93aWNvbi4kc2V0KGFycm93aWNvbl9jaGFuZ2VzKTtcbiAgICAgIGlmIChcbiAgICAgICAgLypvcGVuQXBwQ3VzdG9tRmllbGRJdGVtKi9cbiAgICAgICAgY3R4MlsxXVxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qb3BlbkFwcEN1c3RvbUZpZWxkSXRlbSovXG4gICAgICAgICAgMikge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gY3JlYXRlX2lmX2Jsb2NrJDQoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihmaWVsZHNpY29uLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGFycm93aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGZpZWxkc2ljb24uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGFycm93aWNvbi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChkaXYyKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGZpZWxkc2ljb24pO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYXJyb3dpY29uKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suZCgpO1xuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJDQoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0IHsgYXBwQ3VzdG9tRmllbGRJdGVtIH0gPSAkJHByb3BzO1xuICBsZXQgb3BlbkFwcEN1c3RvbUZpZWxkSXRlbSA9IGZhbHNlO1xuICBmdW5jdGlvbiBzaG93QXBwQ3VzdG9tRmllbGRJdGVtQ29udGVudCgpIHtcbiAgICAkJGludmFsaWRhdGUoMSwgb3BlbkFwcEN1c3RvbUZpZWxkSXRlbSA9ICFvcGVuQXBwQ3VzdG9tRmllbGRJdGVtKTtcbiAgfVxuICBjb25zdCBjbGlja19oYW5kbGVyID0gKCkgPT4gc2hvd0FwcEN1c3RvbUZpZWxkSXRlbUNvbnRlbnQoKTtcbiAgJCRzZWxmLiQkc2V0ID0gKCQkcHJvcHMyKSA9PiB7XG4gICAgaWYgKFwiYXBwQ3VzdG9tRmllbGRJdGVtXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMCwgYXBwQ3VzdG9tRmllbGRJdGVtID0gJCRwcm9wczIuYXBwQ3VzdG9tRmllbGRJdGVtKTtcbiAgfTtcbiAgcmV0dXJuIFtcbiAgICBhcHBDdXN0b21GaWVsZEl0ZW0sXG4gICAgb3BlbkFwcEN1c3RvbUZpZWxkSXRlbSxcbiAgICBzaG93QXBwQ3VzdG9tRmllbGRJdGVtQ29udGVudCxcbiAgICBjbGlja19oYW5kbGVyXG4gIF07XG59XG52YXIgQXBwQ3VzdG9tRmllbGRJdGVtID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJDQsIGNyZWF0ZV9mcmFnbWVudCQ0LCBzYWZlX25vdF9lcXVhbCwgeyBhcHBDdXN0b21GaWVsZEl0ZW06IDAgfSwgYWRkX2NzcyQzKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3MkMih0YXJnZXQpIHtcbiAgYXBwZW5kX3N0eWxlcyh0YXJnZXQsIFwic3ZlbHRlLTF5aGhyaGVcIiwgXCIubXMtYXBwLXRhYl9faGVhZGVyLnN2ZWx0ZS0xeWhocmhlLnN2ZWx0ZS0xeWhocmhle21hcmdpbi1ib3R0b206MTJweDtkaXNwbGF5OmZsZXh9Lm1zLWFwcC10YWJfaGVhZGVyX2xpbmsuc3ZlbHRlLTF5aGhyaGUuc3ZlbHRlLTF5aGhyaGV7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtjb2xvcjojYmViZWJlO3RleHQtZGVjb3JhdGlvbjpub25lfS5tcy1hcHAtdGFiX2hlYWRlcl9saW5rLnN2ZWx0ZS0xeWhocmhlLnN2ZWx0ZS0xeWhocmhlOmhvdmVye2NvbG9yOiNmZmZ9Lm1zLWFwcC10YWJfX2hlYWRlcl9faW5kaWNhdG9yLnN2ZWx0ZS0xeWhocmhlLnN2ZWx0ZS0xeWhocmhle3dpZHRoOjRweDtoZWlnaHQ6MTAwJTtib3JkZXItcmFkaXVzOjJweDttYXJnaW4tcmlnaHQ6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNlZmQzNTB9Lm1zLWFwcC10YWJfX2hlYWRlcl9fdGV4dC5zdmVsdGUtMXloaHJoZS5zdmVsdGUtMXloaHJoZXtmb250LXNpemU6MTBweDtsaW5lLWhlaWdodDoxNHB4fS5tcy1hcHAtdGFiX19oZWFkZXJfX3RleHQuc3ZlbHRlLTF5aGhyaGUgc3Bhbi5zdmVsdGUtMXloaHJoZXt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2NvbG9yOiNmZmZ9Lm1zLWFwcC10YWJfX3NlY3Rpb24uc3ZlbHRlLTF5aGhyaGUuc3ZlbHRlLTF5aGhyaGV7cGFkZGluZy1ib3R0b206NnB4O21hcmdpbi1ib3R0b206MTJweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjNTM1MzUzfS5tcy1hcHAtdGFiX19zZWN0aW9uLnN2ZWx0ZS0xeWhocmhlLnN2ZWx0ZS0xeWhocmhlOmxhc3QtY2hpbGR7Ym9yZGVyLWJvdHRvbTpub25lO21hcmdpbi1ib3R0b206MH0ubXMtY29kZS1ibG9jay5zdmVsdGUtMXloaHJoZS5zdmVsdGUtMXloaHJoZXtiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7Y29sb3I6I2ZmZjtwYWRkaW5nOjRweCA4cHg7Ym9yZGVyLXJhZGl1czo0cHg7b3ZlcmZsb3c6YXV0bztib3JkZXI6MXB4IHNvbGlkICM0YjRiNGI7Zm9udC1zaXplOjEwcHg7bWF4LWhlaWdodDo0MjBweH0ubXMtY29kZS1ibG9jay0tc2hvcnQuc3ZlbHRlLTF5aGhyaGUuc3ZlbHRlLTF5aGhyaGV7bWF4LWhlaWdodDoxNzVweH1cIik7XG59XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0JDEoY3R4LCBsaXN0LCBpKSB7XG4gIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICBjaGlsZF9jdHhbMV0gPSBsaXN0W2ldO1xuICByZXR1cm4gY2hpbGRfY3R4O1xufVxuZnVuY3Rpb24gZ2V0X2VhY2hfY29udGV4dF8xKGN0eCwgbGlzdCwgaSkge1xuICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgY2hpbGRfY3R4WzRdID0gbGlzdFtpXTtcbiAgcmV0dXJuIGNoaWxkX2N0eDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18zJDEoY3R4KSB7XG4gIGxldCBkaXY7XG4gIGxldCBzZWN0aW9uaGVhZGVyO1xuICBsZXQgdDA7XG4gIGxldCB0MTtcbiAgbGV0IGJ1dHRvbmxpbms7XG4gIGxldCBjdXJyZW50O1xuICBzZWN0aW9uaGVhZGVyID0gbmV3IFNlY3Rpb25IZWFkZXIoe1xuICAgIHByb3BzOiB7XG4gICAgICB0aXRsZVRleHQ6IFwiQ3VzdG9tIEZpZWxkc1wiLFxuICAgICAgZWRpdFVSTDogYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgY3R4WzBdLmFwcERhdGEuaWR9L21lbWJlcnNgXG4gICAgfVxuICB9KTtcbiAgbGV0IGVhY2hfdmFsdWVfMSA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLmFwcERhdGEuY3VzdG9tRmllbGRzXG4gICk7XG4gIGxldCBlYWNoX2Jsb2NrcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWVfMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gY3JlYXRlX2VhY2hfYmxvY2tfMShnZXRfZWFjaF9jb250ZXh0XzEoY3R4LCBlYWNoX3ZhbHVlXzEsIGkpKTtcbiAgfVxuICBjb25zdCBvdXQgPSAoaSkgPT4gdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sIDEsIDEsICgpID0+IHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IG51bGw7XG4gIH0pO1xuICBidXR0b25saW5rID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzM4OTUwMjU3OTM1NVwiLFxuICAgICAgdGV4dDogXCJEb2N1bWVudGF0aW9uXCJcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZWFjaF9ibG9ja3NbaV0uYygpO1xuICAgICAgfVxuICAgICAgdDEgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChidXR0b25saW5rLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIoZGl2LCBcImNsYXNzXCIsIFwibXMtYXBwLXRhYl9fc2VjdGlvbiBzdmVsdGUtMXloaHJoZVwiKTtcbiAgICAgIGF0dHIoZGl2LCBcImRhdGEtY3lcIiwgXCJhcHAtc2VjdGlvbi1jdXN0b20tZmllbGRzXCIpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2LCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIsIGRpdiwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2LCB0MCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2LCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwZW5kKGRpdiwgdDEpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJ1dHRvbmxpbmssIGRpdiwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHNlY3Rpb25oZWFkZXJfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgc2VjdGlvbmhlYWRlcl9jaGFuZ2VzLmVkaXRVUkwgPSBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5pZH0vbWVtYmVyc2A7XG4gICAgICBzZWN0aW9uaGVhZGVyLiRzZXQoc2VjdGlvbmhlYWRlcl9jaGFuZ2VzKTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgZWFjaF92YWx1ZV8xID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEuY3VzdG9tRmllbGRzO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVhY2hfdmFsdWVfMS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9lYWNoX2NvbnRleHRfMShjdHgyLCBlYWNoX3ZhbHVlXzEsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrXzEoY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXYsIHQxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIGZvciAoaSA9IGVhY2hfdmFsdWVfMS5sZW5ndGg7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIG91dChpKTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF92YWx1ZV8xLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgdHJhbnNpdGlvbl9pbihidXR0b25saW5rLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGVhY2hfYmxvY2tzID0gZWFjaF9ibG9ja3MuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICB0cmFuc2l0aW9uX291dChidXR0b25saW5rLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN0aW9uaGVhZGVyKTtcbiAgICAgIGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcywgZGV0YWNoaW5nKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGJ1dHRvbmxpbmspO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9lYWNoX2Jsb2NrXzEoY3R4KSB7XG4gIGxldCBhcHBjdXN0b21maWVsZGl0ZW07XG4gIGxldCBjdXJyZW50O1xuICBhcHBjdXN0b21maWVsZGl0ZW0gPSBuZXcgQXBwQ3VzdG9tRmllbGRJdGVtKHtcbiAgICBwcm9wczoge1xuICAgICAgYXBwQ3VzdG9tRmllbGRJdGVtOiAoXG4gICAgICAgIC8qY3VzdG9tRmllbGQqL1xuICAgICAgICBjdHhbNF1cbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGFwcGN1c3RvbWZpZWxkaXRlbS4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQoYXBwY3VzdG9tZmllbGRpdGVtLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGFwcGN1c3RvbWZpZWxkaXRlbV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBhcHBjdXN0b21maWVsZGl0ZW1fY2hhbmdlcy5hcHBDdXN0b21GaWVsZEl0ZW0gPSAvKmN1c3RvbUZpZWxkKi9cbiAgICAgICAgY3R4Mls0XTtcbiAgICAgIGFwcGN1c3RvbWZpZWxkaXRlbS4kc2V0KGFwcGN1c3RvbWZpZWxkaXRlbV9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGFwcGN1c3RvbWZpZWxkaXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChhcHBjdXN0b21maWVsZGl0ZW0uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChhcHBjdXN0b21maWVsZGl0ZW0sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIkMihjdHgpIHtcbiAgbGV0IGRpdjtcbiAgbGV0IHNlY3Rpb25oZWFkZXI7XG4gIGxldCB0MDtcbiAgbGV0IHQxO1xuICBsZXQgYnV0dG9ubGluaztcbiAgbGV0IGN1cnJlbnQ7XG4gIHNlY3Rpb25oZWFkZXIgPSBuZXcgU2VjdGlvbkhlYWRlcih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHRpdGxlVGV4dDogXCJHYXRlZCBDb250ZW50XCIsXG4gICAgICBlZGl0VVJMOiBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0uYXBwRGF0YS5pZH0vZ2F0ZWQtY29udGVudGBcbiAgICB9XG4gIH0pO1xuICBsZXQgZWFjaF92YWx1ZSA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLmFwcERhdGEuY29udGVudEdyb3Vwc1xuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayQxKGdldF9lYWNoX2NvbnRleHQkMShjdHgsIGVhY2hfdmFsdWUsIGkpKTtcbiAgfVxuICBjb25zdCBvdXQgPSAoaSkgPT4gdHJhbnNpdGlvbl9vdXQoZWFjaF9ibG9ja3NbaV0sIDEsIDEsICgpID0+IHtcbiAgICBlYWNoX2Jsb2Nrc1tpXSA9IG51bGw7XG4gIH0pO1xuICBidXR0b25saW5rID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvNzQwMjkyNzg2ODQ0My1HYXRlZC1Db250ZW50XCIsXG4gICAgICB0ZXh0OiBcIkRvY3VtZW50YXRpb25cIlxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQpO1xuICAgICAgdDAgPSBzcGFjZSgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQpO1xuICAgICAgYXR0cihkaXYsIFwiY2xhc3NcIiwgXCJtcy1hcHAtdGFiX19zZWN0aW9uIHN2ZWx0ZS0xeWhocmhlXCIpO1xuICAgICAgYXR0cihkaXYsIFwiZGF0YS1jeVwiLCBcImFwcC1zZWN0aW9uLWdhdGVkLWNvbnRlbnRcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoc2VjdGlvbmhlYWRlciwgZGl2LCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYsIHQwKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXYsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBlbmQoZGl2LCB0MSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluaywgZGl2LCBudWxsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3Qgc2VjdGlvbmhlYWRlcl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBzZWN0aW9uaGVhZGVyX2NoYW5nZXMuZWRpdFVSTCA9IGBodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vYXBwcy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmlkfS9nYXRlZC1jb250ZW50YDtcbiAgICAgIHNlY3Rpb25oZWFkZXIuJHNldChzZWN0aW9uaGVhZGVyX2NoYW5nZXMpO1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSkge1xuICAgICAgICBlYWNoX3ZhbHVlID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEuY29udGVudEdyb3VwcztcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2VhY2hfY29udGV4dCQxKGN0eDIsIGVhY2hfdmFsdWUsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrJDEoY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXYsIHQxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIGZvciAoaSA9IGVhY2hfdmFsdWUubGVuZ3RoOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBvdXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICB0cmFuc2l0aW9uX2luKGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgZWFjaF9ibG9ja3MgPSBlYWNoX2Jsb2Nrcy5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGVhY2hfYmxvY2tzW2ldKTtcbiAgICAgIH1cbiAgICAgIHRyYW5zaXRpb25fb3V0KGJ1dHRvbmxpbmsuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2KTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIpO1xuICAgICAgZGVzdHJveV9lYWNoKGVhY2hfYmxvY2tzLCBkZXRhY2hpbmcpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluayk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2VhY2hfYmxvY2skMShjdHgpIHtcbiAgbGV0IGFwcGdhdGVkY29udGVudGl0ZW07XG4gIGxldCBjdXJyZW50O1xuICBhcHBnYXRlZGNvbnRlbnRpdGVtID0gbmV3IEFwcEdhdGVkQ29udGVudEl0ZW0oe1xuICAgIHByb3BzOiB7XG4gICAgICBhcHBHYXRlZENvbnRlbnRJdGVtOiAoXG4gICAgICAgIC8qY29udGVudEdyb3VwKi9cbiAgICAgICAgY3R4WzFdXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChhcHBnYXRlZGNvbnRlbnRpdGVtLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChhcHBnYXRlZGNvbnRlbnRpdGVtLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGFwcGdhdGVkY29udGVudGl0ZW1fY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgYXBwZ2F0ZWRjb250ZW50aXRlbV9jaGFuZ2VzLmFwcEdhdGVkQ29udGVudEl0ZW0gPSAvKmNvbnRlbnRHcm91cCovXG4gICAgICAgIGN0eDJbMV07XG4gICAgICBhcHBnYXRlZGNvbnRlbnRpdGVtLiRzZXQoYXBwZ2F0ZWRjb250ZW50aXRlbV9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGFwcGdhdGVkY29udGVudGl0ZW0uJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYXBwZ2F0ZWRjb250ZW50aXRlbS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGFwcGdhdGVkY29udGVudGl0ZW0sIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzEkMihjdHgpIHtcbiAgbGV0IGRpdjE7XG4gIGxldCBzZWN0aW9uaGVhZGVyO1xuICBsZXQgdDA7XG4gIGxldCBkaXYwO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMDtcbiAgbGV0IHQxO1xuICBsZXQgY29weWJ1dHRvbmdyb3VwMTtcbiAgbGV0IGN1cnJlbnQ7XG4gIHNlY3Rpb25oZWFkZXIgPSBuZXcgU2VjdGlvbkhlYWRlcih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHRpdGxlVGV4dDogXCJCcmFuZGluZ1wiLFxuICAgICAgZWRpdFVSTDogYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgY3R4WzBdLmFwcERhdGEuaWR9L3NldHRpbmdzL2Rlc2lnbmBcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXAwID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJDb2xvclwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5hcHBEYXRhLmJyYW5kaW5nLmNvbG9ycy5saWdodE1vZGUucHJpbWFyeUJ1dHRvblxuICAgICAgKSxcbiAgICAgIGN5cHJlc3M6IGBicmFuZGluZy1jb2xvcmBcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXAxID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJMb2dvXCIsXG4gICAgICBidXR0b25UZXh0OiAoXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4WzBdLmFwcERhdGEuYnJhbmRpbmcubG9nb1xuICAgICAgKSxcbiAgICAgIGN5cHJlc3M6IGBicmFuZGluZy1sb2dvYFxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGRpdjEgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50KTtcbiAgICAgIHQwID0gc3BhY2UoKTtcbiAgICAgIGRpdjAgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMS4kJC5mcmFnbWVudCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1hcHAtdGFiX19zZWN0aW9uX19jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXYwLCBcImRhdGEtY3lcIiwgXCJhcHAtc2VjdGlvbi1icmFuZGluZy1jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtYXBwLXRhYl9fc2VjdGlvbiBzdmVsdGUtMXloaHJoZVwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJkYXRhLWN5XCIsIFwiYXBwLXNlY3Rpb24tYnJhbmRpbmdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYxLCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIsIGRpdjEsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjEsIHQwKTtcbiAgICAgIGFwcGVuZChkaXYxLCBkaXYwKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAwLCBkaXYwLCBudWxsKTtcbiAgICAgIGFwcGVuZChkaXYwLCB0MSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMSwgZGl2MCwgbnVsbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHNlY3Rpb25oZWFkZXJfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgc2VjdGlvbmhlYWRlcl9jaGFuZ2VzLmVkaXRVUkwgPSBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5pZH0vc2V0dGluZ3MvZGVzaWduYDtcbiAgICAgIHNlY3Rpb25oZWFkZXIuJHNldChzZWN0aW9uaGVhZGVyX2NoYW5nZXMpO1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmJyYW5kaW5nLmNvbG9ycy5saWdodE1vZGUucHJpbWFyeUJ1dHRvbjtcbiAgICAgIGNvcHlidXR0b25ncm91cDAuJHNldChjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMpO1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmJyYW5kaW5nLmxvZ287XG4gICAgICBjb3B5YnV0dG9uZ3JvdXAxLiRzZXQoY29weWJ1dHRvbmdyb3VwMV9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oY29weWJ1dHRvbmdyb3VwMC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGNvcHlidXR0b25ncm91cDEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2MSk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN0aW9uaGVhZGVyKTtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDApO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrJDMoY3R4KSB7XG4gIGxldCBkaXYxO1xuICBsZXQgc2VjdGlvbmhlYWRlcjtcbiAgbGV0IHQwO1xuICBsZXQgZGl2MDtcbiAgbGV0IHByZTtcbiAgbGV0IGNvZGU7XG4gIGxldCB0MV92YWx1ZSA9IEpTT04uc3RyaW5naWZ5KFxuICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICBjdHhbMF0uYXBwRGF0YS5wbGFucyxcbiAgICBudWxsLFxuICAgIDJcbiAgKSArIFwiXCI7XG4gIGxldCB0MTtcbiAgbGV0IHQyO1xuICBsZXQgYnV0dG9ubGluaztcbiAgbGV0IGN1cnJlbnQ7XG4gIHNlY3Rpb25oZWFkZXIgPSBuZXcgU2VjdGlvbkhlYWRlcih7XG4gICAgcHJvcHM6IHtcbiAgICAgIHRpdGxlVGV4dDogXCJQbGFucyAocmF3KVwiLFxuICAgICAgZWRpdFVSTDogYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgY3R4WzBdLmFwcERhdGEuaWR9L3BsYW5zYFxuICAgIH1cbiAgfSk7XG4gIGJ1dHRvbmxpbmsgPSBuZXcgQnV0dG9uTGluayh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83Mzg0ODQ5NDQ4MDkxLUdldHRpbmctU3RhcnRlZC13aXRoLVBsYW5zLVByaWNlc1wiLFxuICAgICAgdGV4dDogXCJEb2N1bWVudGF0aW9uXCJcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoc2VjdGlvbmhlYWRlci4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIHByZSA9IGVsZW1lbnQoXCJwcmVcIik7XG4gICAgICBjb2RlID0gZWxlbWVudChcImNvZGVcIik7XG4gICAgICB0MSA9IHRleHQodDFfdmFsdWUpO1xuICAgICAgdDIgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChidXR0b25saW5rLiQkLmZyYWdtZW50KTtcbiAgICAgIGF0dHIocHJlLCBcImNsYXNzXCIsIFwibXMtY29kZS1ibG9jayBtcy1jb2RlLWJsb2NrLS1zaG9ydCBzdmVsdGUtMXloaHJoZVwiKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWFwcC10YWJfX3NlY3Rpb25fX2NvbnRlbnRcIik7XG4gICAgICBhdHRyKGRpdjAsIFwiZGF0YS1jeVwiLCBcImFwcC1zZWN0aW9uLXBsYW5zLWNvbnRlbnRcIik7XG4gICAgICBhdHRyKGRpdjEsIFwiY2xhc3NcIiwgXCJtcy1hcHAtdGFiX19zZWN0aW9uIHN2ZWx0ZS0xeWhocmhlXCIpO1xuICAgICAgYXR0cihkaXYxLCBcImRhdGEtY3lcIiwgXCJhcHAtc2VjdGlvbi1wbGFuc1wiKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjEsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoc2VjdGlvbmhlYWRlciwgZGl2MSwgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDApO1xuICAgICAgYXBwZW5kKGRpdjEsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIHByZSk7XG4gICAgICBhcHBlbmQocHJlLCBjb2RlKTtcbiAgICAgIGFwcGVuZChjb2RlLCB0MSk7XG4gICAgICBhcHBlbmQoZGl2MSwgdDIpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGJ1dHRvbmxpbmssIGRpdjEsIG51bGwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBzZWN0aW9uaGVhZGVyX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIHNlY3Rpb25oZWFkZXJfY2hhbmdlcy5lZGl0VVJMID0gYGh0dHBzOi8vYXBwLm1lbWJlcnN0YWNrLmNvbS9hcHBzLyR7LyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEuaWR9L3BsYW5zYDtcbiAgICAgIHNlY3Rpb25oZWFkZXIuJHNldChzZWN0aW9uaGVhZGVyX2NoYW5nZXMpO1xuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpICYmIHQxX3ZhbHVlICE9PSAodDFfdmFsdWUgPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEucGxhbnMsXG4gICAgICAgIG51bGwsXG4gICAgICAgIDJcbiAgICAgICkgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDEsIHQxX3ZhbHVlKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHNlY3Rpb25oZWFkZXIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluay4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChzZWN0aW9uaGVhZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChidXR0b25saW5rLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjEpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoc2VjdGlvbmhlYWRlcik7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChidXR0b25saW5rKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMyhjdHgpIHtcbiAgbGV0IGRpdjI7XG4gIGxldCB0ODtcbiAgbGV0IGRpdjM7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAwO1xuICBsZXQgdDk7XG4gIGxldCBjb3B5YnV0dG9uZ3JvdXAxO1xuICBsZXQgdDEwO1xuICBsZXQgdDExO1xuICBsZXQgdDEyO1xuICBsZXQgZGl2NTtcbiAgbGV0IHNlY3Rpb25oZWFkZXIwO1xuICBsZXQgdDEzO1xuICBsZXQgZGl2NDtcbiAgbGV0IGJ1dHRvbmxpbmswO1xuICBsZXQgdDE0O1xuICBsZXQgYnV0dG9ubGluazE7XG4gIGxldCB0MTU7XG4gIGxldCBidXR0b25saW5rMjtcbiAgbGV0IHQxNjtcbiAgbGV0IGJ1dHRvbmxpbmszO1xuICBsZXQgdDE3O1xuICBsZXQgYnV0dG9ubGluazQ7XG4gIGxldCB0MTg7XG4gIGxldCBidXR0b25saW5rNTtcbiAgbGV0IHQxOTtcbiAgbGV0IGJ1dHRvbmxpbms2O1xuICBsZXQgdDIwO1xuICBsZXQgdDIxO1xuICBsZXQgdDIyO1xuICBsZXQgZGl2NztcbiAgbGV0IHNlY3Rpb25oZWFkZXIxO1xuICBsZXQgdDIzO1xuICBsZXQgZGl2NjtcbiAgbGV0IHByZTtcbiAgbGV0IGNvZGU7XG4gIGxldCB0MjRfdmFsdWUgPSBKU09OLnN0cmluZ2lmeShcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLmFwcERhdGEsXG4gICAgbnVsbCxcbiAgICAyXG4gICkgKyBcIlwiO1xuICBsZXQgdDI0O1xuICBsZXQgY3VycmVudDtcbiAgY29weWJ1dHRvbmdyb3VwMCA9IG5ldyBDb3B5QnV0dG9uR3JvdXAoe1xuICAgIHByb3BzOiB7XG4gICAgICBsYWJlbFRleHQ6IFwiTmFtZVwiLFxuICAgICAgYnV0dG9uVGV4dDogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5hcHBEYXRhLm5hbWVcbiAgICAgICksXG4gICAgICBjeXByZXNzOiBcImFwcC1uYW1lXCJcbiAgICB9XG4gIH0pO1xuICBjb3B5YnV0dG9uZ3JvdXAxID0gbmV3IENvcHlCdXR0b25Hcm91cCh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxhYmVsVGV4dDogXCJBcHAgSURcIixcbiAgICAgIGJ1dHRvblRleHQ6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uYXBwRGF0YS5pZFxuICAgICAgKSxcbiAgICAgIGN5cHJlc3M6IFwiYXBwLWlkXCJcbiAgICB9XG4gIH0pO1xuICBsZXQgaWZfYmxvY2swID0gKFxuICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICBjdHhbMF0uYXBwRGF0YS5jdXN0b21GaWVsZHMubGVuZ3RoID4gMCAmJiBjcmVhdGVfaWZfYmxvY2tfMyQxKGN0eClcbiAgKTtcbiAgbGV0IGlmX2Jsb2NrMSA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLmFwcERhdGEuY29udGVudEdyb3VwcyAmJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLmFwcERhdGEuY29udGVudEdyb3Vwcy5sZW5ndGggPiAwICYmIGNyZWF0ZV9pZl9ibG9ja18yJDIoY3R4KVxuICApO1xuICBzZWN0aW9uaGVhZGVyMCA9IG5ldyBTZWN0aW9uSGVhZGVyKHtcbiAgICBwcm9wczoge1xuICAgICAgdGl0bGVUZXh0OiBcIkF1dGhlbnRpY2F0aW9uXCIsXG4gICAgICBlZGl0VVJMOiBgaHR0cHM6Ly9hcHAubWVtYmVyc3RhY2suY29tL2FwcHMvJHsvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHhbMF0uYXBwRGF0YS5pZH0vcGxhbnNgXG4gICAgfVxuICB9KTtcbiAgYnV0dG9ubGluazAgPSBuZXcgQnV0dG9uTGluayh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy8xNDA1MjcwNDM1NTQ4M1wiLFxuICAgICAgdGV4dDogXCJQYXNzd29yZGxlc3MgTG9naW5cIixcbiAgICAgIHN0YXR1czogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5hcHBEYXRhLmFkZGl0aW9uYWxBdXRoTWV0aG9kcy5wYXNzd29yZGxlc3MuZW5hYmxlZFxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIGJ1dHRvbmxpbmsxID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvODMyNzIzNjU0ODM3OS1Hb29nbGUtQXV0aGVudGljYXRpb25cIixcbiAgICAgIHRleHQ6IFwiR29vZ2xlXCIsXG4gICAgICBzdGF0dXM6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uYXBwRGF0YS5hdXRoUHJvdmlkZXJzLnNvbWUoZnVuYylcbiAgICAgIClcbiAgICB9XG4gIH0pO1xuICBidXR0b25saW5rMiA9IG5ldyBCdXR0b25MaW5rKHtcbiAgICBwcm9wczoge1xuICAgICAgbGluazogXCJodHRwczovL2RvY3MubWVtYmVyc3RhY2suY29tL2hjL2VuLXVzL2FydGljbGVzLzkxMTYyODY2NzkxOTUtRmFjZWJvb2stQXV0aGVudGljYXRpb25cIixcbiAgICAgIHRleHQ6IFwiRmFjZWJvb2tcIixcbiAgICAgIHN0YXR1czogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5hcHBEYXRhLmF1dGhQcm92aWRlcnMuc29tZShmdW5jXzEpXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgYnV0dG9ubGluazMgPSBuZXcgQnV0dG9uTGluayh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy85MTI4NDA3MzM1ODM1LUxpbmtlZEluLUF1dGhlbnRpY2F0aW9uXCIsXG4gICAgICB0ZXh0OiBcIkxpbmtlZEluXCIsXG4gICAgICBzdGF0dXM6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uYXBwRGF0YS5hdXRoUHJvdmlkZXJzLnNvbWUoZnVuY18yKVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIGJ1dHRvbmxpbms0ID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvOTE1MTcyNjg0NTMzOS1EcmliYmJsZS1BdXRoZW50aWNhdGlvblwiLFxuICAgICAgdGV4dDogXCJEcmliYmxlXCIsXG4gICAgICBzdGF0dXM6IChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uYXBwRGF0YS5hdXRoUHJvdmlkZXJzLnNvbWUoZnVuY18zKVxuICAgICAgKVxuICAgIH1cbiAgfSk7XG4gIGJ1dHRvbmxpbms1ID0gbmV3IEJ1dHRvbkxpbmsoe1xuICAgIHByb3BzOiB7XG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXMvYXJ0aWNsZXMvOTE1MTY3OTQ1MTgwMy1TcG90aWZ5LUF1dGhlbnRpY2F0aW9uXCIsXG4gICAgICB0ZXh0OiBcIlNwb3RpZnlcIixcbiAgICAgIHN0YXR1czogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5hcHBEYXRhLmF1dGhQcm92aWRlcnMuc29tZShmdW5jXzQpXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgYnV0dG9ubGluazYgPSBuZXcgQnV0dG9uTGluayh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy85MTUxNjI5NTYzMjkxLUdpdEh1Yi1BdXRoZW50aWNhdGlvblwiLFxuICAgICAgdGV4dDogXCJHaXRodWJcIixcbiAgICAgIHN0YXR1czogKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5hcHBEYXRhLmF1dGhQcm92aWRlcnMuc29tZShmdW5jXzUpXG4gICAgICApXG4gICAgfVxuICB9KTtcbiAgbGV0IGlmX2Jsb2NrMiA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgY3R4WzBdLmFwcERhdGEuYnJhbmRpbmcgJiYgY3JlYXRlX2lmX2Jsb2NrXzEkMihjdHgpXG4gICk7XG4gIGxldCBpZl9ibG9jazMgPSAoXG4gICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgIGN0eFswXS5hcHBEYXRhLnBsYW5zLmxlbmd0aCA+IDAgJiYgY3JlYXRlX2lmX2Jsb2NrJDMoY3R4KVxuICApO1xuICBzZWN0aW9uaGVhZGVyMSA9IG5ldyBTZWN0aW9uSGVhZGVyKHsgcHJvcHM6IHsgdGl0bGVUZXh0OiBcIkFwcCBEYXRhIChyYXcpXCIgfSB9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgZGl2MiA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYyLmlubmVySFRNTCA9IGA8YSBjbGFzcz1cIm1zLWFwcC10YWJfaGVhZGVyX2xpbmsgc3ZlbHRlLTF5aGhyaGVcIiBocmVmPVwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9hcnRpY2xlcy83NTk1MjYyMzg1ODE5LU1hbmFnaW5nLVRlc3QtTW9kZS1hbmQtTGl2ZS1Nb2RlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGRpdiBjbGFzcz1cIm1zLWFwcC10YWJfX2hlYWRlcl9faW5kaWNhdG9yIHN2ZWx0ZS0xeWhocmhlXCI+PC9kaXY+IFxuXG4gICAgPGRpdiBjbGFzcz1cIm1zLWFwcC10YWJfX2hlYWRlcl9fdGV4dCBzdmVsdGUtMXloaHJoZVwiPlRoaXMgZG9tYWluIGlzIGluIDxzcGFuIGNsYXNzPVwic3ZlbHRlLTF5aGhyaGVcIj5UZXN0IE1vZGU8L3NwYW4+LiA8YnIvPlxuICAgICAgQ2xpY2sgaGVyZSB3aGVuIHlvdSYjMzk7cmUgcmVhZHkgdG8gPGJyLz4gXG4gICAgICA8c3BhbiBjbGFzcz1cInN2ZWx0ZS0xeWhocmhlXCI+R28gTGl2ZTwvc3Bhbj4gYW5kIHNpZ24gdXAgcmVhbCBtZW1iZXJzLjwvZGl2PjwvYT5gO1xuICAgICAgdDggPSBzcGFjZSgpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDkgPSBzcGFjZSgpO1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxMCA9IHNwYWNlKCk7XG4gICAgICBpZiAoaWZfYmxvY2swKVxuICAgICAgICBpZl9ibG9jazAuYygpO1xuICAgICAgdDExID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5jKCk7XG4gICAgICB0MTIgPSBzcGFjZSgpO1xuICAgICAgZGl2NSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHNlY3Rpb25oZWFkZXIwLiQkLmZyYWdtZW50KTtcbiAgICAgIHQxMyA9IHNwYWNlKCk7XG4gICAgICBkaXY0ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazAuJCQuZnJhZ21lbnQpO1xuICAgICAgdDE0ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazEuJCQuZnJhZ21lbnQpO1xuICAgICAgdDE1ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazIuJCQuZnJhZ21lbnQpO1xuICAgICAgdDE2ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazMuJCQuZnJhZ21lbnQpO1xuICAgICAgdDE3ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazQuJCQuZnJhZ21lbnQpO1xuICAgICAgdDE4ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazUuJCQuZnJhZ21lbnQpO1xuICAgICAgdDE5ID0gc3BhY2UoKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoYnV0dG9ubGluazYuJCQuZnJhZ21lbnQpO1xuICAgICAgdDIwID0gc3BhY2UoKTtcbiAgICAgIGlmIChpZl9ibG9jazIpXG4gICAgICAgIGlmX2Jsb2NrMi5jKCk7XG4gICAgICB0MjEgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLmMoKTtcbiAgICAgIHQyMiA9IHNwYWNlKCk7XG4gICAgICBkaXY3ID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoc2VjdGlvbmhlYWRlcjEuJCQuZnJhZ21lbnQpO1xuICAgICAgdDIzID0gc3BhY2UoKTtcbiAgICAgIGRpdjYgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgcHJlID0gZWxlbWVudChcInByZVwiKTtcbiAgICAgIGNvZGUgPSBlbGVtZW50KFwiY29kZVwiKTtcbiAgICAgIHQyNCA9IHRleHQodDI0X3ZhbHVlKTtcbiAgICAgIGF0dHIoZGl2MiwgXCJjbGFzc1wiLCBcIm1zLWFwcC10YWJfX2hlYWRlciBzdmVsdGUtMXloaHJoZVwiKTtcbiAgICAgIGF0dHIoZGl2MywgXCJjbGFzc1wiLCBcIm1zLWFwcC10YWJfX3NlY3Rpb24gc3ZlbHRlLTF5aGhyaGVcIik7XG4gICAgICBhdHRyKGRpdjMsIFwiZGF0YS1jeVwiLCBcImFwcC1zZWN0aW9uLXJlcXVpcmVkXCIpO1xuICAgICAgYXR0cihkaXY0LCBcImNsYXNzXCIsIFwibXMtYXBwLXRhYl9fc2VjdGlvbl9fY29udGVudCBtcy1hcHAtdGFiX19zZWN0aW9uX19jb250ZW50LS1hdXRoXCIpO1xuICAgICAgYXR0cihkaXY0LCBcImRhdGEtY3lcIiwgXCJhcHAtc2VjdGlvbi1hdXRoZW50aWNhdGlvbi1jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXY1LCBcImNsYXNzXCIsIFwibXMtYXBwLXRhYl9fc2VjdGlvbiBzdmVsdGUtMXloaHJoZVwiKTtcbiAgICAgIGF0dHIoZGl2NSwgXCJkYXRhLWN5XCIsIFwiYXBwLXNlY3Rpb24tYXV0aGVudGljYXRpb25cIik7XG4gICAgICBhdHRyKHByZSwgXCJjbGFzc1wiLCBcIm1zLWNvZGUtYmxvY2sgc3ZlbHRlLTF5aGhyaGVcIik7XG4gICAgICBhdHRyKGRpdjYsIFwiY2xhc3NcIiwgXCJtcy1hcHAtdGFiX19zZWN0aW9uX19jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXY2LCBcImRhdGEtY3lcIiwgXCJhcHAtc2VjdGlvbi1hbGwtZGF0YS1jb250ZW50XCIpO1xuICAgICAgYXR0cihkaXY3LCBcImNsYXNzXCIsIFwibXMtYXBwLXRhYl9fc2VjdGlvbiBzdmVsdGUtMXloaHJoZVwiKTtcbiAgICAgIGF0dHIoZGl2NywgXCJkYXRhLWN5XCIsIFwiYXBwLXNlY3Rpb24tYWxsLWRhdGFcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYyLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDgsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBkaXYzLCBhbmNob3IpO1xuICAgICAgbW91bnRfY29tcG9uZW50KGNvcHlidXR0b25ncm91cDAsIGRpdjMsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjMsIHQ5KTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxLCBkaXYzLCBudWxsKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQxMCwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazApXG4gICAgICAgIGlmX2Jsb2NrMC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQxMSwgYW5jaG9yKTtcbiAgICAgIGlmIChpZl9ibG9jazEpXG4gICAgICAgIGlmX2Jsb2NrMS5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIHQxMiwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGRpdjUsIGFuY2hvcik7XG4gICAgICBtb3VudF9jb21wb25lbnQoc2VjdGlvbmhlYWRlcjAsIGRpdjUsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjUsIHQxMyk7XG4gICAgICBhcHBlbmQoZGl2NSwgZGl2NCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazAsIGRpdjQsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxNCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazEsIGRpdjQsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxNSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazIsIGRpdjQsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxNik7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazMsIGRpdjQsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxNyk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazQsIGRpdjQsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxOCk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazUsIGRpdjQsIG51bGwpO1xuICAgICAgYXBwZW5kKGRpdjQsIHQxOSk7XG4gICAgICBtb3VudF9jb21wb25lbnQoYnV0dG9ubGluazYsIGRpdjQsIG51bGwpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDIwLCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMilcbiAgICAgICAgaWZfYmxvY2syLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDIxLCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrMylcbiAgICAgICAgaWZfYmxvY2szLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgdDIyLCBhbmNob3IpO1xuICAgICAgaW5zZXJ0KHRhcmdldCwgZGl2NywgYW5jaG9yKTtcbiAgICAgIG1vdW50X2NvbXBvbmVudChzZWN0aW9uaGVhZGVyMSwgZGl2NywgbnVsbCk7XG4gICAgICBhcHBlbmQoZGl2NywgdDIzKTtcbiAgICAgIGFwcGVuZChkaXY3LCBkaXY2KTtcbiAgICAgIGFwcGVuZChkaXY2LCBwcmUpO1xuICAgICAgYXBwZW5kKHByZSwgY29kZSk7XG4gICAgICBhcHBlbmQoY29kZSwgdDI0KTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBjb25zdCBjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIGNvcHlidXR0b25ncm91cDBfY2hhbmdlcy5idXR0b25UZXh0ID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEubmFtZTtcbiAgICAgIGNvcHlidXR0b25ncm91cDAuJHNldChjb3B5YnV0dG9uZ3JvdXAwX2NoYW5nZXMpO1xuICAgICAgY29uc3QgY29weWJ1dHRvbmdyb3VwMV9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBjb3B5YnV0dG9uZ3JvdXAxX2NoYW5nZXMuYnV0dG9uVGV4dCA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmlkO1xuICAgICAgY29weWJ1dHRvbmdyb3VwMS4kc2V0KGNvcHlidXR0b25ncm91cDFfY2hhbmdlcyk7XG4gICAgICBpZiAoXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmN1c3RvbUZpZWxkcy5sZW5ndGggPiAwXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICAgIGlmX2Jsb2NrMC5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgMSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jazAgPSBjcmVhdGVfaWZfYmxvY2tfMyQxKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazAsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMC5tKHQxMS5wYXJlbnROb2RlLCB0MTEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMCkge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2swID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5jb250ZW50R3JvdXBzICYmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmNvbnRlbnRHcm91cHMubGVuZ3RoID4gMFxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgICBpZl9ibG9jazEucChjdHgyLCBkaXJ0eSk7XG4gICAgICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIDEpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sxID0gY3JlYXRlX2lmX2Jsb2NrXzIkMihjdHgyKTtcbiAgICAgICAgICBpZl9ibG9jazEuYygpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxLCAxKTtcbiAgICAgICAgICBpZl9ibG9jazEubSh0MTIucGFyZW50Tm9kZSwgdDEyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpZl9ibG9jazEpIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrMSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlY3Rpb25oZWFkZXIwX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIHNlY3Rpb25oZWFkZXIwX2NoYW5nZXMuZWRpdFVSTCA9IGBodHRwczovL2FwcC5tZW1iZXJzdGFjay5jb20vYXBwcy8key8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmlkfS9wbGFuc2A7XG4gICAgICBzZWN0aW9uaGVhZGVyMC4kc2V0KHNlY3Rpb25oZWFkZXIwX2NoYW5nZXMpO1xuICAgICAgY29uc3QgYnV0dG9ubGluazBfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgYnV0dG9ubGluazBfY2hhbmdlcy5zdGF0dXMgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5hZGRpdGlvbmFsQXV0aE1ldGhvZHMucGFzc3dvcmRsZXNzLmVuYWJsZWQ7XG4gICAgICBidXR0b25saW5rMC4kc2V0KGJ1dHRvbmxpbmswX2NoYW5nZXMpO1xuICAgICAgY29uc3QgYnV0dG9ubGluazFfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgYnV0dG9ubGluazFfY2hhbmdlcy5zdGF0dXMgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5hdXRoUHJvdmlkZXJzLnNvbWUoZnVuYyk7XG4gICAgICBidXR0b25saW5rMS4kc2V0KGJ1dHRvbmxpbmsxX2NoYW5nZXMpO1xuICAgICAgY29uc3QgYnV0dG9ubGluazJfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgYnV0dG9ubGluazJfY2hhbmdlcy5zdGF0dXMgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5hdXRoUHJvdmlkZXJzLnNvbWUoZnVuY18xKTtcbiAgICAgIGJ1dHRvbmxpbmsyLiRzZXQoYnV0dG9ubGluazJfY2hhbmdlcyk7XG4gICAgICBjb25zdCBidXR0b25saW5rM19jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBidXR0b25saW5rM19jaGFuZ2VzLnN0YXR1cyA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmF1dGhQcm92aWRlcnMuc29tZShmdW5jXzIpO1xuICAgICAgYnV0dG9ubGluazMuJHNldChidXR0b25saW5rM19jaGFuZ2VzKTtcbiAgICAgIGNvbnN0IGJ1dHRvbmxpbms0X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpXG4gICAgICAgIGJ1dHRvbmxpbms0X2NoYW5nZXMuc3RhdHVzID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEuYXV0aFByb3ZpZGVycy5zb21lKGZ1bmNfMyk7XG4gICAgICBidXR0b25saW5rNC4kc2V0KGJ1dHRvbmxpbms0X2NoYW5nZXMpO1xuICAgICAgY29uc3QgYnV0dG9ubGluazVfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSlcbiAgICAgICAgYnV0dG9ubGluazVfY2hhbmdlcy5zdGF0dXMgPSAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YS5hdXRoUHJvdmlkZXJzLnNvbWUoZnVuY180KTtcbiAgICAgIGJ1dHRvbmxpbms1LiRzZXQoYnV0dG9ubGluazVfY2hhbmdlcyk7XG4gICAgICBjb25zdCBidXR0b25saW5rNl9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKVxuICAgICAgICBidXR0b25saW5rNl9jaGFuZ2VzLnN0YXR1cyA9IC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLmF1dGhQcm92aWRlcnMuc29tZShmdW5jXzUpO1xuICAgICAgYnV0dG9ubGluazYuJHNldChidXR0b25saW5rNl9jaGFuZ2VzKTtcbiAgICAgIGlmIChcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHgyWzBdLmFwcERhdGEuYnJhbmRpbmdcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgICAgaWZfYmxvY2syLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICAxKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMiA9IGNyZWF0ZV9pZl9ibG9ja18xJDIoY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2syLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMiwgMSk7XG4gICAgICAgICAgaWZfYmxvY2syLm0odDIxLnBhcmVudE5vZGUsIHQyMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaWZfYmxvY2syKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazIsIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9jazIgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5hcHBEYXRhLnBsYW5zLmxlbmd0aCA+IDBcbiAgICAgICkge1xuICAgICAgICBpZiAoaWZfYmxvY2szKSB7XG4gICAgICAgICAgaWZfYmxvY2szLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICAxKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrMywgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrMyA9IGNyZWF0ZV9pZl9ibG9jayQzKGN0eDIpO1xuICAgICAgICAgIGlmX2Jsb2NrMy5jKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jazMsIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrMy5tKHQyMi5wYXJlbnROb2RlLCB0MjIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrMykge1xuICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2szLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgaWZfYmxvY2szID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCghY3VycmVudCB8fCBkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpICYmIHQyNF92YWx1ZSAhPT0gKHQyNF92YWx1ZSA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eDJbMF0uYXBwRGF0YSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgMlxuICAgICAgKSArIFwiXCIpKVxuICAgICAgICBzZXRfZGF0YSh0MjQsIHQyNF92YWx1ZSk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihjb3B5YnV0dG9uZ3JvdXAwLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX2luKGNvcHlidXR0b25ncm91cDEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2sxKTtcbiAgICAgIHRyYW5zaXRpb25faW4oc2VjdGlvbmhlYWRlcjAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazMuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazQuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazUuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oYnV0dG9ubGluazYuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2syKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2szKTtcbiAgICAgIHRyYW5zaXRpb25faW4oc2VjdGlvbmhlYWRlcjEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWJ1dHRvbmdyb3VwMC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoY29weWJ1dHRvbmdyb3VwMS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2swKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMSk7XG4gICAgICB0cmFuc2l0aW9uX291dChzZWN0aW9uaGVhZGVyMC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYnV0dG9ubGluazAuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGJ1dHRvbmxpbmsxLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChidXR0b25saW5rMi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYnV0dG9ubGluazMuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGJ1dHRvbmxpbms0LiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICB0cmFuc2l0aW9uX291dChidXR0b25saW5rNS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYnV0dG9ubGluazYuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrMik7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jazMpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoc2VjdGlvbmhlYWRlcjEuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Mik7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2godDgpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjMpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoY29weWJ1dHRvbmdyb3VwMCk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChjb3B5YnV0dG9uZ3JvdXAxKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MTApO1xuICAgICAgaWYgKGlmX2Jsb2NrMClcbiAgICAgICAgaWZfYmxvY2swLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MTEpO1xuICAgICAgaWYgKGlmX2Jsb2NrMSlcbiAgICAgICAgaWZfYmxvY2sxLmQoZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaCh0MTIpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGRpdjUpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoc2VjdGlvbmhlYWRlcjApO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazApO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazEpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazIpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazMpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazQpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazUpO1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYnV0dG9ubGluazYpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQyMCk7XG4gICAgICBpZiAoaWZfYmxvY2syKVxuICAgICAgICBpZl9ibG9jazIuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQyMSk7XG4gICAgICBpZiAoaWZfYmxvY2szKVxuICAgICAgICBpZl9ibG9jazMuZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQyMik7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goZGl2Nyk7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChzZWN0aW9uaGVhZGVyMSk7XG4gICAgfVxuICB9O1xufVxudmFyIGZ1bmMgPSAocHJvdmlkZXIpID0+IHByb3ZpZGVyLnByb3ZpZGVyID09PSBcImdvb2dsZVwiO1xudmFyIGZ1bmNfMSA9IChwcm92aWRlcikgPT4gcHJvdmlkZXIucHJvdmlkZXIgPT09IFwiZmFjZWJvb2tcIjtcbnZhciBmdW5jXzIgPSAocHJvdmlkZXIpID0+IHByb3ZpZGVyLnByb3ZpZGVyID09PSBcImxpbmtlZGluXCI7XG52YXIgZnVuY18zID0gKHByb3ZpZGVyKSA9PiBwcm92aWRlci5wcm92aWRlciA9PT0gXCJkcmliYmJsZVwiO1xudmFyIGZ1bmNfNCA9IChwcm92aWRlcikgPT4gcHJvdmlkZXIucHJvdmlkZXIgPT09IFwic3BvdGlmeVwiO1xudmFyIGZ1bmNfNSA9IChwcm92aWRlcikgPT4gcHJvdmlkZXIucHJvdmlkZXIgPT09IFwiZ2l0aHViXCI7XG5mdW5jdGlvbiBpbnN0YW5jZSQzKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkSW5zcGVjdG9yU3RvcmU7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBJbnNwZWN0b3JTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSgwLCAkSW5zcGVjdG9yU3RvcmUgPSAkJHZhbHVlKSk7XG4gICRJbnNwZWN0b3JTdG9yZS5hcHBEYXRhLmN1c3RvbUZpZWxkcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgaWYgKGEub3JkZXIgPT09IG51bGwpXG4gICAgICByZXR1cm4gMTtcbiAgICBpZiAoYi5vcmRlciA9PT0gbnVsbClcbiAgICAgIHJldHVybiAtMTtcbiAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gIH0pO1xuICByZXR1cm4gWyRJbnNwZWN0b3JTdG9yZV07XG59XG52YXIgQXBwVGFiID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJDMsIGNyZWF0ZV9mcmFnbWVudCQzLCBzYWZlX25vdF9lcXVhbCwge30sIGFkZF9jc3MkMik7XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRfY3NzJDEodGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS0xbno3ZTE4XCIsIFwiLm1zLWluc3BlY3Rvci1zaWRlYmFyLnN2ZWx0ZS0xbno3ZTE4IC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtib3gtc2l6aW5nOmJvcmRlci1ib3g7Zm9udC1mYW1pbHk6UGx1cyBKYWthcnRhIFNhbnMsIHNhbnMtc2VyaWYgIWltcG9ydGFudDtsaW5lLWhlaWdodDoxLjVlbTtmb250LXNpemU6MTFweCAhaW1wb3J0YW50fS5tcy1pbnNwZWN0b3Itc2lkZWJhci5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO2JvdHRvbTowO3dpZHRoOjI0MnB4O2NvbG9yOiNmZmY7Zm9udC1mYW1pbHk6UGx1cyBKYWthcnRhIFNhbnMsIHNhbnMtc2VyaWYgIWltcG9ydGFudDtsaW5lLWhlaWdodDoxLjVlbTtmb250LXNpemU6MTFweCAhaW1wb3J0YW50O2JhY2tncm91bmQ6IzI5MjkyOTtib3JkZXItbGVmdDoxcHggc29saWQgIzAwMDtib3gtc2hhZG93OjAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTt6LWluZGV4OjIxNDc0ODM2NDggIWltcG9ydGFudH0ubXMtaW5zcGVjdG9yLXNpZGViYXItLWxlZnQuc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTh7bGVmdDowO3JpZ2h0OmF1dG87Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjMDAwfS5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fY29udGFpbmVyLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Lm1zLWluc3BlY3Rvci1zaWRlYmFyX190YWJzLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e2Rpc3BsYXk6ZmxleDtnYXA6N3B4O3BhZGRpbmc6MCA3cHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgIzRmNGY0Zn0ubXMtaW5zcGVjdG9yLXNpZGViYXJfX3RhYi5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6MTdweCAycHg7aGVpZ2h0OjMwcHg7YmFja2dyb3VuZC1jb2xvcjojMjkyOTI5O2NvbG9yOiNmZmY7Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyLWJvdHRvbToycHggc29saWQgdHJhbnNwYXJlbnR9Lm1zLWluc3BlY3Rvci1zaWRlYmFyX190YWItLWFjdGl2ZS5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjYzFjMWMxO2ZvbnQtd2VpZ2h0OjcwMH0ubXMtaW5zcGVjdG9yLXNpZGViYXJfX2NvdW50LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JvcmRlci1yYWRpdXM6NHB4O2JhY2tncm91bmQtY29sb3I6IzQ0NDt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXI6MC41cHggc29saWQgIzUzNTM1MzttYXJnaW4tcmlnaHQ6MC41ZW07cGFkZGluZzowIDNweH0ubXMtaW5zcGVjdG9yLXNpZGViYXJfX21lbWJlci1zdGF0dXMuc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTh7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDtib3JkZXItcmFkaXVzOjUwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYigyMjQsIDEwMiwgODcpO21hcmdpbi1yaWdodDo1cHh9Lm1zLWluc3BlY3Rvci1zaWRlYmFyX19tZW1iZXItc3RhdHVzLS1hY3RpdmUuc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTh7YmFja2dyb3VuZC1jb2xvcjojNWM5ZDZmfS5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fY29udGVudC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtwYWRkaW5nOjdweDtvdmVyZmxvdy15OmF1dG87ZmxleC1ncm93OjF9Lm1zLWluc3BlY3Rvci1mb290ZXIuc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTh7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOnN0cmV0Y2g7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Ym9yZGVyLXRvcDoxcHggc29saWQgIzRmNGY0Zjtjb2xvcjojOTE5MTkxfS5tcy1pbnNwZWN0b3ItZm9vdGVyX19saW5rLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e3RleHQtZGVjb3JhdGlvbjpub25lO2JvcmRlci1yaWdodDoxcHggc29saWQgIzRmNGY0Zjtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtwYWRkaW5nOjdweDt0cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW4tb3V0fS5tcy1pbnNwZWN0b3ItZm9vdGVyX19saW5rLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4Omxhc3QtY2hpbGR7Ym9yZGVyLXJpZ2h0Om5vbmV9Lm1zLWluc3BlY3Rvci1mb290ZXJfX2xpbmsuc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTg6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM0NDR9Lm1zLWluc3BlY3Rvci1mb290ZXJfX2xpbmsuc3ZlbHRlLTFuejdlMTg6aG92ZXIgLm1zLWluc3BlY3Rvci1mb290ZXJfX2xhYmVsLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e2Rpc3BsYXk6YmxvY2t9Lm1zLWluc3BlY3Rvci1mb290ZXJfX2xpbmsuc3ZlbHRlLTFuejdlMTg6aG92ZXIgLm1zLWluc3BlY3Rvci1mb290ZXJfX2ljb24uc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTh7Y29sb3I6I2ZmZn0ubXMtaW5zcGVjdG9yLWZvb3Rlcl9faWNvbi5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHt3aWR0aDoyZW07aGVpZ2h0OjJlbTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7Y29sb3I6IzkxOTE5MTtmb250LXNpemU6MTVweDtmb250LXdlaWdodDo3MDB9Lm1zLWluc3BlY3Rvci1mb290ZXJfX2xhYmVsLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e2ZvbnQtc2l6ZToxMXB4O2ZvbnQtd2VpZ2h0OjcwMDt3aWR0aDo5MHB4O3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTI1cHg7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7Y29sb3I6I2ZmZn0ubXMtaW5zcGVjdG9yLWZvb3Rlcl9fdGV4dC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtkaXNwbGF5OmlubGluZS1ibG9jazt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7Ym9yZGVyLXJhZGl1czozcHg7cGFkZGluZy1sZWZ0OjAuOGVtO3BhZGRpbmctcmlnaHQ6MC44ZW07YmFja2dyb3VuZC1jb2xvcjojMjkyOTI5fS5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fc2lkZS1zd2l0Y2hlci5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0Oi0zMHB4O2Rpc3BsYXk6bm9uZTthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLWluc3BlY3Rvci1zaWRlYmFyLnN2ZWx0ZS0xbno3ZTE4OmhvdmVyIC5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fc2lkZS1zd2l0Y2hlci5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtkaXNwbGF5OmZsZXh9Lm1zLWluc3BlY3Rvci1zaWRlYmFyLS1sZWZ0LnN2ZWx0ZS0xbno3ZTE4IC5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fc2lkZS1zd2l0Y2hlci5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtsZWZ0OmF1dG87cmlnaHQ6LTMwcHh9Lm1zLWluc3BlY3Rvci1zaWRlYmFyX19zaWRlLXN3aXRjaGVyLWJ1dHRvbi5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtiYWNrZ3JvdW5kLWNvbG9yOiMyOTI5Mjk7Ym9yZGVyOm5vbmU7Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyLXJhZGl1czo0cHggMHB4IDBweCA0cHh9Lm1zLWluc3BlY3Rvci1zaWRlYmFyLS1sZWZ0LnN2ZWx0ZS0xbno3ZTE4IC5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fc2lkZS1zd2l0Y2hlci1idXR0b24uc3ZlbHRlLTFuejdlMTguc3ZlbHRlLTFuejdlMTh7Ym9yZGVyLXJhZGl1czowcHggNHB4IDRweCAwcHh9Lm1zLWluc3BlY3Rvci1zaWRlYmFyX19zaWRlLXN3aXRjaGVyLWJ1dHRvbi1pY29uLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e3dpZHRoOjEzcHg7aGVpZ2h0OjEzcHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2NvbG9yOiNmZmZ9Lm1zLWluc3BlY3Rvci1zaWRlYmFyX19zaWRlLXN3aXRjaGVyLWJ1dHRvbi1pY29uLnN2ZWx0ZS0xbno3ZTE4IHN2Zy5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKX0ubXMtaW5zcGVjdG9yLXNpZGViYXJfX2xhYmVsLnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4LnN2ZWx0ZS0xbno3ZTE4e3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7bGVmdDotOTBweDtkaXNwbGF5Om5vbmU7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO2JvcmRlci1yYWRpdXM6M3B4O3BhZGRpbmctbGVmdDowLjhlbTtwYWRkaW5nLXJpZ2h0OjAuOGVtO2JhY2tncm91bmQtY29sb3I6IzI5MjkyOX0ubXMtaW5zcGVjdG9yLXNpZGViYXItLWxlZnQuc3ZlbHRlLTFuejdlMTggLm1zLWluc3BlY3Rvci1zaWRlYmFyX19sYWJlbC5zdmVsdGUtMW56N2UxOC5zdmVsdGUtMW56N2UxOHtsZWZ0OmF1dG87cmlnaHQ6LTkwcHh9Lm1zLWluc3BlY3Rvci1zaWRlYmFyLnN2ZWx0ZS0xbno3ZTE4OmhvdmVyIC5tcy1pbnNwZWN0b3Itc2lkZWJhcl9fc2lkZS1zd2l0Y2hlci1idXR0b24uc3ZlbHRlLTFuejdlMTg6aG92ZXIrLm1zLWluc3BlY3Rvci1zaWRlYmFyX19sYWJlbC5zdmVsdGUtMW56N2UxOHtkaXNwbGF5OmlubGluZS1ibG9ja31cIik7XG59XG5mdW5jdGlvbiBnZXRfZWFjaF9jb250ZXh0KGN0eCwgbGlzdCwgaSkge1xuICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgY2hpbGRfY3R4WzhdID0gbGlzdFtpXTtcbiAgcmV0dXJuIGNoaWxkX2N0eDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18yJDEoY3R4KSB7XG4gIGxldCBhcHB0YWI7XG4gIGxldCBjdXJyZW50O1xuICBhcHB0YWIgPSBuZXcgQXBwVGFiKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChhcHB0YWIuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGFwcHRhYiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihhcHB0YWIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoYXBwdGFiLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoYXBwdGFiLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xJDEoY3R4KSB7XG4gIGxldCBtZW1iZXJ0YWI7XG4gIGxldCBjdXJyZW50O1xuICBtZW1iZXJ0YWIgPSBuZXcgTWVtYmVyVGFiKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtZW1iZXJ0YWIuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KG1lbWJlcnRhYiwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihtZW1iZXJ0YWIuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobWVtYmVydGFiLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobWVtYmVydGFiLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayQyKGN0eCkge1xuICBsZXQgaW5zcGVjdG9ydGFiO1xuICBsZXQgY3VycmVudDtcbiAgaW5zcGVjdG9ydGFiID0gbmV3IEluc3BlY3RvclRhYih7fSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoaW5zcGVjdG9ydGFiLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChpbnNwZWN0b3J0YWIsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaW5zcGVjdG9ydGFiLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGluc3BlY3RvcnRhYi4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGluc3BlY3RvcnRhYiwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWFjaF9ibG9jayhjdHgpIHtcbiAgbGV0IGE7XG4gIGxldCBkaXYwO1xuICBsZXQgc3dpdGNoX2luc3RhbmNlO1xuICBsZXQgdDA7XG4gIGxldCBkaXYxO1xuICBsZXQgc3BhbjtcbiAgbGV0IHQxX3ZhbHVlID0gKFxuICAgIC8qZm9vdGVySXRlbSovXG4gICAgY3R4WzhdLmxhYmVsICsgXCJcIlxuICApO1xuICBsZXQgdDE7XG4gIGxldCB0MjtcbiAgbGV0IGN1cnJlbnQ7XG4gIHZhciBzd2l0Y2hfdmFsdWUgPSAoXG4gICAgLypmb290ZXJJdGVtKi9cbiAgICBjdHhbOF0uaWNvblxuICApO1xuICBmdW5jdGlvbiBzd2l0Y2hfcHJvcHMoY3R4Mikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoc3dpdGNoX3ZhbHVlKSB7XG4gICAgc3dpdGNoX2luc3RhbmNlID0gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoc3dpdGNoX3ZhbHVlLCBzd2l0Y2hfcHJvcHMoKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgYSA9IGVsZW1lbnQoXCJhXCIpO1xuICAgICAgZGl2MCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoc3dpdGNoX2luc3RhbmNlKVxuICAgICAgICBjcmVhdGVfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZS4kJC5mcmFnbWVudCk7XG4gICAgICB0MCA9IHNwYWNlKCk7XG4gICAgICBkaXYxID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIHNwYW4gPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHQxID0gdGV4dCh0MV92YWx1ZSk7XG4gICAgICB0MiA9IHNwYWNlKCk7XG4gICAgICBhdHRyKGRpdjAsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItZm9vdGVyX19pY29uIHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihzcGFuLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLWZvb3Rlcl9fdGV4dCBzdmVsdGUtMW56N2UxOFwiKTtcbiAgICAgIGF0dHIoZGl2MSwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1mb290ZXJfX2xhYmVsIHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihcbiAgICAgICAgYSxcbiAgICAgICAgXCJocmVmXCIsXG4gICAgICAgIC8qZm9vdGVySXRlbSovXG4gICAgICAgIGN0eFs4XS5saW5rXG4gICAgICApO1xuICAgICAgYXR0cihhLCBcInRhcmdldFwiLCBcIl9ibGFua1wiKTtcbiAgICAgIGF0dHIoYSwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1mb290ZXJfX2xpbmsgc3ZlbHRlLTFuejdlMThcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBhLCBhbmNob3IpO1xuICAgICAgYXBwZW5kKGEsIGRpdjApO1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZSlcbiAgICAgICAgbW91bnRfY29tcG9uZW50KHN3aXRjaF9pbnN0YW5jZSwgZGl2MCwgbnVsbCk7XG4gICAgICBhcHBlbmQoYSwgdDApO1xuICAgICAgYXBwZW5kKGEsIGRpdjEpO1xuICAgICAgYXBwZW5kKGRpdjEsIHNwYW4pO1xuICAgICAgYXBwZW5kKHNwYW4sIHQxKTtcbiAgICAgIGFwcGVuZChhLCB0Mik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGlmIChzd2l0Y2hfdmFsdWUgIT09IChzd2l0Y2hfdmFsdWUgPSAvKmZvb3Rlckl0ZW0qL1xuICAgICAgY3R4Mls4XS5pY29uKSkge1xuICAgICAgICBpZiAoc3dpdGNoX2luc3RhbmNlKSB7XG4gICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgY29uc3Qgb2xkX2NvbXBvbmVudCA9IHN3aXRjaF9pbnN0YW5jZTtcbiAgICAgICAgICB0cmFuc2l0aW9uX291dChvbGRfY29tcG9uZW50LiQkLmZyYWdtZW50LCAxLCAwLCAoKSA9PiB7XG4gICAgICAgICAgICBkZXN0cm95X2NvbXBvbmVudChvbGRfY29tcG9uZW50LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpdGNoX3ZhbHVlKSB7XG4gICAgICAgICAgc3dpdGNoX2luc3RhbmNlID0gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoc3dpdGNoX3ZhbHVlLCBzd2l0Y2hfcHJvcHMoKSk7XG4gICAgICAgICAgY3JlYXRlX2NvbXBvbmVudChzd2l0Y2hfaW5zdGFuY2UuJCQuZnJhZ21lbnQpO1xuICAgICAgICAgIHRyYW5zaXRpb25faW4oc3dpdGNoX2luc3RhbmNlLiQkLmZyYWdtZW50LCAxKTtcbiAgICAgICAgICBtb3VudF9jb21wb25lbnQoc3dpdGNoX2luc3RhbmNlLCBkaXYwLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2l0Y2hfaW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZSlcbiAgICAgICAgdHJhbnNpdGlvbl9pbihzd2l0Y2hfaW5zdGFuY2UuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZSlcbiAgICAgICAgdHJhbnNpdGlvbl9vdXQoc3dpdGNoX2luc3RhbmNlLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGEpO1xuICAgICAgaWYgKHN3aXRjaF9pbnN0YW5jZSlcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQoc3dpdGNoX2luc3RhbmNlKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMihjdHgpIHtcbiAgbGV0IGFzaWRlO1xuICBsZXQgZGl2MztcbiAgbGV0IGRpdjA7XG4gIGxldCBidXR0b24wO1xuICBsZXQgc3BhbjA7XG4gIGxldCB0MF92YWx1ZSA9IChcbiAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgKGN0eFswXS5pbnNwZWN0b3JEYXRhLmxlbmd0aCB8fCAwKSArIFwiXCJcbiAgKTtcbiAgbGV0IHQwO1xuICBsZXQgdDE7XG4gIGxldCBzcGFuMTtcbiAgbGV0IHQzO1xuICBsZXQgYnV0dG9uMTtcbiAgbGV0IHNwYW4yO1xuICBsZXQgdDQ7XG4gIGxldCBzcGFuMztcbiAgbGV0IHQ2O1xuICBsZXQgYnV0dG9uMjtcbiAgbGV0IHQ4O1xuICBsZXQgZGl2MTtcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrO1xuICBsZXQgdDk7XG4gIGxldCBkaXYyO1xuICBsZXQgZGl2M190cmFuc2l0aW9uO1xuICBsZXQgdDEwO1xuICBsZXQgZGl2NTtcbiAgbGV0IGJ1dHRvbjM7XG4gIGxldCB0MTE7XG4gIGxldCBkaXY0O1xuICBsZXQgYXNpZGVfdHJhbnNpdGlvbjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbY3JlYXRlX2lmX2Jsb2NrJDIsIGNyZWF0ZV9pZl9ibG9ja18xJDEsIGNyZWF0ZV9pZl9ibG9ja18yJDFdO1xuICBjb25zdCBpZl9ibG9ja3MgPSBbXTtcbiAgZnVuY3Rpb24gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHgyWzBdLnNob3dUYWIgPT09IFwiaW5zcGVjdG9yXCJcbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAoXG4gICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHgyWzBdLnNob3dUYWIgPT09IFwibWVtYmVyXCJcbiAgICApXG4gICAgICByZXR1cm4gMTtcbiAgICBpZiAoXG4gICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICBjdHgyWzBdLnNob3dUYWIgPT09IFwiYXBwXCJcbiAgICApXG4gICAgICByZXR1cm4gMjtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKH4oY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4KSkpIHtcbiAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICB9XG4gIGxldCBlYWNoX3ZhbHVlID0gKFxuICAgIC8qZm9vdGVySXRlbXMqL1xuICAgIGN0eFsxXVxuICApO1xuICBsZXQgZWFjaF9ibG9ja3MgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWFjaF9ibG9ja3NbaV0gPSBjcmVhdGVfZWFjaF9ibG9jayhnZXRfZWFjaF9jb250ZXh0KGN0eCwgZWFjaF92YWx1ZSwgaSkpO1xuICB9XG4gIGNvbnN0IG91dCA9IChpKSA9PiB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSwgMSwgMSwgKCkgPT4ge1xuICAgIGVhY2hfYmxvY2tzW2ldID0gbnVsbDtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGFzaWRlID0gZWxlbWVudChcImFzaWRlXCIpO1xuICAgICAgZGl2MyA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYwID0gZWxlbWVudChcImRpdlwiKTtcbiAgICAgIGJ1dHRvbjAgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgc3BhbjAgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHQwID0gdGV4dCh0MF92YWx1ZSk7XG4gICAgICB0MSA9IHNwYWNlKCk7XG4gICAgICBzcGFuMSA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3BhbjEudGV4dENvbnRlbnQgPSBcIkluc3BlY3RvclwiO1xuICAgICAgdDMgPSBzcGFjZSgpO1xuICAgICAgYnV0dG9uMSA9IGVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzcGFuMiA9IGVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgdDQgPSBzcGFjZSgpO1xuICAgICAgc3BhbjMgPSBlbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4zLnRleHRDb250ZW50ID0gXCJNZW1iZXJcIjtcbiAgICAgIHQ2ID0gc3BhY2UoKTtcbiAgICAgIGJ1dHRvbjIgPSBlbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uMi5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJzdmVsdGUtMW56N2UxOFwiPkFwcDwvc3Bhbj5gO1xuICAgICAgdDggPSBzcGFjZSgpO1xuICAgICAgZGl2MSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoaWZfYmxvY2spXG4gICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIHQ5ID0gc3BhY2UoKTtcbiAgICAgIGRpdjIgPSBlbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICB9XG4gICAgICB0MTAgPSBzcGFjZSgpO1xuICAgICAgZGl2NSA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBidXR0b24zID0gZWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgIGJ1dHRvbjMuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwibXMtaW5zcGVjdG9yLXNpZGViYXJfX3NpZGUtc3dpdGNoZXItYnV0dG9uLWljb24gc3ZlbHRlLTFuejdlMThcIj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBjbGFzcz1cInN2Zy1pY29uIHN2ZWx0ZS0xbno3ZTE4XCIgc3R5bGU9XCJ3aWR0aDogMWVtOyBoZWlnaHQ6IDFlbTt2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO2ZpbGw6IGN1cnJlbnRDb2xvcjtvdmVyZmxvdzogaGlkZGVuO1wiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCIgdmVyc2lvbj1cIjEuMVwiPjxwYXRoIGQ9XCJNMzk2LjggMTYwSDI2Mi40djQ0OEg2NGwyNjIuNCAyNTYgMjYyLjQtMjU2aC0xOTJ6XCIgZmlsbD1cIiNDOUM5QzlcIiBjbGFzcz1cInN2ZWx0ZS0xbno3ZTE4XCI+PC9wYXRoPjxwYXRoIGQ9XCJNNjk3LjYgMTYwbC0yNjIuNCAyNTZoMTkydjQ0OGgxMzQuNHYtNDQ4SDk2MHpcIiBmaWxsPVwiI0M5QzlDOVwiIGNsYXNzPVwic3ZlbHRlLTFuejdlMThcIj48L3BhdGg+PC9zdmc+PC9zcGFuPmA7XG4gICAgICB0MTEgPSBzcGFjZSgpO1xuICAgICAgZGl2NCA9IGVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXY0LmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cIm1zLWluc3BlY3Rvci1zaWRlYmFyX190ZXh0IHN2ZWx0ZS0xbno3ZTE4XCI+U3dpdGNoIFNpZGVzPC9zcGFuPmA7XG4gICAgICBhdHRyKHNwYW4wLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX2NvdW50IHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihzcGFuMSwgXCJjbGFzc1wiLCBcInN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihidXR0b24wLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX3RhYiBzdmVsdGUtMW56N2UxOFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMCwgXCJkYXRhLWN5XCIsIFwiaW5zcGVjdG9yLXNpZGViYXItaW5zcGVjdG9yLXRhYlwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYnV0dG9uMCxcbiAgICAgICAgXCJtcy1pbnNwZWN0b3Itc2lkZWJhcl9fdGFiLS1hY3RpdmVcIixcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uc2hvd1RhYiA9PT0gXCJpbnNwZWN0b3JcIlxuICAgICAgKTtcbiAgICAgIGF0dHIoc3BhbjIsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3Itc2lkZWJhcl9fbWVtYmVyLXN0YXR1cyBzdmVsdGUtMW56N2UxOFwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgc3BhbjIsXG4gICAgICAgIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX21lbWJlci1zdGF0dXMtLWFjdGl2ZVwiLFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5tZW1iZXJEYXRhICYmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4WzBdLm1lbWJlckRhdGEuaWRcbiAgICAgICk7XG4gICAgICBhdHRyKHNwYW4zLCBcImNsYXNzXCIsIFwic3ZlbHRlLTFuejdlMThcIik7XG4gICAgICBhdHRyKGJ1dHRvbjEsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3Itc2lkZWJhcl9fdGFiIHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihidXR0b24xLCBcImRhdGEtY3lcIiwgXCJpbnNwZWN0b3Itc2lkZWJhci1tZW1iZXItdGFiXCIpO1xuICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICBidXR0b24xLFxuICAgICAgICBcIm1zLWluc3BlY3Rvci1zaWRlYmFyX190YWItLWFjdGl2ZVwiLFxuICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgIGN0eFswXS5zaG93VGFiID09PSBcIm1lbWJlclwiXG4gICAgICApO1xuICAgICAgYXR0cihidXR0b24yLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX3RhYiBzdmVsdGUtMW56N2UxOFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMiwgXCJkYXRhLWN5XCIsIFwiaW5zcGVjdG9yLXNpZGViYXItYXBwLXRhYlwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYnV0dG9uMixcbiAgICAgICAgXCJtcy1pbnNwZWN0b3Itc2lkZWJhcl9fdGFiLS1hY3RpdmVcIixcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uc2hvd1RhYiA9PT0gXCJhcHBcIlxuICAgICAgKTtcbiAgICAgIGF0dHIoZGl2MCwgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1zaWRlYmFyX190YWJzIHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihkaXYxLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX2NvbnRlbnQgc3ZlbHRlLTFuejdlMThcIik7XG4gICAgICBhdHRyKGRpdjIsIFwiY2xhc3NcIiwgXCJtcy1pbnNwZWN0b3ItZm9vdGVyIHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihkaXYzLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX2NvbnRhaW5lciBzdmVsdGUtMW56N2UxOFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMywgXCJjbGFzc1wiLCBcIm1zLWluc3BlY3Rvci1zaWRlYmFyX19zaWRlLXN3aXRjaGVyLWJ1dHRvbiBzdmVsdGUtMW56N2UxOFwiKTtcbiAgICAgIGF0dHIoYnV0dG9uMywgXCJkYXRhLWN5XCIsIFwiaW5zcGVjdG9yLXNpZGViYXItc3dpdGNoLXNpZGUtYnV0dG9uXCIpO1xuICAgICAgYXR0cihkaXY0LCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX2xhYmVsIHN2ZWx0ZS0xbno3ZTE4XCIpO1xuICAgICAgYXR0cihkaXY1LCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX3NpZGUtc3dpdGNoZXIgc3ZlbHRlLTFuejdlMThcIik7XG4gICAgICBhdHRyKGFzaWRlLCBcImNsYXNzXCIsIFwibXMtaW5zcGVjdG9yLXNpZGViYXIgc3ZlbHRlLTFuejdlMThcIik7XG4gICAgICBhdHRyKGFzaWRlLCBcImRhdGEtY3lcIiwgXCJpbnNwZWN0b3Itc2lkZWJhclwiKTtcbiAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgYXNpZGUsXG4gICAgICAgIFwibXMtaW5zcGVjdG9yLXNpZGViYXItLWxlZnRcIixcbiAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICBjdHhbMF0uc2hvd1NpZGUgPT09IFwibGVmdFwiXG4gICAgICApO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgaW5zZXJ0KHRhcmdldCwgYXNpZGUsIGFuY2hvcik7XG4gICAgICBhcHBlbmQoYXNpZGUsIGRpdjMpO1xuICAgICAgYXBwZW5kKGRpdjMsIGRpdjApO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbjApO1xuICAgICAgYXBwZW5kKGJ1dHRvbjAsIHNwYW4wKTtcbiAgICAgIGFwcGVuZChzcGFuMCwgdDApO1xuICAgICAgYXBwZW5kKGJ1dHRvbjAsIHQxKTtcbiAgICAgIGFwcGVuZChidXR0b24wLCBzcGFuMSk7XG4gICAgICBhcHBlbmQoZGl2MCwgdDMpO1xuICAgICAgYXBwZW5kKGRpdjAsIGJ1dHRvbjEpO1xuICAgICAgYXBwZW5kKGJ1dHRvbjEsIHNwYW4yKTtcbiAgICAgIGFwcGVuZChidXR0b24xLCB0NCk7XG4gICAgICBhcHBlbmQoYnV0dG9uMSwgc3BhbjMpO1xuICAgICAgYXBwZW5kKGRpdjAsIHQ2KTtcbiAgICAgIGFwcGVuZChkaXYwLCBidXR0b24yKTtcbiAgICAgIGFwcGVuZChkaXYzLCB0OCk7XG4gICAgICBhcHBlbmQoZGl2MywgZGl2MSk7XG4gICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKGRpdjEsIG51bGwpO1xuICAgICAgfVxuICAgICAgYXBwZW5kKGRpdjMsIHQ5KTtcbiAgICAgIGFwcGVuZChkaXYzLCBkaXYyKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWFjaF9ibG9ja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGVhY2hfYmxvY2tzW2ldKSB7XG4gICAgICAgICAgZWFjaF9ibG9ja3NbaV0ubShkaXYyLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwZW5kKGFzaWRlLCB0MTApO1xuICAgICAgYXBwZW5kKGFzaWRlLCBkaXY1KTtcbiAgICAgIGFwcGVuZChkaXY1LCBidXR0b24zKTtcbiAgICAgIGFwcGVuZChkaXY1LCB0MTEpO1xuICAgICAgYXBwZW5kKGRpdjUsIGRpdjQpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgICBpZiAoIW1vdW50ZWQpIHtcbiAgICAgICAgZGlzcG9zZSA9IFtcbiAgICAgICAgICBsaXN0ZW4oXG4gICAgICAgICAgICBidXR0b24wLFxuICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgLypjbGlja19oYW5kbGVyKi9cbiAgICAgICAgICAgIGN0eFs0XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMSxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8xKi9cbiAgICAgICAgICAgIGN0eFs1XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMixcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8yKi9cbiAgICAgICAgICAgIGN0eFs2XVxuICAgICAgICAgICksXG4gICAgICAgICAgbGlzdGVuKFxuICAgICAgICAgICAgYnV0dG9uMyxcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIC8qY2xpY2tfaGFuZGxlcl8zKi9cbiAgICAgICAgICAgIGN0eFs3XVxuICAgICAgICAgIClcbiAgICAgICAgXTtcbiAgICAgICAgbW91bnRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGlmICgoIWN1cnJlbnQgfHwgZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSAmJiB0MF92YWx1ZSAhPT0gKHQwX3ZhbHVlID0gLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgKGN0eDJbMF0uaW5zcGVjdG9yRGF0YS5sZW5ndGggfHwgMCkgKyBcIlwiKSlcbiAgICAgICAgc2V0X2RhdGEodDAsIHQwX3ZhbHVlKTtcbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIGJ1dHRvbjAsXG4gICAgICAgICAgXCJtcy1pbnNwZWN0b3Itc2lkZWJhcl9fdGFiLS1hY3RpdmVcIixcbiAgICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgY3R4MlswXS5zaG93VGFiID09PSBcImluc3BlY3RvclwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSB7XG4gICAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgICBzcGFuMixcbiAgICAgICAgICBcIm1zLWluc3BlY3Rvci1zaWRlYmFyX19tZW1iZXItc3RhdHVzLS1hY3RpdmVcIixcbiAgICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgY3R4MlswXS5tZW1iZXJEYXRhICYmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICBjdHgyWzBdLm1lbWJlckRhdGEuaWRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghY3VycmVudCB8fCBkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgIDEpIHtcbiAgICAgICAgdG9nZ2xlX2NsYXNzKFxuICAgICAgICAgIGJ1dHRvbjEsXG4gICAgICAgICAgXCJtcy1pbnNwZWN0b3Itc2lkZWJhcl9fdGFiLS1hY3RpdmVcIixcbiAgICAgICAgICAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAgICAgY3R4MlswXS5zaG93VGFiID09PSBcIm1lbWJlclwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWN1cnJlbnQgfHwgZGlydHkgJiAvKiRJbnNwZWN0b3JTdG9yZSovXG4gICAgICAxKSB7XG4gICAgICAgIHRvZ2dsZV9jbGFzcyhcbiAgICAgICAgICBidXR0b24yLFxuICAgICAgICAgIFwibXMtaW5zcGVjdG9yLXNpZGViYXJfX3RhYi0tYWN0aXZlXCIsXG4gICAgICAgICAgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgICAgIGN0eDJbMF0uc2hvd1RhYiA9PT0gXCJhcHBcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ICE9PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF07XG4gICAgICAgICAgaWYgKCFpZl9ibG9jaykge1xuICAgICAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICAgIGlmX2Jsb2NrLm0oZGl2MSwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkgJiAvKmZvb3Rlckl0ZW1zKi9cbiAgICAgIDIpIHtcbiAgICAgICAgZWFjaF92YWx1ZSA9IC8qZm9vdGVySXRlbXMqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVhY2hfdmFsdWUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfZWFjaF9jb250ZXh0KGN0eDIsIGVhY2hfdmFsdWUsIGkpO1xuICAgICAgICAgIGlmIChlYWNoX2Jsb2Nrc1tpXSkge1xuICAgICAgICAgICAgZWFjaF9ibG9ja3NbaV0ucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0sIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXSA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBlYWNoX2Jsb2Nrc1tpXS5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGVhY2hfYmxvY2tzW2ldLCAxKTtcbiAgICAgICAgICAgIGVhY2hfYmxvY2tzW2ldLm0oZGl2MiwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICBmb3IgKGkgPSBlYWNoX3ZhbHVlLmxlbmd0aDsgaSA8IGVhY2hfYmxvY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50IHx8IGRpcnR5ICYgLyokSW5zcGVjdG9yU3RvcmUqL1xuICAgICAgMSkge1xuICAgICAgICB0b2dnbGVfY2xhc3MoXG4gICAgICAgICAgYXNpZGUsXG4gICAgICAgICAgXCJtcy1pbnNwZWN0b3Itc2lkZWJhci0tbGVmdFwiLFxuICAgICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICBjdHgyWzBdLnNob3dTaWRlID09PSBcImxlZnRcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX3ZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oZWFjaF9ibG9ja3NbaV0pO1xuICAgICAgfVxuICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghY3VycmVudClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghZGl2M190cmFuc2l0aW9uKVxuICAgICAgICAgIGRpdjNfdHJhbnNpdGlvbiA9IGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24oZGl2MywgZmFkZSwgeyBkdXJhdGlvbjogNDAwIH0sIHRydWUpO1xuICAgICAgICBkaXYzX3RyYW5zaXRpb24ucnVuKDEpO1xuICAgICAgfSk7XG4gICAgICBpZiAobG9jYWwpIHtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGlmICghYXNpZGVfdHJhbnNpdGlvbilcbiAgICAgICAgICAgIGFzaWRlX3RyYW5zaXRpb24gPSBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKGFzaWRlLCBzbGlkZSwgeyBkdXJhdGlvbjogMTUwLCBheGlzOiBcInhcIiB9LCB0cnVlKTtcbiAgICAgICAgICBhc2lkZV90cmFuc2l0aW9uLnJ1bigxKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2NrKTtcbiAgICAgIGVhY2hfYmxvY2tzID0gZWFjaF9ibG9ja3MuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlYWNoX2Jsb2Nrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0cmFuc2l0aW9uX291dChlYWNoX2Jsb2Nrc1tpXSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRpdjNfdHJhbnNpdGlvbilcbiAgICAgICAgZGl2M190cmFuc2l0aW9uID0gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihkaXYzLCBmYWRlLCB7IGR1cmF0aW9uOiA0MDAgfSwgZmFsc2UpO1xuICAgICAgZGl2M190cmFuc2l0aW9uLnJ1bigwKTtcbiAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICBpZiAoIWFzaWRlX3RyYW5zaXRpb24pXG4gICAgICAgICAgYXNpZGVfdHJhbnNpdGlvbiA9IGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24oYXNpZGUsIHNsaWRlLCB7IGR1cmF0aW9uOiAxNTAsIGF4aXM6IFwieFwiIH0sIGZhbHNlKTtcbiAgICAgICAgYXNpZGVfdHJhbnNpdGlvbi5ydW4oMCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGFzaWRlKTtcbiAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLmQoKTtcbiAgICAgIH1cbiAgICAgIGRlc3Ryb3lfZWFjaChlYWNoX2Jsb2NrcywgZGV0YWNoaW5nKTtcbiAgICAgIGlmIChkZXRhY2hpbmcgJiYgZGl2M190cmFuc2l0aW9uKVxuICAgICAgICBkaXYzX3RyYW5zaXRpb24uZW5kKCk7XG4gICAgICBpZiAoZGV0YWNoaW5nICYmIGFzaWRlX3RyYW5zaXRpb24pXG4gICAgICAgIGFzaWRlX3RyYW5zaXRpb24uZW5kKCk7XG4gICAgICBtb3VudGVkID0gZmFsc2U7XG4gICAgICBydW5fYWxsKGRpc3Bvc2UpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlJDIoJCRzZWxmLCAkJHByb3BzLCAkJGludmFsaWRhdGUpIHtcbiAgbGV0ICRJbnNwZWN0b3JTdG9yZTtcbiAgY29tcG9uZW50X3N1YnNjcmliZSgkJHNlbGYsIEluc3BlY3RvclN0b3JlLCAoJCR2YWx1ZSkgPT4gJCRpbnZhbGlkYXRlKDAsICRJbnNwZWN0b3JTdG9yZSA9ICQkdmFsdWUpKTtcbiAgb25EZXN0cm95KCgpID0+IHtcbiAgICByZW1vdmVYcmF5cygpO1xuICB9KTtcbiAgbGV0IGZvb3Rlckl0ZW1zID0gW1xuICAgIHtcbiAgICAgIGxhYmVsOiBcIkhlbHAgQ2VudGVyXCIsXG4gICAgICBsaW5rOiBcImh0dHBzOi8vZG9jcy5tZW1iZXJzdGFjay5jb20vaGMvZW4tdXNcIixcbiAgICAgIGljb246IEhlbHBJY29uXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogXCJBSSBCb3RcIixcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9yZXkubWVtYmVyc3RhY2suY29tL1wiLFxuICAgICAgaWNvbjogQUlJY29uXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogXCJDb21wb25lbnRzXCIsXG4gICAgICBsaW5rOiBcImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS93ZWJmbG93LWNvbXBvbmVudHNcIixcbiAgICAgIGljb246IENvbXBvbmVudHNJY29uXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogXCJGb3J1bXNcIixcbiAgICAgIGxpbms6IFwiaHR0cHM6Ly9kb2NzLm1lbWJlcnN0YWNrLmNvbS9oYy9lbi11cy9jb21tdW5pdHkvcG9zdHNcIixcbiAgICAgIGljb246IEZvcnVtc0ljb25cbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBcIlNsYWNrXCIsXG4gICAgICBsaW5rOiBcImh0dHBzOi8vd3d3Lm1lbWJlcnN0YWNrLmNvbS9zbGFja1wiLFxuICAgICAgaWNvbjogU2xhY2tJY29uXG4gICAgfVxuICBdO1xuICBmdW5jdGlvbiBjaGFuZ2VUYWIodGFiKSB7XG4gICAgU2V0U2hvd1RhYih0YWIpO1xuICB9XG4gIGZ1bmN0aW9uIHN3aXRjaFNpZGUoKSB7XG4gICAgaWYgKCRJbnNwZWN0b3JTdG9yZS5zaG93U2lkZSA9PT0gXCJyaWdodFwiKSB7XG4gICAgICBTZXRTaG93U2lkZShcImxlZnRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFNldFNob3dTaWRlKFwicmlnaHRcIik7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXIgPSAoKSA9PiBjaGFuZ2VUYWIoXCJpbnNwZWN0b3JcIik7XG4gIGNvbnN0IGNsaWNrX2hhbmRsZXJfMSA9ICgpID0+IGNoYW5nZVRhYihcIm1lbWJlclwiKTtcbiAgY29uc3QgY2xpY2tfaGFuZGxlcl8yID0gKCkgPT4gY2hhbmdlVGFiKFwiYXBwXCIpO1xuICBjb25zdCBjbGlja19oYW5kbGVyXzMgPSAoKSA9PiBzd2l0Y2hTaWRlKCk7XG4gIHJldHVybiBbXG4gICAgJEluc3BlY3RvclN0b3JlLFxuICAgIGZvb3Rlckl0ZW1zLFxuICAgIGNoYW5nZVRhYixcbiAgICBzd2l0Y2hTaWRlLFxuICAgIGNsaWNrX2hhbmRsZXIsXG4gICAgY2xpY2tfaGFuZGxlcl8xLFxuICAgIGNsaWNrX2hhbmRsZXJfMixcbiAgICBjbGlja19oYW5kbGVyXzNcbiAgXTtcbn1cbnZhciBJbnNwZWN0b3JTaWRlYmFyID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlJDIsIGNyZWF0ZV9mcmFnbWVudCQyLCBzYWZlX25vdF9lcXVhbCwge30sIGFkZF9jc3MkMSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2skMShjdHgpIHtcbiAgbGV0IGluc3BlY3RvcnNpZGViYXI7XG4gIGxldCBjdXJyZW50O1xuICBpbnNwZWN0b3JzaWRlYmFyID0gbmV3IEluc3BlY3RvclNpZGViYXIoe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGluc3BlY3RvcnNpZGViYXIuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGluc3BlY3RvcnNpZGViYXIsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaW5zcGVjdG9yc2lkZWJhci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpbnNwZWN0b3JzaWRlYmFyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoaW5zcGVjdG9yc2lkZWJhciwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZnJhZ21lbnQkMShjdHgpIHtcbiAgbGV0IGluc3BlY3RvcmJhZGdlO1xuICBsZXQgdDtcbiAgbGV0IGlmX2Jsb2NrX2FuY2hvcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGluc3BlY3RvcmJhZGdlID0gbmV3IEluc3BlY3RvckJhZGdlKHt9KTtcbiAgbGV0IGlmX2Jsb2NrID0gKFxuICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICBjdHhbMF0uc2hvd1NpZGViYXIgJiYgY3JlYXRlX2lmX2Jsb2NrJDEoKVxuICApO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGluc3BlY3RvcmJhZGdlLiQkLmZyYWdtZW50KTtcbiAgICAgIHQgPSBzcGFjZSgpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICBpZl9ibG9ja19hbmNob3IgPSBlbXB0eSgpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KGluc3BlY3RvcmJhZGdlLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBpbnNlcnQodGFyZ2V0LCB0LCBhbmNob3IpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBbZGlydHldKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgY3R4MlswXS5zaG93U2lkZWJhclxuICAgICAgKSB7XG4gICAgICAgIGlmIChpZl9ibG9jaykge1xuICAgICAgICAgIGlmIChkaXJ0eSAmIC8qJEluc3BlY3RvclN0b3JlKi9cbiAgICAgICAgICAxKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBjcmVhdGVfaWZfYmxvY2skMSgpO1xuICAgICAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICBpZl9ibG9jay5tKGlmX2Jsb2NrX2FuY2hvci5wYXJlbnROb2RlLCBpZl9ibG9ja19hbmNob3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaW5zcGVjdG9yYmFkZ2UuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpbnNwZWN0b3JiYWRnZS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGluc3BlY3RvcmJhZGdlLCBkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKHQpO1xuICAgICAgaWYgKGlmX2Jsb2NrKVxuICAgICAgICBpZl9ibG9jay5kKGRldGFjaGluZyk7XG4gICAgICBpZiAoZGV0YWNoaW5nKVxuICAgICAgICBkZXRhY2goaWZfYmxvY2tfYW5jaG9yKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpbnN0YW5jZSQxKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCAkSW5zcGVjdG9yU3RvcmU7XG4gIGNvbXBvbmVudF9zdWJzY3JpYmUoJCRzZWxmLCBJbnNwZWN0b3JTdG9yZSwgKCQkdmFsdWUpID0+ICQkaW52YWxpZGF0ZSgwLCAkSW5zcGVjdG9yU3RvcmUgPSAkJHZhbHVlKSk7XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNoZWNrZXIoKTtcbiAgfSk7XG4gIHJldHVybiBbJEluc3BlY3RvclN0b3JlXTtcbn1cbnZhciBUZXN0TW9kZSA9IGNsYXNzIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5pdCh0aGlzLCBvcHRpb25zLCBpbnN0YW5jZSQxLCBjcmVhdGVfZnJhZ21lbnQkMSwgc2FmZV9ub3RfZXF1YWwsIHt9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZF9jc3ModGFyZ2V0KSB7XG4gIGFwcGVuZF9zdHlsZXModGFyZ2V0LCBcInN2ZWx0ZS0xYmxwZDg3XCIsICdAaW1wb3J0IHVybChcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9UGx1cytKYWthcnRhK1NhbnM6aXRhbCx3Z2h0QDAsMjAwOzAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzAsNzAwOzAsODAwOzEsMjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwOzEsNzAwOzEsODAwJmRpc3BsYXk9c3dhcFwiKTsuc3ZlbHRlLTFibHBkODd7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fSNtc092ZXJsYXkuc3ZlbHRlLTFibHBkODd7cG9zaXRpb246Zml4ZWQ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuNSk7ei1pbmRleDo5OTk5OTtvdmVyZmxvdy15OmF1dG87b3ZlcmZsb3cteDpoaWRkZW47Zm9udC1mYW1pbHk6XCJQbHVzIEpha2FydGEgU2Fuc1wiLCBzYW5zLXNlcmlmO3BhZGRpbmc6NXZoIDV2d30uLS1oaWRle2Rpc3BsYXk6bm9uZX0uLS1mbGV4LWgtY2VudGVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zX19sb2FkZXJ7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoxMDAwMDAwMH0jbXNMb2FkZXIgcGF0aHtmaWxsOiMwMDdhY2V9Lm1zX19wcm9maWxlX19sb2FkZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQ6cmdiKDI1NSAyNTUgMjU1IC8gNzUlKX0ubXMtbW9kYWx7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjphdXRvO21pbi13aWR0aDowO3Bvc2l0aW9uOnJlbGF0aXZlO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOndoaXRlO2JvcmRlci1yYWRpdXM6MTZweDtib3gtc2hhZG93OjJweCAycHggMTJweCByZ2IoMCAwIDAgLyAxMCUpO3dpZHRoOjM2MHB4O2NvbG9yOnJnYigxMCwgMTAsIDEwKX0ubXMtbW9kYWwtLXByb2ZpbGV7d2lkdGg6NzAwcHh9Lm1zLW1vZGFsX19jbG9zZXtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWFyZ2luOjA7bWluLXdpZHRoOjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjZweDtyaWdodDo2cHg7ei1pbmRleDoxMDtsaW5lLWhlaWdodDowfS5tcy1tb2RhbF9fY2xvc2UgYnV0dG9ue2FwcGVhcmFuY2U6bm9uZTtwYWRkaW5nOjA7b3V0bGluZTpub25lO3dpZHRoOjQycHg7cGFkZGluZzoxNXB4O2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6IzVjNWM1Y30ubXMtbW9kYWxfX2Nsb3NlIGJ1dHRvbjpob3Zlcntjb2xvcjojMGEwYTBhfS5tcy1tb2RhbF9fYmFja3tib3gtc2l6aW5nOmJvcmRlci1ib3g7bWFyZ2luOjA7bWluLXdpZHRoOjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjE2cHg7bGVmdDoxNnB4O3otaW5kZXg6MTA7bGluZS1oZWlnaHQ6MH0ubXMtbW9kYWxfX2JhY2sgYnV0dG9ue2FwcGVhcmFuY2U6bm9uZTtwYWRkaW5nOjA7b3V0bGluZTpub25lO3dpZHRoOjEycHg7Ym9yZGVyOjA7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjdXJzb3I6cG9pbnRlcjtjb2xvcjojNWM1YzVjfVxcbiAgICAgIC5tcy1tb2RhbF9fYmFjayBidXR0b246aG92ZXIsXFxuICAgICAgLm1zLW1vZGFsX19wcm9maWxlLWJhY2sgYnV0dG9uOmhvdmVyXFxuICAgIHtjb2xvcjojMGEwYTBhfS5tcy1tb2RhbF9fYmFjayBzdmd7aGVpZ2h0OjEycHh9Lm1zLW1vZGFsX19wcm9maWxlLWJhY2sgYnV0dG9ue2FwcGVhcmFuY2U6bm9uZTtwYWRkaW5nOjVweDttYXJnaW4tcmlnaHQ6NnB4O291dGxpbmU6bm9uZTt3aWR0aDoyNXB4O2hlaWdodDoyNXB4O2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6IzVjNWM1YztkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6c3RyZXRjaDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tcy1tb2RhbF9fcHJvZmlsZS1iYWNrLS1tb2JpbGV7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowO21pbi13aWR0aDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxNnB4O2xlZnQ6MTZweDt6LWluZGV4OjEwO2xpbmUtaGVpZ2h0OjB9Lm1zLW1vZGFsX19wcm9maWxlLWJhY2stLW1vYmlsZSBidXR0b257YXBwZWFyYW5jZTpub25lO3BhZGRpbmc6MDtvdXRsaW5lOm5vbmU7aGVpZ2h0OjExcHg7d2lkdGg6N3B4O2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6IzVjNWM1Y30ubXMtbW9kYWxfX3Byb2ZpbGUtYmFjay0tbW9iaWxlIGJ1dHRvbjpob3Zlcntjb2xvcjojMGEwYTBhfS5tcy1tb2RhbF9faGVhZGVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzoxMnB4fS5tcy1tb2RhbF9faGVhZGVyLS1tb2JpbGV7ZGlzcGxheTpmbGV4O3BhZGRpbmc6NDJweCA0MnB4IDE2cHggNDJweDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC13cmFwOndyYXA7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLW1vZGFsX19oZWFkZXItLWNlbnRlcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtd3JhcDp3cmFwO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5tcy1tb2RhbF9fY29udGVudHtwYWRkaW5nOjI4cHggMjhweCAyMHB4O3dpZHRoOjEwMCU7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowIGF1dG99Lm1zLW1vZGFsX19jb250ZW50LS1wcm9maWxle3BhZGRpbmc6MDtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7YWxpZ24tY29udGVudDpzdHJldGNoO2FsaWduLWl0ZW1zOnN0cmV0Y2g7Ym9yZGVyLXRvcDoxcHggc29saWQgI2RkZGRkZH0ubXMtbW9kYWxfX2NvbnRlbnQtbGVmdHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7cGFkZGluZzoyMHB4O2JvcmRlci1yaWdodDoxcHggc29saWQgI2RkZGRkZDttaW4td2lkdGg6MTYwcHh9Lm1zLW1vZGFsX19jb250ZW50LXJpZ2h0e3BhZGRpbmc6MjBweDtmbGV4LWdyb3c6MTtoZWlnaHQ6NTV2aDttaW4taGVpZ2h0OjMwMHB4O292ZXJmbG93LXk6YXV0bztwb3NpdGlvbjpyZWxhdGl2ZTt0cmFuc2l0aW9uOmhlaWdodCAwLjNzIGVhc2UtaW4tb3V0fS5tcy1tb2RhbF9fY29udGVudC1yaWdodCBoM3ttYXJnaW4tdG9wOjQwcHggIWltcG9ydGFudDttYXJnaW4tYm90dG9tOjEwcHggIWltcG9ydGFudDtmb250LXNpemU6MThweCAhaW1wb3J0YW50O2xpbmUtaGVpZ2h0OjFlbSAhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OjcwMCAhaW1wb3J0YW50fS5tcy1tb2RhbF9fY29udGVudC0tbW9iaWxle3BhZGRpbmc6MTJweDtmbGV4LWdyb3c6MTtoZWlnaHQ6NDJ2aDttaW4taGVpZ2h0OjMwMHB4O292ZXJmbG93LXk6YXV0bztwb3NpdGlvbjpyZWxhdGl2ZTt0cmFuc2l0aW9uOmhlaWdodCAwLjNzIGVhc2UtaW4tb3V0fS5tcy1tb2RhbF9fbW9iaWxlLXByb2ZpbGUtbmF2e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24tY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6c3RyZXRjaDtmbGV4LXdyYXA6bm93cmFwfS5tcy1tb2RhbF9fbW9iaWxlLXByb2ZpbGUtbmF2IGJ1dHRvbntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtmbGV4LXdyYXA6bm93cmFwO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6MTJweDt3aWR0aDoxMDAlO21hcmdpbi1ib3R0b206MTBweH0ubXMtbW9kYWxfX2ZpZ3VyZXttYXJnaW46OHB4IGF1dG87ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtmbGV4LXNocmluazowO2xpbmUtaGVpZ2h0OjF9Lm1zLW1vZGFsX19maWd1cmUtLXByb2ZpbGV7d2lkdGg6MjRweDtoZWlnaHQ6MjRweDtwYWRkaW5nOjBweDttYXJnaW46MHB4IDhweCAwcHggMHB4fS5tcy1tb2RhbF9fZmlndXJlLS1tb2JpbGV7bWFyZ2luOjBweCAwcHggOHB4IDBweH0ubXMtbW9kYWxfX2ZpZ3VyZSBpbWcsIC5tcy1tb2RhbF9fZmlndXJlIHN2Z3t3aWR0aDphdXRvO2hlaWdodDoxMDAlO21heC1oZWlnaHQ6NDJweDt0ZXh0LWFsaWduOmNlbnRlcjtvYmplY3QtZml0OmNvdmVyO2NvbG9yOnRyYW5zcGFyZW50fS5tcy1tb2RhbF9fdGl0bGUtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luLWJvdHRvbToyNHB4fS5tcy1tb2RhbF9fdGl0bGV7bWFyZ2luLWJvdHRvbTozNnB4O21hcmdpbi10b3A6MDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MjRweDtsaW5lLWhlaWdodDozMnB4O2ZvbnQtd2VpZ2h0OjcwMH0ubXMtbW9kYWxfX3RpdGxlLS1wcm9maWxle21hcmdpbi1ib3R0b206MHB4fS5tcy1tb2RhbF9fdGl0bGUtZ3JvdXB7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcn0ubXMtbW9kYWxfX3RpdGxlLS1zdWItdGV4dHttYXJnaW4tYm90dG9tOjhweH0ubXMtbW9kYWxfX3RleHR7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjI4cHg7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjAgMCAyMHB4IDB9Lm1zLW1vZGFsX19yZWd1bGFyLWJ1dHRvbntjb2xvcjojZmZmO3BhZGRpbmc6OHB4O2JvcmRlci1yYWRpdXM6NHB4O2JvcmRlcjpub25lO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxNnB4O2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLW1vZGFsX19yZWd1bGFyLWJ1dHRvbiBzdmd7aGVpZ2h0OjE2cHg7bWFyZ2luLWxlZnQ6NnB4fS5tcy1tb2RhbF9fcmVndWxhci1idXR0b24tLWxlZnQtaWNvbiBzdmd7bWFyZ2luLXJpZ2h0OjZweDttYXJnaW4tbGVmdDowcHh9Lm1zLW1vZGFsX19yZWd1bGFyLWJ1dHRvbi0tcmlnaHQtaWNvbiBzdmd7bWFyZ2luLWxlZnQ6NnB4O21hcmdpbi1yaWdodDowcHh9Lm1zLW1vZGFsX19yZWd1bGFyLWJ1dHRvbi0tbWFyZ2luLXJpZ2h0e21hcmdpbi1yaWdodDoxMnB4fS5tcy1tb2RhbF9fdGV4dC1idXR0b257Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3BhZGRpbmc6OHB4O2JvcmRlci1yYWRpdXM6NHB4O2JvcmRlcjpub25lO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxNnB4O2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLW1vZGFsX19jYXJke2JveC1zaGFkb3c6MCAwICMwMDAwLCAwIDAgIzAwMDAsIDAgMCAjMDAwMCwgMCAwICMwMDAwLFxcbiAgICAgIDBweCAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4wNCk7cGFkZGluZzoxMnB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7bWFyZ2luLWJvdHRvbToxMnB4O2JvcmRlcjoxcHggc29saWQgcmdiKDIyMSwgMjIxLCAyMjEpO2JvcmRlci1yYWRpdXM6MTBweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTAwJTtjdXJzb3I6ZGVmYXVsdDtiYWNrZ3JvdW5kOnJnYigyNTUsIDI1NSwgMjU1KTthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Lm1zLWZvcm17d2lkdGg6MTAwJSAhaW1wb3J0YW50O21pbi13aWR0aDowICFpbXBvcnRhbnQ7cGFkZGluZzowICFpbXBvcnRhbnQ7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50fS5tcy1mb3JtX19ncm91cHttYXJnaW4tYm90dG9tOjIwcHh9Lm1zLWZvcm1fX2ZsZXh7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWNvbnRlbnQ6Y2VudGVyfS5tcy1mb3JtX19mbGV4LS1jZW50ZXJlZHtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tcy1mb3JtX19sYWJlbHttYXJnaW4tYm90dG9tOjRweDttYXJnaW4tdG9wOjBweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyNHB4O2ZvbnQtd2VpZ2h0OjcwMDt0ZXh0LWFsaWduOmxlZnR9Lm1zLWZvcm1fX2ZpZWxkc2V0e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjA7Ym9yZGVyOm5vbmV9Lm1zLWZvcm1fX2lucHV0e2JveC1zaXppbmc6Ym9yZGVyLWJveDttYXJnaW46MHB4O2JvcmRlcjoxcHggc29saWQgcmdiKDIwMSwgMjAxLCAyMDEpO2JvcmRlci1yYWRpdXM6NnB4O2ZvbnQtc2l6ZToxNnB4O2ZvbnQtd2VpZ2h0OjQwMDtwYWRkaW5nOjE1cHg7d2lkdGg6MTAwJX0ubXMtZm9ybV9fcGFzc3dvcmQtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1jb250ZW50OmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWFyZ2luOjBweDtib3JkZXI6MXB4IHNvbGlkIHJnYigyMDEsIDIwMSwgMjAxKTtib3JkZXItcmFkaXVzOjZweDt3aWR0aDoxMDAlfS5tcy1mb3JtX19wYXNzd29yZC1jb250YWluZXI6Zm9jdXMtd2l0aGlue2JvcmRlcjoxcHggc29saWQgcmdiKDAsIDY4LCAyNTIpO291dGxpbmU6cmdiKDAsIDY4LCAyNTIpIHNvbGlkIDFweH0ubXMtZm9ybV9fcGFzc3dvcmQtY29udGFpbmVyOmZvY3VzLXdpdGhpbiBpbnB1dHtvdXRsaW5lOm5vbmU7Ym9yZGVyLWNvbG9yOnJnYigyMDEsIDIwMSwgMjAxKTtib3gtc2hhZG93Om5vbmV9Lm1zLWZvcm1fX2lucHV0LS1wYXNzd29yZHtib3JkZXI6bm9uZX0ubXMtZm9ybV9faW5wdXQtLXRva2Vue2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MjQuMTlweDtsaW5lLWhlaWdodDozMnB4O3RleHQtYWxpZ246Y2VudGVyO2NvbG9yOiMwMDAwMDA7cGFkZGluZzo5cHg7bWF4LXdpZHRoOjQycHh9Lm1zLWZvcm1fX3Nob3ctdG9nZ2xle2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czowcHggNnB4IDZweCAwcHg7cGFkZGluZzowcHggOHB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLWZvcm1fX2V5ZXtkaXNwbGF5OmJsb2NrO3dpZHRoOjIycHh9Lm1zLWZvcm1fX2V5ZS1zbGFzaHtkaXNwbGF5OmJsb2NrO3dpZHRoOjIycHh9Lm1zLWZvcm1fX2Vycm9ye2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNnB4O2NvbG9yOiNlNDAwMjM7bWFyZ2luLXRvcDo0cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmJhc2VsaW5lfS5tcy1mb3JtX19lcnJvciBzdmd7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDttYXJnaW4tcmlnaHQ6NXB4fS5tcy1mb3JtX19sYWJlbC0tcmlnaHQgYXtjb2xvcjpyZ2IoMTAsIDEwLCAxMCkgIWltcG9ydGFudDt0ZXh0LWRlY29yYXRpb246bm9uZTtmb250LXdlaWdodDo0MDB9Lm1zLWZvcm1fX2J1dHRvbntib3JkZXItcmFkaXVzOjZweDtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE2cHg7cGFkZGluZy1sZWZ0OjIycHg7cGFkZGluZy1yaWdodDoyMnB4O2hlaWdodDo1MnB4O2JvcmRlcjpub25lO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYig0MSwgOTgsIDI1NSk7Y29sb3I6I2ZmZjt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgMC41cyBlYXNlO2N1cnNvcjpwb2ludGVyfS5tcy1mb3JtX19idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojMDc0NWZmfS5tcy1mb3JtX19idXR0b246ZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjojOTZjMGZlO2NvbG9yOiNmZmY7cG9pbnRlci1ldmVudHM6bm9uZTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLWZvcm1fX2J1dHRvbi0tdGV4dHtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3BhZGRpbmc6MHB4O2hlaWdodDphdXRvO21hcmdpbi1ib3R0b206MHB4O21hcmdpbi10b3A6MHB4O2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI4cHg7Zm9udC13ZWlnaHQ6NTAwO2NvbG9yOiMwYTBhMGE7b3BhY2l0eTowLjh9Lm1zLWZvcm1fX2J1dHRvbi0tdGV4dDpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5tcy1mb3JtX19idXR0b24tLXRvcC1zcGFjaW5ne21hcmdpbi10b3A6MTBweH0jbXNGb3JtTG9hZGVyIHBhdGh7ZmlsbDojZmZmfWEubXMtZm9ybV9fbGluaywgZGl2Lm1zLWZvcm1fX2xpbmt7bWFyZ2luLXRvcDo4cHg7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjI0cHg7Y29sb3I6cmdiKDEwLCAxMCwgMTApO3RleHQtZGVjb3JhdGlvbjpub25lO29wYWNpdHk6MC44O2N1cnNvcjpwb2ludGVyfS5tcy1tb2RhbF9fY2FuY2VsLWJ1dHRvbntiYWNrZ3JvdW5kOiNmNmY2ZjY7Y29sb3I6IzgyODI4MjtwYWRkaW5nOjhweDttYXJnaW4tcmlnaHQ6OHB4O2JvcmRlci1yYWRpdXM6NHB4O2JvcmRlcjpub25lO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxNnB4O2N1cnNvcjpwb2ludGVyfS5tcy1tb2RhbF9fc2F2ZS1idXR0b257YmFja2dyb3VuZDojMjk2MmZmO2NvbG9yOiNmZmY7cGFkZGluZzo4cHg7Ym9yZGVyLXJhZGl1czo0cHg7Ym9yZGVyOm5vbmU7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE2cHg7Y3Vyc29yOnBvaW50ZXJ9Lm1zLW1vZGFsX19zYXZlLWJ1dHRvbjpkaXNhYmxlZHtiYWNrZ3JvdW5kOiM4MGExZmM7Y29sb3I6I2ZmZjtjdXJzb3I6ZGVmYXVsdDtvcGFjaXR5OjAuNH0ubXMtbW9kYWxfX3NhdmUtYnV0dG9uLS1sYXJnZXtwYWRkaW5nOjEycHg7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE2cHg7d2lkdGg6MTAwJX0ubXMtbW9kYWxfX291dGxpbmUtYnV0dG9ue2Rpc3BsYXk6YmxvY2sgIWltcG9ydGFudDtiYWNrZ3JvdW5kOiNmZmY7Y29sb3I6IzBhMGEwYTtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MTZweDtwYWRkaW5nOjhweDttYXJnaW4tcmlnaHQ6OHB4O2JvcmRlci1yYWRpdXM6NHB4O2JvcmRlcjoxcHggc29saWQgI2RkZGRkZDtjdXJzb3I6cG9pbnRlcn0ubXMtbW9kYWxfX291dGxpbmUtYnV0dG9uIHN2Z3tkaXNwbGF5OmlubGluZSAhaW1wb3J0YW50O2hlaWdodDoxNXB4O21hcmdpbi1yaWdodDo2cHh9Lm1zLW1vZGFsX19vdXRsaW5lLWJ1dHRvbi0tbW9iaWxle3dpZHRoOjEwMCV9Lm1zLW1vZGFsX19idXR0b24tbGFiZWx7bWFyZ2luLWJvdHRvbTo0cHg7bWFyZ2luLXRvcDowcHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjhweDtmb250LXdlaWdodDo1MDB9Lm1zLW1vZGFsX19wcm9maWxlLW9wdGlvbntjdXJzb3I6cG9pbnRlcjttYXJnaW4tYm90dG9tOjIwcHg7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjI4cHg7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtib3JkZXI6bm9uZTtwYWRkaW5nOjBweH0ubXMtbW9kYWxfX3Byb2ZpbGUtb3B0aW9uIHN2Z3tkaXNwbGF5OmlubGluZSAhaW1wb3J0YW50O2hlaWdodDoxNHB4O21hcmdpbi1yaWdodDo4cHh9Lm1zLW1vZGFsX19wcm9maWxlLW9wdGlvbjpob3Zlcntjb2xvcjojMjk2MmZmfS5tcy1tb2RhbF9fcHJvZmlsZS1vcHRpb24tLWFjdGl2ZXtjb2xvcjojMjk2MmZmfS5tcy1tb2RhbF9fcHJvZmlsZS1pbWFnZS1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O3dpZHRoOjEwMCU7bWFyZ2luLWJvdHRvbToyMXB4O2FsaWduLWl0ZW1zOmNlbnRlcjtmbGV4LWRpcmVjdGlvbjpyb3c7Z2FwOjEycHh9Lm1zLW1vZGFsX19wcm9maWxlLWltYWdle3dpZHRoOjQycHg7aGVpZ2h0OjQycHg7Ym9yZGVyLXJhZGl1czo1MCU7b2JqZWN0LWZpdDpjb3ZlcjtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZDojZGRkO2JvcmRlcjoxcHggc29saWQgI2M5YzljOTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Lm1zLW1vZGFsX19wcm9maWxlLWltYWdlIGltZ3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlO29iamVjdC1maXQ6Y292ZXJ9Lm1zLW1vZGFsX19zb2NpYWwtYnV0dG9ue2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDo1MnB4O2JvcmRlci1yYWRpdXM6NnB4O2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTZweDtsaW5lLWhlaWdodDoyOHB4O2NvbG9yOiMwYTBhMGE7YmFja2dyb3VuZDpub25lO2JvcmRlcjoxcHggc29saWQgI2M5YzljOTtjdXJzb3I6cG9pbnRlcjttYXJnaW4tYm90dG9tOjhweH1cXG4gICAgICAubXMtbW9kYWxfX3NvY2lhbC1idXR0b24gaW1nLFxcbiAgICAgIC5tcy1tb2RhbF9fc29jaWFsLWJ1dHRvbiBzdmdcXG4gICAge2hlaWdodDoxNnB4O21hcmdpbi1yaWdodDo4cHg7d2lkdGg6YXV0b30ubXMtbW9kYWxfX3NvY2lhbC1idXR0b25bZGlzYWJsZWRde2JhY2tncm91bmQ6I2Y2ZjZmNn0ubXMtbW9kYWxfX3NvY2lhbC1kaXZpZGVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luOjIwcHggMHB4fS5tcy1tb2RhbF9fZGl2aWRlci1saW5le3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQ6I2RkZGRkZDtoZWlnaHQ6MXB4O3dpZHRoOjEwMCV9Lm1zLW1vZGFsX19kaXZpZGVyLXRleHR7cGFkZGluZzowcHggNHB4fS5tcy1tb2RhbF9fZm9vdGVye3RleHQtYWxpZ246Y2VudGVyO3dpZHRoOjEwMCU7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowO21pbi13aWR0aDowO2JhY2tncm91bmQ6I2Y2ZjZmNjtwYWRkaW5nLXRvcDoxMHB4O3BhZGRpbmctYm90dG9tOjEwcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czoxNnB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjE2cHg7Ym9yZGVyLXRvcDoxcHggc29saWQ7Ym9yZGVyLXRvcC1jb2xvcjojZGRkZGRkO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE2cHg7Zm9udC13ZWlnaHQ6NTAwfS5tcy1tb2RhbF9fZm9vdGVyIGF7Y29sb3I6cmdiKDEwLCAxMCwgMTApO3RleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0ubXMtbW9kYWxfX2Zvb3RlciBzdmd7aGVpZ2h0OjEycHg7d2lkdGg6MTJweDttYXJnaW4tcmlnaHQ6NS41cHh9Jyk7XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMTEoY3R4KSB7XG4gIGxldCB0ZXN0bW9kZTtcbiAgbGV0IGN1cnJlbnQ7XG4gIHRlc3Rtb2RlID0gbmV3IFRlc3RNb2RlKHt9KTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudCh0ZXN0bW9kZS4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQodGVzdG1vZGUsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcDogbm9vcCxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbih0ZXN0bW9kZS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dCh0ZXN0bW9kZS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRlc3Rtb2RlLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9jayhjdHgpIHtcbiAgbGV0IG1haW47XG4gIGxldCBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXg7XG4gIGxldCBpZl9ibG9jaztcbiAgbGV0IGN1cnJlbnQ7XG4gIGxldCBtb3VudGVkO1xuICBsZXQgZGlzcG9zZTtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzEsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzIsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzMsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzQsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzUsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzYsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzcsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzgsXG4gICAgY3JlYXRlX2lmX2Jsb2NrXzEwXG4gIF07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZV8xKGN0eDIsIGRpcnR5KSB7XG4gICAgaWYgKFxuICAgICAgLypzaG93TG9hZGVyKi9cbiAgICAgIGN0eDJbNF1cbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXkqL1xuICAgICAgY3R4MlswXSA9PT0gXCJsb2dpblwiXG4gICAgKVxuICAgICAgcmV0dXJuIDE7XG4gICAgaWYgKFxuICAgICAgLypkaXNwbGF5Ki9cbiAgICAgIGN0eDJbMF0gPT09IFwic2lnbnVwXCJcbiAgICApXG4gICAgICByZXR1cm4gMjtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXkqL1xuICAgICAgY3R4MlswXSA9PT0gXCJmb3Jnb3RfcGFzc3dvcmRcIlxuICAgIClcbiAgICAgIHJldHVybiAzO1xuICAgIGlmIChcbiAgICAgIC8qZGlzcGxheSovXG4gICAgICBjdHgyWzBdID09PSBcInJlc2V0X3Bhc3N3b3JkXCJcbiAgICApXG4gICAgICByZXR1cm4gNDtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXkqL1xuICAgICAgY3R4MlswXSA9PT0gXCJyZXNldF9wYXNzd29yZF9zdWNjZXNzXCJcbiAgICApXG4gICAgICByZXR1cm4gNTtcbiAgICBpZiAoXG4gICAgICAvKmRpc3BsYXkqL1xuICAgICAgY3R4MlswXSA9PT0gXCJwYXNzd29yZGxlc3NfdG9rZW5cIlxuICAgIClcbiAgICAgIHJldHVybiA2O1xuICAgIGlmIChcbiAgICAgIC8qZGlzcGxheSovXG4gICAgICBjdHgyWzBdID09PSBcInByb2ZpbGVcIlxuICAgIClcbiAgICAgIHJldHVybiA3O1xuICAgIGlmIChcbiAgICAgIC8qZGlzcGxheSovXG4gICAgICBjdHgyWzBdID09PSBcInRlc3RfY2FyZFwiXG4gICAgKVxuICAgICAgcmV0dXJuIDg7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGlmICh+KGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4KSkpIHtcbiAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIG1haW4gPSBlbGVtZW50KFwibWFpblwiKTtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgYXR0cihtYWluLCBcImlkXCIsIFwibXNPdmVybGF5XCIpO1xuICAgICAgYXR0cihtYWluLCBcImNsYXNzXCIsIFwic3ZlbHRlLTFibHBkODdcIik7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpbnNlcnQodGFyZ2V0LCBtYWluLCBhbmNob3IpO1xuICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0ubShtYWluLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgICAgaWYgKCFtb3VudGVkKSB7XG4gICAgICAgIGRpc3Bvc2UgPSBsaXN0ZW4oXG4gICAgICAgICAgbWFpbixcbiAgICAgICAgICBcIm1vdXNlZG93blwiLFxuICAgICAgICAgIC8qY2xvc2VNb2RhbE91dHNpZGUqL1xuICAgICAgICAgIGN0eFs2XVxuICAgICAgICApO1xuICAgICAgICBtb3VudGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlXzEoY3R4Mik7XG4gICAgICBpZiAoY3VycmVudF9ibG9ja190eXBlX2luZGV4ID09PSBwcmV2aW91c19ibG9ja19pbmRleCkge1xuICAgICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaWZfYmxvY2spIHtcbiAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAofmN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCkge1xuICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF07XG4gICAgICAgICAgaWYgKCFpZl9ibG9jaykge1xuICAgICAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgICBpZl9ibG9jay5jKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrLCAxKTtcbiAgICAgICAgICBpZl9ibG9jay5tKG1haW4sIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKG1haW4pO1xuICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpIHtcbiAgICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZCgpO1xuICAgICAgfVxuICAgICAgbW91bnRlZCA9IGZhbHNlO1xuICAgICAgZGlzcG9zZSgpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18xMChjdHgpIHtcbiAgbGV0IHRlc3RjYXJkbW9kYWw7XG4gIGxldCB1cGRhdGluZ19kaXNwbGF5O1xuICBsZXQgdXBkYXRpbmdfcGFyYW1zO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gdGVzdGNhcmRtb2RhbF9kaXNwbGF5X2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMjBdKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiB0ZXN0Y2FyZG1vZGFsX3BhcmFtc19iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzIxXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IHRlc3RjYXJkbW9kYWxfcHJvcHMgPSB7XG4gICAgY2xvc2VNb2RhbDogKFxuICAgICAgLypjbG9zZU1vZGFsKi9cbiAgICAgIGN0eFs1XVxuICAgICksXG4gICAgb25TdWNjZXNzU3VibWl0OiAoXG4gICAgICAvKm9uU3VjY2VzcyovXG4gICAgICBjdHhbMl1cbiAgICApXG4gIH07XG4gIGlmIChcbiAgICAvKmRpc3BsYXkqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHRlc3RjYXJkbW9kYWxfcHJvcHMuZGlzcGxheSA9IC8qZGlzcGxheSovXG4gICAgY3R4WzBdO1xuICB9XG4gIGlmIChcbiAgICAvKnBhcmFtcyovXG4gICAgY3R4WzFdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgdGVzdGNhcmRtb2RhbF9wcm9wcy5wYXJhbXMgPSAvKnBhcmFtcyovXG4gICAgY3R4WzFdO1xuICB9XG4gIHRlc3RjYXJkbW9kYWwgPSBuZXcgVGVzdENhcmRNb2RhbCh7IHByb3BzOiB0ZXN0Y2FyZG1vZGFsX3Byb3BzIH0pO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQodGVzdGNhcmRtb2RhbCwgXCJkaXNwbGF5XCIsIHRlc3RjYXJkbW9kYWxfZGlzcGxheV9iaW5kaW5nKSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZCh0ZXN0Y2FyZG1vZGFsLCBcInBhcmFtc1wiLCB0ZXN0Y2FyZG1vZGFsX3BhcmFtc19iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQodGVzdGNhcmRtb2RhbC4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQodGVzdGNhcmRtb2RhbCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCB0ZXN0Y2FyZG1vZGFsX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qb25TdWNjZXNzKi9cbiAgICAgIDQpXG4gICAgICAgIHRlc3RjYXJkbW9kYWxfY2hhbmdlcy5vblN1Y2Nlc3NTdWJtaXQgPSAvKm9uU3VjY2VzcyovXG4gICAgICAgIGN0eDJbMl07XG4gICAgICBpZiAoIXVwZGF0aW5nX2Rpc3BsYXkgJiYgZGlydHkgJiAvKmRpc3BsYXkqL1xuICAgICAgMSkge1xuICAgICAgICB1cGRhdGluZ19kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgdGVzdGNhcmRtb2RhbF9jaGFuZ2VzLmRpc3BsYXkgPSAvKmRpc3BsYXkqL1xuICAgICAgICBjdHgyWzBdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZGlzcGxheSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdXBkYXRpbmdfcGFyYW1zICYmIGRpcnR5ICYgLypwYXJhbXMqL1xuICAgICAgMikge1xuICAgICAgICB1cGRhdGluZ19wYXJhbXMgPSB0cnVlO1xuICAgICAgICB0ZXN0Y2FyZG1vZGFsX2NoYW5nZXMucGFyYW1zID0gLypwYXJhbXMqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFyYW1zID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgdGVzdGNhcmRtb2RhbC4kc2V0KHRlc3RjYXJkbW9kYWxfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbih0ZXN0Y2FyZG1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHRlc3RjYXJkbW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudCh0ZXN0Y2FyZG1vZGFsLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja184KGN0eCkge1xuICBsZXQgbWVkaWFxdWVyeTtcbiAgbGV0IGN1cnJlbnQ7XG4gIG1lZGlhcXVlcnkgPSBuZXcgTWVkaWFRdWVyeSh7XG4gICAgcHJvcHM6IHtcbiAgICAgIHF1ZXJ5OiBcIihtYXgtd2lkdGg6IDUyMHB4KVwiLFxuICAgICAgJCRzbG90czoge1xuICAgICAgICBkZWZhdWx0OiBbXG4gICAgICAgICAgY3JlYXRlX2RlZmF1bHRfc2xvdCxcbiAgICAgICAgICAoeyBtYXRjaGVzIH0pID0+ICh7IDI2OiBtYXRjaGVzIH0pLFxuICAgICAgICAgICh7IG1hdGNoZXMgfSkgPT4gbWF0Y2hlcyA/IDY3MTA4ODY0IDogMFxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgJCRzY29wZTogeyBjdHggfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQobWVkaWFxdWVyeS4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQobWVkaWFxdWVyeSwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBtZWRpYXF1ZXJ5X2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qJCRzY29wZSwgb25TdWNjZXNzLCBtZW1iZXIsIGRpc3BsYXksIG1hdGNoZXMqL1xuICAgICAgMjAxMzI2NjA1KSB7XG4gICAgICAgIG1lZGlhcXVlcnlfY2hhbmdlcy4kJHNjb3BlID0geyBkaXJ0eSwgY3R4OiBjdHgyIH07XG4gICAgICB9XG4gICAgICBtZWRpYXF1ZXJ5LiRzZXQobWVkaWFxdWVyeV9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1lZGlhcXVlcnkuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQobWVkaWFxdWVyeS4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KG1lZGlhcXVlcnksIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzcoY3R4KSB7XG4gIGxldCBwYXNzd29yZGxlc3N0b2tlbm1vZGFsO1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheTtcbiAgbGV0IHVwZGF0aW5nX3BhcmFtcztcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHBhc3N3b3JkbGVzc3Rva2VubW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE2XSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRsZXNzdG9rZW5tb2RhbF9wYXJhbXNfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxN10odmFsdWUpO1xuICB9XG4gIGxldCBwYXNzd29yZGxlc3N0b2tlbm1vZGFsX3Byb3BzID0ge1xuICAgIGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbNV1cbiAgICApLFxuICAgIG9uU3VjY2VzczogKFxuICAgICAgLypvblN1Y2Nlc3MqL1xuICAgICAgY3R4WzJdXG4gICAgKVxuICB9O1xuICBpZiAoXG4gICAgLypkaXNwbGF5Ki9cbiAgICBjdHhbMF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwYXNzd29yZGxlc3N0b2tlbm1vZGFsX3Byb3BzLmRpc3BsYXkgPSAvKmRpc3BsYXkqL1xuICAgIGN0eFswXTtcbiAgfVxuICBpZiAoXG4gICAgLypwYXJhbXMqL1xuICAgIGN0eFsxXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkbGVzc3Rva2VubW9kYWxfcHJvcHMucGFyYW1zID0gLypwYXJhbXMqL1xuICAgIGN0eFsxXTtcbiAgfVxuICBwYXNzd29yZGxlc3N0b2tlbm1vZGFsID0gbmV3IFBhc3N3b3JkbGVzc1Rva2VuTW9kYWwoeyBwcm9wczogcGFzc3dvcmRsZXNzdG9rZW5tb2RhbF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkbGVzc3Rva2VubW9kYWwsIFwiZGlzcGxheVwiLCBwYXNzd29yZGxlc3N0b2tlbm1vZGFsX2Rpc3BsYXlfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQocGFzc3dvcmRsZXNzdG9rZW5tb2RhbCwgXCJwYXJhbXNcIiwgcGFzc3dvcmRsZXNzdG9rZW5tb2RhbF9wYXJhbXNfYmluZGluZykpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHBhc3N3b3JkbGVzc3Rva2VubW9kYWwuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHBhc3N3b3JkbGVzc3Rva2VubW9kYWwsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgcGFzc3dvcmRsZXNzdG9rZW5tb2RhbF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoZGlydHkgJiAvKm9uU3VjY2VzcyovXG4gICAgICA0KVxuICAgICAgICBwYXNzd29yZGxlc3N0b2tlbm1vZGFsX2NoYW5nZXMub25TdWNjZXNzID0gLypvblN1Y2Nlc3MqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5ICYmIGRpcnR5ICYgLypkaXNwbGF5Ki9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheSA9IHRydWU7XG4gICAgICAgIHBhc3N3b3JkbGVzc3Rva2VubW9kYWxfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3BhcmFtcyAmJiBkaXJ0eSAmIC8qcGFyYW1zKi9cbiAgICAgIDIpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFyYW1zID0gdHJ1ZTtcbiAgICAgICAgcGFzc3dvcmRsZXNzdG9rZW5tb2RhbF9jaGFuZ2VzLnBhcmFtcyA9IC8qcGFyYW1zKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX3BhcmFtcyA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHBhc3N3b3JkbGVzc3Rva2VubW9kYWwuJHNldChwYXNzd29yZGxlc3N0b2tlbm1vZGFsX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRsZXNzdG9rZW5tb2RhbC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChwYXNzd29yZGxlc3N0b2tlbm1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGFzc3dvcmRsZXNzdG9rZW5tb2RhbCwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNihjdHgpIHtcbiAgbGV0IHBhc3N3b3Jkc3VjY2Vzc21vZGFsO1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHBhc3N3b3Jkc3VjY2Vzc21vZGFsX2Rpc3BsYXlfYmluZGluZyh2YWx1ZSkge1xuICAgIGN0eFsxNV0odmFsdWUpO1xuICB9XG4gIGxldCBwYXNzd29yZHN1Y2Nlc3Ntb2RhbF9wcm9wcyA9IHsgY2xvc2VNb2RhbDogKFxuICAgIC8qY2xvc2VNb2RhbCovXG4gICAgY3R4WzVdXG4gICkgfTtcbiAgaWYgKFxuICAgIC8qZGlzcGxheSovXG4gICAgY3R4WzBdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgcGFzc3dvcmRzdWNjZXNzbW9kYWxfcHJvcHMuZGlzcGxheSA9IC8qZGlzcGxheSovXG4gICAgY3R4WzBdO1xuICB9XG4gIHBhc3N3b3Jkc3VjY2Vzc21vZGFsID0gbmV3IFBhc3NTdWNjZXNzTW9kYWwoeyBwcm9wczogcGFzc3dvcmRzdWNjZXNzbW9kYWxfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZHN1Y2Nlc3Ntb2RhbCwgXCJkaXNwbGF5XCIsIHBhc3N3b3Jkc3VjY2Vzc21vZGFsX2Rpc3BsYXlfYmluZGluZykpO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KHBhc3N3b3Jkc3VjY2Vzc21vZGFsLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZHN1Y2Nlc3Ntb2RhbCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBwYXNzd29yZHN1Y2Nlc3Ntb2RhbF9jaGFuZ2VzID0ge307XG4gICAgICBpZiAoIXVwZGF0aW5nX2Rpc3BsYXkgJiYgZGlydHkgJiAvKmRpc3BsYXkqL1xuICAgICAgMSkge1xuICAgICAgICB1cGRhdGluZ19kaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgcGFzc3dvcmRzdWNjZXNzbW9kYWxfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZHN1Y2Nlc3Ntb2RhbC4kc2V0KHBhc3N3b3Jkc3VjY2Vzc21vZGFsX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4ocGFzc3dvcmRzdWNjZXNzbW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGFzc3dvcmRzdWNjZXNzbW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChwYXNzd29yZHN1Y2Nlc3Ntb2RhbCwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfNShjdHgpIHtcbiAgbGV0IHBhc3N3b3JkdG9rZW5tb2RhbDtcbiAgbGV0IHVwZGF0aW5nX2Rpc3BsYXk7XG4gIGxldCBjdXJyZW50O1xuICBmdW5jdGlvbiBwYXNzd29yZHRva2VubW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE0XSh2YWx1ZSk7XG4gIH1cbiAgbGV0IHBhc3N3b3JkdG9rZW5tb2RhbF9wcm9wcyA9IHtcbiAgICBjbG9zZU1vZGFsOiAoXG4gICAgICAvKmNsb3NlTW9kYWwqL1xuICAgICAgY3R4WzVdXG4gICAgKSxcbiAgICBvblN1Y2Nlc3NQYXNzd29yZFJlc2V0OiAoXG4gICAgICAvKm9uU3VjY2VzcyovXG4gICAgICBjdHhbMl1cbiAgICApXG4gIH07XG4gIGlmIChcbiAgICAvKmRpc3BsYXkqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHBhc3N3b3JkdG9rZW5tb2RhbF9wcm9wcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICBjdHhbMF07XG4gIH1cbiAgcGFzc3dvcmR0b2tlbm1vZGFsID0gbmV3IFBhc3NUb2tlbk1vZGFsKHsgcHJvcHM6IHBhc3N3b3JkdG9rZW5tb2RhbF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKHBhc3N3b3JkdG9rZW5tb2RhbCwgXCJkaXNwbGF5XCIsIHBhc3N3b3JkdG9rZW5tb2RhbF9kaXNwbGF5X2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChwYXNzd29yZHRva2VubW9kYWwuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHBhc3N3b3JkdG9rZW5tb2RhbCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBwYXNzd29yZHRva2VubW9kYWxfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypvblN1Y2Nlc3MqL1xuICAgICAgNClcbiAgICAgICAgcGFzc3dvcmR0b2tlbm1vZGFsX2NoYW5nZXMub25TdWNjZXNzUGFzc3dvcmRSZXNldCA9IC8qb25TdWNjZXNzKi9cbiAgICAgICAgY3R4MlsyXTtcbiAgICAgIGlmICghdXBkYXRpbmdfZGlzcGxheSAmJiBkaXJ0eSAmIC8qZGlzcGxheSovXG4gICAgICAxKSB7XG4gICAgICAgIHVwZGF0aW5nX2Rpc3BsYXkgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZHRva2VubW9kYWxfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZHRva2VubW9kYWwuJHNldChwYXNzd29yZHRva2VubW9kYWxfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwYXNzd29yZHRva2VubW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGFzc3dvcmR0b2tlbm1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGFzc3dvcmR0b2tlbm1vZGFsLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja180KGN0eCkge1xuICBsZXQgcGFzc3dvcmRyZXNldG1vZGFsO1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIHBhc3N3b3JkcmVzZXRtb2RhbF9kaXNwbGF5X2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTNdKHZhbHVlKTtcbiAgfVxuICBsZXQgcGFzc3dvcmRyZXNldG1vZGFsX3Byb3BzID0geyBjbG9zZU1vZGFsOiAoXG4gICAgLypjbG9zZU1vZGFsKi9cbiAgICBjdHhbNV1cbiAgKSB9O1xuICBpZiAoXG4gICAgLypkaXNwbGF5Ki9cbiAgICBjdHhbMF0gIT09IHZvaWQgMFxuICApIHtcbiAgICBwYXNzd29yZHJlc2V0bW9kYWxfcHJvcHMuZGlzcGxheSA9IC8qZGlzcGxheSovXG4gICAgY3R4WzBdO1xuICB9XG4gIHBhc3N3b3JkcmVzZXRtb2RhbCA9IG5ldyBQYXNzUmVzZXRNb2RhbCh7IHByb3BzOiBwYXNzd29yZHJlc2V0bW9kYWxfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwYXNzd29yZHJlc2V0bW9kYWwsIFwiZGlzcGxheVwiLCBwYXNzd29yZHJlc2V0bW9kYWxfZGlzcGxheV9iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocGFzc3dvcmRyZXNldG1vZGFsLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwYXNzd29yZHJlc2V0bW9kYWwsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgcGFzc3dvcmRyZXNldG1vZGFsX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmICghdXBkYXRpbmdfZGlzcGxheSAmJiBkaXJ0eSAmIC8qZGlzcGxheSovXG4gICAgICAxKSB7XG4gICAgICAgIHVwZGF0aW5nX2Rpc3BsYXkgPSB0cnVlO1xuICAgICAgICBwYXNzd29yZHJlc2V0bW9kYWxfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwYXNzd29yZHJlc2V0bW9kYWwuJHNldChwYXNzd29yZHJlc2V0bW9kYWxfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwYXNzd29yZHJlc2V0bW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocGFzc3dvcmRyZXNldG1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocGFzc3dvcmRyZXNldG1vZGFsLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja18zKGN0eCkge1xuICBsZXQgc2lnbnVwbW9kYWw7XG4gIGxldCB1cGRhdGluZ19kaXNwbGF5O1xuICBsZXQgdXBkYXRpbmdfcGFyYW1zO1xuICBsZXQgY3VycmVudDtcbiAgZnVuY3Rpb24gc2lnbnVwbW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzExXSh2YWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gc2lnbnVwbW9kYWxfcGFyYW1zX2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMTJdKHZhbHVlKTtcbiAgfVxuICBsZXQgc2lnbnVwbW9kYWxfcHJvcHMgPSB7XG4gICAgY2xvc2VNb2RhbDogKFxuICAgICAgLypjbG9zZU1vZGFsKi9cbiAgICAgIGN0eFs1XVxuICAgICksXG4gICAgb25TdWNjZXNzU2lnbnVwOiAoXG4gICAgICAvKm9uU3VjY2VzcyovXG4gICAgICBjdHhbMl1cbiAgICApXG4gIH07XG4gIGlmIChcbiAgICAvKmRpc3BsYXkqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHNpZ251cG1vZGFsX3Byb3BzLmRpc3BsYXkgPSAvKmRpc3BsYXkqL1xuICAgIGN0eFswXTtcbiAgfVxuICBpZiAoXG4gICAgLypwYXJhbXMqL1xuICAgIGN0eFsxXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHNpZ251cG1vZGFsX3Byb3BzLnBhcmFtcyA9IC8qcGFyYW1zKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgc2lnbnVwbW9kYWwgPSBuZXcgU2lnbnVwTW9kYWwoeyBwcm9wczogc2lnbnVwbW9kYWxfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChzaWdudXBtb2RhbCwgXCJkaXNwbGF5XCIsIHNpZ251cG1vZGFsX2Rpc3BsYXlfYmluZGluZykpO1xuICBiaW5kaW5nX2NhbGxiYWNrcy5wdXNoKCgpID0+IGJpbmQoc2lnbnVwbW9kYWwsIFwicGFyYW1zXCIsIHNpZ251cG1vZGFsX3BhcmFtc19iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQoc2lnbnVwbW9kYWwuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KHNpZ251cG1vZGFsLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IHNpZ251cG1vZGFsX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qb25TdWNjZXNzKi9cbiAgICAgIDQpXG4gICAgICAgIHNpZ251cG1vZGFsX2NoYW5nZXMub25TdWNjZXNzU2lnbnVwID0gLypvblN1Y2Nlc3MqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5ICYmIGRpcnR5ICYgLypkaXNwbGF5Ki9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheSA9IHRydWU7XG4gICAgICAgIHNpZ251cG1vZGFsX2NoYW5nZXMuZGlzcGxheSA9IC8qZGlzcGxheSovXG4gICAgICAgIGN0eDJbMF07XG4gICAgICAgIGFkZF9mbHVzaF9jYWxsYmFjaygoKSA9PiB1cGRhdGluZ19kaXNwbGF5ID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCF1cGRhdGluZ19wYXJhbXMgJiYgZGlydHkgJiAvKnBhcmFtcyovXG4gICAgICAyKSB7XG4gICAgICAgIHVwZGF0aW5nX3BhcmFtcyA9IHRydWU7XG4gICAgICAgIHNpZ251cG1vZGFsX2NoYW5nZXMucGFyYW1zID0gLypwYXJhbXMqL1xuICAgICAgICBjdHgyWzFdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfcGFyYW1zID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgc2lnbnVwbW9kYWwuJHNldChzaWdudXBtb2RhbF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKHNpZ251cG1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KHNpZ251cG1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQoc2lnbnVwbW9kYWwsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2lmX2Jsb2NrXzIoY3R4KSB7XG4gIGxldCBsb2dpbm1vZGFsO1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheTtcbiAgbGV0IHVwZGF0aW5nX3BhcmFtcztcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIGxvZ2lubW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzldKHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBsb2dpbm1vZGFsX3BhcmFtc19iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzEwXSh2YWx1ZSk7XG4gIH1cbiAgbGV0IGxvZ2lubW9kYWxfcHJvcHMgPSB7XG4gICAgY2xvc2VNb2RhbDogKFxuICAgICAgLypjbG9zZU1vZGFsKi9cbiAgICAgIGN0eFs1XVxuICAgICksXG4gICAgb25TdWNjZXNzTG9naW46IChcbiAgICAgIC8qb25TdWNjZXNzKi9cbiAgICAgIGN0eFsyXVxuICAgIClcbiAgfTtcbiAgaWYgKFxuICAgIC8qZGlzcGxheSovXG4gICAgY3R4WzBdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbG9naW5tb2RhbF9wcm9wcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICBjdHhbMF07XG4gIH1cbiAgaWYgKFxuICAgIC8qcGFyYW1zKi9cbiAgICBjdHhbMV0gIT09IHZvaWQgMFxuICApIHtcbiAgICBsb2dpbm1vZGFsX3Byb3BzLnBhcmFtcyA9IC8qcGFyYW1zKi9cbiAgICBjdHhbMV07XG4gIH1cbiAgbG9naW5tb2RhbCA9IG5ldyBMb2dpbk1vZGFsKHsgcHJvcHM6IGxvZ2lubW9kYWxfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChsb2dpbm1vZGFsLCBcImRpc3BsYXlcIiwgbG9naW5tb2RhbF9kaXNwbGF5X2JpbmRpbmcpKTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKGxvZ2lubW9kYWwsIFwicGFyYW1zXCIsIGxvZ2lubW9kYWxfcGFyYW1zX2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChsb2dpbm1vZGFsLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChsb2dpbm1vZGFsLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHAoY3R4MiwgZGlydHkpIHtcbiAgICAgIGNvbnN0IGxvZ2lubW9kYWxfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypvblN1Y2Nlc3MqL1xuICAgICAgNClcbiAgICAgICAgbG9naW5tb2RhbF9jaGFuZ2VzLm9uU3VjY2Vzc0xvZ2luID0gLypvblN1Y2Nlc3MqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5ICYmIGRpcnR5ICYgLypkaXNwbGF5Ki9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheSA9IHRydWU7XG4gICAgICAgIGxvZ2lubW9kYWxfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0aW5nX3BhcmFtcyAmJiBkaXJ0eSAmIC8qcGFyYW1zKi9cbiAgICAgIDIpIHtcbiAgICAgICAgdXBkYXRpbmdfcGFyYW1zID0gdHJ1ZTtcbiAgICAgICAgbG9naW5tb2RhbF9jaGFuZ2VzLnBhcmFtcyA9IC8qcGFyYW1zKi9cbiAgICAgICAgY3R4MlsxXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX3BhcmFtcyA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGxvZ2lubW9kYWwuJHNldChsb2dpbm1vZGFsX2NoYW5nZXMpO1xuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obG9naW5tb2RhbC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChsb2dpbm1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQobG9naW5tb2RhbCwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfaWZfYmxvY2tfMShjdHgpIHtcbiAgbGV0IGxvYWRlcjtcbiAgbGV0IGN1cnJlbnQ7XG4gIGxvYWRlciA9IG5ldyBMb2FkZXIoe30pO1xuICByZXR1cm4ge1xuICAgIGMoKSB7XG4gICAgICBjcmVhdGVfY29tcG9uZW50KGxvYWRlci4kJC5mcmFnbWVudCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBtb3VudF9jb21wb25lbnQobG9hZGVyLCB0YXJnZXQsIGFuY2hvcik7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIHA6IG5vb3AsXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4obG9hZGVyLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gdHJ1ZTtcbiAgICB9LFxuICAgIG8obG9jYWwpIHtcbiAgICAgIHRyYW5zaXRpb25fb3V0KGxvYWRlci4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGRlc3Ryb3lfY29tcG9uZW50KGxvYWRlciwgZGV0YWNoaW5nKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfZWxzZV9ibG9jayhjdHgpIHtcbiAgbGV0IHByb2ZpbGVtb2RhbDtcbiAgbGV0IHVwZGF0aW5nX2Rpc3BsYXk7XG4gIGxldCBjdXJyZW50O1xuICBmdW5jdGlvbiBwcm9maWxlbW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgY3R4WzE5XSh2YWx1ZSk7XG4gIH1cbiAgbGV0IHByb2ZpbGVtb2RhbF9wcm9wcyA9IHtcbiAgICBjbG9zZU1vZGFsOiAoXG4gICAgICAvKmNsb3NlTW9kYWwqL1xuICAgICAgY3R4WzVdXG4gICAgKSxcbiAgICBvblN1Y2Nlc3NMb2dvdXQ6IChcbiAgICAgIC8qb25TdWNjZXNzKi9cbiAgICAgIGN0eFsyXVxuICAgICksXG4gICAgbWVtYmVyOiAoXG4gICAgICAvKm1lbWJlciovXG4gICAgICBjdHhbM11cbiAgICApXG4gIH07XG4gIGlmIChcbiAgICAvKmRpc3BsYXkqL1xuICAgIGN0eFswXSAhPT0gdm9pZCAwXG4gICkge1xuICAgIHByb2ZpbGVtb2RhbF9wcm9wcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICBjdHhbMF07XG4gIH1cbiAgcHJvZmlsZW1vZGFsID0gbmV3IFByb2ZpbGVNb2RhbCh7IHByb3BzOiBwcm9maWxlbW9kYWxfcHJvcHMgfSk7XG4gIGJpbmRpbmdfY2FsbGJhY2tzLnB1c2goKCkgPT4gYmluZChwcm9maWxlbW9kYWwsIFwiZGlzcGxheVwiLCBwcm9maWxlbW9kYWxfZGlzcGxheV9iaW5kaW5nKSk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGNyZWF0ZV9jb21wb25lbnQocHJvZmlsZW1vZGFsLiQkLmZyYWdtZW50KTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIG1vdW50X2NvbXBvbmVudChwcm9maWxlbW9kYWwsIHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgY29uc3QgcHJvZmlsZW1vZGFsX2NoYW5nZXMgPSB7fTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qb25TdWNjZXNzKi9cbiAgICAgIDQpXG4gICAgICAgIHByb2ZpbGVtb2RhbF9jaGFuZ2VzLm9uU3VjY2Vzc0xvZ291dCA9IC8qb25TdWNjZXNzKi9cbiAgICAgICAgY3R4MlsyXTtcbiAgICAgIGlmIChkaXJ0eSAmIC8qbWVtYmVyKi9cbiAgICAgIDgpXG4gICAgICAgIHByb2ZpbGVtb2RhbF9jaGFuZ2VzLm1lbWJlciA9IC8qbWVtYmVyKi9cbiAgICAgICAgY3R4MlszXTtcbiAgICAgIGlmICghdXBkYXRpbmdfZGlzcGxheSAmJiBkaXJ0eSAmIC8qZGlzcGxheSovXG4gICAgICAxKSB7XG4gICAgICAgIHVwZGF0aW5nX2Rpc3BsYXkgPSB0cnVlO1xuICAgICAgICBwcm9maWxlbW9kYWxfY2hhbmdlcy5kaXNwbGF5ID0gLypkaXNwbGF5Ki9cbiAgICAgICAgY3R4MlswXTtcbiAgICAgICAgYWRkX2ZsdXNoX2NhbGxiYWNrKCgpID0+IHVwZGF0aW5nX2Rpc3BsYXkgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgICBwcm9maWxlbW9kYWwuJHNldChwcm9maWxlbW9kYWxfY2hhbmdlcyk7XG4gICAgfSxcbiAgICBpKGxvY2FsKSB7XG4gICAgICBpZiAoY3VycmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9pbihwcm9maWxlbW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQocHJvZmlsZW1vZGFsLiQkLmZyYWdtZW50LCBsb2NhbCk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgZGVzdHJveV9jb21wb25lbnQocHJvZmlsZW1vZGFsLCBkZXRhY2hpbmcpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9pZl9ibG9ja185KGN0eCkge1xuICBsZXQgbW9iaWxlcHJvZmlsZW1vZGFsO1xuICBsZXQgdXBkYXRpbmdfZGlzcGxheTtcbiAgbGV0IGN1cnJlbnQ7XG4gIGZ1bmN0aW9uIG1vYmlsZXByb2ZpbGVtb2RhbF9kaXNwbGF5X2JpbmRpbmcodmFsdWUpIHtcbiAgICBjdHhbMThdKHZhbHVlKTtcbiAgfVxuICBsZXQgbW9iaWxlcHJvZmlsZW1vZGFsX3Byb3BzID0ge1xuICAgIGNsb3NlTW9kYWw6IChcbiAgICAgIC8qY2xvc2VNb2RhbCovXG4gICAgICBjdHhbNV1cbiAgICApLFxuICAgIG9uU3VjY2Vzc0xvZ291dDogKFxuICAgICAgLypvblN1Y2Nlc3MqL1xuICAgICAgY3R4WzJdXG4gICAgKSxcbiAgICBtZW1iZXI6IChcbiAgICAgIC8qbWVtYmVyKi9cbiAgICAgIGN0eFszXVxuICAgIClcbiAgfTtcbiAgaWYgKFxuICAgIC8qZGlzcGxheSovXG4gICAgY3R4WzBdICE9PSB2b2lkIDBcbiAgKSB7XG4gICAgbW9iaWxlcHJvZmlsZW1vZGFsX3Byb3BzLmRpc3BsYXkgPSAvKmRpc3BsYXkqL1xuICAgIGN0eFswXTtcbiAgfVxuICBtb2JpbGVwcm9maWxlbW9kYWwgPSBuZXcgTW9iaWxlUHJvZmlsZU1vZGFsKHsgcHJvcHM6IG1vYmlsZXByb2ZpbGVtb2RhbF9wcm9wcyB9KTtcbiAgYmluZGluZ19jYWxsYmFja3MucHVzaCgoKSA9PiBiaW5kKG1vYmlsZXByb2ZpbGVtb2RhbCwgXCJkaXNwbGF5XCIsIG1vYmlsZXByb2ZpbGVtb2RhbF9kaXNwbGF5X2JpbmRpbmcpKTtcbiAgcmV0dXJuIHtcbiAgICBjKCkge1xuICAgICAgY3JlYXRlX2NvbXBvbmVudChtb2JpbGVwcm9maWxlbW9kYWwuJCQuZnJhZ21lbnQpO1xuICAgIH0sXG4gICAgbSh0YXJnZXQsIGFuY2hvcikge1xuICAgICAgbW91bnRfY29tcG9uZW50KG1vYmlsZXByb2ZpbGVtb2RhbCwgdGFyZ2V0LCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIGRpcnR5KSB7XG4gICAgICBjb25zdCBtb2JpbGVwcm9maWxlbW9kYWxfY2hhbmdlcyA9IHt9O1xuICAgICAgaWYgKGRpcnR5ICYgLypvblN1Y2Nlc3MqL1xuICAgICAgNClcbiAgICAgICAgbW9iaWxlcHJvZmlsZW1vZGFsX2NoYW5nZXMub25TdWNjZXNzTG9nb3V0ID0gLypvblN1Y2Nlc3MqL1xuICAgICAgICBjdHgyWzJdO1xuICAgICAgaWYgKGRpcnR5ICYgLyptZW1iZXIqL1xuICAgICAgOClcbiAgICAgICAgbW9iaWxlcHJvZmlsZW1vZGFsX2NoYW5nZXMubWVtYmVyID0gLyptZW1iZXIqL1xuICAgICAgICBjdHgyWzNdO1xuICAgICAgaWYgKCF1cGRhdGluZ19kaXNwbGF5ICYmIGRpcnR5ICYgLypkaXNwbGF5Ki9cbiAgICAgIDEpIHtcbiAgICAgICAgdXBkYXRpbmdfZGlzcGxheSA9IHRydWU7XG4gICAgICAgIG1vYmlsZXByb2ZpbGVtb2RhbF9jaGFuZ2VzLmRpc3BsYXkgPSAvKmRpc3BsYXkqL1xuICAgICAgICBjdHgyWzBdO1xuICAgICAgICBhZGRfZmx1c2hfY2FsbGJhY2soKCkgPT4gdXBkYXRpbmdfZGlzcGxheSA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIG1vYmlsZXByb2ZpbGVtb2RhbC4kc2V0KG1vYmlsZXByb2ZpbGVtb2RhbF9jaGFuZ2VzKTtcbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKG1vYmlsZXByb2ZpbGVtb2RhbC4kJC5mcmFnbWVudCwgbG9jYWwpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChtb2JpbGVwcm9maWxlbW9kYWwuJCQuZnJhZ21lbnQsIGxvY2FsKTtcbiAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGQoZGV0YWNoaW5nKSB7XG4gICAgICBkZXN0cm95X2NvbXBvbmVudChtb2JpbGVwcm9maWxlbW9kYWwsIGRldGFjaGluZyk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2RlZmF1bHRfc2xvdChjdHgpIHtcbiAgbGV0IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgbGV0IGlmX2Jsb2NrO1xuICBsZXQgaWZfYmxvY2tfYW5jaG9yO1xuICBsZXQgY3VycmVudDtcbiAgY29uc3QgaWZfYmxvY2tfY3JlYXRvcnMgPSBbY3JlYXRlX2lmX2Jsb2NrXzksIGNyZWF0ZV9lbHNlX2Jsb2NrXTtcbiAgY29uc3QgaWZfYmxvY2tzID0gW107XG4gIGZ1bmN0aW9uIHNlbGVjdF9ibG9ja190eXBlXzIoY3R4MiwgZGlydHkpIHtcbiAgICBpZiAoXG4gICAgICAvKm1hdGNoZXMqL1xuICAgICAgY3R4MlsyNl1cbiAgICApXG4gICAgICByZXR1cm4gMDtcbiAgICByZXR1cm4gMTtcbiAgfVxuICBjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPSBzZWxlY3RfYmxvY2tfdHlwZV8yKGN0eCk7XG4gIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eCk7XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGlmX2Jsb2NrLmMoKTtcbiAgICAgIGlmX2Jsb2NrX2FuY2hvciA9IGVtcHR5KCk7XG4gICAgfSxcbiAgICBtKHRhcmdldCwgYW5jaG9yKSB7XG4gICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICAgIGluc2VydCh0YXJnZXQsIGlmX2Jsb2NrX2FuY2hvciwgYW5jaG9yKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgcChjdHgyLCBkaXJ0eSkge1xuICAgICAgbGV0IHByZXZpb3VzX2Jsb2NrX2luZGV4ID0gY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICAgICAgY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGVfMihjdHgyKTtcbiAgICAgIGlmIChjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXggPT09IHByZXZpb3VzX2Jsb2NrX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLnAoY3R4MiwgZGlydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgIHRyYW5zaXRpb25fb3V0KGlmX2Jsb2Nrc1twcmV2aW91c19ibG9ja19pbmRleF0sIDEsIDEsICgpID0+IHtcbiAgICAgICAgICBpZl9ibG9ja3NbcHJldmlvdXNfYmxvY2tfaW5kZXhdID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICBpZiAoIWlmX2Jsb2NrKSB7XG4gICAgICAgICAgaWZfYmxvY2sgPSBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XSA9IGlmX2Jsb2NrX2NyZWF0b3JzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0oY3R4Mik7XG4gICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmX2Jsb2NrLnAoY3R4MiwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2ssIDEpO1xuICAgICAgICBpZl9ibG9jay5tKGlmX2Jsb2NrX2FuY2hvci5wYXJlbnROb2RlLCBpZl9ibG9ja19hbmNob3IpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaShsb2NhbCkge1xuICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRyYW5zaXRpb25faW4oaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBvKGxvY2FsKSB7XG4gICAgICB0cmFuc2l0aW9uX291dChpZl9ibG9jayk7XG4gICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgfSxcbiAgICBkKGRldGFjaGluZykge1xuICAgICAgaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0uZChkZXRhY2hpbmcpO1xuICAgICAgaWYgKGRldGFjaGluZylcbiAgICAgICAgZGV0YWNoKGlmX2Jsb2NrX2FuY2hvcik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2ZyYWdtZW50KGN0eCkge1xuICBsZXQgY3VycmVudF9ibG9ja190eXBlX2luZGV4O1xuICBsZXQgaWZfYmxvY2s7XG4gIGxldCBpZl9ibG9ja19hbmNob3I7XG4gIGxldCBjdXJyZW50O1xuICBjb25zdCBpZl9ibG9ja19jcmVhdG9ycyA9IFtjcmVhdGVfaWZfYmxvY2ssIGNyZWF0ZV9pZl9ibG9ja18xMV07XG4gIGNvbnN0IGlmX2Jsb2NrcyA9IFtdO1xuICBmdW5jdGlvbiBzZWxlY3RfYmxvY2tfdHlwZShjdHgyLCBkaXJ0eSkge1xuICAgIGlmIChcbiAgICAgIC8qZGlzcGxheSovXG4gICAgICBjdHgyWzBdICE9PSBcImluc3BlY3RvclwiXG4gICAgKVxuICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKFxuICAgICAgLypkaXNwbGF5Ki9cbiAgICAgIGN0eDJbMF0gPT09IFwiaW5zcGVjdG9yXCJcbiAgICApXG4gICAgICByZXR1cm4gMTtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKH4oY3VycmVudF9ibG9ja190eXBlX2luZGV4ID0gc2VsZWN0X2Jsb2NrX3R5cGUoY3R4KSkpIHtcbiAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdID0gaWZfYmxvY2tfY3JlYXRvcnNbY3VycmVudF9ibG9ja190eXBlX2luZGV4XShjdHgpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYygpIHtcbiAgICAgIGlmIChpZl9ibG9jaylcbiAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgaWZfYmxvY2tfYW5jaG9yID0gZW1wdHkoKTtcbiAgICB9LFxuICAgIG0odGFyZ2V0LCBhbmNob3IpIHtcbiAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLm0odGFyZ2V0LCBhbmNob3IpO1xuICAgICAgfVxuICAgICAgaW5zZXJ0KHRhcmdldCwgaWZfYmxvY2tfYW5jaG9yLCBhbmNob3IpO1xuICAgICAgY3VycmVudCA9IHRydWU7XG4gICAgfSxcbiAgICBwKGN0eDIsIFtkaXJ0eV0pIHtcbiAgICAgIGxldCBwcmV2aW91c19ibG9ja19pbmRleCA9IGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleDtcbiAgICAgIGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9IHNlbGVjdF9ibG9ja190eXBlKGN0eDIpO1xuICAgICAgaWYgKGN1cnJlbnRfYmxvY2tfdHlwZV9pbmRleCA9PT0gcHJldmlvdXNfYmxvY2tfaW5kZXgpIHtcbiAgICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpIHtcbiAgICAgICAgICBpZl9ibG9ja3NbY3VycmVudF9ibG9ja190eXBlX2luZGV4XS5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlmX2Jsb2NrKSB7XG4gICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSwgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgaWZfYmxvY2tzW3ByZXZpb3VzX2Jsb2NrX2luZGV4XSA9IG51bGw7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKH5jdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXgpIHtcbiAgICAgICAgICBpZl9ibG9jayA9IGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdO1xuICAgICAgICAgIGlmICghaWZfYmxvY2spIHtcbiAgICAgICAgICAgIGlmX2Jsb2NrID0gaWZfYmxvY2tzW2N1cnJlbnRfYmxvY2tfdHlwZV9pbmRleF0gPSBpZl9ibG9ja19jcmVhdG9yc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdKGN0eDIpO1xuICAgICAgICAgICAgaWZfYmxvY2suYygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZl9ibG9jay5wKGN0eDIsIGRpcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhbnNpdGlvbl9pbihpZl9ibG9jaywgMSk7XG4gICAgICAgICAgaWZfYmxvY2subShpZl9ibG9ja19hbmNob3IucGFyZW50Tm9kZSwgaWZfYmxvY2tfYW5jaG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZl9ibG9jayA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGkobG9jYWwpIHtcbiAgICAgIGlmIChjdXJyZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICB0cmFuc2l0aW9uX2luKGlmX2Jsb2NrKTtcbiAgICAgIGN1cnJlbnQgPSB0cnVlO1xuICAgIH0sXG4gICAgbyhsb2NhbCkge1xuICAgICAgdHJhbnNpdGlvbl9vdXQoaWZfYmxvY2spO1xuICAgICAgY3VycmVudCA9IGZhbHNlO1xuICAgIH0sXG4gICAgZChkZXRhY2hpbmcpIHtcbiAgICAgIGlmICh+Y3VycmVudF9ibG9ja190eXBlX2luZGV4KSB7XG4gICAgICAgIGlmX2Jsb2Nrc1tjdXJyZW50X2Jsb2NrX3R5cGVfaW5kZXhdLmQoZGV0YWNoaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXRhY2hpbmcpXG4gICAgICAgIGRldGFjaChpZl9ibG9ja19hbmNob3IpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGluc3RhbmNlKCQkc2VsZiwgJCRwcm9wcywgJCRpbnZhbGlkYXRlKSB7XG4gIGxldCBzaG93TG9hZGVyMjtcbiAgbGV0IHsgZGlzcGxheSA9IFwibG9naW5cIiB9ID0gJCRwcm9wcztcbiAgbGV0IHsgb25TdWNjZXNzIH0gPSAkJHByb3BzO1xuICBsZXQgeyBwYXJhbXMgfSA9ICQkcHJvcHM7XG4gIGxldCBhcHBMb2FkaW5nID0gdHJ1ZTtcbiAgbGV0IG1lbWJlckxvYWRpbmcgPSBkaXNwbGF5ID09PSBcInByb2ZpbGVcIiA/IHRydWUgOiBmYWxzZTtcbiAgbGV0IG1lbWJlcjtcbiAgZnVuY3Rpb24gc2V0QXBwU3RvcmUoZGF0YSkge1xuICAgIEFwcFN0b3JlLnVwZGF0ZSgoKSA9PiBkYXRhKTtcbiAgICBUZXh0U3RvcmUuc2V0KHsgdGV4dDogZGF0YS5zc29UZXh0IHx8IHt9IH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gICAgJCRpbnZhbGlkYXRlKDcsIGFwcExvYWRpbmcgPSB0cnVlKTtcbiAgICBvblN1Y2Nlc3MoeyB0eXBlOiBcIkNMT1NFRFwiIH0pO1xuICAgIGNvbnN0IG1vZGFsMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbXNPdmVybGF5XCIpO1xuICAgIGlmIChtb2RhbDIpIHtcbiAgICAgIG1vZGFsMi5yZW1vdmUoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2xvc2VNb2RhbE91dHNpZGUoZSkge1xuICAgIGlmIChlLnRhcmdldC5pZCA9PT0gXCJtc092ZXJsYXlcIikge1xuICAgICAgY2xvc2VNb2RhbCgpO1xuICAgIH1cbiAgfVxuICBjb25zdCBnZXRBcHAgPSAoKSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSB5aWVsZCB3aW5kb3cuJG1lbWJlcnN0YWNrRG9tLmdldEFwcCgpO1xuICAgIHNldEFwcFN0b3JlKGRhdGEpO1xuICB9KTtcbiAgZnVuY3Rpb24gY2hlY2tBcHAoKSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmFwcCkge1xuICAgICAgICBzZXRBcHBTdG9yZShwYXJhbXMuYXBwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIGdldEFwcCgpO1xuICAgICAgfVxuICAgICAgJCRpbnZhbGlkYXRlKDcsIGFwcExvYWRpbmcgPSBmYWxzZSk7XG4gICAgICAkJGludmFsaWRhdGUoNCwgc2hvd0xvYWRlcjIgPSBmYWxzZSk7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgZ2V0TWVtYmVyID0gKCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0geWllbGQgd2luZG93LiRtZW1iZXJzdGFja0RvbS5nZXRDdXJyZW50TWVtYmVyKCk7XG4gICAgJCRpbnZhbGlkYXRlKDgsIG1lbWJlckxvYWRpbmcgPSBmYWxzZSk7XG4gICAgJCRpbnZhbGlkYXRlKDMsIG1lbWJlciA9IGRhdGEpO1xuICAgIGlmIChkaXNwbGF5ID09PSBcInByb2ZpbGVcIiAmJiAhZGF0YSkge1xuICAgICAgY2xvc2VNb2RhbCgpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVtYmVyIG5vdCBsb2dnZWQgaW5cIik7XG4gICAgfVxuICB9KTtcbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgY2hlY2tBcHAoKTtcbiAgICBpZiAoZGlzcGxheSA9PT0gXCJwcm9maWxlXCIpIHtcbiAgICAgIGdldE1lbWJlcigpO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGxvZ2lubW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZGlzcGxheSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5KTtcbiAgfVxuICBmdW5jdGlvbiBsb2dpbm1vZGFsX3BhcmFtc19iaW5kaW5nKHZhbHVlKSB7XG4gICAgcGFyYW1zID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDEsIHBhcmFtcyk7XG4gIH1cbiAgZnVuY3Rpb24gc2lnbnVwbW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZGlzcGxheSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5KTtcbiAgfVxuICBmdW5jdGlvbiBzaWdudXBtb2RhbF9wYXJhbXNfYmluZGluZyh2YWx1ZSkge1xuICAgIHBhcmFtcyA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgxLCBwYXJhbXMpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkcmVzZXRtb2RhbF9kaXNwbGF5X2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5ID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkdG9rZW5tb2RhbF9kaXNwbGF5X2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5ID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3Jkc3VjY2Vzc21vZGFsX2Rpc3BsYXlfYmluZGluZyh2YWx1ZSkge1xuICAgIGRpc3BsYXkgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFzc3dvcmRsZXNzdG9rZW5tb2RhbF9kaXNwbGF5X2JpbmRpbmcodmFsdWUpIHtcbiAgICBkaXNwbGF5ID0gdmFsdWU7XG4gICAgJCRpbnZhbGlkYXRlKDAsIGRpc3BsYXkpO1xuICB9XG4gIGZ1bmN0aW9uIHBhc3N3b3JkbGVzc3Rva2VubW9kYWxfcGFyYW1zX2JpbmRpbmcodmFsdWUpIHtcbiAgICBwYXJhbXMgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMSwgcGFyYW1zKTtcbiAgfVxuICBmdW5jdGlvbiBtb2JpbGVwcm9maWxlbW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZGlzcGxheSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5KTtcbiAgfVxuICBmdW5jdGlvbiBwcm9maWxlbW9kYWxfZGlzcGxheV9iaW5kaW5nKHZhbHVlKSB7XG4gICAgZGlzcGxheSA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5KTtcbiAgfVxuICBmdW5jdGlvbiB0ZXN0Y2FyZG1vZGFsX2Rpc3BsYXlfYmluZGluZyh2YWx1ZSkge1xuICAgIGRpc3BsYXkgPSB2YWx1ZTtcbiAgICAkJGludmFsaWRhdGUoMCwgZGlzcGxheSk7XG4gIH1cbiAgZnVuY3Rpb24gdGVzdGNhcmRtb2RhbF9wYXJhbXNfYmluZGluZyh2YWx1ZSkge1xuICAgIHBhcmFtcyA9IHZhbHVlO1xuICAgICQkaW52YWxpZGF0ZSgxLCBwYXJhbXMpO1xuICB9XG4gICQkc2VsZi4kJHNldCA9ICgkJHByb3BzMikgPT4ge1xuICAgIGlmIChcImRpc3BsYXlcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgwLCBkaXNwbGF5ID0gJCRwcm9wczIuZGlzcGxheSk7XG4gICAgaWYgKFwib25TdWNjZXNzXCIgaW4gJCRwcm9wczIpXG4gICAgICAkJGludmFsaWRhdGUoMiwgb25TdWNjZXNzID0gJCRwcm9wczIub25TdWNjZXNzKTtcbiAgICBpZiAoXCJwYXJhbXNcIiBpbiAkJHByb3BzMilcbiAgICAgICQkaW52YWxpZGF0ZSgxLCBwYXJhbXMgPSAkJHByb3BzMi5wYXJhbXMpO1xuICB9O1xuICAkJHNlbGYuJCQudXBkYXRlID0gKCkgPT4ge1xuICAgIGlmICgkJHNlbGYuJCQuZGlydHkgJiAvKmFwcExvYWRpbmcsIG1lbWJlckxvYWRpbmcqL1xuICAgIDM4NCkge1xuICAgICAgJCRpbnZhbGlkYXRlKDQsIHNob3dMb2FkZXIyID0gYXBwTG9hZGluZyB8fCBtZW1iZXJMb2FkaW5nKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBbXG4gICAgZGlzcGxheSxcbiAgICBwYXJhbXMsXG4gICAgb25TdWNjZXNzLFxuICAgIG1lbWJlcixcbiAgICBzaG93TG9hZGVyMixcbiAgICBjbG9zZU1vZGFsLFxuICAgIGNsb3NlTW9kYWxPdXRzaWRlLFxuICAgIGFwcExvYWRpbmcsXG4gICAgbWVtYmVyTG9hZGluZyxcbiAgICBsb2dpbm1vZGFsX2Rpc3BsYXlfYmluZGluZyxcbiAgICBsb2dpbm1vZGFsX3BhcmFtc19iaW5kaW5nLFxuICAgIHNpZ251cG1vZGFsX2Rpc3BsYXlfYmluZGluZyxcbiAgICBzaWdudXBtb2RhbF9wYXJhbXNfYmluZGluZyxcbiAgICBwYXNzd29yZHJlc2V0bW9kYWxfZGlzcGxheV9iaW5kaW5nLFxuICAgIHBhc3N3b3JkdG9rZW5tb2RhbF9kaXNwbGF5X2JpbmRpbmcsXG4gICAgcGFzc3dvcmRzdWNjZXNzbW9kYWxfZGlzcGxheV9iaW5kaW5nLFxuICAgIHBhc3N3b3JkbGVzc3Rva2VubW9kYWxfZGlzcGxheV9iaW5kaW5nLFxuICAgIHBhc3N3b3JkbGVzc3Rva2VubW9kYWxfcGFyYW1zX2JpbmRpbmcsXG4gICAgbW9iaWxlcHJvZmlsZW1vZGFsX2Rpc3BsYXlfYmluZGluZyxcbiAgICBwcm9maWxlbW9kYWxfZGlzcGxheV9iaW5kaW5nLFxuICAgIHRlc3RjYXJkbW9kYWxfZGlzcGxheV9iaW5kaW5nLFxuICAgIHRlc3RjYXJkbW9kYWxfcGFyYW1zX2JpbmRpbmdcbiAgXTtcbn1cbnZhciBNYWluID0gY2xhc3MgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpbml0KHRoaXMsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIHNhZmVfbm90X2VxdWFsLCB7IGRpc3BsYXk6IDAsIG9uU3VjY2VzczogMiwgcGFyYW1zOiAxIH0sIGFkZF9jc3MpO1xuICB9XG59O1xuXG4vLyBzcmMvbWV0aG9kcy9kb20vbWV0aG9kcy50c1xudmFyIGluaXREZWZhdWx0TWVzc2FnZUJveCA9ICgpID0+IHtcbiAgaW5pdENTUygpO1xuICBhZGRTdWNjZXNzQm94KCk7XG4gIGFkZEVycm9yQm94KCk7XG59O1xudmFyIHNob3dNZXNzYWdlID0gKG1zZywgaXNFcnJvcikgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIGlmICghbXNnKVxuICAgIHJldHVybjtcbiAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1tcy1tZXNzYWdlPSdzdWNjZXNzJ11cIikpIHtcbiAgICBpbml0RGVmYXVsdE1lc3NhZ2VCb3goKTtcbiAgfVxuICBsZXQgbWVzc2FnZUJveDtcbiAgaWYgKGlzRXJyb3IpIHtcbiAgICBtZXNzYWdlQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLW1zLW1lc3NhZ2U9J2Vycm9yJ11cIik7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZUJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1tcy1tZXNzYWdlPSdzdWNjZXNzJ11cIik7XG4gIH1cbiAgY29uc3QgbWVzc2FnZVRleHRCb3ggPSBtZXNzYWdlQm94LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1tcy1tZXNzYWdlLXRleHRdXCIpO1xuICBpZiAobWVzc2FnZVRleHRCb3gpIHtcbiAgICBtZXNzYWdlVGV4dEJveC5pbm5lckhUTUwgPSBtc2c7XG4gIH1cbiAgbWVzc2FnZUJveC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICBjb25zdCBjbG9zZUJ0biA9IG1lc3NhZ2VCb3gucXVlcnlTZWxlY3RvcihcIltkYXRhLW1zLW1lc3NhZ2UtY2xvc2VdXCIpO1xuICBjbG9zZUJ0biA9PSBudWxsID8gdm9pZCAwIDogY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICBtZXNzYWdlQm94LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgfSk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIG1lc3NhZ2VCb3guc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICB9LCA3ZTMpO1xufSk7XG52YXIgc2hvd0xvYWRlciA9IChlbGVtZW50MikgPT4ge1xuICBpZiAoZWxlbWVudDIpIHtcbiAgICBlbGVtZW50Mi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBjc3NFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgY29uc3QgY3NzID0gXCIubXNfX2xvYWRlciB7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IG92ZXJmbG93OiBoaWRkZW47IHBvc2l0aW9uOiBmaXhlZDsgdG9wOiAwOyBsZWZ0OiAwOyBkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgYWxpZ24taXRlbXM6IGNlbnRlcjsgei1pbmRleDogMTAwMDAwMDA7IH0gI21zTG9hZGVyIHBhdGggeyBmaWxsOiAjMDA3YWNlOyB9XCI7XG4gIGNzc0VsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGNzc0VsKTtcbiAgY29uc3QgbG9hZGVySFRNTCA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCI/PjxkaXYgY2xhc3M9XCJtc19fbG9hZGVyXCI+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmVyc2lvbj1cIjEuMVwiIGlkPVwibXNMb2FkZXJcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHdpZHRoPVwiNDBweFwiIGhlaWdodD1cIjQwcHhcIiB2aWV3Qm94PVwiMCAwIDUwIDUwXCIgc3R5bGU9XCJlbmFibGUtYmFja2dyb3VuZDogbmV3IDAgMCA1MCA1MDsgei1pbmRleDoxMDAwMDAwXCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48cGF0aCBmaWxsPVwiIzAwMFwiIGQ9XCJNNDMuOTM1LDI1LjE0NWMwLTEwLjMxOC04LjM2NC0xOC42ODMtMTguNjgzLTE4LjY4M2MtMTAuMzE4LDAtMTguNjgzLDguMzY1LTE4LjY4MywxOC42ODNoNC4wNjhjMC04LjA3MSw2LjU0My0xNC42MTUsMTQuNjE1LTE0LjYxNWM4LjA3MiwwLDE0LjYxNSw2LjU0MywxNC42MTUsMTQuNjE1SDQzLjkzNXpcIj48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVUeXBlPVwieG1sXCIgYXR0cmlidXRlTmFtZT1cInRyYW5zZm9ybVwiIHR5cGU9XCJyb3RhdGVcIiBmcm9tPVwiMCAyNSAyNVwiIHRvPVwiMzYwIDI1IDI1XCIgZHVyPVwiMC42c1wiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiLz48L3BhdGg+PC9zdmc+PC9kaXY+JztcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LnNldEF0dHJpYnV0ZShcImRhdGEtbXMtbG9hZGVyXCIsIFwidHJ1ZVwiKTtcbiAgZGl2LmlubmVySFRNTCA9IGxvYWRlckhUTUw7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICAgIH0pO1xuICB9XG59O1xudmFyIGhpZGVMb2FkZXIgPSAoZWxlbWVudDIpID0+IHtcbiAgdmFyIF9hO1xuICBpZiAoZWxlbWVudDIpIHtcbiAgICBlbGVtZW50Mi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgcmV0dXJuO1xuICB9XG4gIChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1tcy1sb2FkZXJdXCIpKSA9PSBudWxsID8gdm9pZCAwIDogX2EucmVtb3ZlKCk7XG59O1xudmFyIG1vZGFsO1xudmFyIG9wZW5Nb2RhbCA9IChfMCwgLi4uXzEpID0+IF9fYXN5bmModm9pZCAwLCBbXzAsIC4uLl8xXSwgZnVuY3Rpb24qICh0eXBlLCBwYXJhbXMgPSB7fSkge1xuICBsZXQgcmVzb2x2ZU1vZGFsO1xuICBjb25zdCBtb2RhbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIHJlc29sdmVNb2RhbCA9IHJlc29sdmU7XG4gIH0pO1xuICBtb2RhbCA9IG5ldyBNYWluKHtcbiAgICB0YXJnZXQ6IGRvY3VtZW50LmJvZHksXG4gICAgcHJvcHM6IHtcbiAgICAgIGRpc3BsYXk6IHR5cGUudG9Mb3dlckNhc2UoKSxcbiAgICAgIHBhcmFtcyxcbiAgICAgIG9uU3VjY2VzczogcmVzb2x2ZU1vZGFsXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1vZGFsUHJvbWlzZTtcbn0pO1xudmFyIGhpZGVNb2RhbCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBtb2RhbCA9PSBudWxsID8gdm9pZCAwIDogbW9kYWwuJGRlc3Ryb3koKTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG59O1xuXG4vLyBzcmMvdXRpbHMvY29va2llcy50c1xuaW1wb3J0IENvb2tpZSBmcm9tIFwianMtY29va2llXCI7XG52YXIgbWVtYmVyQXV0aFRva2VuTmFtZSA9IFwiX21zLW1pZFwiO1xuZnVuY3Rpb24gaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSB7XG4gIHRyeSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZXN0XCIsIFwidGVzdFwiKTtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInRlc3RcIik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbnZhciBsb2NhbFN0b3JhZ2VBdmFpbGFibGUgPSBpc0xvY2FsU3RvcmFnZUF2YWlsYWJsZSgpO1xudmFyIHVzZUNvb2tpZXMgPSBmYWxzZTtcbnZhciBzZXRDb29raWVPblJvb3REb21haW4gPSBmYWxzZTtcbnZhciBhcGlEb21haW47XG52YXIgc2V0VXNlQ29va2llcyA9IChzZXRDb29raWVPblJvb3QpID0+IHtcbiAgdXNlQ29va2llcyA9IHRydWU7XG4gIGlmIChzZXRDb29raWVPblJvb3QpXG4gICAgc2V0Q29va2llT25Sb290RG9tYWluID0gdHJ1ZTtcbn07XG52YXIgc2V0QXBpRG9tYWluID0gKGRvbWFpbikgPT4ge1xuICBhcGlEb21haW4gPSBkb21haW47XG59O1xudmFyIGV4dHJhY3REb21haW5Gcm9tSG9zdG5hbWUgPSAoaG9zdG5hbWUpID0+IHtcbiAgY29uc3QgaG9zdG5hbWVQYXJ0cyA9IGhvc3RuYW1lLnNwbGl0KFwiLlwiKTtcbiAgY29uc3QgaXNDb3VudHJ5Q29kZVRMRCA9IGhvc3RuYW1lUGFydHMubGVuZ3RoID49IDMgJiYgaG9zdG5hbWVQYXJ0c1tob3N0bmFtZVBhcnRzLmxlbmd0aCAtIDJdLmxlbmd0aCA8PSAzO1xuICBpZiAoaXNDb3VudHJ5Q29kZVRMRCkge1xuICAgIHJldHVybiBob3N0bmFtZVBhcnRzLnNsaWNlKC0zKS5qb2luKFwiLlwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaG9zdG5hbWVQYXJ0cy5zbGljZSgtMikuam9pbihcIi5cIik7XG4gIH1cbn07XG52YXIgdXNlQ29va2llc1ZhbGlkID0gKCkgPT4ge1xuICBpZiAoIXVzZUNvb2tpZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoc2V0Q29va2llT25Sb290RG9tYWluKSB7XG4gICAgY29uc3QgYXBpRG9tYWluSG9zdCA9IGV4dHJhY3REb21haW5Gcm9tSG9zdG5hbWUoYXBpRG9tYWluKTtcbiAgICBjb25zdCBjdXJyZW50SG9zdCA9IGV4dHJhY3REb21haW5Gcm9tSG9zdG5hbWUod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICByZXR1cm4gYXBpRG9tYWluSG9zdCA9PT0gY3VycmVudEhvc3Q7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIHNldE1lbWJlclRva2VuID0gKHRva2VuLCBleHBpcmVzKSA9PiB7XG4gIGlmIChsb2NhbFN0b3JhZ2VBdmFpbGFibGUgJiYgdXNlQ29va2llc1ZhbGlkKCkgPT09IGZhbHNlKSB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obWVtYmVyQXV0aFRva2VuTmFtZSwgdG9rZW4pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRvbWFpbiA9IGV4dHJhY3REb21haW5Gcm9tSG9zdG5hbWUod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgICBDb29raWUuc2V0KG1lbWJlckF1dGhUb2tlbk5hbWUsIHRva2VuLCBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICBleHBpcmVzOiBleHBpcmVzICYmIE51bWJlcihleHBpcmVzKSB8fCAxNCxcbiAgICAgIHNhbWVTaXRlOiBcInN0cmljdFwiXG4gICAgfSwgc2V0Q29va2llT25Sb290RG9tYWluICYmIHsgZG9tYWluIH0pKTtcbiAgfVxufTtcbnZhciByZW1vdmVNZW1iZXJUb2tlbiA9ICgpID0+IHtcbiAgaWYgKGxvY2FsU3RvcmFnZUF2YWlsYWJsZSkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKG1lbWJlckF1dGhUb2tlbk5hbWUpO1xuICB9XG4gIGNvbnN0IGRvbWFpbiA9IGV4dHJhY3REb21haW5Gcm9tSG9zdG5hbWUod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKTtcbiAgQ29va2llLnNldChtZW1iZXJBdXRoVG9rZW5OYW1lLCBcIlwiLCBfX3NwcmVhZFZhbHVlcyh7XG4gICAgZXhwaXJlczogLTEsXG4gICAgc2FtZVNpdGU6IFwic3RyaWN0XCJcbiAgfSwgc2V0Q29va2llT25Sb290RG9tYWluICYmIHsgZG9tYWluIH0pKTtcbiAgQ29va2llLnNldChtZW1iZXJBdXRoVG9rZW5OYW1lLCBcIlwiLCB7XG4gICAgZXhwaXJlczogLTEsXG4gICAgc2FtZVNpdGU6IFwic3RyaWN0XCJcbiAgfSk7XG59O1xudmFyIGdldE1lbWJlclRva2VuID0gKCkgPT4ge1xuICBpZiAobG9jYWxTdG9yYWdlQXZhaWxhYmxlKSB7XG4gICAgY29uc3QgbWVtQXV0aFRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obWVtYmVyQXV0aFRva2VuTmFtZSk7XG4gICAgaWYgKG1lbUF1dGhUb2tlbilcbiAgICAgIHJldHVybiBtZW1BdXRoVG9rZW47XG4gIH1cbiAgcmV0dXJuIENvb2tpZS5nZXQobWVtYmVyQXV0aFRva2VuTmFtZSk7XG59O1xudmFyIHNldE1lbWJlclRva2VuSWZBdmFpbGFibGUgPSAoKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICBjb25zdCBtZW1iZXJUb2tlbiA9IHVybFBhcmFtcy5nZXQoXCJtZW1iZXJUb2tlblwiKTtcbiAgICBpZiAobWVtYmVyVG9rZW4pXG4gICAgICBzZXRNZW1iZXJUb2tlbihtZW1iZXJUb2tlbik7XG4gIH1cbn07XG5cbi8vIHNyYy9tZXRob2RzL3JlcXVlc3RzL3JlcXVlc3RzLnRzXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbi8vIHNyYy9jb25zdGFudHMvZW5kcG9pbnRzLnRzXG52YXIgZW5kcG9pbnRzID0ge1xuICBBUEk6IFwiaHR0cHM6Ly9jbGllbnQubWVtYmVyc3RhY2suY29tXCJcbn07XG5cbi8vIHNyYy9tZXRob2RzL3JlcXVlc3RzL3JlcXVlc3RzLnRzXG52YXIgY3JlYXRlUmVxdWVzdEhhbmRsZXIgPSAoe1xuICBwdWJsaWNLZXksXG4gIGFwcElkLFxuICB0b2tlbixcbiAgY3VzdG9tRW5kcG9pbnRcbn0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzZW5kUmVxdWVzdDogKGRhdGEsIG9wdGlvbnMpID0+IF9fYXN5bmModm9pZCAwLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgdXJsIH0gPSBkYXRhO1xuICAgICAgICBjb25zdCBtZW1iZXJUb2tlbiA9IGdldE1lbWJlclRva2VuKCk7XG4gICAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSBbXG4gICAgICAgICAgKF9iID0gKF9hID0gZGF0YS5oZWFkZXJzKSA9PSBudWxsID8gdm9pZCAwIDogX2FbXCJBdXRob3JpemF0aW9uXCJdKSA9PSBudWxsID8gdm9pZCAwIDogX2IucmVwbGFjZShcIkJlYXJlciBcIiwgXCJcIiksXG4gICAgICAgICAgbWVtYmVyVG9rZW4sXG4gICAgICAgICAgb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy50b2tlblxuICAgICAgICBdLmZpbmQoKHgpID0+IHgpO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRVcmwgPSBgJHtjdXN0b21FbmRwb2ludCB8fCBlbmRwb2ludHMuQVBJfSR7dXJsfWA7XG4gICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIGF4aW9zKHtcbiAgICAgICAgICBtZXRob2Q6IGRhdGEubWV0aG9kLFxuICAgICAgICAgIGRhdGE6IGRhdGEuZGF0YSxcbiAgICAgICAgICB1cmw6IGZvcm1hdHRlZFVybCxcbiAgICAgICAgICBoZWFkZXJzOiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBhdXRoSGVhZGVyICYmIHsgYXV0aG9yaXphdGlvbjogYEJlYXJlciAke2F1dGhIZWFkZXJ9YCB9KSwgcHVibGljS2V5ICYmIHsgW1wiWC1BUEktS2V5XCIgLyogQVBJX0tFWSAqL106IHB1YmxpY0tleSB9KSwgYXBwSWQgJiYgeyBbXCJYLUFQUC1JRFwiIC8qIEFQUF9JRCAqL106IGFwcElkIH0pLCB7XG4gICAgICAgICAgICBbXCJYLVVzZXItQWdlbnRcIiAvKiBVU0VSX0FHRU5UICovXTogXCJAbWVtYmVyc3RhY2svY2xpZW50QDEuMi4wXCJcbiAgICAgICAgICB9KSwgZGF0YS5jb250ZW50VHlwZSAmJiB7IFwiQ29udGVudC1UeXBlXCI6IGRhdGEuY29udGVudFR5cGUgfSksXG4gICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoKF9jID0gcmVzID09IG51bGwgPyB2b2lkIDAgOiByZXMuaGVhZGVycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jW1wibXMtbWlkXCJdKSB7XG4gICAgICAgICAgdG9rZW4gPSByZXMuaGVhZGVyc1tcIm1zLW1pZFwiXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKF9kID0gcmVzID09IG51bGwgPyB2b2lkIDAgOiByZXMuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmVycm9yKSB7XG4gICAgICAgICAgaWYgKHJlcy5kYXRhLmVycm9yLm5hbWUgPT09IFwiSnNvbldlYlRva2VuRXJyb3JcIikge1xuICAgICAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgICBjb2RlOiBcImNsaWVudC9pbnZhbGlkLXRva2VuXCIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQW4gaW52YWxpZCB0b2tlbiBoYXMgYmVlbiBwcm92aWRlZC4gUGxlYXNlIG1ha2Ugc3VyZSB0aGUgdG9rZW4gaXMgdmFsaWQuXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IChfZSA9IHJlcy5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2UuZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcyA9PSBudWxsID8gdm9pZCAwIDogcmVzLmRhdGE7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICghZS5yZXNwb25zZSlcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB0aHJvdyAoKF9nID0gKF9mID0gZS5yZXNwb25zZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfZy5lcnJvcikgfHwgKChfaCA9IGUucmVzcG9uc2UpID09IG51bGwgPyB2b2lkIDAgOiBfaC5kYXRhKTtcbiAgICAgIH1cbiAgICB9KVxuICB9O1xufTtcblxuLy8gc3JjL2F1dGgvaW5kZXgudHNcbnZhciBjcmVhdGVPYnNlcnZhYmxlID0gKCkgPT4ge1xuICBjb25zdCBvYnNlcnZlciA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHJldHVybiB7XG4gICAgc3Vic2NyaWJlOiAoa2V5LCBmbikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm47XG4gICAgICByZXR1cm4gb2JzZXJ2ZXIuc2V0KGtleSwgZm4pO1xuICAgIH0sXG4gICAgdW5zdWJzY3JpYmU6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiBvYnNlcnZlci5kZWxldGUoa2V5KTtcbiAgICB9LFxuICAgIG5vdGlmeTogKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBbLi4ub2JzZXJ2ZXIudmFsdWVzKCldLmZvckVhY2goKGZuKSA9PiBmbihkYXRhKSk7XG4gICAgfVxuICB9O1xufTtcbnZhciBvYnNlcnZhYmxlID0gY3JlYXRlT2JzZXJ2YWJsZSgpO1xudmFyIGdldFBlcnNpc3RlZE1lbWJlciA9ICgpID0+IHtcbiAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlID09IG51bGwgPyB2b2lkIDAgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIl9tcy1tZW1cIikpO1xufTtcbnZhciBzZXRQZXJzaXN0ZWRNZW1iZXIgPSAobWVtYmVyKSA9PiB7XG4gIGlmIChtZW1iZXIpIHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkobWVtYmVyKTtcbiAgICBpZiAoZGF0YSlcbiAgICAgIGxvY2FsU3RvcmFnZSA9PSBudWxsID8gdm9pZCAwIDogbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJfbXMtbWVtXCIsIGRhdGEpO1xuICAgIG9ic2VydmFibGUubm90aWZ5KG1lbWJlcik7XG4gIH1cbn07XG52YXIgdXBkYXRlUGVyc2lzdGVkTWVtYmVyID0gKG1lbWJlcikgPT4ge1xuICBpZiAobWVtYmVyKSB7XG4gICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KG1lbWJlcik7XG4gICAgaWYgKGRhdGEpXG4gICAgICBsb2NhbFN0b3JhZ2UgPT0gbnVsbCA/IHZvaWQgMCA6IGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiX21zLW1lbVwiLCBkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBsb2NhbFN0b3JhZ2UgPT0gbnVsbCA/IHZvaWQgMCA6IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiX21zLW1lbVwiKTtcbiAgICByZW1vdmVNZW1iZXJUb2tlbigpO1xuICB9XG59O1xudmFyIHVuc2V0UGVyc2lzdGVkTWVtYmVyID0gKCkgPT4ge1xuICBsb2NhbFN0b3JhZ2UgPT0gbnVsbCA/IHZvaWQgMCA6IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiX21zLW1lbVwiKTtcbiAgcmVtb3ZlTWVtYmVyVG9rZW4oKTtcbiAgb2JzZXJ2YWJsZS5ub3RpZnkobnVsbCk7XG59O1xudmFyIG9uQXV0aENoYW5nZSA9IChjYikgPT4ge1xuICBjb25zdCBpZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlMyk7XG4gIG9ic2VydmFibGUuc3Vic2NyaWJlKGlkLCBjYik7XG4gIHJldHVybiB7XG4gICAgdW5zdWJzY3JpYmU6ICgpID0+IG9ic2VydmFibGUudW5zdWJzY3JpYmUoaWQpXG4gIH07XG59O1xuXG4vLyBzcmMvbWV0aG9kcy9yZXF1ZXN0cy9pbmRleC50c1xuZnVuY3Rpb24gZ2V0U2Vzc2lvbkR1cmF0aW9uRGF5cyh1bml4VGltZXN0YW1wTWlsbGlzKSB7XG4gIGNvbnN0IG5vdzIgPSBEYXRlLm5vdygpO1xuICBjb25zdCBkaWZmZXJlbmNlTWlsbGlzID0gdW5peFRpbWVzdGFtcE1pbGxpcyAtIG5vdzI7XG4gIHJldHVybiBNYXRoLmNlaWwoZGlmZmVyZW5jZU1pbGxpcyAvICgyNCAqIDYwICogNjAgKiAxZTMpKTtcbn1cbnZhciBhZGRIZWFkZXJzID0gKG9wdGlvbnMpID0+IF9fc3ByZWFkVmFsdWVzKHt9LCAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy50b2tlbikgJiYge1xuICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7b3B0aW9ucy50b2tlbn1gXG59KTtcbnZhciBwcm9taXNlUmVzb2x2ZTtcbnZhciBwcm9taXNlUmVqZWN0O1xudmFyIHJlY2VpdmVNZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gIHZhciBfYTtcbiAgY29uc3QgeyBkYXRhLCBvcmlnaW4gfSA9IGV2ZW50O1xuICBpZiAoQVBJX0VORFBPSU5UICE9PSBvcmlnaW4pXG4gICAgcmV0dXJuO1xuICBpZiAoKF9hID0gZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2EubWVtYmVyKSB7XG4gICAgY29uc3Qgc2Vzc2lvbkR1cmF0aW9uRGF5cyA9IGdldFNlc3Npb25EdXJhdGlvbkRheXMoZGF0YS5kYXRhLnRva2Vucy5leHBpcmVzKTtcbiAgICBzZXRQZXJzaXN0ZWRNZW1iZXIoZGF0YS5kYXRhLm1lbWJlcik7XG4gICAgc2V0TWVtYmVyVG9rZW4oZGF0YS5kYXRhLnRva2Vucy5hY2Nlc3NUb2tlbiwgc2Vzc2lvbkR1cmF0aW9uRGF5cyk7XG4gIH1cbiAgaWYgKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuZXJyb3IpIHtcbiAgICBwcm9taXNlUmVqZWN0KGRhdGEuZXJyb3IpO1xuICB9XG4gIHByb21pc2VSZXNvbHZlKGRhdGEpO1xufTtcbnZhciB3aW5kb3dPYmplY3RSZWZlcmVuY2UgPSBudWxsO1xudmFyIHByZXZpb3VzVXJsID0gbnVsbDtcbnZhciBvcGVuU2lnbkluV2luZG93ID0gKHVybCwgbmFtZSkgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCByZWNlaXZlTWVzc2FnZSk7XG4gIGNvbnN0IGR1YWxTY3JlZW5MZWZ0ID0gd2luZG93LnNjcmVlbkxlZnQgIT09IHZvaWQgMCA/IHdpbmRvdy5zY3JlZW5MZWZ0IDogd2luZG93LnNjcmVlblg7XG4gIGNvbnN0IGR1YWxTY3JlZW5Ub3AgPSB3aW5kb3cuc2NyZWVuVG9wICE9PSB2b2lkIDAgPyB3aW5kb3cuc2NyZWVuVG9wIDogd2luZG93LnNjcmVlblk7XG4gIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggPyB3aW5kb3cuaW5uZXJXaWR0aCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA6IHNjcmVlbi53aWR0aDtcbiAgY29uc3QgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ID8gd2luZG93LmlubmVySGVpZ2h0IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgOiBzY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBzeXN0ZW1ab29tID0gd2lkdGggLyB3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGg7XG4gIGNvbnN0IGxlZnQgPSAod2lkdGggLSA2MDApIC8gMiAvIHN5c3RlbVpvb20gKyBkdWFsU2NyZWVuTGVmdDtcbiAgY29uc3QgdG9wID0gKGhlaWdodCAtIDcwMCkgLyAyIC8gc3lzdGVtWm9vbSArIGR1YWxTY3JlZW5Ub3A7XG4gIGNvbnN0IHN0cldpbmRvd0ZlYXR1cmVzID0gYHRvb2xiYXI9bm8sIG1lbnViYXI9bm8sIHdpZHRoPSR7NjAwIC8gc3lzdGVtWm9vbX0sIGhlaWdodD0kezcwMCAvIHN5c3RlbVpvb219LCB0b3A9JHt0b3B9LCBsZWZ0PSR7bGVmdH1gO1xuICBpZiAod2luZG93T2JqZWN0UmVmZXJlbmNlID09PSBudWxsIHx8IHdpbmRvd09iamVjdFJlZmVyZW5jZS5jbG9zZWQpIHtcbiAgICB3aW5kb3dPYmplY3RSZWZlcmVuY2UgPSB3aW5kb3cub3Blbih1cmwsIG5hbWUsIHN0cldpbmRvd0ZlYXR1cmVzKTtcbiAgfSBlbHNlIGlmIChwcmV2aW91c1VybCAhPT0gdXJsKSB7XG4gICAgd2luZG93T2JqZWN0UmVmZXJlbmNlID0gd2luZG93Lm9wZW4odXJsLCBuYW1lLCBzdHJXaW5kb3dGZWF0dXJlcyk7XG4gICAgd2luZG93T2JqZWN0UmVmZXJlbmNlLmZvY3VzKCk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93T2JqZWN0UmVmZXJlbmNlLmZvY3VzKCk7XG4gIH1cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIChldmVudCkgPT4gcmVjZWl2ZU1lc3NhZ2UoZXZlbnQpLCBmYWxzZSk7XG4gIHByZXZpb3VzVXJsID0gdXJsO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCAoKSA9PiB7XG4gICAgd2luZG93T2JqZWN0UmVmZXJlbmNlID09IG51bGwgPyB2b2lkIDAgOiB3aW5kb3dPYmplY3RSZWZlcmVuY2UuY2xvc2UoKTtcbiAgfSk7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gIH0pO1xufSk7XG52YXIgQVBJX0VORFBPSU5UO1xudmFyIGluaXRSZXF1ZXN0ID0gKHtcbiAgcHVibGljS2V5LFxuICBhcHBJZCxcbiAgdG9rZW4sXG4gIGRvbWFpblxuICAvL3Nlc3Npb25EdXJhdGlvbkRheXNcbn0pID0+IHtcbiAgY29uc3QgeyBzZW5kUmVxdWVzdCB9ID0gY3JlYXRlUmVxdWVzdEhhbmRsZXIoe1xuICAgIHB1YmxpY0tleSxcbiAgICB0b2tlbixcbiAgICBjdXN0b21FbmRwb2ludDogZG9tYWluLFxuICAgIGFwcElkXG4gIH0pO1xuICBBUElfRU5EUE9JTlQgPSBkb21haW47XG4gIHJldHVybiB7XG4gICAgcG9zdElzVHlwaW5nKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2NvbW1lbnRzL3Bvc3RzL3R5cGluZ2AsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgY2hhbm5lbEtleTogcGFyYW1zLmNoYW5uZWxLZXlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRDaGFubmVsSW5mbyhwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgY2hhbm5lbEtleTogcGFyYW1zLmNoYW5uZWxLZXlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIC8qIEdFVCAqLyxcbiAgICAgICAgICB1cmw6IGAvY29tbWVudHMvY2hhbm5lbHMvaW5mbz8ke3F1ZXJ5UGFyYW1zfWBcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHN1YnNjcmliZVRvQ2hhbm5lbChwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9jb21tZW50cy9jaGFubmVscy9tYW5hZ2Utc3Vic2NyaXB0aW9uYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjaGFubmVsS2V5OiBwYXJhbXMuY2hhbm5lbEtleSxcbiAgICAgICAgICAgIGFjdGlvbjogcGFyYW1zLmFjdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldFBvc3RzKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgICAgICBjaGFubmVsS2V5OiBwYXJhbXMuY2hhbm5lbEtleVxuICAgICAgICB9LCBwYXJhbXMuYWZ0ZXIgJiYge1xuICAgICAgICAgIGFmdGVyOiBwYXJhbXMuYWZ0ZXJcbiAgICAgICAgfSksIHBhcmFtcy5vcmRlciAmJiB7XG4gICAgICAgICAgb3JkZXI6IHBhcmFtcy5vcmRlclxuICAgICAgICB9KSwgcGFyYW1zLmxpbWl0ICYmIHtcbiAgICAgICAgICBsaW1pdDogcGFyYW1zLmxpbWl0LnRvU3RyaW5nKClcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJHRVRcIiAvKiBHRVQgKi8sXG4gICAgICAgICAgdXJsOiBgL2NvbW1lbnRzL3Bvc3RzPyR7cXVlcnlQYXJhbXN9YFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0VGhyZWFkcyhwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcG9zdElkOiBwYXJhbXMucG9zdElkXG4gICAgICAgIH0sIHBhcmFtcy5hZnRlciAmJiB7XG4gICAgICAgICAgYWZ0ZXI6IHBhcmFtcy5hZnRlclxuICAgICAgICB9KSwgcGFyYW1zLm9yZGVyICYmIHtcbiAgICAgICAgICBvcmRlcjogcGFyYW1zLm9yZGVyXG4gICAgICAgIH0pLCBwYXJhbXMubGltaXQgJiYge1xuICAgICAgICAgIGxpbWl0OiBwYXJhbXMubGltaXQudG9TdHJpbmcoKVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIC8qIEdFVCAqLyxcbiAgICAgICAgICB1cmw6IGAvY29tbWVudHMvdGhyZWFkcz8ke3F1ZXJ5UGFyYW1zfWBcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNyZWF0ZVBvc3QocGFyYW1zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IGAvY29tbWVudHMvcG9zdHNgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNoYW5uZWxLZXk6IHBhcmFtcy5jaGFubmVsS2V5LFxuICAgICAgICAgICAgY29udGVudDogcGFyYW1zLmNvbnRlbnQsXG4gICAgICAgICAgICBfdXJsOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdXBkYXRlUG9zdChwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIgLyogUEFUQ0ggKi8sXG4gICAgICAgICAgdXJsOiBgL2NvbW1lbnRzL3Bvc3RzLyR7cGFyYW1zLnBvc3RJZH0vdXBkYXRlYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb250ZW50OiBwYXJhbXMuY29udGVudFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBvc3RWb3RlKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2NvbW1lbnRzL3Bvc3RzLyR7cGFyYW1zLnBvc3RJZH0vdm90ZWAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdm90ZTogcGFyYW1zLnZvdGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWxldGVQb3N0KHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIgLyogREVMRVRFICovLFxuICAgICAgICAgIHVybDogYC9jb21tZW50cy9wb3N0cy8ke3BhcmFtcy5wb3N0SWR9YFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY3JlYXRlVGhyZWFkKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2NvbW1lbnRzL3RocmVhZHNgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBvc3RJZDogcGFyYW1zLnBvc3RJZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHBhcmFtcy5jb250ZW50XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdXBkYXRlVGhyZWFkKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIiAvKiBQQVRDSCAqLyxcbiAgICAgICAgICB1cmw6IGAvY29tbWVudHMvdGhyZWFkcy8ke3BhcmFtcy50aHJlYWRJZH0vdXBkYXRlYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBjb250ZW50OiBwYXJhbXMuY29udGVudFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8vIHZvdGUgdGhyZWFkXG4gICAgdGhyZWFkVm90ZShwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9jb21tZW50cy90aHJlYWRzLyR7cGFyYW1zLnRocmVhZElkfS92b3RlYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB2b3RlOiBwYXJhbXMudm90ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZVRocmVhZChwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiIC8qIERFTEVURSAqLyxcbiAgICAgICAgICB1cmw6IGAvY29tbWVudHMvdGhyZWFkcy8ke3BhcmFtcy50aHJlYWRJZH1gXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRTZWN1cmVDb250ZW50KHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBcIi9zZWN1cmUtY29udGVudFwiLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGNvbnRlbnRJZDogcGFyYW1zLmNvbnRlbnRJZFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzaWdudXBXaXRoUHJvdmlkZXIocGFyYW1zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBjdXN0b21GaWVsZHMgPSBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLmN1c3RvbUZpZWxkcyA/IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5jdXN0b21GaWVsZHMpIDogXCJ7fVwiKTtcbiAgICAgICAgY29uc3QgcGxhbnMgPSBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zLnBsYW5zID8gSlNPTi5zdHJpbmdpZnkocGFyYW1zLnBsYW5zKSA6IFwiW11cIik7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgICAgICBwcm92aWRlcjogcGFyYW1zLnByb3ZpZGVyLFxuICAgICAgICAgIGN1c3RvbUZpZWxkcyxcbiAgICAgICAgICBwbGFucyxcbiAgICAgICAgICBhcHBJZFxuICAgICAgICB9LCBwdWJsaWNLZXkgJiYge1xuICAgICAgICAgIHB1YmxpY0tleVxuICAgICAgICB9KSwge1xuICAgICAgICAgIG9yaWdpbjogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIG9wZW5TaWduSW5XaW5kb3coYCR7ZG9tYWlufS9hdXRoLXByb3ZpZGVyL3NpZ251cD8ke3F1ZXJ5UGFyYW1zfWAsIFwic2lnbnVwXCIpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBsb2dpbldpdGhQcm92aWRlcihwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGFsbG93U2lnbnVwID0gZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5hbGxvd1NpZ251cCA9PT0gdHJ1ZSA/IHRydWUgOiBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgICAgICBwcm92aWRlcjogcGFyYW1zLnByb3ZpZGVyLFxuICAgICAgICAgIGFwcElkXG4gICAgICAgIH0sIHB1YmxpY0tleSAmJiB7XG4gICAgICAgICAgcHVibGljS2V5XG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUsXG4gICAgICAgICAgYWxsb3dTaWdudXBcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gb3BlblNpZ25JbldpbmRvdyhgJHtkb21haW59L2F1dGgtcHJvdmlkZXIvbG9naW4/JHtxdWVyeVBhcmFtc31gLCBcImxvZ2luXCIpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjb25uZWN0UHJvdmlkZXIocGFyYW1zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgcHJvdmlkZXI6IHBhcmFtcy5wcm92aWRlcixcbiAgICAgICAgICBhcHBJZFxuICAgICAgICB9LCBwdWJsaWNLZXkgJiYge1xuICAgICAgICAgIHB1YmxpY0tleVxuICAgICAgICB9KSwge1xuICAgICAgICAgIG1lbWJlcjogZ2V0TWVtYmVyVG9rZW4oKSxcbiAgICAgICAgICBvcmlnaW46IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiBvcGVuU2lnbkluV2luZG93KGAke2RvbWFpbn0vYXV0aC1wcm92aWRlci9jb25uZWN0PyR7cXVlcnlQYXJhbXN9YCwgXCJjb25uZWN0XCIpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBkaXNjb25uZWN0UHJvdmlkZXIocGFyYW1zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IFwiL21lbWJlci9kaXNjb25uZWN0LXByb3ZpZGVyXCIsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHBhcmFtcy5wcm92aWRlclxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldEFwcEFuZE1lbWJlcihwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGluY2x1ZGVTU09UZXh0OiB3aW5kb3cgPT0gbnVsbCA/IHZvaWQgMCA6IHdpbmRvdy5zc29VSSxcbiAgICAgICAgICB0cmFja1BhZ2VWaWV3OiBwYXJhbXMgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmFtcy50cmFja1BhZ2VWaWV3XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJHRVRcIiAvKiBHRVQgKi8sXG4gICAgICAgICAgdXJsOiBgL2FwcC1tZW1iZXI/JHtxdWVyeVBhcmFtc31gXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRBcHAoKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBpbmNsdWRlU1NPVGV4dDogd2luZG93ID09IG51bGwgPyB2b2lkIDAgOiB3aW5kb3cuc3NvVUlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIC8qIEdFVCAqLyxcbiAgICAgICAgICB1cmw6IGAvYXBwPyR7cXVlcnlQYXJhbXN9YFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9naW5NZW1iZXJFbWFpbFBhc3N3b3JkKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2F1dGgvbG9naW5gLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGVtYWlsOiBwYXJhbXMuZW1haWwsXG4gICAgICAgICAgICBwYXNzd29yZDogcGFyYW1zLnBhc3N3b3JkLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EdXJhdGlvbkRheXMgPSBnZXRTZXNzaW9uRHVyYXRpb25EYXlzKGRhdGEuZGF0YS50b2tlbnMuZXhwaXJlcyk7XG4gICAgICAgIHNldFBlcnNpc3RlZE1lbWJlcihkYXRhLmRhdGEubWVtYmVyKTtcbiAgICAgICAgc2V0TWVtYmVyVG9rZW4oZGF0YS5kYXRhLnRva2Vucy5hY2Nlc3NUb2tlbiwgc2Vzc2lvbkR1cmF0aW9uRGF5cyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZW5kTWVtYmVyTG9naW5QYXNzd29yZGxlc3NFbWFpbChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiB5aWVsZCBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9hdXRoL3Bhc3N3b3JkbGVzcy9sb2dpbi9zZW5kYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBlbWFpbDogcGFyYW1zLmVtYWlsXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2VuZE1lbWJlclNpZ251cFBhc3N3b3JkbGVzc0VtYWlsKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHlpZWxkIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2F1dGgvcGFzc3dvcmRsZXNzL3NpZ251cC9zZW5kYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBlbWFpbDogcGFyYW1zLmVtYWlsXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9naW5NZW1iZXJQYXNzd29yZGxlc3MocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBkYXRhID0geWllbGQgc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IGAvYXV0aC9wYXNzd29yZGxlc3MvbG9naW5gLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBhc3N3b3JkbGVzc1Rva2VuOiBwYXJhbXMucGFzc3dvcmRsZXNzVG9rZW4sXG4gICAgICAgICAgICBlbWFpbDogcGFyYW1zLmVtYWlsLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EdXJhdGlvbkRheXMgPSBnZXRTZXNzaW9uRHVyYXRpb25EYXlzKGRhdGEuZGF0YS50b2tlbnMuZXhwaXJlcyk7XG4gICAgICAgIHNldFBlcnNpc3RlZE1lbWJlcihkYXRhLmRhdGEubWVtYmVyKTtcbiAgICAgICAgc2V0TWVtYmVyVG9rZW4oZGF0YS5kYXRhLnRva2Vucy5hY2Nlc3NUb2tlbiwgc2Vzc2lvbkR1cmF0aW9uRGF5cyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRQbGFuKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIgLyogR0VUICovLFxuICAgICAgICAgIHVybDogYC9hcHAvcGxhbnMvJHtwYXJhbXMucGxhbklkfWBcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldFBsYW5zKCkge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSB5aWVsZCBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIC8qIEdFVCAqLyxcbiAgICAgICAgICB1cmw6IGAvYXBwYFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiBkYXRhLnBsYW5zXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldFJlc3RyaWN0ZWRVcmxHcm91cHMoKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHlpZWxkIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIgLyogR0VUICovLFxuICAgICAgICAgIHVybDogYC9hcHBgXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IGRhdGEuY29udGVudEdyb3Vwc1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50TWVtYmVyKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IG1lbWJlclRva2VuID0gZ2V0TWVtYmVyVG9rZW4oKTtcbiAgICAgICAgaWYgKCFtZW1iZXJUb2tlbilcbiAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsIH07XG4gICAgICAgIGNvbnN0IGdldE1lbWJlclJlcXVlc3QgPSBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIC8qIEdFVCAqLyxcbiAgICAgICAgICB1cmw6IGAvbWVtYmVyYCxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBzZXRNZW1iZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBnZXRNZW1iZXJSZXF1ZXN0O1xuICAgICAgICAgICAgdXBkYXRlUGVyc2lzdGVkTWVtYmVyKGRhdGEuZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0TWVtYmVyKCk7XG4gICAgICAgIGlmICgob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy51c2VDYWNoZSkgPT09IHRydWUpIHtcbiAgICAgICAgICBjb25zdCBtZW1iZXIgPSBnZXRQZXJzaXN0ZWRNZW1iZXIoKTtcbiAgICAgICAgICByZXR1cm4geyBkYXRhOiBtZW1iZXIgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZ2V0TWVtYmVyUmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRNZW1iZXJKU09OKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiIC8qIEdFVCAqLyxcbiAgICAgICAgICB1cmw6IGAvbWVtYmVyL2pzb25gLFxuICAgICAgICAgIGhlYWRlcnM6IGFkZEhlYWRlcnMob3B0aW9ucylcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZU1lbWJlckpTT04ocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IGAvbWVtYmVyL2pzb25gLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGpzb246IHBhcmFtcy5qc29uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRQbGFuKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL21lbWJlci9wbGFucy9hZGRgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHBsYW5JZDogcGFyYW1zLnBsYW5JZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgaGVhZGVyczogYWRkSGVhZGVycyhvcHRpb25zKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHVyY2hhc2VQbGFuc1dpdGhDaGVja291dChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdldFJlZGlyZWN0VVJMKFVSTCkge1xuICAgICAgICAgIGxldCByZWRpcmVjdFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgIGNvbnN0IHVybFBhcmFtID0gVVJMO1xuICAgICAgICAgIGlmICh1cmxQYXJhbSkge1xuICAgICAgICAgICAgaWYgKHVybFBhcmFtLmluZGV4T2YoXCJodHRwOi8vXCIpID09PSAwIHx8IHVybFBhcmFtLmluZGV4T2YoXCJodHRwczovL1wiKSA9PT0gMCkge1xuICAgICAgICAgICAgICByZWRpcmVjdFVybCA9IHVybFBhcmFtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVkaXJlY3RVcmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgdXJsUGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZWRpcmVjdFVybDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWNjZXNzX3VybCA9IHBhcmFtcy5zdWNjZXNzVXJsID8gZ2V0UmVkaXJlY3RVUkwocGFyYW1zLnN1Y2Nlc3NVcmwpIDogdm9pZCAwO1xuICAgICAgICBjb25zdCBjYW5jZWxfdXJsID0gZ2V0UmVkaXJlY3RVUkwocGFyYW1zLmNhbmNlbFVybCk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB5aWVsZCBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9tZW1iZXIvcGxhbnMvY3JlYXRlLWNoZWNrb3V0LXNlc3Npb25gLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHByaWNlSWQ6IHBhcmFtcy5wcmljZUlkLFxuICAgICAgICAgICAgY291cG9uSWQ6IHBhcmFtcy5jb3Vwb25JZCxcbiAgICAgICAgICAgIG1ldGFkYXRhRm9yQ2hlY2tvdXQ6IHBhcmFtcy5tZXRhZGF0YUZvckNoZWNrb3V0LFxuICAgICAgICAgICAgLy93aW5kb3cubG9jYXRpb24gcmVxdWlyZXMgZG9tXG4gICAgICAgICAgICBzdWNjZXNzX3VybCxcbiAgICAgICAgICAgIGNhbmNlbF91cmwsXG4gICAgICAgICAgICBvcmlnaW5fdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgICAgICAgIH0sXG4gICAgICAgICAgaGVhZGVyczogYWRkSGVhZGVycyhvcHRpb25zKVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBhcmFtcy5hdXRvUmVkaXJlY3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZXF1ZXN0LmRhdGEudXJsO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyB1c2VkIGZvciBwbGFuIHVwZGF0ZXNcbiAgICBsYXVuY2hTdHJpcGVDdXN0b21lclBvcnRhbChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdldFJlZGlyZWN0VVJMKFVSTCkge1xuICAgICAgICAgIGxldCByZWRpcmVjdFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgIGNvbnN0IHVybFBhcmFtID0gVVJMO1xuICAgICAgICAgIGlmICh1cmxQYXJhbSkge1xuICAgICAgICAgICAgaWYgKHVybFBhcmFtLmluZGV4T2YoXCJodHRwOi8vXCIpID09PSAwIHx8IHVybFBhcmFtLmluZGV4T2YoXCJodHRwczovL1wiKSA9PT0gMCkge1xuICAgICAgICAgICAgICByZWRpcmVjdFVybCA9IHVybFBhcmFtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVkaXJlY3RVcmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgdXJsUGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZWRpcmVjdFVybDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXR1cm5VcmwgPSAocGFyYW1zID09IG51bGwgPyB2b2lkIDAgOiBwYXJhbXMucmV0dXJuVXJsKSA/IGdldFJlZGlyZWN0VVJMKHBhcmFtcy5yZXR1cm5VcmwpIDogdm9pZCAwO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0geWllbGQgc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IGAvbWVtYmVyL2NyZWF0ZS1iaWxsaW5nLXBvcnRhbC1zZXNzaW9uYCxcbiAgICAgICAgICBkYXRhOiBfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgICAvL3dpbmRvdy5sb2NhdGlvbiByZXF1aXJlcyBkb21cbiAgICAgICAgICAgIHJldHVybl91cmw6IHJldHVyblVybCxcbiAgICAgICAgICAgIG9yaWdpbl91cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgICAgfSwgcGFyYW1zICYmIHtcbiAgICAgICAgICAgIHByaWNlSWRzOiBwYXJhbXMucHJpY2VJZHMsXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uOiBwYXJhbXMuY29uZmlndXJhdGlvblxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGhlYWRlcnM6IGFkZEhlYWRlcnMob3B0aW9ucylcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICgocGFyYW1zID09IG51bGwgPyB2b2lkIDAgOiBwYXJhbXMuYXV0b1JlZGlyZWN0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlcXVlc3QuZGF0YS51cmw7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbW92ZVBsYW4ocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IGAvbWVtYmVyL3BsYW5zL3JlbW92ZWAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcGxhbklkOiBwYXJhbXMucGxhbklkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVNZW1iZXIocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICB1cmw6IGAvbWVtYmVyYCxcbiAgICAgICAgICBkYXRhOiBfX3NwcmVhZFZhbHVlcyh7fSwgcGFyYW1zLmN1c3RvbUZpZWxkcyAmJiB7IGN1c3RvbUZpZWxkczogcGFyYW1zLmN1c3RvbUZpZWxkcyB9KSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGVNZW1iZXJBdXRoKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL21lbWJlci1hdXRoYCxcbiAgICAgICAgICBkYXRhOiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgcGFyYW1zLmVtYWlsICYmIHsgZW1haWw6IHBhcmFtcy5lbWFpbCB9KSwgcGFyYW1zLm9sZFBhc3N3b3JkICYmIHsgb2xkUGFzc3dvcmQ6IHBhcmFtcy5vbGRQYXNzd29yZCB9KSwgcGFyYW1zLm5ld1Bhc3N3b3JkICYmIHsgbmV3UGFzc3dvcmQ6IHBhcmFtcy5uZXdQYXNzd29yZCB9KSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRQYXNzd29yZChwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9tZW1iZXIvc2V0LXBhc3N3b3JkYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBwYXNzd29yZDogcGFyYW1zLnBhc3N3b3JkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzaWdudXBNZW1iZXJQYXNzd29yZGxlc3MocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgX2EyLCBfYjtcbiAgICAgICAgY29uc3QgZGF0YSA9IHlpZWxkIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2F1dGgvc2lnbnVwP2lzUGFzc3dvcmRsZXNzPXRydWVgLFxuICAgICAgICAgIGRhdGE6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgICAgICAgZW1haWw6IHBhcmFtcy5lbWFpbCxcbiAgICAgICAgICAgIGN1c3RvbUZpZWxkczogcGFyYW1zLmN1c3RvbUZpZWxkcyxcbiAgICAgICAgICAgIHBhc3N3b3JkbGVzc1Rva2VuOiBwYXJhbXMucGFzc3dvcmRsZXNzVG9rZW4sXG4gICAgICAgICAgICBtZXRhRGF0YTogcGFyYW1zLm1ldGFEYXRhXG4gICAgICAgICAgfSwgcGFyYW1zLnBsYW5zICYmIHsgcGxhbnM6IHBhcmFtcy5wbGFucyB9KSwge1xuICAgICAgICAgICAgLy9pbnRlcm5hbCB1c2Ugb25seVxuICAgICAgICAgICAgb3JpZ2luX2RvbWFpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICB9KSwgKChfYTIgPSB3aW5kb3cuUmV3YXJkZnVsKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnJlZmVycmFsKSAmJiB7XG4gICAgICAgICAgICByZXdhcmRmdWxEYXRhOiB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgcmVmZXJyYWw6IHdpbmRvdy5SZXdhcmRmdWwucmVmZXJyYWwsXG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgY291cG9uOiAoX2IgPSB3aW5kb3cuUmV3YXJkZnVsLmNvdXBvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EdXJhdGlvbkRheXMgPSBnZXRTZXNzaW9uRHVyYXRpb25EYXlzKGRhdGEuZGF0YS50b2tlbnMuZXhwaXJlcyk7XG4gICAgICAgIHNldFBlcnNpc3RlZE1lbWJlcihkYXRhLmRhdGEubWVtYmVyKTtcbiAgICAgICAgc2V0TWVtYmVyVG9rZW4oZGF0YS5kYXRhLnRva2Vucy5hY2Nlc3NUb2tlbiwgc2Vzc2lvbkR1cmF0aW9uRGF5cyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzaWdudXBNZW1iZXJFbWFpbFBhc3N3b3JkKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgdmFyIF9hMiwgX2I7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9hdXRoL3NpZ251cGAsXG4gICAgICAgICAgZGF0YTogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgICBlbWFpbDogcGFyYW1zLmVtYWlsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHBhcmFtcy5wYXNzd29yZCxcbiAgICAgICAgICAgIGN1c3RvbUZpZWxkczogcGFyYW1zLmN1c3RvbUZpZWxkcyxcbiAgICAgICAgICAgIG1ldGFEYXRhOiBwYXJhbXMubWV0YURhdGEsXG4gICAgICAgICAgICBjYXB0Y2hhVG9rZW46IHBhcmFtcy5jYXB0Y2hhVG9rZW4sXG4gICAgICAgICAgICBpbnZpdGVUb2tlbjogcGFyYW1zLmludml0ZVRva2VuXG4gICAgICAgICAgfSwgcGFyYW1zLnBsYW5zICYmIHsgcGxhbnM6IHBhcmFtcy5wbGFucyB9KSwge1xuICAgICAgICAgICAgLy9pbnRlcm5hbCB1c2Ugb25seVxuICAgICAgICAgICAgb3JpZ2luX2RvbWFpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICB9KSwgKChfYTIgPSB3aW5kb3cuUmV3YXJkZnVsKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLnJlZmVycmFsKSAmJiB7XG4gICAgICAgICAgICByZXdhcmRmdWxEYXRhOiB7XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgcmVmZXJyYWw6IHdpbmRvdy5SZXdhcmRmdWwucmVmZXJyYWwsXG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgY291cG9uOiAoX2IgPSB3aW5kb3cuUmV3YXJkZnVsLmNvdXBvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNlc3Npb25EdXJhdGlvbkRheXMgPSBnZXRTZXNzaW9uRHVyYXRpb25EYXlzKGRhdGEuZGF0YS50b2tlbnMuZXhwaXJlcyk7XG4gICAgICAgIHNldFBlcnNpc3RlZE1lbWJlcihkYXRhLmRhdGEubWVtYmVyKTtcbiAgICAgICAgc2V0TWVtYmVyVG9rZW4oZGF0YS5kYXRhLnRva2Vucy5hY2Nlc3NUb2tlbiwgc2Vzc2lvbkR1cmF0aW9uRGF5cyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBqb2luVGVhbShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9tZW1iZXIvdGVhbS9qb2luYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBpbnZpdGVUb2tlbjogcGFyYW1zLmludml0ZVRva2VuXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRUZWFtKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIgLyogR0VUICovLFxuICAgICAgICAgIHVybDogYC9tZW1iZXIvdGVhbS8ke3BhcmFtcy50ZWFtSWR9YCxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByZW1vdmVNZW1iZXJGcm9tVGVhbShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9tZW1iZXIvdGVhbS9yZW1vdmUtbWVtYmVyYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0ZWFtSWQ6IHBhcmFtcy50ZWFtSWQsXG4gICAgICAgICAgICBtZW1iZXJJZDogcGFyYW1zLm1lbWJlcklkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZW5lcmF0ZUludml0ZVRva2VuKHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL21lbWJlci90ZWFtL2dlbmVyYXRlLWludml0ZS1saW5rYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0ZWFtSWQ6IHBhcmFtcy50ZWFtSWRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhlYWRlcnM6IGFkZEhlYWRlcnMob3B0aW9ucylcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZU1lbWJlclByb2ZpbGVJbWFnZShwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChwYXJhbXMucHJvZmlsZUltYWdlKSB7XG4gICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJwcm9maWxlSW1hZ2VcIiwgcGFyYW1zLnByb2ZpbGVJbWFnZSk7XG4gICAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIgLyogUE9TVCAqLyxcbiAgICAgICAgICAgIHVybDogYC9tZW1iZXIvcHJvZmlsZS1pbWFnZWAsXG4gICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNlbmRNZW1iZXJWZXJpZmljYXRpb25FbWFpbCgpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9hdXRoL3NlbmQtZW1haWwtdmVyaWZpY2F0aW9uYCxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAvL2ludGVybmFsIHVzZSBvbmx5XG4gICAgICAgICAgICBvcmlnaW5fZG9tYWluOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2VuZE1lbWJlclJlc2V0UGFzc3dvcmRFbWFpbChwYXJhbXMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9hdXRoL3NlbmQtcmVzZXQtcGFzc3dvcmQtZW1haWxgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGVtYWlsOiBwYXJhbXMuZW1haWxcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByZXNldE1lbWJlclBhc3N3b3JkKHBhcmFtcykge1xuICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiIC8qIFBPU1QgKi8sXG4gICAgICAgICAgdXJsOiBgL2F1dGgvcmVzZXQtcGFzc3dvcmRgLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRva2VuOiBwYXJhbXMudG9rZW4sXG4gICAgICAgICAgICBuZXdQYXNzd29yZDogcGFyYW1zLm5ld1Bhc3N3b3JkXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9nb3V0KG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIiAvKiBQT1NUICovLFxuICAgICAgICAgIHVybDogYC9tZW1iZXIvbG9nb3V0YCxcbiAgICAgICAgICBoZWFkZXJzOiBhZGRIZWFkZXJzKG9wdGlvbnMpXG4gICAgICAgIH0pO1xuICAgICAgICB1bnNldFBlcnNpc3RlZE1lbWJlcigpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbi8vIHNyYy9tZXRob2RzL2luZGV4LnRzXG52YXIgY2FwdGNoYVJlYWR5UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luZG93Ll9oY2FwdGNoYVJlYWR5ID0gcmVzb2x2ZTtcbiAgfVxufSk7XG52YXIgbWV0aG9kcyA9IHtcbiAgb3Blbk1vZGFsLFxuICBoaWRlTW9kYWwsXG4gIF9oaWRlTG9hZGVyOiBoaWRlTG9hZGVyLFxuICBfc2hvd0xvYWRlcjogc2hvd0xvYWRlcixcbiAgX3Nob3dNZXNzYWdlOiBzaG93TWVzc2FnZSxcbiAgZ2V0TWVtYmVyQ29va2llOiBnZXRNZW1iZXJUb2tlbixcbiAgb25BdXRoQ2hhbmdlLFxuICBfY2FwdGNoYVJlYWR5OiBjYXB0Y2hhUmVhZHlQcm9taXNlXG59O1xuZnVuY3Rpb24gaW5pdDIocHJvcHMpIHtcbiAgY29uc3QgYXBpRG9tYWluMiA9IHByb3BzLmRvbWFpbiB8fCBlbmRwb2ludHMuQVBJO1xuICBzZXRBcGlEb21haW4oYXBpRG9tYWluMik7XG4gIGlmIChwcm9wcy51c2VDb29raWVzKVxuICAgIHNldFVzZUNvb2tpZXMocHJvcHMuc2V0Q29va2llT25Sb290RG9tYWluKTtcbiAgc2V0TWVtYmVyVG9rZW5JZkF2YWlsYWJsZSgpO1xuICBjb25zdCByZXF1ZXN0cyA9IGluaXRSZXF1ZXN0KHtcbiAgICBwdWJsaWNLZXk6IHByb3BzLnB1YmxpY0tleSxcbiAgICBhcHBJZDogcHJvcHMuYXBwSWQsXG4gICAgdG9rZW46IGdldE1lbWJlclRva2VuKCksXG4gICAgZG9tYWluOiBhcGlEb21haW4yXG4gIH0pO1xuICBjb25zdCBhbGxNZXRob2RzID0gT2JqZWN0LmFzc2lnbihtZXRob2RzLCByZXF1ZXN0cyk7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luZG93LiRtZW1iZXJzdGFja0RvbSA9IGFsbE1ldGhvZHM7XG4gIH1cbiAgcmV0dXJuIGFsbE1ldGhvZHM7XG59XG52YXIgbWV0aG9kc19kZWZhdWx0ID0geyBpbml0OiAocHJvcHMpID0+IGluaXQyKHByb3BzKSB9O1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZGVmYXVsdCA9IHsgaW5pdDogbWV0aG9kc19kZWZhdWx0LmluaXQgfTtcbmV4cG9ydCB7XG4gIHNyY19kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXJcbn1cblxudXRpbHMuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzLmlzRnVuY3Rpb24oYWRhcHRlcikgfHwgYWRhcHRlciA9PT0gbnVsbCB8fCBhZGFwdGVyID09PSBmYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRBZGFwdGVyOiAoYWRhcHRlcnMpID0+IHtcbiAgICBhZGFwdGVycyA9IHV0aWxzLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCB3aXRoWFNSRlRva2VufSA9IGNvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udGVudFR5cGU7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSByZXF1ZXN0SGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgY29uc3QgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZihwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4oY29uZmlnKSk7XG5cbiAgICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSkge1xuICAgICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgICAgY29uc3QgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSAnLi9hZGFwdGVycy9hZGFwdGVycy5qcyc7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcblxuICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS42LjhcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudlxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZVxufTtcbiIsIi8qISBqcy1jb29raWUgdjMuMC41IHwgTUlUICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cbmZ1bmN0aW9uIGFzc2lnbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXZhciAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cbnZhciBkZWZhdWx0Q29udmVydGVyID0ge1xuICByZWFkOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWVbMF0gPT09ICdcIicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSwgLTEpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvKCVbXFxkQS1GXXsyfSkrL2dpLCBkZWNvZGVVUklDb21wb25lbnQpXG4gIH0sXG4gIHdyaXRlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKS5yZXBsYWNlKFxuICAgICAgLyUoMlszNDZCRl18M1tBQy1GXXw0MHw1W0JERV18NjB8N1tCQ0RdKS9nLFxuICAgICAgZGVjb2RlVVJJQ29tcG9uZW50XG4gICAgKVxuICB9XG59O1xuLyogZXNsaW50LWVuYWJsZSBuby12YXIgKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdmFyICovXG5cbmZ1bmN0aW9uIGluaXQgKGNvbnZlcnRlciwgZGVmYXVsdEF0dHJpYnV0ZXMpIHtcbiAgZnVuY3Rpb24gc2V0IChuYW1lLCB2YWx1ZSwgYXR0cmlidXRlcykge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVzID0gYXNzaWduKHt9LCBkZWZhdWx0QXR0cmlidXRlcywgYXR0cmlidXRlcyk7XG5cbiAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMuZXhwaXJlcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGF0dHJpYnV0ZXMuZXhwaXJlcyA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBhdHRyaWJ1dGVzLmV4cGlyZXMgKiA4NjRlNSk7XG4gICAgfVxuICAgIGlmIChhdHRyaWJ1dGVzLmV4cGlyZXMpIHtcbiAgICAgIGF0dHJpYnV0ZXMuZXhwaXJlcyA9IGF0dHJpYnV0ZXMuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICAgIH1cblxuICAgIG5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSlcbiAgICAgIC5yZXBsYWNlKC8lKDJbMzQ2Ql18NUV8NjB8N0MpL2csIGRlY29kZVVSSUNvbXBvbmVudClcbiAgICAgIC5yZXBsYWNlKC9bKCldL2csIGVzY2FwZSk7XG5cbiAgICB2YXIgc3RyaW5naWZpZWRBdHRyaWJ1dGVzID0gJyc7XG4gICAgZm9yICh2YXIgYXR0cmlidXRlTmFtZSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc7ICcgKyBhdHRyaWJ1dGVOYW1lO1xuXG4gICAgICBpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyBDb25zaWRlcnMgUkZDIDYyNjUgc2VjdGlvbiA1LjI6XG4gICAgICAvLyAuLi5cbiAgICAgIC8vIDMuICBJZiB0aGUgcmVtYWluaW5nIHVucGFyc2VkLWF0dHJpYnV0ZXMgY29udGFpbnMgYSAleDNCIChcIjtcIilcbiAgICAgIC8vICAgICBjaGFyYWN0ZXI6XG4gICAgICAvLyBDb25zdW1lIHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSB1bnBhcnNlZC1hdHRyaWJ1dGVzIHVwIHRvLFxuICAgICAgLy8gbm90IGluY2x1ZGluZywgdGhlIGZpcnN0ICV4M0IgKFwiO1wiKSBjaGFyYWN0ZXIuXG4gICAgICAvLyAuLi5cbiAgICAgIHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnPScgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnNwbGl0KCc7JylbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIChkb2N1bWVudC5jb29raWUgPVxuICAgICAgbmFtZSArICc9JyArIGNvbnZlcnRlci53cml0ZSh2YWx1ZSwgbmFtZSkgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpXG4gIH1cblxuICBmdW5jdGlvbiBnZXQgKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyB8fCAoYXJndW1lbnRzLmxlbmd0aCAmJiAhbmFtZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFRvIHByZXZlbnQgdGhlIGZvciBsb29wIGluIHRoZSBmaXJzdCBwbGFjZSBhc3NpZ24gYW4gZW1wdHkgYXJyYXlcbiAgICAvLyBpbiBjYXNlIHRoZXJlIGFyZSBubyBjb29raWVzIGF0IGFsbC5cbiAgICB2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuICAgIHZhciBqYXIgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0cyA9IGNvb2tpZXNbaV0uc3BsaXQoJz0nKTtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZvdW5kID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzBdKTtcbiAgICAgICAgamFyW2ZvdW5kXSA9IGNvbnZlcnRlci5yZWFkKHZhbHVlLCBmb3VuZCk7XG5cbiAgICAgICAgaWYgKG5hbWUgPT09IGZvdW5kKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZSA/IGphcltuYW1lXSA6IGphclxuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5jcmVhdGUoXG4gICAge1xuICAgICAgc2V0LFxuICAgICAgZ2V0LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAobmFtZSwgYXR0cmlidXRlcykge1xuICAgICAgICBzZXQoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBhc3NpZ24oe30sIGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIGV4cGlyZXM6IC0xXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICB3aXRoQXR0cmlidXRlczogZnVuY3Rpb24gKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGluaXQodGhpcy5jb252ZXJ0ZXIsIGFzc2lnbih7fSwgdGhpcy5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzKSlcbiAgICAgIH0sXG4gICAgICB3aXRoQ29udmVydGVyOiBmdW5jdGlvbiAoY29udmVydGVyKSB7XG4gICAgICAgIHJldHVybiBpbml0KGFzc2lnbih7fSwgdGhpcy5jb252ZXJ0ZXIsIGNvbnZlcnRlciksIHRoaXMuYXR0cmlidXRlcylcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUoZGVmYXVsdEF0dHJpYnV0ZXMpIH0sXG4gICAgICBjb252ZXJ0ZXI6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUoY29udmVydGVyKSB9XG4gICAgfVxuICApXG59XG5cbnZhciBhcGkgPSBpbml0KGRlZmF1bHRDb252ZXJ0ZXIsIHsgcGF0aDogJy8nIH0pO1xuLyogZXNsaW50LWVuYWJsZSBuby12YXIgKi9cblxuZXhwb3J0IHsgYXBpIGFzIGRlZmF1bHQgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IG1lbWJlcnN0YWNrRE9NIGZyb20gJ0BtZW1iZXJzdGFjay9kb20nO1xyXG5cclxuY29uc3QgbWVtYmVyc3RhY2sgPSBtZW1iZXJzdGFja0RPTS5pbml0KHtcclxuICBwdWJsaWNLZXk6IHByb2Nlc3MuZW52Lk1FTUJFUlNUQUNLX1BVQkxJQ19LRVkgYXMgc3RyaW5nLFxyXG59KTtcclxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcmdvdC1wYXNzd29yZC1idXR0b24nKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICB3aW5kb3cuUmVhY3ROYXRpdmVXZWJWaWV3LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHsgbXNnOiAnZm9yZ290LXBhc3N3b3JkJyB9KSk7XHJcbn0pO1xyXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW4tYnV0dG9uJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGUpID0+IHtcclxuICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgY29uc3QgJGVtYWlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VtYWlsJykgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICBjb25zdCAkcGFzc3dvcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGFzc3dvcmQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIFxyXG5cclxuICBpZiAoJGVtYWlsICYmICRlbWFpbC52YWx1ZS5sZW5ndGggPT09IDApIHtcclxuICAgICgoJGVtYWlsLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQpLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoJ2Vycm9yJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgICgoJGVtYWlsLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQpLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQpLmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoJHBhc3N3b3JkLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgKCgkcGFzc3dvcmQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCkucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcclxuICB9IGVsc2Uge1xyXG4gICAgKCgkcGFzc3dvcmQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCkucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCkuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGVtYWlsID0gJGVtYWlsLnZhbHVlO1xyXG4gIGNvbnN0IHBhc3N3b3JkID0gJHBhc3N3b3JkLnZhbHVlO1xyXG4gIHdpbmRvdy5SZWFjdE5hdGl2ZVdlYlZpZXcucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoeyBtc2c6IG1lbWJlcnN0YWNrID8gJ2xvZ2luJyA6ICdtZW1iZXJzdGFjayBpcyBudWxsJyB9KSk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGxvZ2luUmVzdWx0ID0gYXdhaXQgbWVtYmVyc3RhY2subG9naW5NZW1iZXJFbWFpbFBhc3N3b3JkKHtcclxuICAgICAgZW1haWwsXHJcbiAgICAgIHBhc3N3b3JkXHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5SZWFjdE5hdGl2ZVdlYlZpZXcucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoeyBtc2c6ICdsb2dpbicsIGRhdGE6IEpTT04uc3RyaW5naWZ5KGxvZ2luUmVzdWx0KSB9KSk7XHJcbiAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICB3aW5kb3cuUmVhY3ROYXRpdmVXZWJWaWV3LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHsgbXNnOiAnbG9naW4nLCBkYXRhOiBKU09OLnN0cmluZ2lmeSh7ZXJyb3I6IGUubWVzc2FnZX0pIH0pKTtcclxuICB9XHJcbiAgXHJcbn0pO1xyXG5mdW5jdGlvbiB0ZXN0KCkge1xyXG4gIHdpbmRvdy5SZWFjdE5hdGl2ZVdlYlZpZXcucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoeyBtc2c6ICd0ZXN0JyB9KSk7XHJcbn0iXSwibmFtZXMiOlsibWVtYmVyc3RhY2tET00iLCJtZW1iZXJzdGFjayIsImluaXQiLCJwdWJsaWNLZXkiLCJwcm9jZXNzIiwiZW52IiwiTUVNQkVSU1RBQ0tfUFVCTElDX0tFWSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ3aW5kb3ciLCJSZWFjdE5hdGl2ZVdlYlZpZXciLCJwb3N0TWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtc2ciLCIkZW1haWwiLCIkcGFzc3dvcmQiLCJ2YWx1ZSIsImxlbmd0aCIsInBhcmVudE5vZGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJlbWFpbCIsInBhc3N3b3JkIiwibG9naW5SZXN1bHQiLCJsb2dpbk1lbWJlckVtYWlsUGFzc3dvcmQiLCJkYXRhIiwiZXJyb3IiLCJtZXNzYWdlIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=